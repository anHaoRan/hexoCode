{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/BlueLake/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","path":"iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","path":"iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","path":"iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","path":"iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/search.json.js","path":"js/search.json.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/toctotop.js","path":"js/toctotop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"7bbe85fcdd5d5e55c736aae059ce36979e7b6248","modified":1500342678000},{"_id":"source/CNAME","hash":"8cd2e7b8ee9a73a6b3d0d7467f6db17d5f445730","modified":1513387611000},{"_id":"themes/BlueLake/.DS_Store","hash":"61d4653525ee800306d888d998f91174144e6d64","modified":1513386960000},{"_id":"themes/BlueLake/LICENSE","hash":"3e191ca3f51efc111863c4941051291a696ef43e","modified":1513071302000},{"_id":"themes/BlueLake/README.en.md","hash":"b9f84036214ec79a8c319c5383696e0076305dfe","modified":1513071302000},{"_id":"themes/BlueLake/README.md","hash":"152969bd5a7e94a595d058f085c517b65d3b61d2","modified":1513071302000},{"_id":"themes/BlueLake/_config.yml","hash":"d869a2d2473e230624eb5b92f95ff7fcc16fbd63","modified":1516091111000},{"_id":"themes/BlueLake/package.json","hash":"e06eea20c64b2821631a49e8902e645bad2c5102","modified":1513071302000},{"_id":"source/_posts/.DS_Store","hash":"00a0ab83a873194fe3454e9362633f944c71294d","modified":1500285157000},{"_id":"source/_posts/.md_configs.data","hash":"8842f205e55d4dee88e990327ceeebfc55470fe5","modified":1499914280000},{"_id":"source/_posts/.me_configs.data","hash":"95b69ab8fe900b7e9e112c3602a53ab538d947e3","modified":1499914280000},{"_id":"source/_posts/20170730.md","hash":"9ddb1974175ac3100065c2577c656a77561ac9e3","modified":1501574285000},{"_id":"source/_posts/2017年04月12日21-30-30.md","hash":"1d775a8aaca6033ec9ee6ee8d9ccc3ed428114d4","modified":1498633350000},{"_id":"source/_posts/2017年04月13日11-25-54.md","hash":"e9dc43d63868ddcca11ed69c281ad393f8525dc9","modified":1498633349000},{"_id":"source/_posts/2017年04月13日21-52-30.md","hash":"026320364bf6a22377689616b5dc3b549da304f2","modified":1498633359000},{"_id":"source/_posts/2017年04月27日.md","hash":"a9b0bf557003ba0c738bf77b6e0ac4676dfffb88","modified":1498633127000},{"_id":"source/_posts/2017年04月26日.md","hash":"863424e816a9d6d2ea06759df6a6985943417a66","modified":1498634160000},{"_id":"source/_posts/2017年04月27日19-01-12.md","hash":"9adafe33bdfb694f613f2536992600a6836a750d","modified":1498633131000},{"_id":"source/_posts/2017年05月03日18-23-40.md","hash":"e16f437328767522b7d7e1dcfdb6bd84a5d41295","modified":1498633136000},{"_id":"source/_posts/2017年06月27日.md","hash":"a2093a9254a390d0770ec64deec9cf708c87f182","modified":1498633332000},{"_id":"source/_posts/ITem2APP.md","hash":"0373775914bb583714578f840b13400dc50dcacf","modified":1498633155000},{"_id":"source/_posts/Mac版-sublime-text-3-快捷键.md","hash":"c8c257e760a4c138d5983b30270f137ad2f3e5f9","modified":1498633163000},{"_id":"source/_posts/Markdown.md","hash":"eb535362a2ce233971dfe612f523d8a34c1f061e","modified":1498722973000},{"_id":"source/_posts/Javascript中的Form表单知识点总结.md","hash":"83f1f730a2de180dea7a1a72371a757f2a723134","modified":1498633159000},{"_id":"source/_posts/React表格项目使用.md","hash":"f6d745aab366374c921f8d1f296a8498a81b5b1c","modified":1498633167000},{"_id":"source/_posts/Vue-api.md","hash":"a13797502682a990a3cb5e60aada900ff870069a","modified":1499052945000},{"_id":"source/_posts/Vue-components.md","hash":"0e4895af0e748230263cd84f948aba641e823090","modified":1499052941000},{"_id":"source/_posts/Vue.md","hash":"6ea8e8c86cedfa171eaa6fa8e9c00151884dfd71","modified":1498789165000},{"_id":"source/_posts/css-div居中.md","hash":"f9d929181ac34f345fddd17c87d137c3a38e425f","modified":1498633147000},{"_id":"source/_posts/es6新特性概览.md","hash":"1cd9435ae865950c1fafe164f7ca90d90f25bfb5","modified":1498633152000},{"_id":"source/_posts/前端.md","hash":"4971d4be7cf7d84e909cf3715d259d7f27a93e41","modified":1498633144000},{"_id":"source/_posts/循环.md","hash":"064a713a0909f9b78093a20e7034d1330d5395cb","modified":1499156090000},{"_id":"source/_posts/掘金.md","hash":"1818f8140cd63fb974ab0514849b3c0d37003175","modified":1499140417000},{"_id":"source/_posts/数组方法.md","hash":"57ea2f937c0c7bd311073a3969ca9731665f92f7","modified":1498708122000},{"_id":"source/_posts/文本滚动-20170725.md","hash":"6b43c258c8c926b54a24899305dcff0bc0ace7b2","modified":1500962452000},{"_id":"source/_posts/有意思的js循环.md","hash":"deacfbf760e34b4af9d1d093ffb0540bee26e3ff","modified":1499148120000},{"_id":"themes/BlueLake/.git/FETCH_HEAD","hash":"5ac94cb3548c641701a00a26fda66fe6074e0e29","modified":1513388866000},{"_id":"themes/BlueLake/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1513071302000},{"_id":"themes/BlueLake/.git/config","hash":"cb5d8538f60766fe2a079a1894a586d81b258abf","modified":1513071302000},{"_id":"themes/BlueLake/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1513071297000},{"_id":"themes/BlueLake/.git/index","hash":"69dbcf77ab4e04204b7dbcc888ee432edd79afb3","modified":1513388990000},{"_id":"themes/BlueLake/.git/packed-refs","hash":"e119a861e23c1745c1123f408c1f5e5dc01b187a","modified":1513071302000},{"_id":"themes/BlueLake/languages/de-DE.yml","hash":"3e78b20edc66b153cb6b708734ad9aa5381266bc","modified":1513071302000},{"_id":"themes/BlueLake/languages/en.yml","hash":"88f4e4cffce5598f949192d7e76c863a0d409981","modified":1513071302000},{"_id":"themes/BlueLake/languages/es-ES.yml","hash":"83ee131065111147d20ec13c4634a27ee4fd541d","modified":1513071302000},{"_id":"themes/BlueLake/languages/fr-FR.yml","hash":"d9f90ef2c6b4d8c95d142d021a5f47dda8462715","modified":1513071302000},{"_id":"themes/BlueLake/languages/ko.yml","hash":"20c7df4087ee65d75e96f68c71fdb050eb63677f","modified":1513071302000},{"_id":"themes/BlueLake/languages/tr.yml","hash":"1c623122f1ff7878595de6783bd83afc3a746373","modified":1513071302000},{"_id":"themes/BlueLake/languages/zh-CN.yml","hash":"0755af57d92a07ecff0e327f78eb25b0623a5852","modified":1513071302000},{"_id":"themes/BlueLake/languages/zh-TW.yml","hash":"61f419488d4a8f62c2b90ee766b6e68ba2e88bd7","modified":1513071302000},{"_id":"themes/BlueLake/layout/archive.jade","hash":"0497469c869f0ac28f150295dbddf6920e6582c1","modified":1513071302000},{"_id":"themes/BlueLake/layout/base.jade","hash":"0f0291077c4ab6d8fd8450744137e83be21fc639","modified":1513388981000},{"_id":"themes/BlueLake/layout/category.jade","hash":"384e2e2588ecab3f518f03f11f2b052d3827fad8","modified":1513071302000},{"_id":"themes/BlueLake/layout/index.jade","hash":"ba1ea647af5c134b1a950638ea864663b29d4e22","modified":1513388986000},{"_id":"themes/BlueLake/layout/page.jade","hash":"7d2a48f6a902605fd6cfc237e3c2f9c02d76492e","modified":1513071302000},{"_id":"themes/BlueLake/layout/post.jade","hash":"3025e7e259d69551a35f17db3c3981aaa77fe7bc","modified":1513071302000},{"_id":"themes/BlueLake/layout/tag.jade","hash":"835da21846c730f0e3e344dc7e2e59154030b4f7","modified":1513071302000},{"_id":"themes/BlueLake/source/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1513071302000},{"_id":"themes/BlueLake/source/.DS_Store","hash":"cf3bc7ec87bc87e334de2d1365346c333333af90","modified":1513386966000},{"_id":"themes/BlueLake/source/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1513071302000},{"_id":"source/_posts/angular/2016-01-01-angularjs-digest-vs-apply.md","hash":"7594d610f2abed2445e6fa581effae891f74ecf3","modified":1500285267000},{"_id":"source/_posts/more/2017-04-06-vuejs-how-vuejs-makes-a-copy-update-replace-inside-the-data-binding.md","hash":"99ae9e795926a61f922dc1263f8cd1f7e42a7242","modified":1500285267000},{"_id":"source/_posts/react/2016-01-02-keys-in-children-components-are-important.md","hash":"5a28afb1ea72db7c1273376a114418f702db6d93","modified":1500285267000},{"_id":"source/_posts/javascript/2015-12-29-insert-item-inside-an-array.md","hash":"79aa5bfd641fdf6d165630f138b9e8e3ce852a64","modified":1500285267000},{"_id":"source/_posts/javascript/2016-01-03-improve-nested-conditionals.md","hash":"f7e3f14464c8fab690eda34f7c64bd18d8fb76bc","modified":1500285267000},{"_id":"source/_posts/javascript/2016-01-04-sorting-strings-with-accented-characters.md","hash":"2292af0e9a1daad7e74310d92ee229964e1b6f87","modified":1500285267000},{"_id":"source/_posts/javascript/2016-01-05-differences-between-undefined-and-null.md","hash":"0be6b74c71f7327b040fe7cdf783f21491d622cc","modified":1500285267000},{"_id":"source/_posts/javascript/2016-01-06-writing-a-single-method-for-arrays-and-a-single-element.md","hash":"c5b658266cab676ed331d0bbb241917c14247202","modified":1500285267000},{"_id":"source/_posts/javascript/2016-01-07-use-strict-and-get-lazy.md","hash":"ccfc1e063ec8318ab856ccc2bc7dae72c10c1b4c","modified":1500285267000},{"_id":"source/_posts/javascript/2016-01-08-converting-a-node-list-to-an-array.md","hash":"440c826bab0ef48a07046cf0d1aa9732aac3ab1f","modified":1500285267000},{"_id":"source/_posts/javascript/2016-01-09-template-strings.md","hash":"ecc3ff3a32982a13e382b6328cb0d7b5b4a2e014","modified":1500285267000},{"_id":"source/_posts/javascript/2016-01-10-check-if-a-property-is-in-a-object.md","hash":"b3addca8194e6db5a4172ab8451084fea4986bc1","modified":1500285267000},{"_id":"source/_posts/javascript/2016-01-11-hoisting.md","hash":"26c405fc16017038060c98f6db85a0b6959a320f","modified":1500285267000},{"_id":"source/_posts/javascript/2016-01-12-pseudomandatory-parameters-in-es6-functions.md","hash":"c44955ab612e3dce5013f283e39fb492e2ab0b83","modified":1500285267000},{"_id":"source/_posts/javascript/2016-01-13-tip-to-measure-performance-of-a-javascript-block.md","hash":"77fd9866599a4c67c07463de5f99f190fa2387da","modified":1500285267000},{"_id":"source/_posts/javascript/2016-01-14-fat-arrow-functions.md","hash":"e11ba0bb65b2ea2835cccb5513e76e5c359a2841","modified":1500285267000},{"_id":"source/_posts/javascript/2016-01-15-even-simpler-way-of-using-indexof-as-a-contains-clause.md","hash":"ec8f0b993ccb3d9778600313e2b0c95e1d2d5bec","modified":1500285267000},{"_id":"source/_posts/javascript/2016-01-16-passing-arguments-to-callback-functions.md","hash":"91c079dad63c4c77d1d73091611dc31fee456dca","modified":1500285267000},{"_id":"source/_posts/javascript/2016-01-17-nodejs-run-a-module-if-it-is-not-required.md","hash":"95d43924c3078a2e3f12e7f13e986918714589af","modified":1500285267000},{"_id":"source/_posts/javascript/2016-01-18-rounding-the-fast-way.md","hash":"b7bfa3f57b12f2536079bb17e3bbe598d37178a5","modified":1500285267000},{"_id":"source/_posts/javascript/2016-01-19-safe-string-concatenation.md","hash":"844e74c4061ca59140730258db4b8f14a214318c","modified":1500285267000},{"_id":"source/_posts/javascript/2016-01-20-return-objects-to-enable-chaining-of-functions.md","hash":"05e2c8728c21eeb0517a1c17dc52fdfb2569cacf","modified":1500285267000},{"_id":"source/_posts/javascript/2016-01-21-shuffle-an-array.md","hash":"538202394e0b2c171b6eff8ec144b923674e5891","modified":1500285267000},{"_id":"source/_posts/javascript/2016-01-22-two-ways-to-empty-an-array.md","hash":"b5dfbf529fcc95c9de466205d94db245a196f006","modified":1500285267000},{"_id":"source/_posts/javascript/2016-01-23-converting-to-number-fast-way.md","hash":"5f7381ea157a65b03e2d7aaa08bdba81824f0000","modified":1500285267000},{"_id":"source/_posts/javascript/2016-01-24-use_===_instead_of_==.md","hash":"546a67ca58b3e54af3ed3476dbaa6a4328f174b5","modified":1500285267000},{"_id":"source/_posts/javascript/2016-01-25-Using-immediately-invoked-function-expression.md","hash":"da4378e769c684c0e4444b8084d1ad12b609c2ed","modified":1500285267000},{"_id":"source/_posts/javascript/2016-01-26-filtering-and-sorting-a-list-of-strings.md","hash":"e52c2bf6ad2e7bce597ef541dd93638e436b98af","modified":1500285267000},{"_id":"source/_posts/javascript/2016-01-27-short-circuit-evaluation-in-js.md","hash":"c4378ab035318ad899e65679c7525363a5f1e9f9","modified":1500285267000},{"_id":"source/_posts/javascript/2016-01-28-curry-vs-partial-application.md","hash":"36641a1918ff7e56ca0f8cd5b52c917b7bd88acf","modified":1500285267000},{"_id":"source/_posts/javascript/2016-01-29-speed-up-recursive-functions-with-memoization.md","hash":"a12482cee597c3740c8951150bc15502cb21540a","modified":1500285267000},{"_id":"source/_posts/javascript/2016-01-30-converting-truthy-falsy-values-to-boolean.md","hash":"162d8c5a36d03cea9eef4840d6cafdc18032b653","modified":1500285267000},{"_id":"source/_posts/javascript/2016-01-31-avoid-modifying-or-passing-arguments-into-other-functions—it-kills-optimization.md","hash":"bfce5d2048bac0ae6c219957224ccb0047c2afda","modified":1500285267000},{"_id":"source/_posts/javascript/2016-02-01-map-to-the-rescue-adding-order-to-object-properties.md","hash":"ba77b2636204ffb8ef1f6a41b439b44b991dac7c","modified":1500285267000},{"_id":"source/_posts/javascript/2016-02-02-create-range-0...n-easily-using-one-line.md","hash":"8d21bee302a5756290cea4b6cf652d10fbc7b8b9","modified":1500285267000},{"_id":"source/_posts/javascript/2016-02-03-implementing-asynchronous-loops.md","hash":"e24f47df2500e6a9792546b036f26db449cc9b83","modified":1500285267000},{"_id":"source/_posts/javascript/2016-02-04-assignment-shorthands.md","hash":"21bbd0df41562c46a6c2206d2a95ee0512100d33","modified":1500285267000},{"_id":"source/_posts/javascript/2016-02-05-observe-dom-changes.md","hash":"080efbd2819ae913513ee69958dee9224bf3153f","modified":1500285267000},{"_id":"source/_posts/javascript/2016-02-06-deduplicate-an-array.md","hash":"c300600fa0b521331b1bad20866ee617c511e313","modified":1500285267000},{"_id":"source/_posts/javascript/2016-02-07-flattening-multidimensional-arrays-in-javascript.md","hash":"c81027aebb4f404fc55fe8089aaba57d7665446e","modified":1500285267000},{"_id":"source/_posts/javascript/2016-02-09-using-json-stringify.md","hash":"aa6f0642740dd19beaf0008b75409ed3d7180eea","modified":1500285267000},{"_id":"source/_posts/javascript/2016-02-08-advanced-properties.md","hash":"7e99745c77d172b0cefc0f8f70a1771f20c32356","modified":1500285267000},{"_id":"source/_posts/javascript/2016-02-10-array-average-and-median.md","hash":"796f64213d3f532c9fc9fed4b002ea517ccc55e9","modified":1500285267000},{"_id":"source/_posts/javascript/2016-02-11-preventing-unapply-attacks.md","hash":"92b425463d450d4037ac48946fbb8de66acadafb","modified":1500285267000},{"_id":"source/_posts/javascript/2016-02-12-use-destructuring-in-function-parameters.md","hash":"b2044b735603d130944eb1d0288ef469cf387089","modified":1500285267000},{"_id":"source/_posts/javascript/2016-02-13-know-the-passing-mechanism.md","hash":"9aacd44cef4cda7f8754167c5a8213508c03e7c2","modified":1500285267000},{"_id":"source/_posts/javascript/2016-02-14-calculate-the-max-min-value-from-an-array.md","hash":"3e567070d1cd91271c1b4297f44d0aae3ba3e38a","modified":1500285267000},{"_id":"source/_posts/javascript/2016-02-15-detect-document-ready-in-pure-js.md","hash":"72b590e66cf380b3e5b54ddabeda01b68110f563","modified":1500285267000},{"_id":"source/_posts/javascript/2016-02-16-basics-declarations.md","hash":"71813ddd50a2468b924e5d11c23897cb2359415e","modified":1500285267000},{"_id":"source/_posts/javascript/2016-02-17-reminders-about-reduce-function-usage.md","hash":"718f852a41bb08cc88a050237707fce1ec381407","modified":1500285267000},{"_id":"source/_posts/javascript/2016-02-26-extract-unix-timestamp-easily.md","hash":"4f49b15cfe5f9ec37d14a2b9763a7942034ebd60","modified":1500285267000},{"_id":"source/_posts/javascript/2016-03-03-helpful-console-log-hacks.md","hash":"493ae2a42eaa6379519298dc83ff61032f19e17d","modified":1500285267000},{"_id":"source/_posts/javascript/2016-03-16-DOM-event-listening-made-easy.md","hash":"f26c05f0bd546cd9be2a699b633cb915e1508a60","modified":1500285267000},{"_id":"source/_posts/javascript/2016-04-05-return-values-with-the-new-operator.md","hash":"7334505d5c18272a2e421c2b07df3aabc18e9da0","modified":1500285267000},{"_id":"source/_posts/javascript/2016-04-21-get-file-extension.md","hash":"94f86bfcc5847eec5c9bb7650aa74e514e5cef46","modified":1500285267000},{"_id":"source/_posts/javascript/2016-05-06-use-optional-arguments.md","hash":"e2fb5a606e0abf8d68bf09fa7d851d786de131c4","modified":1500285267000},{"_id":"source/_posts/javascript/2016-05-12-make-easy-loop-on-array.md","hash":"ecb218165a0ad577be7cc2944f062701a0c25557","modified":1500285267000},{"_id":"source/_posts/javascript/2016-08-02-copy-to-clipboard.md","hash":"b7b28bc41aa600b6fc45cbe644b699858c02c0c7","modified":1500285267000},{"_id":"source/_posts/javascript/2016-08-10-comma-operaton-in-js.md","hash":"c09979d3a025752f0b72f4887b51179bb1dc75b1","modified":1500285267000},{"_id":"source/_posts/javascript/2016-08-17-break-continue-loop-functional.md","hash":"87f4bed03d13cc307ab089c05c88808220cbe075","modified":1500285267000},{"_id":"source/_posts/javascript/2016-08-25-keyword-var-vs-let.md","hash":"f5e1dd28bcb1b4ae0247fcbf923d3028bc4ab2c1","modified":1500285267000},{"_id":"source/_posts/javascript/2016-10-28-three-useful-hacks.md","hash":"49232e2e732d55c2e9c09f69c76746ab4e9ffdf8","modified":1500285267000},{"_id":"source/_posts/javascript/2017-01-19-binding-objects-to-functions.md","hash":"d3f9ab1ab85dff38929068b8e50e768e1d9efff8","modified":1500285267000},{"_id":"source/_posts/javascript/2017-03-09-working-with-websocket-timeout.md","hash":"96f3be46c84f9cf2d9e0a2983308ca1bb10b516e","modified":1500285267000},{"_id":"source/_posts/javascript/2017-03-12-3-array-hacks.md","hash":"012c213d947d07a8cfcd3ab12bda59db0e327f0a","modified":1500285267000},{"_id":"source/_posts/javascript/2017-03-16-tapping-for-quick-debugging.md","hash":"aa19dc8866c2b05bade84d3fe25f91579a7442e2","modified":1500285267000},{"_id":"source/_posts/javascript/2017-04-03-why-you-should-use-Object.is()-in-equality-comparison.md","hash":"eb59e1ad32ad8813a77c27e879003e3f3f3a4f46","modified":1500285267000},{"_id":"source/_posts/javascript/2017-04-05-picking-and-rejecting-object-properties.md","hash":"2b162b51ca092dbe38dd839f1d932864f9080144","modified":1500285267000},{"_id":"themes/BlueLake/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1513071297000},{"_id":"themes/BlueLake/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1513071297000},{"_id":"themes/BlueLake/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1513071297000},{"_id":"themes/BlueLake/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1513071297000},{"_id":"themes/BlueLake/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1513071297000},{"_id":"themes/BlueLake/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1513071297000},{"_id":"themes/BlueLake/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1513071297000},{"_id":"themes/BlueLake/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1513071297000},{"_id":"themes/BlueLake/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1513071297000},{"_id":"themes/BlueLake/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1513071297000},{"_id":"themes/BlueLake/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1513071297000},{"_id":"themes/BlueLake/.git/logs/HEAD","hash":"a06c2f2190528adf05dedb055cda22c1621ced0b","modified":1513071302000},{"_id":"themes/BlueLake/layout/_partial/after_footer.jade","hash":"26ae121ecc5bbe351927dd273d58871f69454500","modified":1513071302000},{"_id":"themes/BlueLake/layout/_partial/comment_count.jade","hash":"52e4cacd58d5e0061924189ad75e0c3bf622aa7f","modified":1513071302000},{"_id":"themes/BlueLake/layout/_partial/comments.jade","hash":"af9a4a65eba65c5140921326f2b5cae9db5d7d28","modified":1513071302000},{"_id":"themes/BlueLake/layout/_partial/comments_js.jade","hash":"25e28dc48c392a5d10db1ed0f8a5899598d643d5","modified":1513071302000},{"_id":"themes/BlueLake/layout/_partial/footer.jade","hash":"dbc5c401f4d8aa80fe9e73423aadb8b8969f0b62","modified":1513071302000},{"_id":"themes/BlueLake/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1513071302000},{"_id":"themes/BlueLake/layout/_partial/mathjax.jade","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1513071302000},{"_id":"themes/BlueLake/layout/_partial/mathjax2.jade","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1513071302000},{"_id":"themes/BlueLake/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1513071302000},{"_id":"themes/BlueLake/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1513071302000},{"_id":"themes/BlueLake/layout/_partial/search.jade","hash":"1c988c7e1f716036e428ee16b8005a7b1bfb33c7","modified":1513071302000},{"_id":"themes/BlueLake/layout/_partial/share.jade","hash":"28d79fbb9d8ecc5692d3063e439f16224188abac","modified":1513071302000},{"_id":"themes/BlueLake/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1513071302000},{"_id":"themes/BlueLake/layout/_partial/totop.jade","hash":"3e4141538285aef2bd019832ba62bafd094c6097","modified":1513071302000},{"_id":"themes/BlueLake/layout/_widget/archive.jade","hash":"082ae16dad18ada28913772675861d7230134bea","modified":1513071302000},{"_id":"themes/BlueLake/layout/_widget/category.jade","hash":"ba43bd011d64cd86fa420677c9000d328f4f6114","modified":1513071302000},{"_id":"themes/BlueLake/layout/_widget/links.jade","hash":"ff46afdedc1ab3c075ffed686b98f23aed066124","modified":1513071302000},{"_id":"themes/BlueLake/layout/_widget/recent_comments.jade","hash":"f8ae55d5514fe493651ec04fbe73cb5fc482f7cd","modified":1513071302000},{"_id":"themes/BlueLake/layout/_widget/recent_posts.jade","hash":"a0309137277323f2fd61a3c6691e1bc51026f711","modified":1513071302000},{"_id":"themes/BlueLake/layout/_widget/tag.jade","hash":"3df9a00a21d3bc151026b2d403a99c28fe1ccd13","modified":1513071302000},{"_id":"themes/BlueLake/layout/_widget/weibo.jade","hash":"53e99461ae7f8efb2a1e78ad3090dd93d18bcd5c","modified":1513071302000},{"_id":"themes/BlueLake/source/css/highlight.styl","hash":"be9ad73454b7029311caafd8e1faa469a5d4f58d","modified":1513071302000},{"_id":"themes/BlueLake/source/css/style.styl","hash":"5852cc541b74868e6464c7224b65683ea5aaa8d8","modified":1513071302000},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1513071302000},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","hash":"2b6a0b21bf63bdf746130117baf432fcb44ad210","modified":1513071302000},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1513071302000},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1513071302000},{"_id":"themes/BlueLake/source/js/search.json.js","hash":"a0e8dfee9b9845aabd64360d497df7c0767b7235","modified":1513071302000},{"_id":"themes/BlueLake/source/js/toctotop.js","hash":"ad6386bc746ff375715ca9da17af4716ea86e06a","modified":1513071302000},{"_id":"themes/BlueLake/source/js/totop.js","hash":"5b1131830209c2daaf6fe34c5e39ab7c1059bfa4","modified":1513071302000},{"_id":"themes/BlueLake/source/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1513071302000},{"_id":"themes/BlueLake/.git/objects/pack/pack-f5429f67daffeda50dac71994bdef646522c8b50.idx","hash":"9edecff67f72a5382ac6b864d5753098db2e4ee1","modified":1513071302000},{"_id":"themes/BlueLake/.git/refs/heads/master","hash":"341dc69eb1d9efe1ef91307d9bb8c922b9cbfa04","modified":1513071302000},{"_id":"themes/BlueLake/.git/logs/refs/heads/master","hash":"a06c2f2190528adf05dedb055cda22c1621ced0b","modified":1513071302000},{"_id":"themes/BlueLake/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1513071302000},{"_id":"themes/BlueLake/.git/logs/refs/remotes/origin/HEAD","hash":"a06c2f2190528adf05dedb055cda22c1621ced0b","modified":1513071302000},{"_id":"themes/BlueLake/.git/objects/pack/pack-f5429f67daffeda50dac71994bdef646522c8b50.pack","hash":"3bbd87f8dad2fb84e44d0468ee6cf7a6062fae1c","modified":1513071302000},{"_id":"public/baidusitemap.xml","hash":"387b955e0c09d0d62884336531a319a20ac1c553","modified":1526871011996},{"_id":"public/content.json","hash":"c576034df7bde6097487419fcea6b9ac040f90d6","modified":1526871012034},{"_id":"public/sitemap.xml","hash":"33b1c360372e1679a8c08ed2a12cc6278db70ebe","modified":1526871012034},{"_id":"public/2017/07/17/javascript/2017-04-03-why-you-should-use-Object.is()-in-equality-comparison/index.html","hash":"4fa5c9dcb563ed96b73536cfd7fb6d2088a949d3","modified":1526871012044},{"_id":"public/2017/07/17/javascript/2017-03-16-tapping-for-quick-debugging/index.html","hash":"5bcdb8e5cc29d20ebbb3123000cf99ef5628522b","modified":1526871012044},{"_id":"public/2017/07/17/javascript/2017-03-09-working-with-websocket-timeout/index.html","hash":"33a7f699d61fa2e46d8e9eb4914e146ee21ca846","modified":1526871012044},{"_id":"public/2017/07/17/javascript/2017-01-19-binding-objects-to-functions/index.html","hash":"dd2faa651d6fd635710f14e3befbc57fb55a11ef","modified":1526871012044},{"_id":"public/2017/07/17/javascript/2016-10-28-three-useful-hacks/index.html","hash":"6e57bf44fbb02aae6fa2e14919b321911e0743fc","modified":1526871012044},{"_id":"public/2017/07/17/javascript/2016-08-10-comma-operaton-in-js/index.html","hash":"5af59577240926b7015bbc43d9217a4f5c044e86","modified":1526871012044},{"_id":"public/2017/07/17/javascript/2016-08-02-copy-to-clipboard/index.html","hash":"8eeab89b5683d85734998d04849395b3e6e11e40","modified":1526871012044},{"_id":"public/2017/07/17/javascript/2016-03-16-DOM-event-listening-made-easy/index.html","hash":"98653d35c7e2e47c469014060795810045957ab3","modified":1526871012044},{"_id":"public/2017/07/17/javascript/2016-03-03-helpful-console-log-hacks/index.html","hash":"53c623d91c6be45cf02a8e721a5a239a0a33c115","modified":1526871012044},{"_id":"public/2017/07/17/javascript/2016-02-26-extract-unix-timestamp-easily/index.html","hash":"fbe4cfd3c391c88860bd324e1ec73a9cdde6263f","modified":1526871012044},{"_id":"public/2017/07/17/javascript/2016-02-15-detect-document-ready-in-pure-js/index.html","hash":"7d9674f98326fe66e8494e4d997e5ab3c985387e","modified":1526871012044},{"_id":"public/2017/07/17/javascript/2016-02-14-calculate-the-max-min-value-from-an-array/index.html","hash":"b35342d00bff82327cd77d5d3a392b75cad9d3ac","modified":1526871012044},{"_id":"public/2017/07/17/javascript/2016-02-13-know-the-passing-mechanism/index.html","hash":"4e433e07ea1911b7025c68d5d5359b984ce7b032","modified":1526871012044},{"_id":"public/2017/07/17/javascript/2017-04-05-picking-and-rejecting-object-properties/index.html","hash":"0704bb526dd0cf31ee6476538ffb41c3e1393002","modified":1526871012044},{"_id":"public/2017/07/17/angular/2016-01-01-angularjs-digest-vs-apply/index.html","hash":"c800420f4cfc82d32da8bf4b56e82335645b7c25","modified":1526871012044},{"_id":"public/2017/07/17/react/2016-01-02-keys-in-children-components-are-important/index.html","hash":"3015fc7fa1b908737da52c2e4047aef557fd44b1","modified":1526871012045},{"_id":"public/2017/07/17/javascript/2016-01-05-differences-between-undefined-and-null/index.html","hash":"ebca1228415392ce29d76f7325fa1e3efad17e9a","modified":1526871012045},{"_id":"public/2017/07/17/javascript/2016-01-06-writing-a-single-method-for-arrays-and-a-single-element/index.html","hash":"1831531355388ffc83b1ce9f317fcaceaa889bc4","modified":1526871012045},{"_id":"public/2017/07/17/javascript/2016-01-07-use-strict-and-get-lazy/index.html","hash":"a403b0cf5b902f8dd46296f6a5c0212d7f604dfb","modified":1526871012045},{"_id":"public/2017/07/17/javascript/2016-01-08-converting-a-node-list-to-an-array/index.html","hash":"d84eb9f16c4a01d4496456c924fab7e22a4d53fe","modified":1526871012045},{"_id":"public/2017/07/17/javascript/2016-01-09-template-strings/index.html","hash":"9430620d6f9a1bf846db40bb782b9833e7abcb54","modified":1526871012045},{"_id":"public/2017/07/17/javascript/2016-01-11-hoisting/index.html","hash":"e976f1f644082b24e7476198003366191a1abe18","modified":1526871012045},{"_id":"public/2017/07/17/javascript/2016-01-10-check-if-a-property-is-in-a-object/index.html","hash":"dfaade1e293c35eb162051d2d1b9c076c4debe63","modified":1526871012045},{"_id":"public/2017/07/17/javascript/2016-01-12-pseudomandatory-parameters-in-es6-functions/index.html","hash":"fb9491b0cfdd35f2021c1519693587d897d822ca","modified":1526871012045},{"_id":"public/2017/07/17/javascript/2016-01-13-tip-to-measure-performance-of-a-javascript-block/index.html","hash":"24381ad0069dd61871a4f68efdb5a4f3795022dd","modified":1526871012045},{"_id":"public/2017/07/17/javascript/2016-01-16-passing-arguments-to-callback-functions/index.html","hash":"a23e65a66c6c57157189bde0c6199d3000f3e5c1","modified":1526871012045},{"_id":"public/2017/07/17/javascript/2016-01-17-nodejs-run-a-module-if-it-is-not-required/index.html","hash":"3148b0af4f208ec415e4f4f09f1c7985e8ae5f12","modified":1526871012045},{"_id":"public/2017/07/17/javascript/2016-01-19-safe-string-concatenation/index.html","hash":"dc9842f960695a73cfcc8bc54bb5ff28f98d39f4","modified":1526871012045},{"_id":"public/2017/07/17/javascript/2016-01-21-shuffle-an-array/index.html","hash":"0fe5226bc03fab70e422cd647381725ccd14e72b","modified":1526871012045},{"_id":"public/2017/07/17/javascript/2016-01-22-two-ways-to-empty-an-array/index.html","hash":"3a626510cb38dbbf78a34eedea1cdd06fa265446","modified":1526871012045},{"_id":"public/2017/07/17/javascript/2016-01-23-converting-to-number-fast-way/index.html","hash":"b05c987bd2b9eb0e924217912e1bff4bb42be9b6","modified":1526871012045},{"_id":"public/2017/07/17/javascript/2016-01-24-use_===_instead_of_==/index.html","hash":"eeb0900ab11f26eb3ebf9e8abe3fbbd7936bd327","modified":1526871012045},{"_id":"public/2017/07/17/javascript/2016-01-25-Using-immediately-invoked-function-expression/index.html","hash":"1e5f53d97d1b818684dd211cd7461cdda8efddde","modified":1526871012046},{"_id":"public/2017/07/17/javascript/2016-01-27-short-circuit-evaluation-in-js/index.html","hash":"bc4f2788295f40188033e689b305cf1579897b64","modified":1526871012046},{"_id":"public/2017/07/17/javascript/2016-01-28-curry-vs-partial-application/index.html","hash":"24433f9a41d73e32bebfd70d28571388ab6dbd0b","modified":1526871012046},{"_id":"public/2017/07/17/javascript/2016-01-30-converting-truthy-falsy-values-to-boolean/index.html","hash":"16e2abde7caf46ad9651f6a71c281382b9663212","modified":1526871012046},{"_id":"public/2017/07/17/javascript/2016-01-31-avoid-modifying-or-passing-arguments-into-other-functions—it-kills-optimization/index.html","hash":"c382871257b78583a9b6dbe1061313d2c3467432","modified":1526871012046},{"_id":"public/2017/07/17/javascript/2016-02-02-create-range-0...n-easily-using-one-line/index.html","hash":"27f27244629aaa1ec591fa6b10d53dcd77ab0dfd","modified":1526871012046},{"_id":"public/2017/07/17/javascript/2016-02-09-using-json-stringify/index.html","hash":"58613be6983e4e65dbe2098f7180aefb4ea1d49a","modified":1526871012046},{"_id":"public/2017/07/17/javascript/2016-02-10-array-average-and-median/index.html","hash":"1743a01589288cba743a8cae3a0af727621948fb","modified":1526871012046},{"_id":"public/2017/07/17/javascript/2016-02-11-preventing-unapply-attacks/index.html","hash":"1483af6174ec5b6f5663b8bd325be8692a4dcd26","modified":1526871012046},{"_id":"public/2017/07/17/javascript/2016-01-20-return-objects-to-enable-chaining-of-functions/index.html","hash":"73c3cfc2422f700ff34f70ece8cab41b29bf3e2f","modified":1526871012046},{"_id":"public/2017/06/29/Markdown/index.html","hash":"f8d5908def2ef45630afd6ff800166a9f0b58a5e","modified":1526871012046},{"_id":"public/2017/06/29/Vue-api/index.html","hash":"a75f8287a8d5d356a60256b0963795ee12ce4219","modified":1526871012046},{"_id":"public/2017/06/27/2017年06月27日/index.html","hash":"244b8edefc8f72d24c83461cc7d8f8645334c75c","modified":1526871012047},{"_id":"public/2017/06/07/ITem2APP/index.html","hash":"0e11ddf5cc842145de8067c83d0af5e98d56d291","modified":1526871012047},{"_id":"public/2017/05/24/前端/index.html","hash":"cfd2db64b2cad3669826deca226d9b9e73197cb4","modified":1526871012047},{"_id":"public/2017/04/27/2017年04月27日19-01-12/index.html","hash":"471a53d1fb2d13b0773f43a6a940b9c29123cdf6","modified":1526871012047},{"_id":"public/2017/04/27/2017年04月27日/index.html","hash":"34a61df89c2915b5ca093f87342fd6966a97bf29","modified":1526871012047},{"_id":"public/2017/04/20/Mac版-sublime-text-3-快捷键/index.html","hash":"9ecf59227c07376cdb60764db18ef3fc51feab5e","modified":1526871012047},{"_id":"public/2017/04/16/React表格项目使用/index.html","hash":"9db7072c446ed795aa341e31a9008628ca7beea1","modified":1526871012047},{"_id":"public/2017/04/14/css-div居中/index.html","hash":"b0d94343542297f067d09c3026b80ffd1e47dafc","modified":1526871012047},{"_id":"public/2017/04/13/2017年04月13日21-52-30/index.html","hash":"b4212e884b7ed94ba3644830c0d56dc2dc136529","modified":1526871012047},{"_id":"public/2017/04/13/2017年04月13日11-25-54/index.html","hash":"f01263a540301c20e1bac1f048513246ff5dc4b7","modified":1526871012047},{"_id":"public/2017/04/12/2017年04月12日21-30-30/index.html","hash":"228b17dd8bfa15583ad712f6e148f5a0dd2106dd","modified":1526871012047},{"_id":"public/archives/index.html","hash":"3b56e6ecad73f1a85ae4d4caf1f7f47f48c6932b","modified":1526871012047},{"_id":"public/archives/page/2/index.html","hash":"9f5b153e3ab8f4a64f2c7efcecec142811ab8609","modified":1526871012047},{"_id":"public/archives/page/3/index.html","hash":"1638146cbfc428209c5528d052850b3d6be9e374","modified":1526871012047},{"_id":"public/archives/page/4/index.html","hash":"dda383486da5908248e695f6db21788fb27072b8","modified":1526871012047},{"_id":"public/archives/page/5/index.html","hash":"35cd8dafc7f34d58408fd53660d2611840fbf464","modified":1526871012047},{"_id":"public/archives/page/6/index.html","hash":"c7ffde5b717be0a002fe7b4c2101ddeefe174956","modified":1526871012047},{"_id":"public/archives/page/7/index.html","hash":"1a954da3e2d68754be01dd5ff0d1619947bb3150","modified":1526871012048},{"_id":"public/archives/page/8/index.html","hash":"84155ae78dc2a0b637c9a0b21c7b1d056e18b57e","modified":1526871012048},{"_id":"public/archives/page/9/index.html","hash":"897291a3ab9f019d2cab523d96163641e9747c56","modified":1526871012048},{"_id":"public/archives/page/10/index.html","hash":"c26571112b9bc2ccc7bfce59b00cf3c9913f657f","modified":1526871012048},{"_id":"public/archives/page/11/index.html","hash":"8bfe5dc80479ce2fdf7e76a688085a9d4ef2c51c","modified":1526871012048},{"_id":"public/archives/page/12/index.html","hash":"ca412a7cf4c4117975cfedcdf583521bf4a1c97e","modified":1526871012048},{"_id":"public/archives/page/13/index.html","hash":"5dfe782145259114b69e2b3c78ace00fe5b86053","modified":1526871012048},{"_id":"public/archives/page/14/index.html","hash":"c0348c32b260b3a5fa89bf30d3b7b21ce5cc384c","modified":1526871012048},{"_id":"public/archives/page/15/index.html","hash":"e67a06f939580c1d5aeb470edb4cb30fd1924083","modified":1526871012048},{"_id":"public/archives/page/16/index.html","hash":"9658e6543c7926275ecf18203db5626ac5a510a4","modified":1526871012048},{"_id":"public/archives/page/17/index.html","hash":"ddcc221ed58fde92c936b5b08b0deb3ed885fb70","modified":1526871012048},{"_id":"public/archives/page/18/index.html","hash":"aed1301d76ef1ecbb736bb84120a533bf053b90d","modified":1526871012048},{"_id":"public/archives/page/19/index.html","hash":"2e40869822db023a1148a2c2a295611c731e0e40","modified":1526871012048},{"_id":"public/archives/page/20/index.html","hash":"6d9bd04bab29a73c45d3e209354a3c9ddef07656","modified":1526871012048},{"_id":"public/archives/page/21/index.html","hash":"14be93973bceee2dd48a7e80dd241daac2107f91","modified":1526871012048},{"_id":"public/archives/page/22/index.html","hash":"daf70451a2ff12f76d4013a6a087bec829f21cd1","modified":1526871012048},{"_id":"public/archives/page/23/index.html","hash":"cfcfc8b94fb59c87001d34012dd28a440eff44a3","modified":1526871012048},{"_id":"public/archives/page/24/index.html","hash":"67d749857c28cc9fe7fb796d0624a4bb3232f4b0","modified":1526871012048},{"_id":"public/archives/2017/index.html","hash":"bb0934dbf2ad842a0bd05ce49de4e9bb1d3b0a89","modified":1526871012048},{"_id":"public/archives/2017/page/2/index.html","hash":"90ee8c90a574438e3c512f1df2a3165fae4795b8","modified":1526871012048},{"_id":"public/archives/2017/page/3/index.html","hash":"10780db854ffb172054029931385f8b8d9a7065c","modified":1526871012048},{"_id":"public/archives/2017/page/4/index.html","hash":"f9619b0cbb4459411885e2006ccb8e69af8e7701","modified":1526871012048},{"_id":"public/archives/2017/page/5/index.html","hash":"8bf45fa33e9a4c869a2b398500c716d50353b0c2","modified":1526871012048},{"_id":"public/archives/2017/page/6/index.html","hash":"3eeaf5adc500ac1b5393bfeb878f6f4eea78e850","modified":1526871012048},{"_id":"public/archives/2017/page/7/index.html","hash":"76dee515e60fa2e2c573f3a64c0270b6602ea07b","modified":1526871012049},{"_id":"public/archives/2017/page/8/index.html","hash":"32349af24fbcab3230e5c4d892a711d83b256b2f","modified":1526871012049},{"_id":"public/archives/2017/page/9/index.html","hash":"14d40f0b78299e8e2ca599f3eb2b5dbc308876dc","modified":1526871012049},{"_id":"public/archives/2017/page/10/index.html","hash":"138a8e65e8b414005baf974d4e1e4f7fc93941c3","modified":1526871012049},{"_id":"public/archives/2017/page/11/index.html","hash":"505d0617c4bb2e6cbe7bcab5a46d8a205faf8e6b","modified":1526871012049},{"_id":"public/archives/2017/page/12/index.html","hash":"0da9a205b80ef3a7392fadfa537936810599b4f1","modified":1526871012049},{"_id":"public/archives/2017/page/13/index.html","hash":"6cdbb01e47c4247ee684c0d91982bb95fdca5f03","modified":1526871012049},{"_id":"public/archives/2017/page/14/index.html","hash":"c1aad2ad0ecf54d89deb3ea27c031fad70da87f1","modified":1526871012049},{"_id":"public/archives/2017/page/15/index.html","hash":"7131cc8a372a40220f1c28502964a355d83353f6","modified":1526871012049},{"_id":"public/archives/2017/page/16/index.html","hash":"c7a022c546d9a8af6582b2b7ebbecd6117c19e56","modified":1526871012049},{"_id":"public/archives/2017/page/17/index.html","hash":"1c7f40a9aed05f44ffb94ee62aa88350a062d1ba","modified":1526871012049},{"_id":"public/archives/2017/page/18/index.html","hash":"0c7cdb1b3da06c86524b22c92ce197891190035f","modified":1526871012049},{"_id":"public/archives/2017/page/19/index.html","hash":"c0a99e2bc3f5f202a69c338ce6cde9289d649c7b","modified":1526871012049},{"_id":"public/archives/2017/page/20/index.html","hash":"ccfe109a29b2885a1edc187c9ae463523758ae15","modified":1526871012049},{"_id":"public/archives/2017/page/21/index.html","hash":"d2dcc12c9fe5acf8a7d9b660a469a31d14cd30dd","modified":1526871012049},{"_id":"public/archives/2017/page/22/index.html","hash":"844c5424b3560ef0a6488a5f12b6d721bbf489a8","modified":1526871012049},{"_id":"public/archives/2017/page/23/index.html","hash":"31be3edea6e87cb3a002ce7e31e7d9e5f52ab87e","modified":1526871012049},{"_id":"public/archives/2017/page/24/index.html","hash":"739d539051b7c5fb2e5247cfc202683ac8ece04b","modified":1526871012049},{"_id":"public/archives/2017/04/index.html","hash":"3007bb02b1a7160879b3862c75ce491ef2a88d15","modified":1526871012050},{"_id":"public/archives/2017/04/page/2/index.html","hash":"9899d759df39fb2160ab7839d8a8ae73cf6e8040","modified":1526871012050},{"_id":"public/archives/2017/04/page/3/index.html","hash":"5ee7847e43b73fb0ad12e2808a89b939fd506939","modified":1526871012050},{"_id":"public/archives/2017/05/index.html","hash":"f4174aa7bd5ab149fb348fc9aff479e7f178ce9b","modified":1526871012050},{"_id":"public/archives/2017/06/index.html","hash":"448a102672abc61ed16cf91aef701d5501aa0cb6","modified":1526871012050},{"_id":"public/archives/2017/06/page/2/index.html","hash":"079dc81af0405604913d3027e6f524cac37fbb5c","modified":1526871012050},{"_id":"public/archives/2017/07/index.html","hash":"c1175db42bd6860447b07f8b0a7c4657794ce5cb","modified":1526871012050},{"_id":"public/archives/2017/07/page/2/index.html","hash":"4fc3e9af6791003f7177394fa88382f85e7d6f9b","modified":1526871012050},{"_id":"public/archives/2017/07/page/3/index.html","hash":"8447d021999685a99417ee8762b801c21be87a9e","modified":1526871012050},{"_id":"public/archives/2017/07/page/4/index.html","hash":"8608397f1b0608bd2d55d5d102f704c08904840d","modified":1526871012050},{"_id":"public/archives/2017/07/page/5/index.html","hash":"31c6235950f6f7fe31fd7b870cd6d9afd64d79e7","modified":1526871012050},{"_id":"public/archives/2017/07/page/6/index.html","hash":"e09727148588c29553ac028078fd6f3644b6f8de","modified":1526871012050},{"_id":"public/archives/2017/07/page/7/index.html","hash":"ea5c2cca568b1d90546c5cf5d6b0c3d6de08085b","modified":1526871012050},{"_id":"public/archives/2017/07/page/8/index.html","hash":"73e49b8d7ae55b10d682d323f1e148e8db746b84","modified":1526871012050},{"_id":"public/archives/2017/07/page/9/index.html","hash":"14cbe2b9e490035c9e5a14b71dace9949d9bdb2c","modified":1526871012050},{"_id":"public/archives/2017/07/page/10/index.html","hash":"4bbde9dafacb008e293f3724d4b15dfa95ed5bc8","modified":1526871012050},{"_id":"public/archives/2017/07/page/11/index.html","hash":"6fdf35ca1fc4a513c8b614e1f1f94cc8a3d62382","modified":1526871012050},{"_id":"public/archives/2017/07/page/12/index.html","hash":"9cbf58d375832a026f8769ca35a7c0fb54069693","modified":1526871012050},{"_id":"public/archives/2017/07/page/13/index.html","hash":"49685f67ba8afd0b5e250812c7cc4e63a9de6d26","modified":1526871012050},{"_id":"public/archives/2017/07/page/14/index.html","hash":"296d7744c9a0198eb2ee5d78780f26b13f8a80d7","modified":1526871012050},{"_id":"public/archives/2017/07/page/15/index.html","hash":"f44f850d0a96060f23944211858292ab27576ef9","modified":1526871012050},{"_id":"public/archives/2017/07/page/16/index.html","hash":"ec6a089b7ca2abd0df0df8f204eb05bd9265058b","modified":1526871012050},{"_id":"public/archives/2017/07/page/17/index.html","hash":"0ab3877e44e0c77f9c2978aac0e1183971b84656","modified":1526871012050},{"_id":"public/archives/2017/07/page/18/index.html","hash":"d6a68a6c679a7abf84ef74e5a2c8105032ca4449","modified":1526871012050},{"_id":"public/archives/2017/07/page/19/index.html","hash":"6c4abaeb2411b40fb4aa417319f0d24f7cb3ffb7","modified":1526871012050},{"_id":"public/categories/zh-CN/index.html","hash":"ec6875cf9c3b190785e3299e4f37d7cd42ad2a10","modified":1526871012050},{"_id":"public/categories/zh-CN/page/2/index.html","hash":"2437dfb7f2b245b20caa84b2ad03ba690f029fda","modified":1526871012050},{"_id":"public/categories/zh-CN/page/3/index.html","hash":"5f39815447fc232ed60311c31ff4ba37e18f9274","modified":1526871012051},{"_id":"public/categories/zh-CN/page/4/index.html","hash":"b720dd2a753d23538a65c89bc01a16f69444912b","modified":1526871012051},{"_id":"public/categories/zh-CN/page/5/index.html","hash":"54e3c6f1cc000eb86ae04373611ea9ba615bc9c9","modified":1526871012051},{"_id":"public/categories/zh-CN/page/6/index.html","hash":"9b646ffc197ed1434d3c4558c14e0eee171a4e9b","modified":1526871012051},{"_id":"public/categories/zh-CN/page/7/index.html","hash":"c24df297f5b56e3f526ab9b2b7d8b40ba4c2b294","modified":1526871012051},{"_id":"public/categories/zh-CN/page/8/index.html","hash":"28e82aaa94921deb6bcad87fb3dd1e7aa6217e31","modified":1526871012051},{"_id":"public/categories/zh-CN/page/9/index.html","hash":"12b319aee00752f01b2e80607b05f0f304adb599","modified":1526871012051},{"_id":"public/categories/zh-CN/page/10/index.html","hash":"9aab6388a6d070a773a8c1f16ac12f3e00d66485","modified":1526871012051},{"_id":"public/categories/zh-CN/page/11/index.html","hash":"04d51d4fe4e3e07f56023ab63eebdf34c803e3b1","modified":1526871012051},{"_id":"public/categories/zh-CN/page/12/index.html","hash":"a8d1ce4e284aca707d4fd5fe7cfda0118eab4c6c","modified":1526871012051},{"_id":"public/categories/zh-CN/page/13/index.html","hash":"151156a3c3222f9c24941f1f8abbe6f9514486bd","modified":1526871012051},{"_id":"public/categories/zh-CN/page/14/index.html","hash":"f6f3ed6b5faa7ce296c8a7534cfc018f39575f5f","modified":1526871012052},{"_id":"public/categories/zh-CN/page/15/index.html","hash":"f265ba8a08f84550289f0d59882ed0adf43c023b","modified":1526871012052},{"_id":"public/categories/zh-CN/page/16/index.html","hash":"6317e7e630e62da9965fb5bf35b9131a7c6e66cb","modified":1526871012052},{"_id":"public/categories/zh-CN/page/17/index.html","hash":"b89770954848c3e5f4b6c28bb0e72466e487e4f7","modified":1526871012052},{"_id":"public/categories/zh-CN/javascript/index.html","hash":"ea6bba6931f4ae50de4ea2bb4b134f8c0248362c","modified":1526871012052},{"_id":"public/categories/zh-CN/javascript/page/2/index.html","hash":"277d5736226c27e3f07d51ffa54b74ba9070d657","modified":1526871012052},{"_id":"public/categories/zh-CN/javascript/page/3/index.html","hash":"f1e1c638f657a3df8b154b85e2b6c5a973b0dbcc","modified":1526871012052},{"_id":"public/categories/zh-CN/javascript/page/4/index.html","hash":"5d5d7de016a49e9e3acd9d9a391705ef530b1efa","modified":1526871012052},{"_id":"public/categories/zh-CN/javascript/page/5/index.html","hash":"059fec1a7cd544123a25b6f7a1900fc9c558d230","modified":1526871012052},{"_id":"public/categories/zh-CN/javascript/page/6/index.html","hash":"bb281c916329ec05fdf9d84c9d479e27670ee78f","modified":1526871012052},{"_id":"public/categories/zh-CN/javascript/page/7/index.html","hash":"819f9d85886e205c9a50a209b223ceec70ccb5a8","modified":1526871012052},{"_id":"public/categories/zh-CN/javascript/page/8/index.html","hash":"1a112aa3736e9af11950537f23bab7f4cd1190ec","modified":1526871012052},{"_id":"public/categories/zh-CN/javascript/page/9/index.html","hash":"2b73014f5467c358a6f4081b45170979541c7c9e","modified":1526871012052},{"_id":"public/categories/zh-CN/javascript/page/10/index.html","hash":"678859ed45a659f0402cdc005ab6a831718d0306","modified":1526871012052},{"_id":"public/categories/zh-CN/javascript/page/11/index.html","hash":"0e9d14e9daeb7c526d4d2155809f93115ba11cfb","modified":1526871012052},{"_id":"public/categories/zh-CN/javascript/page/12/index.html","hash":"3e1d5665b7233eedc7e8a2ab7355e73820e39a85","modified":1526871012052},{"_id":"public/categories/zh-CN/javascript/page/13/index.html","hash":"0c954a51ebdc7d978cd1f4f65b72dbe88874decc","modified":1526871012052},{"_id":"public/categories/zh-CN/javascript/page/14/index.html","hash":"0fa72a76b15d0bdc38d6f782767d15fd9fab021c","modified":1526871012052},{"_id":"public/categories/zh-CN/javascript/page/15/index.html","hash":"7b13e309e1cd6fbe1e5d70ca2409f96edabde900","modified":1526871012052},{"_id":"public/categories/zh-CN/javascript/page/16/index.html","hash":"80519d848bbd00f73d631924449e70d16c5b911f","modified":1526871012052},{"_id":"public/categories/zh-CN/javascript/page/17/index.html","hash":"d8df88d3de5a4c7fd2029e6e95fceefae7c26bb6","modified":1526871012052},{"_id":"public/categories/zh-CN/angular/index.html","hash":"bec90553df5de7e11271fe29126a7a64f0597b91","modified":1526871012052},{"_id":"public/categories/zh-CN/react/index.html","hash":"fddd207d213a9b24ec00bc495b0c3ee75ef4beb1","modified":1526871012052},{"_id":"public/index.html","hash":"b3822bb58f4898bc106bd7c7b96d168865727850","modified":1526871012052},{"_id":"public/page/2/index.html","hash":"66ea658ec0e967d3c95f7b4f06571fab81d52e9a","modified":1526871012052},{"_id":"public/page/3/index.html","hash":"2578f84d7a7da753aa41e08ae5650fb784e985b6","modified":1526871012052},{"_id":"public/page/4/index.html","hash":"92a1a8f4169a1df6f3ea082edd0fe30cb3fa2fb7","modified":1526871012052},{"_id":"public/page/5/index.html","hash":"7197628b3e93a036770eb73f397402008d4b9fe7","modified":1526871012052},{"_id":"public/page/6/index.html","hash":"03b9e27125f4775531ae2f8251f29ceabc194f05","modified":1526871012052},{"_id":"public/page/7/index.html","hash":"33a063e708c338711e934c331d3df9538e6389f0","modified":1526871012052},{"_id":"public/page/8/index.html","hash":"1eaf4572298867ea7bbc8256f4454229c4927c68","modified":1526871012053},{"_id":"public/page/9/index.html","hash":"3736f696bdcdb7642686742d1669cd1ff37c934d","modified":1526871012053},{"_id":"public/page/10/index.html","hash":"8e41f3843399888c8f21035057722077b36f0fae","modified":1526871012053},{"_id":"public/page/11/index.html","hash":"7d9560d91e0c486fff19603c95f83f907649fa59","modified":1526871012053},{"_id":"public/page/12/index.html","hash":"7163a91a67437335ebd144a8d0193e21711abca8","modified":1526871012053},{"_id":"public/page/13/index.html","hash":"b65b5a028ba073f426662aa36e6d84b1c2a3d58a","modified":1526871012053},{"_id":"public/page/14/index.html","hash":"ebbebe8f958d2827689f7771836797e891e35553","modified":1526871012053},{"_id":"public/page/15/index.html","hash":"c8e1a197f2d9f5a7234dae808912f1059541d22c","modified":1526871012053},{"_id":"public/page/16/index.html","hash":"55f8bea8a35f9fb985f531d8c33a185ba0a9e81e","modified":1526871012053},{"_id":"public/page/17/index.html","hash":"0aee488868e0f1c4b562491ae7c699add2cb5d4d","modified":1526871012053},{"_id":"public/page/18/index.html","hash":"85658283fb516a6b47bd9eabe7d4f5a247b0f5aa","modified":1526871012053},{"_id":"public/page/19/index.html","hash":"51bc27c80974b0cf1de7c7e9f1de8576acc1be89","modified":1526871012053},{"_id":"public/page/20/index.html","hash":"ff32e8b638fc2cefce54c98b5ef488f45c5d6eaa","modified":1526871012053},{"_id":"public/page/21/index.html","hash":"8b5b0cff7e214b70079487b53683fca89693139d","modified":1526871012053},{"_id":"public/page/22/index.html","hash":"424980ec44d24c462091725757a85a3ef56a95de","modified":1526871012053},{"_id":"public/page/23/index.html","hash":"849bbacb2978c04eae08020a635b9eb2793a6e8f","modified":1526871012053},{"_id":"public/page/24/index.html","hash":"15afc1a6abb708c813428c235eee88fa1d3ce462","modified":1526871012053},{"_id":"public/tags/html/index.html","hash":"44fc7f9cc25f6dd19bb4511a5415f16233369218","modified":1526871012053},{"_id":"public/tags/Hexo/index.html","hash":"4d7fd4047fd7b0db9c9e313ad9cc48548e30bb06","modified":1526871012053},{"_id":"public/tags/前端日记/index.html","hash":"284f969da8adc5cee019c8e503125846c3ab6a3d","modified":1526871012053},{"_id":"public/tags/CSS/index.html","hash":"e9d24282527d20ad0731295ff0e1d78bdfb97d20","modified":1526871012053},{"_id":"public/tags/一些有用的网站/index.html","hash":"2afbebb50c2d263875a575a7b0407269683b0980","modified":1526871012053},{"_id":"public/tags/【前端日志】/index.html","hash":"006d74428be45ffe8d8d8c8868bfea184715924d","modified":1526871012053},{"_id":"public/tags/HTML/index.html","hash":"45cb886072de4504a52637511d86a747523250ea","modified":1526871012053},{"_id":"public/tags/MacAPP/index.html","hash":"5bad7d034374c3db83f30fa0d3f41f10d3fb5bd9","modified":1526871012053},{"_id":"public/tags/Mac-APP/index.html","hash":"ecdc6e91d18d454cbbf664cdf83df1a69cfe842a","modified":1526871012053},{"_id":"public/tags/Markdown/index.html","hash":"3dedfdf848e96a7783e0468cade1e67a53900009","modified":1526871012053},{"_id":"public/tags/table/index.html","hash":"c95a585c1b4e73a5b8398b157c38f84c878cc27a","modified":1526871012053},{"_id":"public/tags/Vue/index.html","hash":"4bad4697552105ace340a049bea124c6e7322a32","modified":1526871012054},{"_id":"public/tags/css/index.html","hash":"ad8447baffb6d48e5aaa73e4cd3e1baab9d448c0","modified":1526871012054},{"_id":"public/tags/JavaScript/index.html","hash":"5467cad5a5f2094b17427197c2115f5b6efa6ce2","modified":1526871012054},{"_id":"public/tags/人生规划-人生计划/index.html","hash":"13257e7f777bff7be31e53c6804f62386ad96832","modified":1526871012054},{"_id":"public/tags/掘金/index.html","hash":"cefba8b3014af5c84faa4189ccb136df6d088ab5","modified":1526871012054},{"_id":"public/tags/Function/index.html","hash":"cf2b261ac3109e38879d807cb215c7a077ae13a3","modified":1526871012054},{"_id":"public/tags/javascript/index.html","hash":"b6d6e04a4f79e1740120a6a165a63fc448c3206d","modified":1526871012054},{"_id":"public/tags/demo/index.html","hash":"4b169afe716ce3d72b99d993ec9641174de3ff5c","modified":1526871012054},{"_id":"public/2017/07/30/20170730/index.html","hash":"06421ae87f94f9b2d73b34abc885595d701d4998","modified":1526871012054},{"_id":"public/2017/07/25/文本滚动-20170725/index.html","hash":"dc3c97b99a422eb041d35c4d786d6c6cc60bb214","modified":1526871012054},{"_id":"public/2017/07/17/javascript/2017-03-12-3-array-hacks/index.html","hash":"aa931795076cac418d5aedc11082428c6a1844fd","modified":1526871012054},{"_id":"public/2017/07/17/javascript/2016-08-25-keyword-var-vs-let/index.html","hash":"4d19eddda4832a11b2f90531ad9469b31bc2c333","modified":1526871012054},{"_id":"public/2017/07/17/javascript/2016-08-17-break-continue-loop-functional/index.html","hash":"a85343f45797e00c6f9c97bbf2ba51e2b68fa9b8","modified":1526871012054},{"_id":"public/2017/07/17/javascript/2016-05-12-make-easy-loop-on-array/index.html","hash":"adf27fd8402d59948425dcb09f1e828ffe22c6f7","modified":1526871012054},{"_id":"public/2017/07/17/javascript/2016-05-06-use-optional-arguments/index.html","hash":"ce44c69f80de26da13ed4b1448098ee6341f3a8c","modified":1526871012054},{"_id":"public/2017/07/17/javascript/2016-04-21-get-file-extension/index.html","hash":"5b68f06f9e742ffabb0c3da09e202ee0b16a6d0f","modified":1526871012054},{"_id":"public/2017/07/17/javascript/2016-04-05-return-values-with-the-new-operator/index.html","hash":"fff716a905b8094d1fe2a9b0925eda76ad6d8137","modified":1526871012054},{"_id":"public/2017/07/17/javascript/2016-02-17-reminders-about-reduce-function-usage/index.html","hash":"5fba08d38f5901dbd106d1e6e6c7677693cd8c5f","modified":1526871012054},{"_id":"public/2017/07/17/javascript/2016-02-16-basics-declarations/index.html","hash":"bc154e5c95266ec050803b690873d2ccd0cf0b6f","modified":1526871012054},{"_id":"public/2017/07/17/more/2017-04-06-vuejs-how-vuejs-makes-a-copy-update-replace-inside-the-data-binding/index.html","hash":"417911fcca1085896bb3cf8e5b6947804bec0038","modified":1526871012054},{"_id":"public/2017/07/17/javascript/2015-12-29-insert-item-inside-an-array/index.html","hash":"13b9be7168e52f5e98889c86dea670ecbff43b78","modified":1526871012054},{"_id":"public/2017/07/17/javascript/2016-01-03-improve-nested-conditionals/index.html","hash":"ac59c86a3a8ba7d15a14038ad2a1fb20ff3d582a","modified":1526871012054},{"_id":"public/2017/07/17/javascript/2016-01-04-sorting-strings-with-accented-characters/index.html","hash":"ad782f5acf66c0df8ec3a207a7610847837f72fa","modified":1526871012055},{"_id":"public/2017/07/17/javascript/2016-01-14-fat-arrow-functions/index.html","hash":"2b5493151377f959e9b20b475b859e248fe34584","modified":1526871012055},{"_id":"public/2017/07/17/javascript/2016-01-15-even-simpler-way-of-using-indexof-as-a-contains-clause/index.html","hash":"2a825a5ce6d204a2e14354f57a39a7c6254911c5","modified":1526871012055},{"_id":"public/2017/07/17/javascript/2016-01-18-rounding-the-fast-way/index.html","hash":"e187952439c1254386a955632026072449ad54c6","modified":1526871012055},{"_id":"public/2017/07/17/javascript/2016-02-12-use-destructuring-in-function-parameters/index.html","hash":"b0c644cfc604a803a83c28391b41a7fbf91771e4","modified":1526871012055},{"_id":"public/2017/07/17/javascript/2016-01-26-filtering-and-sorting-a-list-of-strings/index.html","hash":"05e160e0612ef032cf2771e710bcf4abf3f4bb79","modified":1526871012055},{"_id":"public/2017/07/17/javascript/2016-01-29-speed-up-recursive-functions-with-memoization/index.html","hash":"090618ab9fa56c723bad8e94d89ad2d5c5a0a5a3","modified":1526871012055},{"_id":"public/2017/07/17/javascript/2016-02-01-map-to-the-rescue-adding-order-to-object-properties/index.html","hash":"f6ff432af2650de133ecadeecbed34e1e0107394","modified":1526871012055},{"_id":"public/2017/07/17/javascript/2016-02-03-implementing-asynchronous-loops/index.html","hash":"f5edb34c6b717fd5449414e6a619a26494570a3b","modified":1526871012055},{"_id":"public/2017/07/17/javascript/2016-02-04-assignment-shorthands/index.html","hash":"7c63fef0758a0bc7537fa69cfb2842e88654d150","modified":1526871012055},{"_id":"public/2017/07/17/javascript/2016-02-05-observe-dom-changes/index.html","hash":"a966f08b16a028c3f99998031b714e337efcd046","modified":1526871012055},{"_id":"public/2017/07/17/javascript/2016-02-07-flattening-multidimensional-arrays-in-javascript/index.html","hash":"ec6719132f87d430555db48ca37ba52b5ecf9c86","modified":1526871012055},{"_id":"public/2017/07/17/javascript/2016-02-06-deduplicate-an-array/index.html","hash":"5fc0e4525a27f62d67c2e553c9f130f3322982f2","modified":1526871012055},{"_id":"public/2017/07/17/javascript/2016-02-08-advanced-properties/index.html","hash":"dd9b9d30a879b93b2071b26f2deea28f459d9ce3","modified":1526871012055},{"_id":"public/2017/07/04/循环/index.html","hash":"7b0b5f6fb7a07051f6cedbdb0f93f0d839f2c767","modified":1526871012055},{"_id":"public/2017/07/04/有意思的js循环/index.html","hash":"17e5e10b87137c30d46a035dad3d1f4ba348d32d","modified":1526871012055},{"_id":"public/2017/07/03/掘金/index.html","hash":"f800d6929f0cb4aca14300f03ddb7b256748a417","modified":1526871012055},{"_id":"public/2017/06/29/Vue-components/index.html","hash":"441b290906c094e24b70b51c5bc5fd3ac62a8e57","modified":1526871012055},{"_id":"public/2017/06/29/Vue/index.html","hash":"d784373ec63f227b13c77eea94f1ba45ccda159e","modified":1526871012055},{"_id":"public/2017/06/28/数组方法/index.html","hash":"db9e86e104ba44429e3856176bf0c786789e5e16","modified":1526871012056},{"_id":"public/2017/05/03/2017年05月03日18-23-40/index.html","hash":"7c2b32c60af14075e7dda8c86761e0e70e585477","modified":1526871012056},{"_id":"public/2017/04/26/2017年04月26日/index.html","hash":"a74b50dfa49f0efd1457955dd94d10e93e841bbf","modified":1526871012056},{"_id":"public/2017/04/24/Javascript中的Form表单知识点总结/index.html","hash":"968b61cc9179dbdcef39dbb6e347a8bc32c14f65","modified":1526871012056},{"_id":"public/2017/04/13/es6新特性概览/index.html","hash":"006276f8b03ff04f1cd5a38bded54c3858fb30d9","modified":1526871012056},{"_id":"public/CNAME","hash":"8cd2e7b8ee9a73a6b3d0d7467f6db17d5f445730","modified":1526871012070},{"_id":"public/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1526871012070},{"_id":"public/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1526871012070},{"_id":"public/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1526871012070},{"_id":"public/iconfont/iconfont.svg","hash":"2b6a0b21bf63bdf746130117baf432fcb44ad210","modified":1526871012070},{"_id":"public/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1526871012070},{"_id":"public/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1526871012070},{"_id":"public/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1526871012455},{"_id":"public/css/highlight.css","hash":"932879716cbce6f9a1b830070ed514082398f1ca","modified":1526871012467},{"_id":"public/js/search.json.js","hash":"a0e8dfee9b9845aabd64360d497df7c0767b7235","modified":1526871012467},{"_id":"public/js/toctotop.js","hash":"ad6386bc746ff375715ca9da17af4716ea86e06a","modified":1526871012467},{"_id":"public/js/totop.js","hash":"5b1131830209c2daaf6fe34c5e39ab7c1059bfa4","modified":1526871012467},{"_id":"public/css/style.css","hash":"45a02c24123d7107ed700c695506d5ef7c274fc1","modified":1526871012467}],"Category":[{"name":"zh_CN","_id":"cjhfnkqc40023lyfyzhjc7vvu"},{"name":"javascript","parent":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqck002dlyfy4cqlhu0e"},{"name":"angular","parent":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqco002hlyfyqrhe1cch"},{"name":"react","parent":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqcy002vlyfyuqvf08iy"}],"Data":[],"Page":[],"Post":[{"title":"HTML5 新特性","date":"2017-07-30T04:09:09.000Z","comments":1,"_content":"\n>今天来谈谈前端面试中基本上每次一面的时候都会被问到的一个问题，那就是html5的新特性。这个是学习前端必须掌握的基础知识。\n\n\n# 新增的元素\n\nhtml5新增了一些语义化更好的标签元素。\n\n## 结构元素\n\n>article元素，表示页面中的一块与上下文不相关的独立内容，比如博客中的一篇文章。\naside元素，表示article内容之外的内容，辅助信息。\nheader元素，表示页面中一个内容区块或整个页面的页眉。\nhgroup元素，用于对页面中一个区块或整个页面的标题进行组合。\nfooter元素，表示页面中一个内容区块或整个页面的页脚。\nfigure元素，表示媒介内容的分组，以及它们的标题。\nsection元素，表示页面中一个内容区块，比如章节。\nnav元素，表示页面中的导航链接。\n\n## 其他元素\n\n<!--more-->\n\n>video元素，用来定义视频。\naudio元素，用来定义音频。\ncanvas元素，用来展示图形，该元素本身没有行为，仅提供一块画布。\nembed元素，用来插入各种多媒体，格式可以是Midi、Wav、AIFF、AU、MP3等。\nmark元素，用来展示高亮的文字。\nprogress元素，用来展示任何类型的任务的进度。\nmeter元素，表示度量衡，定义预定义范围内的度量。\ntime元素，用来展示日期或者时间。\ncommand元素，表示命令按钮。\ndetails元素，用来展示用户要求得到并且可以得到的细节信息。\nsummary元素，用来为details元素定义可见的标题。\ndatalist元素，用来展示可选的数据列表，与input元素配合使用，可以制作出输入值的下拉列表。\ndatagrid元素，也用来展示可选的数据列表，以树形列表的形式来显示。\nkeygen元素，表示生成密匙。\noutput元素，表示不同类型的输出。\nsource元素，为媒介元素定义媒介资源。\nmenu元素，表示菜单列表。\nruby元素，表示ruby注释， rt元素表示字符的解释或发音。 rp元素在ruby注释中使用，以定义不支持ruby元素的浏览器所显示的内容。\nwbr元素，表示软换行。与br元素的区别是：br元素表示此处必须换行，而wbr元素的意思是浏览器窗口或父级元素的宽度够宽时。不进行换行，而当宽度不够时，主动在此处进行换行。\nbdi元素，定义文本的文本方向，使其脱离其周围文本的方向设置。\ndialog元素，表示对话框或窗口。\n\n## 废除的元素\n\nhtml5中废除了一些纯表现的元素，只有部分浏览器支持的元素还有一些会对可用性产生负面影响的元素。\n\n## 纯表现元素\n\n纯表现的元素就是那些可以用css替代的元素。basefont、big、center、font、s、strike、tt、u这些元素，他们的功能都是纯粹为页面展示服务的，html5提倡把页面展示性功能放在css样式表中统一处理，所以将这些元素废除，用css样式进行替代。\n\n对可用性产生负面影响的元素\n\n对于frameset元素、frame元素与noframes元素，由于frame框架对网页可用性存在负面影响，在html5中已不支持frame框架，只支持iframe框架，html5中同时将frameset、frame和noframes这三个元素废除。\n\n只有部分浏览器支持的元素\n\n对于applet、bgsound、blink、marquee等元素，由于只有部分浏览器支持，特别是bgsound元素以及marquee元素，只被IE支持，所以在html5中被废除。其中applet元素可由embed元素或object元素替代，bgsound元素可由audio元素替代，marquee可以由javascript编程的方式替代。\n\n## 新增的API\n\n### Canvas API\n\n上文提到的canvas元素可以为页面提供一块画布来展示图形。结合Canvas API，就可以在这块画布上动态生成和展示各种图形、图表、图像以及动画了。Canvas本质上是位图画布，不可缩放，绘制出来的对象不属于页面DOM结构或者任何命名空间。不需要将每个图元当做对象存储，执行性能非常好。\n\n利用Canvas API进行绘图，首先要获取canvas元素的上下文，然后用该上下文中封装的各种绘图功能进行绘图。\n\n~~~html\n<canvas id=\"canvas\">替代内容</canvas>\n<script>\n    var canvas = document.getElementById('canvas');\n    var context =canvas.getContext(\"2d\"); // 获取上下文\n    //设置纯色\n    context.fillStyle = \"red\";\n    context.strokeStyle = \"blue\";\n    // 实践表明在不设置fillStyle下的默认fillStyle为black\n    context.fillRect(0, 0, 100, 100);\n    // 实践表明在不设置strokeStyle下的默认strokeStyle为black\n    context.strokeRect(120, 0, 100, 100);\n</script>\n~~~\n\n### SVG\n\nSVG是html5的另一项图形功能，它是一种标准的矢量图形，是一种文件格式，有自己的API。html5引入了内联SVG，使得SVG元素可以直接出现在html标记中。\n\n~~~html\n<svg height=100 width=100><circle cx=50 cy=50 r=50 /></svg>\n~~~\n\n### 音频和视频\n\naudio和video元素的出现让html5的媒体应用多了新选择，开发人员不必使用插件就能播放音频和视频。对于这两个元素，html5规范提供了通用、完整、可脚本化控制的API。\nhtml5规范出来之前，在页面中播放视频的典型方式是使用Flash、QuickTime或者Windows Media插件往html中嵌入音频视频，相对这种方式，使用html5的媒体标签有两大好处。\n\n作为浏览器原生支持的功能，新的audio和video元素无需安装。\n媒体元素想Web页面提供了通用、集成和可脚本化控制的API。\n~~~html\n<video src=\"video.webm\" controls>\n    <object data=\"videoplayer.swf\" type=\"application/x-shockwave-flash\">\n        <param name=\"movie\" value=\"video.swf\" />\n    </object>\n    Your browser does not support HTML5 video.\n</video>\n~~~\n\n### 浏览器支持性检测\n\n浏览器检测是否支持audio元素或者video元素最简单的方式是用脚本动态创建它，然后检测特定函数是否存在\n~~~js\nvar hasVideo = !!(document.createElement('video').canPlayType);\nGeolocation API\n~~~\n\n>html5的Geolocation API（地理定位API），可以请求用户共享他们的位置。使用方法非常简单，如果用户同意，浏览器就会返回位置信息，该位置信息是通过支持html5地理定位功能的底层设备（如笔记本电脑或手机）提供给浏览器的。位置信息由纬度、经度坐标和一些其他元数据组成。\n\n\n位置信息从何而来\n\nGeolocation API不指定设备使用哪种底层技术来定位应用程序的用户。相反，它只是用于检索位置信息的API，而且通过该API检索到的数据只具有某种程度的准确性，并不能保证设备返回的位置是精确的。设备可以使用下列数据源：\n\nIP地址\n三维坐标\nGPS\n从RFID、WiFi和蓝牙到WiFi的MAC地址\nGSM或CDMA手机的ID\n用户自定义数据\n使用方法\n\n~~~js\n// 一次更新\nnavigator.geolocation.getCurrentPosition(updateLocation, handleLocationEror);\nfunction updateLocation(position) {\n    var latitude = position.coords.latitude;     // 纬度\n    var longitude = position.coords.longitude;   // 经度\n    var accuracy = position.coords.accuracy;     // 准确度\n    var timestamp = position.coords.timestamp;   // 时间戳\n}\n// 错误处理函数\nfunction handleLocationEror(error) {\n    ....\n}\n// 重复更新\nnavigator.geolocation.watchPosition(updateLocation, handleLocationEror);\n// 不再接受位置更新\nnavigator.geolocation.clearWatch(watchId);\n~~~\n\n### Communication API\n\n#### 跨文档消息传递\n\n出于安全方面的考虑，运行在同一浏览器中的框架、标签页、窗口间的通信一直都受到了严格的限制。然而，现实中存在一些合理的让不同站点的内容能在浏览器内进行交互的需求。这种情形下，如果浏览器内部能提供直接的通信机制，就能更好地组织这些应用。\nhtml5中引入了一种新功能，跨文档消息通信，可以确保iframe、标签页、窗口间安全地进行跨源通信。postMessage API为发送消息的标准方式，发送消息非常简单：\n\n~~~js\nwindow.postMessage('Hello, world', 'http://www.example.com/');\n~~~\n\n接收消息时，仅需在页面中增加一个事件处理函数。当某个消息到达时，通过检查消息的来源来决定是否对这条消息进行处理。\n\n~~~js\nwindow.addEventListener(\"message\", messageHandler, true);\nfunction messageHandler(e) {\n    switch(e.origin) {\n        case \"friend.example.com\":\n        // 处理消息\n        processMessage(e.data);\n        break;\n    default: \n        // 消息来源无法识别\n        // 消息被忽略\n    }\n}\n~~~\n\n消息事件是一个拥有data(数据)和origin(源)属性的DOM事件。data属性是发送方传递的实际消息，而origin属性是发送来源。\n\n### XMLHttpRequest Level2\n\nXMLHttpRequest API使得Ajax技术成为可能，作为XMLHttpRequest的改进版，XMLHttpRequest Level2在功能上有了很大的改进。主要两个方面：\n\n>跨源XMLHttpRequest\n进度事件\n跨源XMLHttpRequest\n\n过去，XMLHttpRequest仅限于同源通信，XMLHttpRequest Level2通过CORS实现了跨源XMLHttpRequest。跨源HTTP请求包含一个Origin头部，它为服务器提供HTTP请求的源信息。\n\n### WebSockets API\n\nWebSockets是html5中最强大的通信功能，它定义了一个全双工通信信道，仅通过Web上的一个Socket即可进行通信。\n\n### WebSockets握手\n\n为了建立WebSockets通信，客户端和服务器在初始握手时，将HTTP协议升级到WebSocket协议。一旦连接建立成功，就可以在全双工模式下在客户端和服务器之间来回传递WebSocket消息。\n\n### WebSockets接口\n\n除了对WebSockets协议定义外，该规范还同时定义了用于JavaScript应用程序的WebSocket接口。WebSockets接口的使用很简单。要连接远程主机，只需要新建一个WebSocket实例，提供希望连接的对端URL。\n\n## Forms API\n\n### 新表单元素\n\ntel元素，表示电话号码。\nemail元素，表示电子邮件地址文本框。\nurl元素，表示网页的url。\nsearch元素，用于搜索引擎，比如在站点顶部显示的搜索框。\nrange元素，特定值范围内的数值选择器，典型的显示方式是滑动条。\nnumber元素，只包含数值的字段。\n\n### 未来的表单元素\n\ncolor元素，颜色选择器，基于调色盘或者取色板进行选择。\ndatetime元素，显示完整的日期和时间，包括时区。\ndatetime-local，显示日期和时间。\ntime元素，不含时区的时间选择器和指示器。\ndate元素，日期选择器。\nweek元素，某年中的周选择器。\nmonth元素，某年中的月选择器。\n新的表单特性和函数\n\n### placeholder\n\n当用户还没输入值的时候，输入型控件可以通过placeholder特性向用户显示描述性说明或者提示信息。\n~~~html\n<input name=\"name\" placeholder=\"First and last name\">\n~~~\n### autocomplete\n\n>浏览器通过autocomplete特性能够知晓是否应该保存输入值以备将来使用。\n\n### autofocus\n\n>通过autofocus特性可以指定某个表单元素获得输入焦点，每个页面上只允许出现一个autofocus特性，如果设置了多个，则相当于未指定此行为。\n\n### spellcheck\n\n>可对带有文本内容的输入控件和textarea空间控制spellcheck属性。设置完后，会询问浏览器是否应该给出拼写检查结果反馈。spellcheck属性需要赋值。\n\n### list特性和datalist元素\n\n通过组合使用list特性和datalist元素，开发人员能够为某个输入型控件构造一张选值列表。\n~~~html\n<datalist id=\"contactList\">\n    <option value=\"a@qq.com\"></option>\n    <option value=\"b@qq.com\"></option>\n</datalist>\n<input type=\"email\" id=\"contatcs\" list=\"contactList\">\n~~~\n\n### min和max\n\n>通过设置min和max特性，可以将range输入框的数值输入范围限定在最低值和最高值之间。可以只设置一个，也可以两个都设置，也可以都不设置。\n\n### step\n\n对于输入型控件，设置其step特性能够指定输入值递增或者递减的粒度。\n\n### required\n\n一旦为某输入型控件设置了required特性，那么此项必填，否则无法提交表单。\n\n## 拖放API\n\n### draggable属性\n\n>如果网页元素的draggable元素为true，这个元素就是可以拖动的。\n\n~~~html\n<div draggable=\"true\">Draggable Div</div>\n~~~\n\n### 拖放事件\n\n拖动过程会触发很多事件，主要有下面这些：\n\n>dragstart：网页元素开始拖动时触发。\ndrag：被拖动的元素在拖动过程中持续触发。\ndragenter：被拖动的元素进入目标元素时触发，应在目标元素监听该事件。\ndragleave：被拖动的元素离开目标元素时触发，应在目标元素监听该事件。\ndragover：被拖动元素停留在目标元素之中时持续触发，应在目标元素监听该事件。\ndrap：被拖动元素或从文件系统选中的文件，拖放落下时触发。\ndragend：网页元素拖动结束时触发。\n\n~~~js\ndraggableElement.addEventListener('dragstart', function(e) {\n    console.log('拖动开始！');\n});\n~~~\n\n#### dataTransfer对象\n\n拖动过程中，回调函数接受的事件参数，有一个dataTransfer属性，指向一个对象，包含与拖动相关的各种信息。\n~~~js\ndraggableElement.addEventListener('dragstart', function(event) {\n    event.dataTransfer.setData('text', 'Hello World!');\n});\n~~~\n##### dataTransfer对象的属性有：\n\ndropEffect：拖放的操作类型，决定了浏览器如何显示鼠标形状，可能的值为copy、move、link和none。\neffectAllowed：指定所允许的操作，可能的值为copy、move、link、copyLink、copyMove、linkMove、all、none和uninitialized（默认值，等同于all，即允许一切操作）。\nfiles：包含一个FileList对象，表示拖放所涉及的文件，主要用于处理从文件系统拖入浏览器的文件。\ntypes：储存在DataTransfer对象的数据的类型。\n\n##### dataTransfer对象的方法有：\n\nsetData(format, data)：在dataTransfer对象上储存数据。第一个参数format用来指定储存的数据类型，比如text、url、text/html等。\ngetData(format)：从dataTransfer对象取出数据。\nclearData(format)：清除dataTransfer对象所储存的数据。如果指定了format参数，则只清除该格式的数据，否则清除所有数据。\nsetDragImage(imgElement, x, y)：指定拖动过程中显示的图像。默认情况下，许多浏览器显示一个被拖动元素的半透明版本。参数imgElement必须是一个图像元素，而不是指向图像的路径，参数x和y表示图像相对于鼠标的位置。\n## Web Workers API\n\nJavascript是单线程的。因此，持续时间较长的计算，回阻塞UI线程，进而导致无法在文本框中填入文本，单击按钮等，并且在大多数浏览器中，除非控制权返回，否则无法打开新的标签页。该问题的解决方案是Web Workers，可以让Web应用程序具备后台处理能力，对多线程的支持性非常好。\n\n但是在Web Workers中执行的脚本不能访问该页面的window对象，也就是Web Workers不能直接访问Web页面和DOM API。虽然Web Workers不会导致浏览器UI停止响应，但是仍然会消耗CPU周期，导致系统反应速度变慢。\n\n## Web Storage API\n\nWeb Storage是html5引入的一个非常重要的功能，可以在客户端本地存储数据，类似html4的cookie，但可实现功能要比cookie强大的多。\n\n## sessionStorage\n\n>sessionStorage将数据保存在session中，浏览器关闭数据就消失。\n\n## localStorage\n\n>localStorage则一直将数据保存在客户端本地，除非手动删除，否则一直保存。\n不管是sessionStorage，还是localStorage，可使用的API相同，常用的有如下几个（以localStorage为例）：\n\n保存数据：localStorage.setItem(key,value);\n读取数据：localStorage.getItem(key);\n删除单个数据：localStorage.removeItem(key);\n删除所有数据：localStorage.clear();\n得到某个索引的key：localStorage.key(index);\n","source":"_posts/20170730.md","raw":"---\ntitle: HTML5 新特性\ndate: 2017-07-30 12:09:09\ntags: html\ncomments: true\n---\n\n>今天来谈谈前端面试中基本上每次一面的时候都会被问到的一个问题，那就是html5的新特性。这个是学习前端必须掌握的基础知识。\n\n\n# 新增的元素\n\nhtml5新增了一些语义化更好的标签元素。\n\n## 结构元素\n\n>article元素，表示页面中的一块与上下文不相关的独立内容，比如博客中的一篇文章。\naside元素，表示article内容之外的内容，辅助信息。\nheader元素，表示页面中一个内容区块或整个页面的页眉。\nhgroup元素，用于对页面中一个区块或整个页面的标题进行组合。\nfooter元素，表示页面中一个内容区块或整个页面的页脚。\nfigure元素，表示媒介内容的分组，以及它们的标题。\nsection元素，表示页面中一个内容区块，比如章节。\nnav元素，表示页面中的导航链接。\n\n## 其他元素\n\n<!--more-->\n\n>video元素，用来定义视频。\naudio元素，用来定义音频。\ncanvas元素，用来展示图形，该元素本身没有行为，仅提供一块画布。\nembed元素，用来插入各种多媒体，格式可以是Midi、Wav、AIFF、AU、MP3等。\nmark元素，用来展示高亮的文字。\nprogress元素，用来展示任何类型的任务的进度。\nmeter元素，表示度量衡，定义预定义范围内的度量。\ntime元素，用来展示日期或者时间。\ncommand元素，表示命令按钮。\ndetails元素，用来展示用户要求得到并且可以得到的细节信息。\nsummary元素，用来为details元素定义可见的标题。\ndatalist元素，用来展示可选的数据列表，与input元素配合使用，可以制作出输入值的下拉列表。\ndatagrid元素，也用来展示可选的数据列表，以树形列表的形式来显示。\nkeygen元素，表示生成密匙。\noutput元素，表示不同类型的输出。\nsource元素，为媒介元素定义媒介资源。\nmenu元素，表示菜单列表。\nruby元素，表示ruby注释， rt元素表示字符的解释或发音。 rp元素在ruby注释中使用，以定义不支持ruby元素的浏览器所显示的内容。\nwbr元素，表示软换行。与br元素的区别是：br元素表示此处必须换行，而wbr元素的意思是浏览器窗口或父级元素的宽度够宽时。不进行换行，而当宽度不够时，主动在此处进行换行。\nbdi元素，定义文本的文本方向，使其脱离其周围文本的方向设置。\ndialog元素，表示对话框或窗口。\n\n## 废除的元素\n\nhtml5中废除了一些纯表现的元素，只有部分浏览器支持的元素还有一些会对可用性产生负面影响的元素。\n\n## 纯表现元素\n\n纯表现的元素就是那些可以用css替代的元素。basefont、big、center、font、s、strike、tt、u这些元素，他们的功能都是纯粹为页面展示服务的，html5提倡把页面展示性功能放在css样式表中统一处理，所以将这些元素废除，用css样式进行替代。\n\n对可用性产生负面影响的元素\n\n对于frameset元素、frame元素与noframes元素，由于frame框架对网页可用性存在负面影响，在html5中已不支持frame框架，只支持iframe框架，html5中同时将frameset、frame和noframes这三个元素废除。\n\n只有部分浏览器支持的元素\n\n对于applet、bgsound、blink、marquee等元素，由于只有部分浏览器支持，特别是bgsound元素以及marquee元素，只被IE支持，所以在html5中被废除。其中applet元素可由embed元素或object元素替代，bgsound元素可由audio元素替代，marquee可以由javascript编程的方式替代。\n\n## 新增的API\n\n### Canvas API\n\n上文提到的canvas元素可以为页面提供一块画布来展示图形。结合Canvas API，就可以在这块画布上动态生成和展示各种图形、图表、图像以及动画了。Canvas本质上是位图画布，不可缩放，绘制出来的对象不属于页面DOM结构或者任何命名空间。不需要将每个图元当做对象存储，执行性能非常好。\n\n利用Canvas API进行绘图，首先要获取canvas元素的上下文，然后用该上下文中封装的各种绘图功能进行绘图。\n\n~~~html\n<canvas id=\"canvas\">替代内容</canvas>\n<script>\n    var canvas = document.getElementById('canvas');\n    var context =canvas.getContext(\"2d\"); // 获取上下文\n    //设置纯色\n    context.fillStyle = \"red\";\n    context.strokeStyle = \"blue\";\n    // 实践表明在不设置fillStyle下的默认fillStyle为black\n    context.fillRect(0, 0, 100, 100);\n    // 实践表明在不设置strokeStyle下的默认strokeStyle为black\n    context.strokeRect(120, 0, 100, 100);\n</script>\n~~~\n\n### SVG\n\nSVG是html5的另一项图形功能，它是一种标准的矢量图形，是一种文件格式，有自己的API。html5引入了内联SVG，使得SVG元素可以直接出现在html标记中。\n\n~~~html\n<svg height=100 width=100><circle cx=50 cy=50 r=50 /></svg>\n~~~\n\n### 音频和视频\n\naudio和video元素的出现让html5的媒体应用多了新选择，开发人员不必使用插件就能播放音频和视频。对于这两个元素，html5规范提供了通用、完整、可脚本化控制的API。\nhtml5规范出来之前，在页面中播放视频的典型方式是使用Flash、QuickTime或者Windows Media插件往html中嵌入音频视频，相对这种方式，使用html5的媒体标签有两大好处。\n\n作为浏览器原生支持的功能，新的audio和video元素无需安装。\n媒体元素想Web页面提供了通用、集成和可脚本化控制的API。\n~~~html\n<video src=\"video.webm\" controls>\n    <object data=\"videoplayer.swf\" type=\"application/x-shockwave-flash\">\n        <param name=\"movie\" value=\"video.swf\" />\n    </object>\n    Your browser does not support HTML5 video.\n</video>\n~~~\n\n### 浏览器支持性检测\n\n浏览器检测是否支持audio元素或者video元素最简单的方式是用脚本动态创建它，然后检测特定函数是否存在\n~~~js\nvar hasVideo = !!(document.createElement('video').canPlayType);\nGeolocation API\n~~~\n\n>html5的Geolocation API（地理定位API），可以请求用户共享他们的位置。使用方法非常简单，如果用户同意，浏览器就会返回位置信息，该位置信息是通过支持html5地理定位功能的底层设备（如笔记本电脑或手机）提供给浏览器的。位置信息由纬度、经度坐标和一些其他元数据组成。\n\n\n位置信息从何而来\n\nGeolocation API不指定设备使用哪种底层技术来定位应用程序的用户。相反，它只是用于检索位置信息的API，而且通过该API检索到的数据只具有某种程度的准确性，并不能保证设备返回的位置是精确的。设备可以使用下列数据源：\n\nIP地址\n三维坐标\nGPS\n从RFID、WiFi和蓝牙到WiFi的MAC地址\nGSM或CDMA手机的ID\n用户自定义数据\n使用方法\n\n~~~js\n// 一次更新\nnavigator.geolocation.getCurrentPosition(updateLocation, handleLocationEror);\nfunction updateLocation(position) {\n    var latitude = position.coords.latitude;     // 纬度\n    var longitude = position.coords.longitude;   // 经度\n    var accuracy = position.coords.accuracy;     // 准确度\n    var timestamp = position.coords.timestamp;   // 时间戳\n}\n// 错误处理函数\nfunction handleLocationEror(error) {\n    ....\n}\n// 重复更新\nnavigator.geolocation.watchPosition(updateLocation, handleLocationEror);\n// 不再接受位置更新\nnavigator.geolocation.clearWatch(watchId);\n~~~\n\n### Communication API\n\n#### 跨文档消息传递\n\n出于安全方面的考虑，运行在同一浏览器中的框架、标签页、窗口间的通信一直都受到了严格的限制。然而，现实中存在一些合理的让不同站点的内容能在浏览器内进行交互的需求。这种情形下，如果浏览器内部能提供直接的通信机制，就能更好地组织这些应用。\nhtml5中引入了一种新功能，跨文档消息通信，可以确保iframe、标签页、窗口间安全地进行跨源通信。postMessage API为发送消息的标准方式，发送消息非常简单：\n\n~~~js\nwindow.postMessage('Hello, world', 'http://www.example.com/');\n~~~\n\n接收消息时，仅需在页面中增加一个事件处理函数。当某个消息到达时，通过检查消息的来源来决定是否对这条消息进行处理。\n\n~~~js\nwindow.addEventListener(\"message\", messageHandler, true);\nfunction messageHandler(e) {\n    switch(e.origin) {\n        case \"friend.example.com\":\n        // 处理消息\n        processMessage(e.data);\n        break;\n    default: \n        // 消息来源无法识别\n        // 消息被忽略\n    }\n}\n~~~\n\n消息事件是一个拥有data(数据)和origin(源)属性的DOM事件。data属性是发送方传递的实际消息，而origin属性是发送来源。\n\n### XMLHttpRequest Level2\n\nXMLHttpRequest API使得Ajax技术成为可能，作为XMLHttpRequest的改进版，XMLHttpRequest Level2在功能上有了很大的改进。主要两个方面：\n\n>跨源XMLHttpRequest\n进度事件\n跨源XMLHttpRequest\n\n过去，XMLHttpRequest仅限于同源通信，XMLHttpRequest Level2通过CORS实现了跨源XMLHttpRequest。跨源HTTP请求包含一个Origin头部，它为服务器提供HTTP请求的源信息。\n\n### WebSockets API\n\nWebSockets是html5中最强大的通信功能，它定义了一个全双工通信信道，仅通过Web上的一个Socket即可进行通信。\n\n### WebSockets握手\n\n为了建立WebSockets通信，客户端和服务器在初始握手时，将HTTP协议升级到WebSocket协议。一旦连接建立成功，就可以在全双工模式下在客户端和服务器之间来回传递WebSocket消息。\n\n### WebSockets接口\n\n除了对WebSockets协议定义外，该规范还同时定义了用于JavaScript应用程序的WebSocket接口。WebSockets接口的使用很简单。要连接远程主机，只需要新建一个WebSocket实例，提供希望连接的对端URL。\n\n## Forms API\n\n### 新表单元素\n\ntel元素，表示电话号码。\nemail元素，表示电子邮件地址文本框。\nurl元素，表示网页的url。\nsearch元素，用于搜索引擎，比如在站点顶部显示的搜索框。\nrange元素，特定值范围内的数值选择器，典型的显示方式是滑动条。\nnumber元素，只包含数值的字段。\n\n### 未来的表单元素\n\ncolor元素，颜色选择器，基于调色盘或者取色板进行选择。\ndatetime元素，显示完整的日期和时间，包括时区。\ndatetime-local，显示日期和时间。\ntime元素，不含时区的时间选择器和指示器。\ndate元素，日期选择器。\nweek元素，某年中的周选择器。\nmonth元素，某年中的月选择器。\n新的表单特性和函数\n\n### placeholder\n\n当用户还没输入值的时候，输入型控件可以通过placeholder特性向用户显示描述性说明或者提示信息。\n~~~html\n<input name=\"name\" placeholder=\"First and last name\">\n~~~\n### autocomplete\n\n>浏览器通过autocomplete特性能够知晓是否应该保存输入值以备将来使用。\n\n### autofocus\n\n>通过autofocus特性可以指定某个表单元素获得输入焦点，每个页面上只允许出现一个autofocus特性，如果设置了多个，则相当于未指定此行为。\n\n### spellcheck\n\n>可对带有文本内容的输入控件和textarea空间控制spellcheck属性。设置完后，会询问浏览器是否应该给出拼写检查结果反馈。spellcheck属性需要赋值。\n\n### list特性和datalist元素\n\n通过组合使用list特性和datalist元素，开发人员能够为某个输入型控件构造一张选值列表。\n~~~html\n<datalist id=\"contactList\">\n    <option value=\"a@qq.com\"></option>\n    <option value=\"b@qq.com\"></option>\n</datalist>\n<input type=\"email\" id=\"contatcs\" list=\"contactList\">\n~~~\n\n### min和max\n\n>通过设置min和max特性，可以将range输入框的数值输入范围限定在最低值和最高值之间。可以只设置一个，也可以两个都设置，也可以都不设置。\n\n### step\n\n对于输入型控件，设置其step特性能够指定输入值递增或者递减的粒度。\n\n### required\n\n一旦为某输入型控件设置了required特性，那么此项必填，否则无法提交表单。\n\n## 拖放API\n\n### draggable属性\n\n>如果网页元素的draggable元素为true，这个元素就是可以拖动的。\n\n~~~html\n<div draggable=\"true\">Draggable Div</div>\n~~~\n\n### 拖放事件\n\n拖动过程会触发很多事件，主要有下面这些：\n\n>dragstart：网页元素开始拖动时触发。\ndrag：被拖动的元素在拖动过程中持续触发。\ndragenter：被拖动的元素进入目标元素时触发，应在目标元素监听该事件。\ndragleave：被拖动的元素离开目标元素时触发，应在目标元素监听该事件。\ndragover：被拖动元素停留在目标元素之中时持续触发，应在目标元素监听该事件。\ndrap：被拖动元素或从文件系统选中的文件，拖放落下时触发。\ndragend：网页元素拖动结束时触发。\n\n~~~js\ndraggableElement.addEventListener('dragstart', function(e) {\n    console.log('拖动开始！');\n});\n~~~\n\n#### dataTransfer对象\n\n拖动过程中，回调函数接受的事件参数，有一个dataTransfer属性，指向一个对象，包含与拖动相关的各种信息。\n~~~js\ndraggableElement.addEventListener('dragstart', function(event) {\n    event.dataTransfer.setData('text', 'Hello World!');\n});\n~~~\n##### dataTransfer对象的属性有：\n\ndropEffect：拖放的操作类型，决定了浏览器如何显示鼠标形状，可能的值为copy、move、link和none。\neffectAllowed：指定所允许的操作，可能的值为copy、move、link、copyLink、copyMove、linkMove、all、none和uninitialized（默认值，等同于all，即允许一切操作）。\nfiles：包含一个FileList对象，表示拖放所涉及的文件，主要用于处理从文件系统拖入浏览器的文件。\ntypes：储存在DataTransfer对象的数据的类型。\n\n##### dataTransfer对象的方法有：\n\nsetData(format, data)：在dataTransfer对象上储存数据。第一个参数format用来指定储存的数据类型，比如text、url、text/html等。\ngetData(format)：从dataTransfer对象取出数据。\nclearData(format)：清除dataTransfer对象所储存的数据。如果指定了format参数，则只清除该格式的数据，否则清除所有数据。\nsetDragImage(imgElement, x, y)：指定拖动过程中显示的图像。默认情况下，许多浏览器显示一个被拖动元素的半透明版本。参数imgElement必须是一个图像元素，而不是指向图像的路径，参数x和y表示图像相对于鼠标的位置。\n## Web Workers API\n\nJavascript是单线程的。因此，持续时间较长的计算，回阻塞UI线程，进而导致无法在文本框中填入文本，单击按钮等，并且在大多数浏览器中，除非控制权返回，否则无法打开新的标签页。该问题的解决方案是Web Workers，可以让Web应用程序具备后台处理能力，对多线程的支持性非常好。\n\n但是在Web Workers中执行的脚本不能访问该页面的window对象，也就是Web Workers不能直接访问Web页面和DOM API。虽然Web Workers不会导致浏览器UI停止响应，但是仍然会消耗CPU周期，导致系统反应速度变慢。\n\n## Web Storage API\n\nWeb Storage是html5引入的一个非常重要的功能，可以在客户端本地存储数据，类似html4的cookie，但可实现功能要比cookie强大的多。\n\n## sessionStorage\n\n>sessionStorage将数据保存在session中，浏览器关闭数据就消失。\n\n## localStorage\n\n>localStorage则一直将数据保存在客户端本地，除非手动删除，否则一直保存。\n不管是sessionStorage，还是localStorage，可使用的API相同，常用的有如下几个（以localStorage为例）：\n\n保存数据：localStorage.setItem(key,value);\n读取数据：localStorage.getItem(key);\n删除单个数据：localStorage.removeItem(key);\n删除所有数据：localStorage.clear();\n得到某个索引的key：localStorage.key(index);\n","slug":"20170730","published":1,"updated":"2017-08-01T07:58:05.000Z","layout":"post","photos":[],"link":"","_id":"cjhfnkq5d0000lyfyw2inq4ah","content":"<blockquote>\n<p>今天来谈谈前端面试中基本上每次一面的时候都会被问到的一个问题，那就是html5的新特性。这个是学习前端必须掌握的基础知识。</p>\n</blockquote>\n<h1 id=\"新增的元素\"><a href=\"#新增的元素\" class=\"headerlink\" title=\"新增的元素\"></a>新增的元素</h1><p>html5新增了一些语义化更好的标签元素。</p>\n<h2 id=\"结构元素\"><a href=\"#结构元素\" class=\"headerlink\" title=\"结构元素\"></a>结构元素</h2><blockquote>\n<p>article元素，表示页面中的一块与上下文不相关的独立内容，比如博客中的一篇文章。<br>aside元素，表示article内容之外的内容，辅助信息。<br>header元素，表示页面中一个内容区块或整个页面的页眉。<br>hgroup元素，用于对页面中一个区块或整个页面的标题进行组合。<br>footer元素，表示页面中一个内容区块或整个页面的页脚。<br>figure元素，表示媒介内容的分组，以及它们的标题。<br>section元素，表示页面中一个内容区块，比如章节。<br>nav元素，表示页面中的导航链接。</p>\n</blockquote>\n<h2 id=\"其他元素\"><a href=\"#其他元素\" class=\"headerlink\" title=\"其他元素\"></a>其他元素</h2><a id=\"more\"></a>\n<blockquote>\n<p>video元素，用来定义视频。<br>audio元素，用来定义音频。<br>canvas元素，用来展示图形，该元素本身没有行为，仅提供一块画布。<br>embed元素，用来插入各种多媒体，格式可以是Midi、Wav、AIFF、AU、MP3等。<br>mark元素，用来展示高亮的文字。<br>progress元素，用来展示任何类型的任务的进度。<br>meter元素，表示度量衡，定义预定义范围内的度量。<br>time元素，用来展示日期或者时间。<br>command元素，表示命令按钮。<br>details元素，用来展示用户要求得到并且可以得到的细节信息。<br>summary元素，用来为details元素定义可见的标题。<br>datalist元素，用来展示可选的数据列表，与input元素配合使用，可以制作出输入值的下拉列表。<br>datagrid元素，也用来展示可选的数据列表，以树形列表的形式来显示。<br>keygen元素，表示生成密匙。<br>output元素，表示不同类型的输出。<br>source元素，为媒介元素定义媒介资源。<br>menu元素，表示菜单列表。<br>ruby元素，表示ruby注释， rt元素表示字符的解释或发音。 rp元素在ruby注释中使用，以定义不支持ruby元素的浏览器所显示的内容。<br>wbr元素，表示软换行。与br元素的区别是：br元素表示此处必须换行，而wbr元素的意思是浏览器窗口或父级元素的宽度够宽时。不进行换行，而当宽度不够时，主动在此处进行换行。<br>bdi元素，定义文本的文本方向，使其脱离其周围文本的方向设置。<br>dialog元素，表示对话框或窗口。</p>\n</blockquote>\n<h2 id=\"废除的元素\"><a href=\"#废除的元素\" class=\"headerlink\" title=\"废除的元素\"></a>废除的元素</h2><p>html5中废除了一些纯表现的元素，只有部分浏览器支持的元素还有一些会对可用性产生负面影响的元素。</p>\n<h2 id=\"纯表现元素\"><a href=\"#纯表现元素\" class=\"headerlink\" title=\"纯表现元素\"></a>纯表现元素</h2><p>纯表现的元素就是那些可以用css替代的元素。basefont、big、center、font、s、strike、tt、u这些元素，他们的功能都是纯粹为页面展示服务的，html5提倡把页面展示性功能放在css样式表中统一处理，所以将这些元素废除，用css样式进行替代。</p>\n<p>对可用性产生负面影响的元素</p>\n<p>对于frameset元素、frame元素与noframes元素，由于frame框架对网页可用性存在负面影响，在html5中已不支持frame框架，只支持iframe框架，html5中同时将frameset、frame和noframes这三个元素废除。</p>\n<p>只有部分浏览器支持的元素</p>\n<p>对于applet、bgsound、blink、marquee等元素，由于只有部分浏览器支持，特别是bgsound元素以及marquee元素，只被IE支持，所以在html5中被废除。其中applet元素可由embed元素或object元素替代，bgsound元素可由audio元素替代，marquee可以由javascript编程的方式替代。</p>\n<h2 id=\"新增的API\"><a href=\"#新增的API\" class=\"headerlink\" title=\"新增的API\"></a>新增的API</h2><h3 id=\"Canvas-API\"><a href=\"#Canvas-API\" class=\"headerlink\" title=\"Canvas API\"></a>Canvas API</h3><p>上文提到的canvas元素可以为页面提供一块画布来展示图形。结合Canvas API，就可以在这块画布上动态生成和展示各种图形、图表、图像以及动画了。Canvas本质上是位图画布，不可缩放，绘制出来的对象不属于页面DOM结构或者任何命名空间。不需要将每个图元当做对象存储，执行性能非常好。</p>\n<p>利用Canvas API进行绘图，首先要获取canvas元素的上下文，然后用该上下文中封装的各种绘图功能进行绘图。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas\"</span>&gt;</span>替代内容<span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">    var canvas = document.getElementById('canvas');</div><div class=\"line\">    var context =canvas.getContext(\"2d\"); // 获取上下文</div><div class=\"line\">    //设置纯色</div><div class=\"line\">    context.fillStyle = \"red\";</div><div class=\"line\">    context.strokeStyle = \"blue\";</div><div class=\"line\">    // 实践表明在不设置fillStyle下的默认fillStyle为black</div><div class=\"line\">    context.fillRect(0, 0, 100, 100);</div><div class=\"line\">    // 实践表明在不设置strokeStyle下的默认strokeStyle为black</div><div class=\"line\">    context.strokeRect(120, 0, 100, 100);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"SVG\"><a href=\"#SVG\" class=\"headerlink\" title=\"SVG\"></a>SVG</h3><p>SVG是html5的另一项图形功能，它是一种标准的矢量图形，是一种文件格式，有自己的API。html5引入了内联SVG，使得SVG元素可以直接出现在html标记中。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">height</span>=<span class=\"string\">100</span> <span class=\"attr\">width</span>=<span class=\"string\">100</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">cx</span>=<span class=\"string\">50</span> <span class=\"attr\">cy</span>=<span class=\"string\">50</span> <span class=\"attr\">r</span>=<span class=\"string\">50</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"音频和视频\"><a href=\"#音频和视频\" class=\"headerlink\" title=\"音频和视频\"></a>音频和视频</h3><p>audio和video元素的出现让html5的媒体应用多了新选择，开发人员不必使用插件就能播放音频和视频。对于这两个元素，html5规范提供了通用、完整、可脚本化控制的API。<br>html5规范出来之前，在页面中播放视频的典型方式是使用Flash、QuickTime或者Windows Media插件往html中嵌入音频视频，相对这种方式，使用html5的媒体标签有两大好处。</p>\n<p>作为浏览器原生支持的功能，新的audio和video元素无需安装。<br>媒体元素想Web页面提供了通用、集成和可脚本化控制的API。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">src</span>=<span class=\"string\">\"video.webm\"</span> <span class=\"attr\">controls</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">object</span> <span class=\"attr\">data</span>=<span class=\"string\">\"videoplayer.swf\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"application/x-shockwave-flash\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"movie\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"video.swf\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">object</span>&gt;</span></div><div class=\"line\">    Your browser does not support HTML5 video.</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"浏览器支持性检测\"><a href=\"#浏览器支持性检测\" class=\"headerlink\" title=\"浏览器支持性检测\"></a>浏览器支持性检测</h3><p>浏览器检测是否支持audio元素或者video元素最简单的方式是用脚本动态创建它，然后检测特定函数是否存在<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hasVideo = !!(<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'video'</span>).canPlayType);</div><div class=\"line\">Geolocation API</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>html5的Geolocation API（地理定位API），可以请求用户共享他们的位置。使用方法非常简单，如果用户同意，浏览器就会返回位置信息，该位置信息是通过支持html5地理定位功能的底层设备（如笔记本电脑或手机）提供给浏览器的。位置信息由纬度、经度坐标和一些其他元数据组成。</p>\n</blockquote>\n<p>位置信息从何而来</p>\n<p>Geolocation API不指定设备使用哪种底层技术来定位应用程序的用户。相反，它只是用于检索位置信息的API，而且通过该API检索到的数据只具有某种程度的准确性，并不能保证设备返回的位置是精确的。设备可以使用下列数据源：</p>\n<p>IP地址<br>三维坐标<br>GPS<br>从RFID、WiFi和蓝牙到WiFi的MAC地址<br>GSM或CDMA手机的ID<br>用户自定义数据<br>使用方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 一次更新</span></div><div class=\"line\">navigator.geolocation.getCurrentPosition(updateLocation, handleLocationEror);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateLocation</span>(<span class=\"params\">position</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> latitude = position.coords.latitude;     <span class=\"comment\">// 纬度</span></div><div class=\"line\">    <span class=\"keyword\">var</span> longitude = position.coords.longitude;   <span class=\"comment\">// 经度</span></div><div class=\"line\">    <span class=\"keyword\">var</span> accuracy = position.coords.accuracy;     <span class=\"comment\">// 准确度</span></div><div class=\"line\">    <span class=\"keyword\">var</span> timestamp = position.coords.timestamp;   <span class=\"comment\">// 时间戳</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 错误处理函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleLocationEror</span>(<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">    ....</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 重复更新</span></div><div class=\"line\">navigator.geolocation.watchPosition(updateLocation, handleLocationEror);</div><div class=\"line\"><span class=\"comment\">// 不再接受位置更新</span></div><div class=\"line\">navigator.geolocation.clearWatch(watchId);</div></pre></td></tr></table></figure>\n<h3 id=\"Communication-API\"><a href=\"#Communication-API\" class=\"headerlink\" title=\"Communication API\"></a>Communication API</h3><h4 id=\"跨文档消息传递\"><a href=\"#跨文档消息传递\" class=\"headerlink\" title=\"跨文档消息传递\"></a>跨文档消息传递</h4><p>出于安全方面的考虑，运行在同一浏览器中的框架、标签页、窗口间的通信一直都受到了严格的限制。然而，现实中存在一些合理的让不同站点的内容能在浏览器内进行交互的需求。这种情形下，如果浏览器内部能提供直接的通信机制，就能更好地组织这些应用。<br>html5中引入了一种新功能，跨文档消息通信，可以确保iframe、标签页、窗口间安全地进行跨源通信。postMessage API为发送消息的标准方式，发送消息非常简单：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.postMessage(<span class=\"string\">'Hello, world'</span>, <span class=\"string\">'http://www.example.com/'</span>);</div></pre></td></tr></table></figure>\n<p>接收消息时，仅需在页面中增加一个事件处理函数。当某个消息到达时，通过检查消息的来源来决定是否对这条消息进行处理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"message\"</span>, messageHandler, <span class=\"literal\">true</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">messageHandler</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span>(e.origin) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"friend.example.com\"</span>:</div><div class=\"line\">        <span class=\"comment\">// 处理消息</span></div><div class=\"line\">        processMessage(e.data);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">default</span>: </div><div class=\"line\">        <span class=\"comment\">// 消息来源无法识别</span></div><div class=\"line\">        <span class=\"comment\">// 消息被忽略</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>消息事件是一个拥有data(数据)和origin(源)属性的DOM事件。data属性是发送方传递的实际消息，而origin属性是发送来源。</p>\n<h3 id=\"XMLHttpRequest-Level2\"><a href=\"#XMLHttpRequest-Level2\" class=\"headerlink\" title=\"XMLHttpRequest Level2\"></a>XMLHttpRequest Level2</h3><p>XMLHttpRequest API使得Ajax技术成为可能，作为XMLHttpRequest的改进版，XMLHttpRequest Level2在功能上有了很大的改进。主要两个方面：</p>\n<blockquote>\n<p>跨源XMLHttpRequest<br>进度事件<br>跨源XMLHttpRequest</p>\n</blockquote>\n<p>过去，XMLHttpRequest仅限于同源通信，XMLHttpRequest Level2通过CORS实现了跨源XMLHttpRequest。跨源HTTP请求包含一个Origin头部，它为服务器提供HTTP请求的源信息。</p>\n<h3 id=\"WebSockets-API\"><a href=\"#WebSockets-API\" class=\"headerlink\" title=\"WebSockets API\"></a>WebSockets API</h3><p>WebSockets是html5中最强大的通信功能，它定义了一个全双工通信信道，仅通过Web上的一个Socket即可进行通信。</p>\n<h3 id=\"WebSockets握手\"><a href=\"#WebSockets握手\" class=\"headerlink\" title=\"WebSockets握手\"></a>WebSockets握手</h3><p>为了建立WebSockets通信，客户端和服务器在初始握手时，将HTTP协议升级到WebSocket协议。一旦连接建立成功，就可以在全双工模式下在客户端和服务器之间来回传递WebSocket消息。</p>\n<h3 id=\"WebSockets接口\"><a href=\"#WebSockets接口\" class=\"headerlink\" title=\"WebSockets接口\"></a>WebSockets接口</h3><p>除了对WebSockets协议定义外，该规范还同时定义了用于JavaScript应用程序的WebSocket接口。WebSockets接口的使用很简单。要连接远程主机，只需要新建一个WebSocket实例，提供希望连接的对端URL。</p>\n<h2 id=\"Forms-API\"><a href=\"#Forms-API\" class=\"headerlink\" title=\"Forms API\"></a>Forms API</h2><h3 id=\"新表单元素\"><a href=\"#新表单元素\" class=\"headerlink\" title=\"新表单元素\"></a>新表单元素</h3><p>tel元素，表示电话号码。<br>email元素，表示电子邮件地址文本框。<br>url元素，表示网页的url。<br>search元素，用于搜索引擎，比如在站点顶部显示的搜索框。<br>range元素，特定值范围内的数值选择器，典型的显示方式是滑动条。<br>number元素，只包含数值的字段。</p>\n<h3 id=\"未来的表单元素\"><a href=\"#未来的表单元素\" class=\"headerlink\" title=\"未来的表单元素\"></a>未来的表单元素</h3><p>color元素，颜色选择器，基于调色盘或者取色板进行选择。<br>datetime元素，显示完整的日期和时间，包括时区。<br>datetime-local，显示日期和时间。<br>time元素，不含时区的时间选择器和指示器。<br>date元素，日期选择器。<br>week元素，某年中的周选择器。<br>month元素，某年中的月选择器。<br>新的表单特性和函数</p>\n<h3 id=\"placeholder\"><a href=\"#placeholder\" class=\"headerlink\" title=\"placeholder\"></a>placeholder</h3><p>当用户还没输入值的时候，输入型控件可以通过placeholder特性向用户显示描述性说明或者提示信息。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"First and last name\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"autocomplete\"><a href=\"#autocomplete\" class=\"headerlink\" title=\"autocomplete\"></a>autocomplete</h3><blockquote>\n<p>浏览器通过autocomplete特性能够知晓是否应该保存输入值以备将来使用。</p>\n</blockquote>\n<h3 id=\"autofocus\"><a href=\"#autofocus\" class=\"headerlink\" title=\"autofocus\"></a>autofocus</h3><blockquote>\n<p>通过autofocus特性可以指定某个表单元素获得输入焦点，每个页面上只允许出现一个autofocus特性，如果设置了多个，则相当于未指定此行为。</p>\n</blockquote>\n<h3 id=\"spellcheck\"><a href=\"#spellcheck\" class=\"headerlink\" title=\"spellcheck\"></a>spellcheck</h3><blockquote>\n<p>可对带有文本内容的输入控件和textarea空间控制spellcheck属性。设置完后，会询问浏览器是否应该给出拼写检查结果反馈。spellcheck属性需要赋值。</p>\n</blockquote>\n<h3 id=\"list特性和datalist元素\"><a href=\"#list特性和datalist元素\" class=\"headerlink\" title=\"list特性和datalist元素\"></a>list特性和datalist元素</h3><p>通过组合使用list特性和datalist元素，开发人员能够为某个输入型控件构造一张选值列表。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">datalist</span> <span class=\"attr\">id</span>=<span class=\"string\">\"contactList\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"a@qq.com\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"b@qq.com\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">datalist</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"contatcs\"</span> <span class=\"attr\">list</span>=<span class=\"string\">\"contactList\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"min和max\"><a href=\"#min和max\" class=\"headerlink\" title=\"min和max\"></a>min和max</h3><blockquote>\n<p>通过设置min和max特性，可以将range输入框的数值输入范围限定在最低值和最高值之间。可以只设置一个，也可以两个都设置，也可以都不设置。</p>\n</blockquote>\n<h3 id=\"step\"><a href=\"#step\" class=\"headerlink\" title=\"step\"></a>step</h3><p>对于输入型控件，设置其step特性能够指定输入值递增或者递减的粒度。</p>\n<h3 id=\"required\"><a href=\"#required\" class=\"headerlink\" title=\"required\"></a>required</h3><p>一旦为某输入型控件设置了required特性，那么此项必填，否则无法提交表单。</p>\n<h2 id=\"拖放API\"><a href=\"#拖放API\" class=\"headerlink\" title=\"拖放API\"></a>拖放API</h2><h3 id=\"draggable属性\"><a href=\"#draggable属性\" class=\"headerlink\" title=\"draggable属性\"></a>draggable属性</h3><blockquote>\n<p>如果网页元素的draggable元素为true，这个元素就是可以拖动的。</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">draggable</span>=<span class=\"string\">\"true\"</span>&gt;</span>Draggable Div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"拖放事件\"><a href=\"#拖放事件\" class=\"headerlink\" title=\"拖放事件\"></a>拖放事件</h3><p>拖动过程会触发很多事件，主要有下面这些：</p>\n<blockquote>\n<p>dragstart：网页元素开始拖动时触发。<br>drag：被拖动的元素在拖动过程中持续触发。<br>dragenter：被拖动的元素进入目标元素时触发，应在目标元素监听该事件。<br>dragleave：被拖动的元素离开目标元素时触发，应在目标元素监听该事件。<br>dragover：被拖动元素停留在目标元素之中时持续触发，应在目标元素监听该事件。<br>drap：被拖动元素或从文件系统选中的文件，拖放落下时触发。<br>dragend：网页元素拖动结束时触发。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">draggableElement.addEventListener(<span class=\"string\">'dragstart'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'拖动开始！'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"dataTransfer对象\"><a href=\"#dataTransfer对象\" class=\"headerlink\" title=\"dataTransfer对象\"></a>dataTransfer对象</h4><p>拖动过程中，回调函数接受的事件参数，有一个dataTransfer属性，指向一个对象，包含与拖动相关的各种信息。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">draggableElement.addEventListener(<span class=\"string\">'dragstart'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">    event.dataTransfer.setData(<span class=\"string\">'text'</span>, <span class=\"string\">'Hello World!'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h5 id=\"dataTransfer对象的属性有：\"><a href=\"#dataTransfer对象的属性有：\" class=\"headerlink\" title=\"dataTransfer对象的属性有：\"></a>dataTransfer对象的属性有：</h5><p>dropEffect：拖放的操作类型，决定了浏览器如何显示鼠标形状，可能的值为copy、move、link和none。<br>effectAllowed：指定所允许的操作，可能的值为copy、move、link、copyLink、copyMove、linkMove、all、none和uninitialized（默认值，等同于all，即允许一切操作）。<br>files：包含一个FileList对象，表示拖放所涉及的文件，主要用于处理从文件系统拖入浏览器的文件。<br>types：储存在DataTransfer对象的数据的类型。</p>\n<h5 id=\"dataTransfer对象的方法有：\"><a href=\"#dataTransfer对象的方法有：\" class=\"headerlink\" title=\"dataTransfer对象的方法有：\"></a>dataTransfer对象的方法有：</h5><p>setData(format, data)：在dataTransfer对象上储存数据。第一个参数format用来指定储存的数据类型，比如text、url、text/html等。<br>getData(format)：从dataTransfer对象取出数据。<br>clearData(format)：清除dataTransfer对象所储存的数据。如果指定了format参数，则只清除该格式的数据，否则清除所有数据。<br>setDragImage(imgElement, x, y)：指定拖动过程中显示的图像。默认情况下，许多浏览器显示一个被拖动元素的半透明版本。参数imgElement必须是一个图像元素，而不是指向图像的路径，参数x和y表示图像相对于鼠标的位置。</p>\n<h2 id=\"Web-Workers-API\"><a href=\"#Web-Workers-API\" class=\"headerlink\" title=\"Web Workers API\"></a>Web Workers API</h2><p>Javascript是单线程的。因此，持续时间较长的计算，回阻塞UI线程，进而导致无法在文本框中填入文本，单击按钮等，并且在大多数浏览器中，除非控制权返回，否则无法打开新的标签页。该问题的解决方案是Web Workers，可以让Web应用程序具备后台处理能力，对多线程的支持性非常好。</p>\n<p>但是在Web Workers中执行的脚本不能访问该页面的window对象，也就是Web Workers不能直接访问Web页面和DOM API。虽然Web Workers不会导致浏览器UI停止响应，但是仍然会消耗CPU周期，导致系统反应速度变慢。</p>\n<h2 id=\"Web-Storage-API\"><a href=\"#Web-Storage-API\" class=\"headerlink\" title=\"Web Storage API\"></a>Web Storage API</h2><p>Web Storage是html5引入的一个非常重要的功能，可以在客户端本地存储数据，类似html4的cookie，但可实现功能要比cookie强大的多。</p>\n<h2 id=\"sessionStorage\"><a href=\"#sessionStorage\" class=\"headerlink\" title=\"sessionStorage\"></a>sessionStorage</h2><blockquote>\n<p>sessionStorage将数据保存在session中，浏览器关闭数据就消失。</p>\n</blockquote>\n<h2 id=\"localStorage\"><a href=\"#localStorage\" class=\"headerlink\" title=\"localStorage\"></a>localStorage</h2><blockquote>\n<p>localStorage则一直将数据保存在客户端本地，除非手动删除，否则一直保存。<br>不管是sessionStorage，还是localStorage，可使用的API相同，常用的有如下几个（以localStorage为例）：</p>\n</blockquote>\n<p>保存数据：localStorage.setItem(key,value);<br>读取数据：localStorage.getItem(key);<br>删除单个数据：localStorage.removeItem(key);<br>删除所有数据：localStorage.clear();<br>得到某个索引的key：localStorage.key(index);</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>今天来谈谈前端面试中基本上每次一面的时候都会被问到的一个问题，那就是html5的新特性。这个是学习前端必须掌握的基础知识。</p>\n</blockquote>\n<h1 id=\"新增的元素\"><a href=\"#新增的元素\" class=\"headerlink\" title=\"新增的元素\"></a>新增的元素</h1><p>html5新增了一些语义化更好的标签元素。</p>\n<h2 id=\"结构元素\"><a href=\"#结构元素\" class=\"headerlink\" title=\"结构元素\"></a>结构元素</h2><blockquote>\n<p>article元素，表示页面中的一块与上下文不相关的独立内容，比如博客中的一篇文章。<br>aside元素，表示article内容之外的内容，辅助信息。<br>header元素，表示页面中一个内容区块或整个页面的页眉。<br>hgroup元素，用于对页面中一个区块或整个页面的标题进行组合。<br>footer元素，表示页面中一个内容区块或整个页面的页脚。<br>figure元素，表示媒介内容的分组，以及它们的标题。<br>section元素，表示页面中一个内容区块，比如章节。<br>nav元素，表示页面中的导航链接。</p>\n</blockquote>\n<h2 id=\"其他元素\"><a href=\"#其他元素\" class=\"headerlink\" title=\"其他元素\"></a>其他元素</h2>","more":"<blockquote>\n<p>video元素，用来定义视频。<br>audio元素，用来定义音频。<br>canvas元素，用来展示图形，该元素本身没有行为，仅提供一块画布。<br>embed元素，用来插入各种多媒体，格式可以是Midi、Wav、AIFF、AU、MP3等。<br>mark元素，用来展示高亮的文字。<br>progress元素，用来展示任何类型的任务的进度。<br>meter元素，表示度量衡，定义预定义范围内的度量。<br>time元素，用来展示日期或者时间。<br>command元素，表示命令按钮。<br>details元素，用来展示用户要求得到并且可以得到的细节信息。<br>summary元素，用来为details元素定义可见的标题。<br>datalist元素，用来展示可选的数据列表，与input元素配合使用，可以制作出输入值的下拉列表。<br>datagrid元素，也用来展示可选的数据列表，以树形列表的形式来显示。<br>keygen元素，表示生成密匙。<br>output元素，表示不同类型的输出。<br>source元素，为媒介元素定义媒介资源。<br>menu元素，表示菜单列表。<br>ruby元素，表示ruby注释， rt元素表示字符的解释或发音。 rp元素在ruby注释中使用，以定义不支持ruby元素的浏览器所显示的内容。<br>wbr元素，表示软换行。与br元素的区别是：br元素表示此处必须换行，而wbr元素的意思是浏览器窗口或父级元素的宽度够宽时。不进行换行，而当宽度不够时，主动在此处进行换行。<br>bdi元素，定义文本的文本方向，使其脱离其周围文本的方向设置。<br>dialog元素，表示对话框或窗口。</p>\n</blockquote>\n<h2 id=\"废除的元素\"><a href=\"#废除的元素\" class=\"headerlink\" title=\"废除的元素\"></a>废除的元素</h2><p>html5中废除了一些纯表现的元素，只有部分浏览器支持的元素还有一些会对可用性产生负面影响的元素。</p>\n<h2 id=\"纯表现元素\"><a href=\"#纯表现元素\" class=\"headerlink\" title=\"纯表现元素\"></a>纯表现元素</h2><p>纯表现的元素就是那些可以用css替代的元素。basefont、big、center、font、s、strike、tt、u这些元素，他们的功能都是纯粹为页面展示服务的，html5提倡把页面展示性功能放在css样式表中统一处理，所以将这些元素废除，用css样式进行替代。</p>\n<p>对可用性产生负面影响的元素</p>\n<p>对于frameset元素、frame元素与noframes元素，由于frame框架对网页可用性存在负面影响，在html5中已不支持frame框架，只支持iframe框架，html5中同时将frameset、frame和noframes这三个元素废除。</p>\n<p>只有部分浏览器支持的元素</p>\n<p>对于applet、bgsound、blink、marquee等元素，由于只有部分浏览器支持，特别是bgsound元素以及marquee元素，只被IE支持，所以在html5中被废除。其中applet元素可由embed元素或object元素替代，bgsound元素可由audio元素替代，marquee可以由javascript编程的方式替代。</p>\n<h2 id=\"新增的API\"><a href=\"#新增的API\" class=\"headerlink\" title=\"新增的API\"></a>新增的API</h2><h3 id=\"Canvas-API\"><a href=\"#Canvas-API\" class=\"headerlink\" title=\"Canvas API\"></a>Canvas API</h3><p>上文提到的canvas元素可以为页面提供一块画布来展示图形。结合Canvas API，就可以在这块画布上动态生成和展示各种图形、图表、图像以及动画了。Canvas本质上是位图画布，不可缩放，绘制出来的对象不属于页面DOM结构或者任何命名空间。不需要将每个图元当做对象存储，执行性能非常好。</p>\n<p>利用Canvas API进行绘图，首先要获取canvas元素的上下文，然后用该上下文中封装的各种绘图功能进行绘图。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas\"</span>&gt;</span>替代内容<span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">    var canvas = document.getElementById('canvas');</div><div class=\"line\">    var context =canvas.getContext(\"2d\"); // 获取上下文</div><div class=\"line\">    //设置纯色</div><div class=\"line\">    context.fillStyle = \"red\";</div><div class=\"line\">    context.strokeStyle = \"blue\";</div><div class=\"line\">    // 实践表明在不设置fillStyle下的默认fillStyle为black</div><div class=\"line\">    context.fillRect(0, 0, 100, 100);</div><div class=\"line\">    // 实践表明在不设置strokeStyle下的默认strokeStyle为black</div><div class=\"line\">    context.strokeRect(120, 0, 100, 100);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"SVG\"><a href=\"#SVG\" class=\"headerlink\" title=\"SVG\"></a>SVG</h3><p>SVG是html5的另一项图形功能，它是一种标准的矢量图形，是一种文件格式，有自己的API。html5引入了内联SVG，使得SVG元素可以直接出现在html标记中。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">height</span>=<span class=\"string\">100</span> <span class=\"attr\">width</span>=<span class=\"string\">100</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">cx</span>=<span class=\"string\">50</span> <span class=\"attr\">cy</span>=<span class=\"string\">50</span> <span class=\"attr\">r</span>=<span class=\"string\">50</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"音频和视频\"><a href=\"#音频和视频\" class=\"headerlink\" title=\"音频和视频\"></a>音频和视频</h3><p>audio和video元素的出现让html5的媒体应用多了新选择，开发人员不必使用插件就能播放音频和视频。对于这两个元素，html5规范提供了通用、完整、可脚本化控制的API。<br>html5规范出来之前，在页面中播放视频的典型方式是使用Flash、QuickTime或者Windows Media插件往html中嵌入音频视频，相对这种方式，使用html5的媒体标签有两大好处。</p>\n<p>作为浏览器原生支持的功能，新的audio和video元素无需安装。<br>媒体元素想Web页面提供了通用、集成和可脚本化控制的API。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">src</span>=<span class=\"string\">\"video.webm\"</span> <span class=\"attr\">controls</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">object</span> <span class=\"attr\">data</span>=<span class=\"string\">\"videoplayer.swf\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"application/x-shockwave-flash\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"movie\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"video.swf\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">object</span>&gt;</span></div><div class=\"line\">    Your browser does not support HTML5 video.</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"浏览器支持性检测\"><a href=\"#浏览器支持性检测\" class=\"headerlink\" title=\"浏览器支持性检测\"></a>浏览器支持性检测</h3><p>浏览器检测是否支持audio元素或者video元素最简单的方式是用脚本动态创建它，然后检测特定函数是否存在<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hasVideo = !!(<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'video'</span>).canPlayType);</div><div class=\"line\">Geolocation API</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>html5的Geolocation API（地理定位API），可以请求用户共享他们的位置。使用方法非常简单，如果用户同意，浏览器就会返回位置信息，该位置信息是通过支持html5地理定位功能的底层设备（如笔记本电脑或手机）提供给浏览器的。位置信息由纬度、经度坐标和一些其他元数据组成。</p>\n</blockquote>\n<p>位置信息从何而来</p>\n<p>Geolocation API不指定设备使用哪种底层技术来定位应用程序的用户。相反，它只是用于检索位置信息的API，而且通过该API检索到的数据只具有某种程度的准确性，并不能保证设备返回的位置是精确的。设备可以使用下列数据源：</p>\n<p>IP地址<br>三维坐标<br>GPS<br>从RFID、WiFi和蓝牙到WiFi的MAC地址<br>GSM或CDMA手机的ID<br>用户自定义数据<br>使用方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 一次更新</span></div><div class=\"line\">navigator.geolocation.getCurrentPosition(updateLocation, handleLocationEror);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateLocation</span>(<span class=\"params\">position</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> latitude = position.coords.latitude;     <span class=\"comment\">// 纬度</span></div><div class=\"line\">    <span class=\"keyword\">var</span> longitude = position.coords.longitude;   <span class=\"comment\">// 经度</span></div><div class=\"line\">    <span class=\"keyword\">var</span> accuracy = position.coords.accuracy;     <span class=\"comment\">// 准确度</span></div><div class=\"line\">    <span class=\"keyword\">var</span> timestamp = position.coords.timestamp;   <span class=\"comment\">// 时间戳</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 错误处理函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleLocationEror</span>(<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">    ....</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 重复更新</span></div><div class=\"line\">navigator.geolocation.watchPosition(updateLocation, handleLocationEror);</div><div class=\"line\"><span class=\"comment\">// 不再接受位置更新</span></div><div class=\"line\">navigator.geolocation.clearWatch(watchId);</div></pre></td></tr></table></figure>\n<h3 id=\"Communication-API\"><a href=\"#Communication-API\" class=\"headerlink\" title=\"Communication API\"></a>Communication API</h3><h4 id=\"跨文档消息传递\"><a href=\"#跨文档消息传递\" class=\"headerlink\" title=\"跨文档消息传递\"></a>跨文档消息传递</h4><p>出于安全方面的考虑，运行在同一浏览器中的框架、标签页、窗口间的通信一直都受到了严格的限制。然而，现实中存在一些合理的让不同站点的内容能在浏览器内进行交互的需求。这种情形下，如果浏览器内部能提供直接的通信机制，就能更好地组织这些应用。<br>html5中引入了一种新功能，跨文档消息通信，可以确保iframe、标签页、窗口间安全地进行跨源通信。postMessage API为发送消息的标准方式，发送消息非常简单：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.postMessage(<span class=\"string\">'Hello, world'</span>, <span class=\"string\">'http://www.example.com/'</span>);</div></pre></td></tr></table></figure>\n<p>接收消息时，仅需在页面中增加一个事件处理函数。当某个消息到达时，通过检查消息的来源来决定是否对这条消息进行处理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"message\"</span>, messageHandler, <span class=\"literal\">true</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">messageHandler</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span>(e.origin) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"friend.example.com\"</span>:</div><div class=\"line\">        <span class=\"comment\">// 处理消息</span></div><div class=\"line\">        processMessage(e.data);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">default</span>: </div><div class=\"line\">        <span class=\"comment\">// 消息来源无法识别</span></div><div class=\"line\">        <span class=\"comment\">// 消息被忽略</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>消息事件是一个拥有data(数据)和origin(源)属性的DOM事件。data属性是发送方传递的实际消息，而origin属性是发送来源。</p>\n<h3 id=\"XMLHttpRequest-Level2\"><a href=\"#XMLHttpRequest-Level2\" class=\"headerlink\" title=\"XMLHttpRequest Level2\"></a>XMLHttpRequest Level2</h3><p>XMLHttpRequest API使得Ajax技术成为可能，作为XMLHttpRequest的改进版，XMLHttpRequest Level2在功能上有了很大的改进。主要两个方面：</p>\n<blockquote>\n<p>跨源XMLHttpRequest<br>进度事件<br>跨源XMLHttpRequest</p>\n</blockquote>\n<p>过去，XMLHttpRequest仅限于同源通信，XMLHttpRequest Level2通过CORS实现了跨源XMLHttpRequest。跨源HTTP请求包含一个Origin头部，它为服务器提供HTTP请求的源信息。</p>\n<h3 id=\"WebSockets-API\"><a href=\"#WebSockets-API\" class=\"headerlink\" title=\"WebSockets API\"></a>WebSockets API</h3><p>WebSockets是html5中最强大的通信功能，它定义了一个全双工通信信道，仅通过Web上的一个Socket即可进行通信。</p>\n<h3 id=\"WebSockets握手\"><a href=\"#WebSockets握手\" class=\"headerlink\" title=\"WebSockets握手\"></a>WebSockets握手</h3><p>为了建立WebSockets通信，客户端和服务器在初始握手时，将HTTP协议升级到WebSocket协议。一旦连接建立成功，就可以在全双工模式下在客户端和服务器之间来回传递WebSocket消息。</p>\n<h3 id=\"WebSockets接口\"><a href=\"#WebSockets接口\" class=\"headerlink\" title=\"WebSockets接口\"></a>WebSockets接口</h3><p>除了对WebSockets协议定义外，该规范还同时定义了用于JavaScript应用程序的WebSocket接口。WebSockets接口的使用很简单。要连接远程主机，只需要新建一个WebSocket实例，提供希望连接的对端URL。</p>\n<h2 id=\"Forms-API\"><a href=\"#Forms-API\" class=\"headerlink\" title=\"Forms API\"></a>Forms API</h2><h3 id=\"新表单元素\"><a href=\"#新表单元素\" class=\"headerlink\" title=\"新表单元素\"></a>新表单元素</h3><p>tel元素，表示电话号码。<br>email元素，表示电子邮件地址文本框。<br>url元素，表示网页的url。<br>search元素，用于搜索引擎，比如在站点顶部显示的搜索框。<br>range元素，特定值范围内的数值选择器，典型的显示方式是滑动条。<br>number元素，只包含数值的字段。</p>\n<h3 id=\"未来的表单元素\"><a href=\"#未来的表单元素\" class=\"headerlink\" title=\"未来的表单元素\"></a>未来的表单元素</h3><p>color元素，颜色选择器，基于调色盘或者取色板进行选择。<br>datetime元素，显示完整的日期和时间，包括时区。<br>datetime-local，显示日期和时间。<br>time元素，不含时区的时间选择器和指示器。<br>date元素，日期选择器。<br>week元素，某年中的周选择器。<br>month元素，某年中的月选择器。<br>新的表单特性和函数</p>\n<h3 id=\"placeholder\"><a href=\"#placeholder\" class=\"headerlink\" title=\"placeholder\"></a>placeholder</h3><p>当用户还没输入值的时候，输入型控件可以通过placeholder特性向用户显示描述性说明或者提示信息。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"First and last name\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"autocomplete\"><a href=\"#autocomplete\" class=\"headerlink\" title=\"autocomplete\"></a>autocomplete</h3><blockquote>\n<p>浏览器通过autocomplete特性能够知晓是否应该保存输入值以备将来使用。</p>\n</blockquote>\n<h3 id=\"autofocus\"><a href=\"#autofocus\" class=\"headerlink\" title=\"autofocus\"></a>autofocus</h3><blockquote>\n<p>通过autofocus特性可以指定某个表单元素获得输入焦点，每个页面上只允许出现一个autofocus特性，如果设置了多个，则相当于未指定此行为。</p>\n</blockquote>\n<h3 id=\"spellcheck\"><a href=\"#spellcheck\" class=\"headerlink\" title=\"spellcheck\"></a>spellcheck</h3><blockquote>\n<p>可对带有文本内容的输入控件和textarea空间控制spellcheck属性。设置完后，会询问浏览器是否应该给出拼写检查结果反馈。spellcheck属性需要赋值。</p>\n</blockquote>\n<h3 id=\"list特性和datalist元素\"><a href=\"#list特性和datalist元素\" class=\"headerlink\" title=\"list特性和datalist元素\"></a>list特性和datalist元素</h3><p>通过组合使用list特性和datalist元素，开发人员能够为某个输入型控件构造一张选值列表。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">datalist</span> <span class=\"attr\">id</span>=<span class=\"string\">\"contactList\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"a@qq.com\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"b@qq.com\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">datalist</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"contatcs\"</span> <span class=\"attr\">list</span>=<span class=\"string\">\"contactList\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"min和max\"><a href=\"#min和max\" class=\"headerlink\" title=\"min和max\"></a>min和max</h3><blockquote>\n<p>通过设置min和max特性，可以将range输入框的数值输入范围限定在最低值和最高值之间。可以只设置一个，也可以两个都设置，也可以都不设置。</p>\n</blockquote>\n<h3 id=\"step\"><a href=\"#step\" class=\"headerlink\" title=\"step\"></a>step</h3><p>对于输入型控件，设置其step特性能够指定输入值递增或者递减的粒度。</p>\n<h3 id=\"required\"><a href=\"#required\" class=\"headerlink\" title=\"required\"></a>required</h3><p>一旦为某输入型控件设置了required特性，那么此项必填，否则无法提交表单。</p>\n<h2 id=\"拖放API\"><a href=\"#拖放API\" class=\"headerlink\" title=\"拖放API\"></a>拖放API</h2><h3 id=\"draggable属性\"><a href=\"#draggable属性\" class=\"headerlink\" title=\"draggable属性\"></a>draggable属性</h3><blockquote>\n<p>如果网页元素的draggable元素为true，这个元素就是可以拖动的。</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">draggable</span>=<span class=\"string\">\"true\"</span>&gt;</span>Draggable Div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"拖放事件\"><a href=\"#拖放事件\" class=\"headerlink\" title=\"拖放事件\"></a>拖放事件</h3><p>拖动过程会触发很多事件，主要有下面这些：</p>\n<blockquote>\n<p>dragstart：网页元素开始拖动时触发。<br>drag：被拖动的元素在拖动过程中持续触发。<br>dragenter：被拖动的元素进入目标元素时触发，应在目标元素监听该事件。<br>dragleave：被拖动的元素离开目标元素时触发，应在目标元素监听该事件。<br>dragover：被拖动元素停留在目标元素之中时持续触发，应在目标元素监听该事件。<br>drap：被拖动元素或从文件系统选中的文件，拖放落下时触发。<br>dragend：网页元素拖动结束时触发。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">draggableElement.addEventListener(<span class=\"string\">'dragstart'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'拖动开始！'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"dataTransfer对象\"><a href=\"#dataTransfer对象\" class=\"headerlink\" title=\"dataTransfer对象\"></a>dataTransfer对象</h4><p>拖动过程中，回调函数接受的事件参数，有一个dataTransfer属性，指向一个对象，包含与拖动相关的各种信息。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">draggableElement.addEventListener(<span class=\"string\">'dragstart'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">    event.dataTransfer.setData(<span class=\"string\">'text'</span>, <span class=\"string\">'Hello World!'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h5 id=\"dataTransfer对象的属性有：\"><a href=\"#dataTransfer对象的属性有：\" class=\"headerlink\" title=\"dataTransfer对象的属性有：\"></a>dataTransfer对象的属性有：</h5><p>dropEffect：拖放的操作类型，决定了浏览器如何显示鼠标形状，可能的值为copy、move、link和none。<br>effectAllowed：指定所允许的操作，可能的值为copy、move、link、copyLink、copyMove、linkMove、all、none和uninitialized（默认值，等同于all，即允许一切操作）。<br>files：包含一个FileList对象，表示拖放所涉及的文件，主要用于处理从文件系统拖入浏览器的文件。<br>types：储存在DataTransfer对象的数据的类型。</p>\n<h5 id=\"dataTransfer对象的方法有：\"><a href=\"#dataTransfer对象的方法有：\" class=\"headerlink\" title=\"dataTransfer对象的方法有：\"></a>dataTransfer对象的方法有：</h5><p>setData(format, data)：在dataTransfer对象上储存数据。第一个参数format用来指定储存的数据类型，比如text、url、text/html等。<br>getData(format)：从dataTransfer对象取出数据。<br>clearData(format)：清除dataTransfer对象所储存的数据。如果指定了format参数，则只清除该格式的数据，否则清除所有数据。<br>setDragImage(imgElement, x, y)：指定拖动过程中显示的图像。默认情况下，许多浏览器显示一个被拖动元素的半透明版本。参数imgElement必须是一个图像元素，而不是指向图像的路径，参数x和y表示图像相对于鼠标的位置。</p>\n<h2 id=\"Web-Workers-API\"><a href=\"#Web-Workers-API\" class=\"headerlink\" title=\"Web Workers API\"></a>Web Workers API</h2><p>Javascript是单线程的。因此，持续时间较长的计算，回阻塞UI线程，进而导致无法在文本框中填入文本，单击按钮等，并且在大多数浏览器中，除非控制权返回，否则无法打开新的标签页。该问题的解决方案是Web Workers，可以让Web应用程序具备后台处理能力，对多线程的支持性非常好。</p>\n<p>但是在Web Workers中执行的脚本不能访问该页面的window对象，也就是Web Workers不能直接访问Web页面和DOM API。虽然Web Workers不会导致浏览器UI停止响应，但是仍然会消耗CPU周期，导致系统反应速度变慢。</p>\n<h2 id=\"Web-Storage-API\"><a href=\"#Web-Storage-API\" class=\"headerlink\" title=\"Web Storage API\"></a>Web Storage API</h2><p>Web Storage是html5引入的一个非常重要的功能，可以在客户端本地存储数据，类似html4的cookie，但可实现功能要比cookie强大的多。</p>\n<h2 id=\"sessionStorage\"><a href=\"#sessionStorage\" class=\"headerlink\" title=\"sessionStorage\"></a>sessionStorage</h2><blockquote>\n<p>sessionStorage将数据保存在session中，浏览器关闭数据就消失。</p>\n</blockquote>\n<h2 id=\"localStorage\"><a href=\"#localStorage\" class=\"headerlink\" title=\"localStorage\"></a>localStorage</h2><blockquote>\n<p>localStorage则一直将数据保存在客户端本地，除非手动删除，否则一直保存。<br>不管是sessionStorage，还是localStorage，可使用的API相同，常用的有如下几个（以localStorage为例）：</p>\n</blockquote>\n<p>保存数据：localStorage.setItem(key,value);<br>读取数据：localStorage.getItem(key);<br>删除单个数据：localStorage.removeItem(key);<br>删除所有数据：localStorage.clear();<br>得到某个索引的key：localStorage.key(index);</p>"},{"_content":"---\ntitle: '2017年04月12日21:30:30'\ndate: 2017-04-12 21:30:34\ntags: Hexo\n经过不懈的努力，终于把Mac版的Hexo静态博客搞完了。\n下面应该开始切换主题了。希望一切成功。\n加油！！！！！！\n","source":"_posts/2017年04月12日21-30-30.md","raw":"---\ntitle: '2017年04月12日21:30:30'\ndate: 2017-04-12 21:30:34\ntags: Hexo\n经过不懈的努力，终于把Mac版的Hexo静态博客搞完了。\n下面应该开始切换主题了。希望一切成功。\n加油！！！！！！\n","slug":"2017年04月12日21-30-30","published":1,"date":"2017-04-12T13:30:34.000Z","updated":"2017-06-28T07:02:30.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfnkq5j0001lyfygiyk2a91","content":"<hr>\n<p>title: ‘2017年04月12日21:30:30’<br>date: 2017-04-12 21:30:34<br>tags: Hexo<br>经过不懈的努力，终于把Mac版的Hexo静态博客搞完了。<br>下面应该开始切换主题了。希望一切成功。<br>加油！！！！！！</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>title: ‘2017年04月12日21:30:30’<br>date: 2017-04-12 21:30:34<br>tags: Hexo<br>经过不懈的努力，终于把Mac版的Hexo静态博客搞完了。<br>下面应该开始切换主题了。希望一切成功。<br>加油！！！！！！</p>\n"},{"title":"2017年04月13日21:52:30","date":"2017-04-13T13:52:34.000Z","_content":"hexo主题圆满完成！！💪\n加油学习哦","source":"_posts/2017年04月13日21-52-30.md","raw":"---\ntitle: '2017年04月13日21:52:30'\ndate: 2017-04-13 21:52:34\ntags: Hexo\n---\nhexo主题圆满完成！！💪\n加油学习哦","slug":"2017年04月13日21-52-30","published":1,"updated":"2017-06-28T07:02:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfnkq5o0003lyfyihamoxya","content":"<p>hexo主题圆满完成！！💪<br>加油学习哦</p>\n","site":{"data":{}},"excerpt":"","more":"<p>hexo主题圆满完成！！💪<br>加油学习哦</p>\n"},{"title":"2017年04月13日11:25:54","date":"2017-04-13T03:25:57.000Z","_content":"主题已经切换完了，比较简单。\ngit clone https://github.com/smackgg/hexo-theme-smackdown.git\n\n然后修改配置文件_config.yml中的\ntheme: smackdown\n就好啦。\\(^o^)/YES!下面就需要进行第三方插件的使用了。例如百度统计等。。。。\n💪","source":"_posts/2017年04月13日11-25-54.md","raw":"---\ntitle: '2017年04月13日11:25:54'\ndate: 2017-04-13 11:25:57\ntags: Hexo\n---\n主题已经切换完了，比较简单。\ngit clone https://github.com/smackgg/hexo-theme-smackdown.git\n\n然后修改配置文件_config.yml中的\ntheme: smackdown\n就好啦。\\(^o^)/YES!下面就需要进行第三方插件的使用了。例如百度统计等。。。。\n💪","slug":"2017年04月13日11-25-54","published":1,"updated":"2017-06-28T07:02:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfnkq5q0004lyfyby6ysdkh","content":"<p>主题已经切换完了，比较简单。<br>git clone <a href=\"https://github.com/smackgg/hexo-theme-smackdown.git\" target=\"_blank\" rel=\"external\">https://github.com/smackgg/hexo-theme-smackdown.git</a></p>\n<p>然后修改配置文件_config.yml中的<br>theme: smackdown<br>就好啦。(^o^)/YES!下面就需要进行第三方插件的使用了。例如百度统计等。。。。<br>💪</p>\n","site":{"data":{}},"excerpt":"","more":"<p>主题已经切换完了，比较简单。<br>git clone <a href=\"https://github.com/smackgg/hexo-theme-smackdown.git\" target=\"_blank\" rel=\"external\">https://github.com/smackgg/hexo-theme-smackdown.git</a></p>\n<p>然后修改配置文件_config.yml中的<br>theme: smackdown<br>就好啦。(^o^)/YES!下面就需要进行第三方插件的使用了。例如百度统计等。。。。<br>💪</p>\n"},{"title":"名师指点","date":"2017-04-27T10:55:07.000Z","toc":true,"_content":"> Mr.hu:\n> 前端如果想进步，就必须学着不要使用搜索引擎\n\n不要总是想着在依赖百度编程！谨记\n这句话可能理解错了，应该是说要明白新的技术是英文的。不要总是在百度搜索。多用谷歌\n\n这算是有感而发的。今天我老大告诉我们要离职。感觉很不舍。老大教了我们好多东西。也交了我们好多前端上的事情。\n人生何处不相逢！老大我们有缘再见！\n\n老大给我们说了前端之后的发展方向。\n前端发展到一定的地步可以称之为‘大前端’；\n\n<!--more-->\n大前端包括：\n    基础的HTML，CSS，jQuery，Bootstrap，JavaScript基本技术。\n    新鲜的HTML5，CSS3，ECMAScript 6，\n    最常用的框架：angular，react，Vue，\n    必备知识：Nodejs，\n    可能用得到的：网络运营，\n    需要了解：UI，Java，PHP，GO语言，\n    基本的计算机知识，\n    前端代码的优化：JavaScript，CSS，HTML，\n    SEO的优化，\n    需要用到的知识：抛物线、三角函数等等。\n    抛物线可以用来做动画等等用处。\n    \n总结了之后突然感觉，人生有了方向。希望我这一生可以学完。那我就很满足了。\n需要了解的知识：百度统计，\n我的老大叫hjx，","source":"_posts/2017年04月27日.md","raw":"---\ntitle: 名师指点\ndate: 2017-04-27 18:55:07\ntags: 前端日记\ntoc: true\n---\n> Mr.hu:\n> 前端如果想进步，就必须学着不要使用搜索引擎\n\n不要总是想着在依赖百度编程！谨记\n这句话可能理解错了，应该是说要明白新的技术是英文的。不要总是在百度搜索。多用谷歌\n\n这算是有感而发的。今天我老大告诉我们要离职。感觉很不舍。老大教了我们好多东西。也交了我们好多前端上的事情。\n人生何处不相逢！老大我们有缘再见！\n\n老大给我们说了前端之后的发展方向。\n前端发展到一定的地步可以称之为‘大前端’；\n\n<!--more-->\n大前端包括：\n    基础的HTML，CSS，jQuery，Bootstrap，JavaScript基本技术。\n    新鲜的HTML5，CSS3，ECMAScript 6，\n    最常用的框架：angular，react，Vue，\n    必备知识：Nodejs，\n    可能用得到的：网络运营，\n    需要了解：UI，Java，PHP，GO语言，\n    基本的计算机知识，\n    前端代码的优化：JavaScript，CSS，HTML，\n    SEO的优化，\n    需要用到的知识：抛物线、三角函数等等。\n    抛物线可以用来做动画等等用处。\n    \n总结了之后突然感觉，人生有了方向。希望我这一生可以学完。那我就很满足了。\n需要了解的知识：百度统计，\n我的老大叫hjx，","slug":"2017年04月27日","published":1,"updated":"2017-06-28T06:58:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfnkq5t0005lyfy15durc9e","content":"<blockquote>\n<p>Mr.hu:<br>前端如果想进步，就必须学着不要使用搜索引擎</p>\n</blockquote>\n<p>不要总是想着在依赖百度编程！谨记<br>这句话可能理解错了，应该是说要明白新的技术是英文的。不要总是在百度搜索。多用谷歌</p>\n<p>这算是有感而发的。今天我老大告诉我们要离职。感觉很不舍。老大教了我们好多东西。也交了我们好多前端上的事情。<br>人生何处不相逢！老大我们有缘再见！</p>\n<p>老大给我们说了前端之后的发展方向。<br>前端发展到一定的地步可以称之为‘大前端’；</p>\n<a id=\"more\"></a>\n<p>大前端包括：<br>    基础的HTML，CSS，jQuery，Bootstrap，JavaScript基本技术。<br>    新鲜的HTML5，CSS3，ECMAScript 6，<br>    最常用的框架：angular，react，Vue，<br>    必备知识：Nodejs，<br>    可能用得到的：网络运营，<br>    需要了解：UI，Java，PHP，GO语言，<br>    基本的计算机知识，<br>    前端代码的优化：JavaScript，CSS，HTML，<br>    SEO的优化，<br>    需要用到的知识：抛物线、三角函数等等。<br>    抛物线可以用来做动画等等用处。</p>\n<p>总结了之后突然感觉，人生有了方向。希望我这一生可以学完。那我就很满足了。<br>需要了解的知识：百度统计，<br>我的老大叫hjx，</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Mr.hu:<br>前端如果想进步，就必须学着不要使用搜索引擎</p>\n</blockquote>\n<p>不要总是想着在依赖百度编程！谨记<br>这句话可能理解错了，应该是说要明白新的技术是英文的。不要总是在百度搜索。多用谷歌</p>\n<p>这算是有感而发的。今天我老大告诉我们要离职。感觉很不舍。老大教了我们好多东西。也交了我们好多前端上的事情。<br>人生何处不相逢！老大我们有缘再见！</p>\n<p>老大给我们说了前端之后的发展方向。<br>前端发展到一定的地步可以称之为‘大前端’；</p>","more":"<p>大前端包括：<br>    基础的HTML，CSS，jQuery，Bootstrap，JavaScript基本技术。<br>    新鲜的HTML5，CSS3，ECMAScript 6，<br>    最常用的框架：angular，react，Vue，<br>    必备知识：Nodejs，<br>    可能用得到的：网络运营，<br>    需要了解：UI，Java，PHP，GO语言，<br>    基本的计算机知识，<br>    前端代码的优化：JavaScript，CSS，HTML，<br>    SEO的优化，<br>    需要用到的知识：抛物线、三角函数等等。<br>    抛物线可以用来做动画等等用处。</p>\n<p>总结了之后突然感觉，人生有了方向。希望我这一生可以学完。那我就很满足了。<br>需要了解的知识：百度统计，<br>我的老大叫hjx，</p>"},{"title":"2017年04月26日-转","date":"2017-04-26T06:46:56.000Z","toc":true,"_content":"# Github: https://github.com/asd0102433/blog\n\n> css有些属性容易忘记，半天不写就要去查api，有时候api还不好使，于是还是记下来以后方便用，后续会慢慢补充进来的。\n\n> Github: https://github.com/asd0102433/blog\n博客长期更新，喜欢的朋友star一下\n\n#  `outline` 移除当选中input元素的时候会出现状态线\n<input placeholder =\"你试试 点这个框框\"/> \n\n  An outline is a line that is drawn around elements (outside the borders) to make the element \"stand out\".\n  包裹elements 的一个线，一般设置成none 。\n~~~css \n  div {\n      outline: none; //一般情况下移除它\n      // outline: 5px dotted red; 也可以设置样式\n  }\n~~~\n<!--more-->\n# `contenteditable` 设置element是否可编辑\n~~~HTML\n    <p contenteditable=\"true\">可编辑</p>\n~~~\n可以通过input, blur事件来监听element的输入和输入完后鼠标离开。\n \n# `webkit-playsinline `\n手机video 都可以在页面中播放，而不是全屏播放了。\n~~~HTML\n    <video src=\"test.mp4\" webkit-playsinline=\"true\"></video>\n~~~\n# position: absolute， 让margin有效的\n  \n  设置left:0, right:0 margin: 0 auto; 就可以。原因是2边都是0不存在边距，element就可以得出距离，并居中。\n~~~css \n  div {\n      position: absolute;\n      left: 0;\n      right: 0;\n      margin: 0 auto;\n  }\n~~~\n# 使用clearfix 清除浮动，解决父类高度崩塌。\n~~~css \n  .clearfix {\n    zoom: 1;\n  }\n\n  .clearfix:after {\n     visibility: hidden;\n       display: block;\n       font-size: 0;\n       content: \" \";\n       clear: both;\n       height: 0;\n   }\n~~~\n\n# user-select 禁止用户选中文本\n~~~css\n    div {\n        user-select: none; /* Standard syntax */\n    }\n~~~\n# 清除手机tap事件后element 时候出现的一个高亮\n~~~css \n  * {\n    -webkit-tap-highlight-color: rgba(0,0,0,0);\n  }\n~~~\n# ::-webkit-scrollbar-thumb\n  \n  可以修改浏览器的滚动条样式。IE火狐可能不支持。\n  \n---\n\n# -webkit-appearance:none\n~~~text\n To apply platform specific styling to an element that doesn't have it by default\n To remove platform specific styling to an element that does have it by default\n~~~\n移除浏览器默认的样式，比如chrome的input默认样式，然后就可以定义需要的样式。\n~~~css\n  input, button, textarea, select {\n    *font-size: 100%;\n    -webkit-appearance:none;\n  }\n~~~\n# CSS开启硬件加速\nhttp://www.cnblogs.com/rubylouvre/p/3471490.html\n~~~css\n  -webkit-transform: translateZ(0);\n~~~\n# 使用CSS transforms 或者 animations时可能会有页面闪烁的bug\n~~~css\n  -webkit-backface-visibility: hidden;\n~~~\n# -webkit-touch-callout 禁止长按链接与图片弹出菜单\n~~~css\n  -webkit-touch-callout: none;\n~~~\n#  transform-style: preserve-3d   让元素支持3d\n~~~css\n  div {\n      transform: rotateY(60deg);\n      transform-style: preserve-3d;\n  }\n~~~\n# perspective 透视\n这个属性的存在决定你看到的元素是2d还是3d。一般设置在包裹元素的父类上。\n~~~css\n  .div-box {\n    perspective: 400px; \n  }\n~~~\n# css实现不换行、自动换行、强制换行\n~~~css \n  //不换行\n  white-space:nowrap;\n  \n  //自动换行\n  word-wrap: break-word; \n  word-break: normal; \n  \n  //强制换行\n  word-break:break-all;\n~~~\n\n# box-sizing 让元素的宽度、高度包含border和padding\n~~~css\n  {\n    box-sizing: border-box;\n  }\n~~~\n\n# calc() function, 计算属性值\nhttps://www.w3schools.com/cssref/func_calc.asp\n\n~~~css   \n    div {\n        width: calc(100% - 100px);\n    }\n~~~ \n\n上面的例子就是让宽度为100%减去100px的值，项目中很适用，IE9以上\n\n# css3 linear-gradient 线性渐变\n默认开始在top, 也可以自定义方向。\n\n~~~css   \n    div {\n        linear-gradient(red, yellow)\n    }\n    \n    background: linear-gradient(direction, color-stop1, color-stop2, ...);\n\n~~~\n# 常用的选择器 :nth-child() Selector\n选择父类下第一个子节点，p元素\n\n~~~css\n    p:nth-child(1) {\n        ...\n    }\n~~~\n\n# -webkit-font-smoothing 字体抗锯齿\n使用该属性能让页面上的字体变得清晰，但是也会造成font-weight: bold 加粗变得异常。不信你试试...\n~~~css\n    div {\n        -webkit-font-smoothing: antialiased; \n    }\n~~~   \n---\n`更新3-31`\n# CSS3 filter Property 图片过滤\n~~~css   \n    img {\n        filter: grayscale(100%); //灰度\n        filter: blur(5px); //模糊\n        filter:brightness(200%); //高亮\n        filter:saturate(8); //饱和\n        filter:sepia(100%); //怀旧\n        ...\n    }\n~~~\n移动端可以使用，IE兼容不好。更多请看\nhttps://www.w3schools.com/cssref/css3_pr_filter.asp\n\n## 使用css创建三角形\n这个很多面试题好像问到，但实际中我也确实使用了。\n~~~css  \n    div {\n        border-bottom: 10px solid white;\n        border-right: 10px solid transparent;\n        border-left: 10px solid transparent;\n        height: 0px; \n        width: 0px; \n    }\n    transparent 透明\n~~~  \n# clip属性，截取你想要显示的图片\n~~~css  \n    img {\n        position: absolute;\n        clip: rect(0px,60px,200px,0px);\n    }\n~~~  \n你有兴趣可以看\nhttps://tympanus.net/codrops/2013/01/16/understanding-the-css-clip-property/\n\n# 设置文字，字母间距，很实用 letter-spacing\n~~~css \n    h1 {\n        letter-spacing: *px; //也可以是负数\n    }\n~~~\n---\n\n`更新4-3 补充`\n\n关于display: box 和 display: flex，前者是2009实施，后者2012年，如果你的安卓比较老请使用display: box，但是2者的表现可能有点不同。下面是兼容方法。\n~~~css\n    display: -webkit-box; /* Chrome 4+, Safari 3.1, iOS Safari 3.2+ */\n    display: -moz-box; /* Firefox 17- */\n    display: -webkit-flex; /* Chrome 21+, Safari 6.1+, iOS Safari 7+, Opera 15/16 */\n    display: -moz-flex; /* Firefox 18+ */\n    display: -ms-flexbox; /* IE 10 */\n    display: flex; /* Chrome 29+, Firefox 22+, IE 11+, Opera 12.1/17/18, Android 4.4+ */\n~~~\n[知乎一丝](https://www.zhihu.com/question/22991944/answer/23302749)具体问题可以参考这篇文章。\n\n---\n\n`更新4-12 补充`\n\n# 图片模糊效果\n~~~css\n    -webkit-filter: blur(5px);\n~~~  \n# 图片运动过程中，导致图片模糊\n在animation过程中，图片会出现模糊的情况，可以设置如下在图片上面。\n~~~css\n    transform: translate3d(0, 0, 0);\n~~~  \n后续追加...有错误的地方请指正，谢谢。\n\n下面是一些CSS的网站，项目中也经常使用的。\n\n[Css3动画手册](http://isux.tencent.com/css3/)\n[Css参考手册](http://css.doyoe.com/)\n[Anicollection 动画库](http://anicollection.github.io/#/)\n[Animate 动画库](https://daneden.github.io/animate.css/)\n[csshake 抖动很逗](http://elrumordelaluz.github.io/csshake/)\n[字体图标](http://weloveiconfonts.com/)\n[w3schools](https://www.w3schools.com/cssref/pr_pos_clip.asp)\n","source":"_posts/2017年04月26日.md","raw":"---\ntitle: 2017年04月26日-转\ndate: 2017-04-26 14:46:56\ntags: CSS\ntoc: true\n---\n# Github: https://github.com/asd0102433/blog\n\n> css有些属性容易忘记，半天不写就要去查api，有时候api还不好使，于是还是记下来以后方便用，后续会慢慢补充进来的。\n\n> Github: https://github.com/asd0102433/blog\n博客长期更新，喜欢的朋友star一下\n\n#  `outline` 移除当选中input元素的时候会出现状态线\n<input placeholder =\"你试试 点这个框框\"/> \n\n  An outline is a line that is drawn around elements (outside the borders) to make the element \"stand out\".\n  包裹elements 的一个线，一般设置成none 。\n~~~css \n  div {\n      outline: none; //一般情况下移除它\n      // outline: 5px dotted red; 也可以设置样式\n  }\n~~~\n<!--more-->\n# `contenteditable` 设置element是否可编辑\n~~~HTML\n    <p contenteditable=\"true\">可编辑</p>\n~~~\n可以通过input, blur事件来监听element的输入和输入完后鼠标离开。\n \n# `webkit-playsinline `\n手机video 都可以在页面中播放，而不是全屏播放了。\n~~~HTML\n    <video src=\"test.mp4\" webkit-playsinline=\"true\"></video>\n~~~\n# position: absolute， 让margin有效的\n  \n  设置left:0, right:0 margin: 0 auto; 就可以。原因是2边都是0不存在边距，element就可以得出距离，并居中。\n~~~css \n  div {\n      position: absolute;\n      left: 0;\n      right: 0;\n      margin: 0 auto;\n  }\n~~~\n# 使用clearfix 清除浮动，解决父类高度崩塌。\n~~~css \n  .clearfix {\n    zoom: 1;\n  }\n\n  .clearfix:after {\n     visibility: hidden;\n       display: block;\n       font-size: 0;\n       content: \" \";\n       clear: both;\n       height: 0;\n   }\n~~~\n\n# user-select 禁止用户选中文本\n~~~css\n    div {\n        user-select: none; /* Standard syntax */\n    }\n~~~\n# 清除手机tap事件后element 时候出现的一个高亮\n~~~css \n  * {\n    -webkit-tap-highlight-color: rgba(0,0,0,0);\n  }\n~~~\n# ::-webkit-scrollbar-thumb\n  \n  可以修改浏览器的滚动条样式。IE火狐可能不支持。\n  \n---\n\n# -webkit-appearance:none\n~~~text\n To apply platform specific styling to an element that doesn't have it by default\n To remove platform specific styling to an element that does have it by default\n~~~\n移除浏览器默认的样式，比如chrome的input默认样式，然后就可以定义需要的样式。\n~~~css\n  input, button, textarea, select {\n    *font-size: 100%;\n    -webkit-appearance:none;\n  }\n~~~\n# CSS开启硬件加速\nhttp://www.cnblogs.com/rubylouvre/p/3471490.html\n~~~css\n  -webkit-transform: translateZ(0);\n~~~\n# 使用CSS transforms 或者 animations时可能会有页面闪烁的bug\n~~~css\n  -webkit-backface-visibility: hidden;\n~~~\n# -webkit-touch-callout 禁止长按链接与图片弹出菜单\n~~~css\n  -webkit-touch-callout: none;\n~~~\n#  transform-style: preserve-3d   让元素支持3d\n~~~css\n  div {\n      transform: rotateY(60deg);\n      transform-style: preserve-3d;\n  }\n~~~\n# perspective 透视\n这个属性的存在决定你看到的元素是2d还是3d。一般设置在包裹元素的父类上。\n~~~css\n  .div-box {\n    perspective: 400px; \n  }\n~~~\n# css实现不换行、自动换行、强制换行\n~~~css \n  //不换行\n  white-space:nowrap;\n  \n  //自动换行\n  word-wrap: break-word; \n  word-break: normal; \n  \n  //强制换行\n  word-break:break-all;\n~~~\n\n# box-sizing 让元素的宽度、高度包含border和padding\n~~~css\n  {\n    box-sizing: border-box;\n  }\n~~~\n\n# calc() function, 计算属性值\nhttps://www.w3schools.com/cssref/func_calc.asp\n\n~~~css   \n    div {\n        width: calc(100% - 100px);\n    }\n~~~ \n\n上面的例子就是让宽度为100%减去100px的值，项目中很适用，IE9以上\n\n# css3 linear-gradient 线性渐变\n默认开始在top, 也可以自定义方向。\n\n~~~css   \n    div {\n        linear-gradient(red, yellow)\n    }\n    \n    background: linear-gradient(direction, color-stop1, color-stop2, ...);\n\n~~~\n# 常用的选择器 :nth-child() Selector\n选择父类下第一个子节点，p元素\n\n~~~css\n    p:nth-child(1) {\n        ...\n    }\n~~~\n\n# -webkit-font-smoothing 字体抗锯齿\n使用该属性能让页面上的字体变得清晰，但是也会造成font-weight: bold 加粗变得异常。不信你试试...\n~~~css\n    div {\n        -webkit-font-smoothing: antialiased; \n    }\n~~~   \n---\n`更新3-31`\n# CSS3 filter Property 图片过滤\n~~~css   \n    img {\n        filter: grayscale(100%); //灰度\n        filter: blur(5px); //模糊\n        filter:brightness(200%); //高亮\n        filter:saturate(8); //饱和\n        filter:sepia(100%); //怀旧\n        ...\n    }\n~~~\n移动端可以使用，IE兼容不好。更多请看\nhttps://www.w3schools.com/cssref/css3_pr_filter.asp\n\n## 使用css创建三角形\n这个很多面试题好像问到，但实际中我也确实使用了。\n~~~css  \n    div {\n        border-bottom: 10px solid white;\n        border-right: 10px solid transparent;\n        border-left: 10px solid transparent;\n        height: 0px; \n        width: 0px; \n    }\n    transparent 透明\n~~~  \n# clip属性，截取你想要显示的图片\n~~~css  \n    img {\n        position: absolute;\n        clip: rect(0px,60px,200px,0px);\n    }\n~~~  \n你有兴趣可以看\nhttps://tympanus.net/codrops/2013/01/16/understanding-the-css-clip-property/\n\n# 设置文字，字母间距，很实用 letter-spacing\n~~~css \n    h1 {\n        letter-spacing: *px; //也可以是负数\n    }\n~~~\n---\n\n`更新4-3 补充`\n\n关于display: box 和 display: flex，前者是2009实施，后者2012年，如果你的安卓比较老请使用display: box，但是2者的表现可能有点不同。下面是兼容方法。\n~~~css\n    display: -webkit-box; /* Chrome 4+, Safari 3.1, iOS Safari 3.2+ */\n    display: -moz-box; /* Firefox 17- */\n    display: -webkit-flex; /* Chrome 21+, Safari 6.1+, iOS Safari 7+, Opera 15/16 */\n    display: -moz-flex; /* Firefox 18+ */\n    display: -ms-flexbox; /* IE 10 */\n    display: flex; /* Chrome 29+, Firefox 22+, IE 11+, Opera 12.1/17/18, Android 4.4+ */\n~~~\n[知乎一丝](https://www.zhihu.com/question/22991944/answer/23302749)具体问题可以参考这篇文章。\n\n---\n\n`更新4-12 补充`\n\n# 图片模糊效果\n~~~css\n    -webkit-filter: blur(5px);\n~~~  \n# 图片运动过程中，导致图片模糊\n在animation过程中，图片会出现模糊的情况，可以设置如下在图片上面。\n~~~css\n    transform: translate3d(0, 0, 0);\n~~~  \n后续追加...有错误的地方请指正，谢谢。\n\n下面是一些CSS的网站，项目中也经常使用的。\n\n[Css3动画手册](http://isux.tencent.com/css3/)\n[Css参考手册](http://css.doyoe.com/)\n[Anicollection 动画库](http://anicollection.github.io/#/)\n[Animate 动画库](https://daneden.github.io/animate.css/)\n[csshake 抖动很逗](http://elrumordelaluz.github.io/csshake/)\n[字体图标](http://weloveiconfonts.com/)\n[w3schools](https://www.w3schools.com/cssref/pr_pos_clip.asp)\n","slug":"2017年04月26日","published":1,"updated":"2017-06-28T07:16:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfnkq5v0008lyfysgk3lovw","content":"<h1 id=\"Github-https-github-com-asd0102433-blog\"><a href=\"#Github-https-github-com-asd0102433-blog\" class=\"headerlink\" title=\"Github: https://github.com/asd0102433/blog\"></a>Github: <a href=\"https://github.com/asd0102433/blog\" target=\"_blank\" rel=\"external\">https://github.com/asd0102433/blog</a></h1><blockquote>\n<p>css有些属性容易忘记，半天不写就要去查api，有时候api还不好使，于是还是记下来以后方便用，后续会慢慢补充进来的。</p>\n<p>Github: <a href=\"https://github.com/asd0102433/blog\" target=\"_blank\" rel=\"external\">https://github.com/asd0102433/blog</a><br>博客长期更新，喜欢的朋友star一下</p>\n</blockquote>\n<h1 id=\"outline-移除当选中input元素的时候会出现状态线\"><a href=\"#outline-移除当选中input元素的时候会出现状态线\" class=\"headerlink\" title=\"outline 移除当选中input元素的时候会出现状态线\"></a><code>outline</code> 移除当选中input元素的时候会出现状态线</h1><input placeholder=\"你试试 点这个框框\"> \n\n<p>  An outline is a line that is drawn around elements (outside the borders) to make the element “stand out”.<br>  包裹elements 的一个线，一般设置成none 。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">    outline: none; //一般情况下移除它</div><div class=\"line\">    // outline: 5px dotted red; 也可以设置样式</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h1 id=\"contenteditable-设置element是否可编辑\"><a href=\"#contenteditable-设置element是否可编辑\" class=\"headerlink\" title=\"contenteditable 设置element是否可编辑\"></a><code>contenteditable</code> 设置element是否可编辑</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">contenteditable</span>=<span class=\"string\">\"true\"</span>&gt;</span>可编辑<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>可以通过input, blur事件来监听element的输入和输入完后鼠标离开。</p>\n<h1 id=\"webkit-playsinline\"><a href=\"#webkit-playsinline\" class=\"headerlink\" title=\"webkit-playsinline\"></a><code>webkit-playsinline</code></h1><p>手机video 都可以在页面中播放，而不是全屏播放了。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">src</span>=<span class=\"string\">\"test.mp4\"</span> <span class=\"attr\">webkit-playsinline</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"position-absolute，-让margin有效的\"><a href=\"#position-absolute，-让margin有效的\" class=\"headerlink\" title=\"position: absolute， 让margin有效的\"></a>position: absolute， 让margin有效的</h1><p>  设置left:0, right:0 margin: 0 auto; 就可以。原因是2边都是0不存在边距，element就可以得出距离，并居中。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">div</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"使用clearfix-清除浮动，解决父类高度崩塌。\"><a href=\"#使用clearfix-清除浮动，解决父类高度崩塌。\" class=\"headerlink\" title=\"使用clearfix 清除浮动，解决父类高度崩塌。\"></a>使用clearfix 清除浮动，解决父类高度崩塌。</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.clearfix</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">zoom</span>: <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;</div><div class=\"line\">   <span class=\"attribute\">visibility</span>: hidden;</div><div class=\"line\">     <span class=\"attribute\">display</span>: block;</div><div class=\"line\">     <span class=\"attribute\">font-size</span>: <span class=\"number\">0</span>;</div><div class=\"line\">     <span class=\"attribute\">content</span>: <span class=\"string\">\" \"</span>;</div><div class=\"line\">     <span class=\"attribute\">clear</span>: both;</div><div class=\"line\">     <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"user-select-禁止用户选中文本\"><a href=\"#user-select-禁止用户选中文本\" class=\"headerlink\" title=\"user-select 禁止用户选中文本\"></a>user-select 禁止用户选中文本</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">div</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">user-select</span>: none; <span class=\"comment\">/* Standard syntax */</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"清除手机tap事件后element-时候出现的一个高亮\"><a href=\"#清除手机tap事件后element-时候出现的一个高亮\" class=\"headerlink\" title=\"清除手机tap事件后element 时候出现的一个高亮\"></a>清除手机tap事件后element 时候出现的一个高亮</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">* &#123;</div><div class=\"line\">  <span class=\"attribute\">-webkit-tap-highlight-color</span>: <span class=\"built_in\">rgba</span>(0,0,0,0);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"webkit-scrollbar-thumb\"><a href=\"#webkit-scrollbar-thumb\" class=\"headerlink\" title=\"::-webkit-scrollbar-thumb\"></a>::-webkit-scrollbar-thumb</h1><p>  可以修改浏览器的滚动条样式。IE火狐可能不支持。</p>\n<hr>\n<h1 id=\"webkit-appearance-none\"><a href=\"#webkit-appearance-none\" class=\"headerlink\" title=\"-webkit-appearance:none\"></a>-webkit-appearance:none</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">To apply platform specific styling to an element that doesn&apos;t have it by default</div><div class=\"line\">To remove platform specific styling to an element that does have it by default</div></pre></td></tr></table></figure>\n<p>移除浏览器默认的样式，比如chrome的input默认样式，然后就可以定义需要的样式。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">input, button, textarea, select &#123;</div><div class=\"line\">  *font-size: 100%;</div><div class=\"line\">  -webkit-appearance:none;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"CSS开启硬件加速\"><a href=\"#CSS开启硬件加速\" class=\"headerlink\" title=\"CSS开启硬件加速\"></a>CSS开启硬件加速</h1><p><a href=\"http://www.cnblogs.com/rubylouvre/p/3471490.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/rubylouvre/p/3471490.html</a><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">-webkit-transform</span>: <span class=\"selector-tag\">translateZ</span>(0);</div></pre></td></tr></table></figure></p>\n<h1 id=\"使用CSS-transforms-或者-animations时可能会有页面闪烁的bug\"><a href=\"#使用CSS-transforms-或者-animations时可能会有页面闪烁的bug\" class=\"headerlink\" title=\"使用CSS transforms 或者 animations时可能会有页面闪烁的bug\"></a>使用CSS transforms 或者 animations时可能会有页面闪烁的bug</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">-webkit-backface-visibility</span>: <span class=\"selector-tag\">hidden</span>;</div></pre></td></tr></table></figure>\n<h1 id=\"webkit-touch-callout-禁止长按链接与图片弹出菜单\"><a href=\"#webkit-touch-callout-禁止长按链接与图片弹出菜单\" class=\"headerlink\" title=\"-webkit-touch-callout 禁止长按链接与图片弹出菜单\"></a>-webkit-touch-callout 禁止长按链接与图片弹出菜单</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">-webkit-touch-callout</span>: <span class=\"selector-tag\">none</span>;</div></pre></td></tr></table></figure>\n<h1 id=\"transform-style-preserve-3d-让元素支持3d\"><a href=\"#transform-style-preserve-3d-让元素支持3d\" class=\"headerlink\" title=\"transform-style: preserve-3d   让元素支持3d\"></a>transform-style: preserve-3d   让元素支持3d</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">div</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotateY</span>(60deg);</div><div class=\"line\">    <span class=\"attribute\">transform-style</span>: preserve-<span class=\"number\">3</span>d;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"perspective-透视\"><a href=\"#perspective-透视\" class=\"headerlink\" title=\"perspective 透视\"></a>perspective 透视</h1><p>这个属性的存在决定你看到的元素是2d还是3d。一般设置在包裹元素的父类上。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.div-box</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">perspective</span>: <span class=\"number\">400px</span>; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"css实现不换行、自动换行、强制换行\"><a href=\"#css实现不换行、自动换行、强制换行\" class=\"headerlink\" title=\"css实现不换行、自动换行、强制换行\"></a>css实现不换行、自动换行、强制换行</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//不换行</div><div class=\"line\">white-space:nowrap;</div><div class=\"line\"></div><div class=\"line\">//自动换行</div><div class=\"line\">word-wrap: break-word; </div><div class=\"line\">word-break: normal; </div><div class=\"line\"></div><div class=\"line\">//强制换行</div><div class=\"line\">word-break:break-all;</div></pre></td></tr></table></figure>\n<h1 id=\"box-sizing-让元素的宽度、高度包含border和padding\"><a href=\"#box-sizing-让元素的宽度、高度包含border和padding\" class=\"headerlink\" title=\"box-sizing 让元素的宽度、高度包含border和padding\"></a>box-sizing 让元素的宽度、高度包含border和padding</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"calc-function-计算属性值\"><a href=\"#calc-function-计算属性值\" class=\"headerlink\" title=\"calc() function, 计算属性值\"></a>calc() function, 计算属性值</h1><p><a href=\"https://www.w3schools.com/cssref/func_calc.asp\" target=\"_blank\" rel=\"external\">https://www.w3schools.com/cssref/func_calc.asp</a></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">    div &#123;</div><div class=\"line\">        width: calc(100% - 100px);</div><div class=\"line\">    &#125;</div><div class=\"line\">~~~ </div><div class=\"line\"></div><div class=\"line\">上面的例子就是让宽度为100%减去100px的值，项目中很适用，IE9以上</div><div class=\"line\"></div><div class=\"line\"># css3 linear-gradient 线性渐变</div><div class=\"line\">默认开始在top, 也可以自定义方向。</div><div class=\"line\"></div><div class=\"line\">~~~css   </div><div class=\"line\">    div &#123;</div><div class=\"line\">        linear-gradient(red, yellow)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    background: linear-gradient(direction, color-stop1, color-stop2, ...);</div></pre></td></tr></table></figure>\n<h1 id=\"常用的选择器-nth-child-Selector\"><a href=\"#常用的选择器-nth-child-Selector\" class=\"headerlink\" title=\"常用的选择器 :nth-child() Selector\"></a>常用的选择器 :nth-child() Selector</h1><p>选择父类下第一个子节点，p元素</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">p:nth-child(1) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"webkit-font-smoothing-字体抗锯齿\"><a href=\"#webkit-font-smoothing-字体抗锯齿\" class=\"headerlink\" title=\"-webkit-font-smoothing 字体抗锯齿\"></a>-webkit-font-smoothing 字体抗锯齿</h1><p>使用该属性能让页面上的字体变得清晰，但是也会造成font-weight: bold 加粗变得异常。不信你试试…<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">    div &#123;</div><div class=\"line\">        -webkit-font-smoothing: antialiased; </div><div class=\"line\">    &#125;</div><div class=\"line\">~~~   </div><div class=\"line\">---</div><div class=\"line\">`更新3-31`</div><div class=\"line\"># CSS3 filter Property 图片过滤</div><div class=\"line\">~~~css   </div><div class=\"line\">    img &#123;</div><div class=\"line\">        filter: grayscale(100%); //灰度</div><div class=\"line\">        filter: blur(5px); //模糊</div><div class=\"line\">        filter:brightness(200%); //高亮</div><div class=\"line\">        filter:saturate(8); //饱和</div><div class=\"line\">        filter:sepia(100%); //怀旧</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>移动端可以使用，IE兼容不好。更多请看<br><a href=\"https://www.w3schools.com/cssref/css3_pr_filter.asp\" target=\"_blank\" rel=\"external\">https://www.w3schools.com/cssref/css3_pr_filter.asp</a></p>\n<h2 id=\"使用css创建三角形\"><a href=\"#使用css创建三角形\" class=\"headerlink\" title=\"使用css创建三角形\"></a>使用css创建三角形</h2><p>这个很多面试题好像问到，但实际中我也确实使用了。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">    div &#123;</div><div class=\"line\">        border-bottom: 10px solid white;</div><div class=\"line\">        border-right: 10px solid transparent;</div><div class=\"line\">        border-left: 10px solid transparent;</div><div class=\"line\">        height: 0px; </div><div class=\"line\">        width: 0px; </div><div class=\"line\">    &#125;</div><div class=\"line\">    transparent 透明</div><div class=\"line\">~~~  </div><div class=\"line\"># clip属性，截取你想要显示的图片</div><div class=\"line\">~~~css  </div><div class=\"line\">    img &#123;</div><div class=\"line\">        position: absolute;</div><div class=\"line\">        clip: rect(0px,60px,200px,0px);</div><div class=\"line\">    &#125;</div><div class=\"line\">~~~  </div><div class=\"line\">你有兴趣可以看</div><div class=\"line\">https://tympanus.net/codrops/2013/01/16/understanding-the-css-clip-property/</div><div class=\"line\"></div><div class=\"line\"># 设置文字，字母间距，很实用 letter-spacing</div><div class=\"line\">~~~css </div><div class=\"line\">    h1 &#123;</div><div class=\"line\">        letter-spacing: *px; //也可以是负数</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<p><code>更新4-3 补充</code></p>\n<p>关于display: box 和 display: flex，前者是2009实施，后者2012年，如果你的安卓比较老请使用display: box，但是2者的表现可能有点不同。下面是兼容方法。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">-webkit-box</span>; <span class=\"comment\">/* Chrome 4+, Safari 3.1, iOS Safari 3.2+ */</span></div><div class=\"line\"><span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">-moz-box</span>; <span class=\"comment\">/* Firefox 17- */</span></div><div class=\"line\"><span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">-webkit-flex</span>; <span class=\"comment\">/* Chrome 21+, Safari 6.1+, iOS Safari 7+, Opera 15/16 */</span></div><div class=\"line\"><span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">-moz-flex</span>; <span class=\"comment\">/* Firefox 18+ */</span></div><div class=\"line\"><span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">-ms-flexbox</span>; <span class=\"comment\">/* IE 10 */</span></div><div class=\"line\"><span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">flex</span>; <span class=\"comment\">/* Chrome 29+, Firefox 22+, IE 11+, Opera 12.1/17/18, Android 4.4+ */</span></div></pre></td></tr></table></figure></p>\n<p><a href=\"https://www.zhihu.com/question/22991944/answer/23302749\" target=\"_blank\" rel=\"external\">知乎一丝</a>具体问题可以参考这篇文章。</p>\n<hr>\n<p><code>更新4-12 补充</code></p>\n<h1 id=\"图片模糊效果\"><a href=\"#图片模糊效果\" class=\"headerlink\" title=\"图片模糊效果\"></a>图片模糊效果</h1><pre><code class=\"css\"><span class=\"selector-tag\">-webkit-filter</span>: <span class=\"selector-tag\">blur</span>(5<span class=\"selector-tag\">px</span>);\n</code></pre>\n<h1 id=\"图片运动过程中，导致图片模糊\"><a href=\"#图片运动过程中，导致图片模糊\" class=\"headerlink\" title=\"图片运动过程中，导致图片模糊\"></a>图片运动过程中，导致图片模糊</h1><p>在animation过程中，图片会出现模糊的情况，可以设置如下在图片上面。</p>\n<pre><code class=\"css\"><span class=\"selector-tag\">transform</span>: <span class=\"selector-tag\">translate3d</span>(0, 0, 0);\n</code></pre>\n<p>后续追加…有错误的地方请指正，谢谢。</p>\n<p>下面是一些CSS的网站，项目中也经常使用的。</p>\n<p><a href=\"http://isux.tencent.com/css3/\" target=\"_blank\" rel=\"external\">Css3动画手册</a><br><a href=\"http://css.doyoe.com/\" target=\"_blank\" rel=\"external\">Css参考手册</a><br><a href=\"http://anicollection.github.io/#/\" target=\"_blank\" rel=\"external\">Anicollection 动画库</a><br><a href=\"https://daneden.github.io/animate.css/\" target=\"_blank\" rel=\"external\">Animate 动画库</a><br><a href=\"http://elrumordelaluz.github.io/csshake/\" target=\"_blank\" rel=\"external\">csshake 抖动很逗</a><br><a href=\"http://weloveiconfonts.com/\" target=\"_blank\" rel=\"external\">字体图标</a><br><a href=\"https://www.w3schools.com/cssref/pr_pos_clip.asp\" target=\"_blank\" rel=\"external\">w3schools</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Github-https-github-com-asd0102433-blog\"><a href=\"#Github-https-github-com-asd0102433-blog\" class=\"headerlink\" title=\"Github: https://github.com/asd0102433/blog\"></a>Github: <a href=\"https://github.com/asd0102433/blog\" target=\"_blank\" rel=\"external\">https://github.com/asd0102433/blog</a></h1><blockquote>\n<p>css有些属性容易忘记，半天不写就要去查api，有时候api还不好使，于是还是记下来以后方便用，后续会慢慢补充进来的。</p>\n<p>Github: <a href=\"https://github.com/asd0102433/blog\" target=\"_blank\" rel=\"external\">https://github.com/asd0102433/blog</a><br>博客长期更新，喜欢的朋友star一下</p>\n</blockquote>\n<h1 id=\"outline-移除当选中input元素的时候会出现状态线\"><a href=\"#outline-移除当选中input元素的时候会出现状态线\" class=\"headerlink\" title=\"outline 移除当选中input元素的时候会出现状态线\"></a><code>outline</code> 移除当选中input元素的时候会出现状态线</h1><input placeholder=\"你试试 点这个框框\"> \n\n<p>  An outline is a line that is drawn around elements (outside the borders) to make the element “stand out”.<br>  包裹elements 的一个线，一般设置成none 。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">    outline: none; //一般情况下移除它</div><div class=\"line\">    // outline: 5px dotted red; 也可以设置样式</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>","more":"<h1 id=\"contenteditable-设置element是否可编辑\"><a href=\"#contenteditable-设置element是否可编辑\" class=\"headerlink\" title=\"contenteditable 设置element是否可编辑\"></a><code>contenteditable</code> 设置element是否可编辑</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">contenteditable</span>=<span class=\"string\">\"true\"</span>&gt;</span>可编辑<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>可以通过input, blur事件来监听element的输入和输入完后鼠标离开。</p>\n<h1 id=\"webkit-playsinline\"><a href=\"#webkit-playsinline\" class=\"headerlink\" title=\"webkit-playsinline\"></a><code>webkit-playsinline</code></h1><p>手机video 都可以在页面中播放，而不是全屏播放了。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">src</span>=<span class=\"string\">\"test.mp4\"</span> <span class=\"attr\">webkit-playsinline</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"position-absolute，-让margin有效的\"><a href=\"#position-absolute，-让margin有效的\" class=\"headerlink\" title=\"position: absolute， 让margin有效的\"></a>position: absolute， 让margin有效的</h1><p>  设置left:0, right:0 margin: 0 auto; 就可以。原因是2边都是0不存在边距，element就可以得出距离，并居中。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">div</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"使用clearfix-清除浮动，解决父类高度崩塌。\"><a href=\"#使用clearfix-清除浮动，解决父类高度崩塌。\" class=\"headerlink\" title=\"使用clearfix 清除浮动，解决父类高度崩塌。\"></a>使用clearfix 清除浮动，解决父类高度崩塌。</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.clearfix</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">zoom</span>: <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;</div><div class=\"line\">   <span class=\"attribute\">visibility</span>: hidden;</div><div class=\"line\">     <span class=\"attribute\">display</span>: block;</div><div class=\"line\">     <span class=\"attribute\">font-size</span>: <span class=\"number\">0</span>;</div><div class=\"line\">     <span class=\"attribute\">content</span>: <span class=\"string\">\" \"</span>;</div><div class=\"line\">     <span class=\"attribute\">clear</span>: both;</div><div class=\"line\">     <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"user-select-禁止用户选中文本\"><a href=\"#user-select-禁止用户选中文本\" class=\"headerlink\" title=\"user-select 禁止用户选中文本\"></a>user-select 禁止用户选中文本</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">div</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">user-select</span>: none; <span class=\"comment\">/* Standard syntax */</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"清除手机tap事件后element-时候出现的一个高亮\"><a href=\"#清除手机tap事件后element-时候出现的一个高亮\" class=\"headerlink\" title=\"清除手机tap事件后element 时候出现的一个高亮\"></a>清除手机tap事件后element 时候出现的一个高亮</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">* &#123;</div><div class=\"line\">  <span class=\"attribute\">-webkit-tap-highlight-color</span>: <span class=\"built_in\">rgba</span>(0,0,0,0);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"webkit-scrollbar-thumb\"><a href=\"#webkit-scrollbar-thumb\" class=\"headerlink\" title=\"::-webkit-scrollbar-thumb\"></a>::-webkit-scrollbar-thumb</h1><p>  可以修改浏览器的滚动条样式。IE火狐可能不支持。</p>\n<hr>\n<h1 id=\"webkit-appearance-none\"><a href=\"#webkit-appearance-none\" class=\"headerlink\" title=\"-webkit-appearance:none\"></a>-webkit-appearance:none</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">To apply platform specific styling to an element that doesn&apos;t have it by default</div><div class=\"line\">To remove platform specific styling to an element that does have it by default</div></pre></td></tr></table></figure>\n<p>移除浏览器默认的样式，比如chrome的input默认样式，然后就可以定义需要的样式。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">input, button, textarea, select &#123;</div><div class=\"line\">  *font-size: 100%;</div><div class=\"line\">  -webkit-appearance:none;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"CSS开启硬件加速\"><a href=\"#CSS开启硬件加速\" class=\"headerlink\" title=\"CSS开启硬件加速\"></a>CSS开启硬件加速</h1><p><a href=\"http://www.cnblogs.com/rubylouvre/p/3471490.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/rubylouvre/p/3471490.html</a><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">-webkit-transform</span>: <span class=\"selector-tag\">translateZ</span>(0);</div></pre></td></tr></table></figure></p>\n<h1 id=\"使用CSS-transforms-或者-animations时可能会有页面闪烁的bug\"><a href=\"#使用CSS-transforms-或者-animations时可能会有页面闪烁的bug\" class=\"headerlink\" title=\"使用CSS transforms 或者 animations时可能会有页面闪烁的bug\"></a>使用CSS transforms 或者 animations时可能会有页面闪烁的bug</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">-webkit-backface-visibility</span>: <span class=\"selector-tag\">hidden</span>;</div></pre></td></tr></table></figure>\n<h1 id=\"webkit-touch-callout-禁止长按链接与图片弹出菜单\"><a href=\"#webkit-touch-callout-禁止长按链接与图片弹出菜单\" class=\"headerlink\" title=\"-webkit-touch-callout 禁止长按链接与图片弹出菜单\"></a>-webkit-touch-callout 禁止长按链接与图片弹出菜单</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">-webkit-touch-callout</span>: <span class=\"selector-tag\">none</span>;</div></pre></td></tr></table></figure>\n<h1 id=\"transform-style-preserve-3d-让元素支持3d\"><a href=\"#transform-style-preserve-3d-让元素支持3d\" class=\"headerlink\" title=\"transform-style: preserve-3d   让元素支持3d\"></a>transform-style: preserve-3d   让元素支持3d</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">div</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotateY</span>(60deg);</div><div class=\"line\">    <span class=\"attribute\">transform-style</span>: preserve-<span class=\"number\">3</span>d;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"perspective-透视\"><a href=\"#perspective-透视\" class=\"headerlink\" title=\"perspective 透视\"></a>perspective 透视</h1><p>这个属性的存在决定你看到的元素是2d还是3d。一般设置在包裹元素的父类上。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.div-box</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">perspective</span>: <span class=\"number\">400px</span>; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"css实现不换行、自动换行、强制换行\"><a href=\"#css实现不换行、自动换行、强制换行\" class=\"headerlink\" title=\"css实现不换行、自动换行、强制换行\"></a>css实现不换行、自动换行、强制换行</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//不换行</div><div class=\"line\">white-space:nowrap;</div><div class=\"line\"></div><div class=\"line\">//自动换行</div><div class=\"line\">word-wrap: break-word; </div><div class=\"line\">word-break: normal; </div><div class=\"line\"></div><div class=\"line\">//强制换行</div><div class=\"line\">word-break:break-all;</div></pre></td></tr></table></figure>\n<h1 id=\"box-sizing-让元素的宽度、高度包含border和padding\"><a href=\"#box-sizing-让元素的宽度、高度包含border和padding\" class=\"headerlink\" title=\"box-sizing 让元素的宽度、高度包含border和padding\"></a>box-sizing 让元素的宽度、高度包含border和padding</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"calc-function-计算属性值\"><a href=\"#calc-function-计算属性值\" class=\"headerlink\" title=\"calc() function, 计算属性值\"></a>calc() function, 计算属性值</h1><p><a href=\"https://www.w3schools.com/cssref/func_calc.asp\" target=\"_blank\" rel=\"external\">https://www.w3schools.com/cssref/func_calc.asp</a></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">    div &#123;</div><div class=\"line\">        width: calc(100% - 100px);</div><div class=\"line\">    &#125;</div><div class=\"line\">~~~ </div><div class=\"line\"></div><div class=\"line\">上面的例子就是让宽度为100%减去100px的值，项目中很适用，IE9以上</div><div class=\"line\"></div><div class=\"line\"># css3 linear-gradient 线性渐变</div><div class=\"line\">默认开始在top, 也可以自定义方向。</div><div class=\"line\"></div><div class=\"line\">~~~css   </div><div class=\"line\">    div &#123;</div><div class=\"line\">        linear-gradient(red, yellow)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    background: linear-gradient(direction, color-stop1, color-stop2, ...);</div></pre></td></tr></table></figure>\n<h1 id=\"常用的选择器-nth-child-Selector\"><a href=\"#常用的选择器-nth-child-Selector\" class=\"headerlink\" title=\"常用的选择器 :nth-child() Selector\"></a>常用的选择器 :nth-child() Selector</h1><p>选择父类下第一个子节点，p元素</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">p:nth-child(1) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"webkit-font-smoothing-字体抗锯齿\"><a href=\"#webkit-font-smoothing-字体抗锯齿\" class=\"headerlink\" title=\"-webkit-font-smoothing 字体抗锯齿\"></a>-webkit-font-smoothing 字体抗锯齿</h1><p>使用该属性能让页面上的字体变得清晰，但是也会造成font-weight: bold 加粗变得异常。不信你试试…<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">    div &#123;</div><div class=\"line\">        -webkit-font-smoothing: antialiased; </div><div class=\"line\">    &#125;</div><div class=\"line\">~~~   </div><div class=\"line\">---</div><div class=\"line\">`更新3-31`</div><div class=\"line\"># CSS3 filter Property 图片过滤</div><div class=\"line\">~~~css   </div><div class=\"line\">    img &#123;</div><div class=\"line\">        filter: grayscale(100%); //灰度</div><div class=\"line\">        filter: blur(5px); //模糊</div><div class=\"line\">        filter:brightness(200%); //高亮</div><div class=\"line\">        filter:saturate(8); //饱和</div><div class=\"line\">        filter:sepia(100%); //怀旧</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>移动端可以使用，IE兼容不好。更多请看<br><a href=\"https://www.w3schools.com/cssref/css3_pr_filter.asp\" target=\"_blank\" rel=\"external\">https://www.w3schools.com/cssref/css3_pr_filter.asp</a></p>\n<h2 id=\"使用css创建三角形\"><a href=\"#使用css创建三角形\" class=\"headerlink\" title=\"使用css创建三角形\"></a>使用css创建三角形</h2><p>这个很多面试题好像问到，但实际中我也确实使用了。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">    div &#123;</div><div class=\"line\">        border-bottom: 10px solid white;</div><div class=\"line\">        border-right: 10px solid transparent;</div><div class=\"line\">        border-left: 10px solid transparent;</div><div class=\"line\">        height: 0px; </div><div class=\"line\">        width: 0px; </div><div class=\"line\">    &#125;</div><div class=\"line\">    transparent 透明</div><div class=\"line\">~~~  </div><div class=\"line\"># clip属性，截取你想要显示的图片</div><div class=\"line\">~~~css  </div><div class=\"line\">    img &#123;</div><div class=\"line\">        position: absolute;</div><div class=\"line\">        clip: rect(0px,60px,200px,0px);</div><div class=\"line\">    &#125;</div><div class=\"line\">~~~  </div><div class=\"line\">你有兴趣可以看</div><div class=\"line\">https://tympanus.net/codrops/2013/01/16/understanding-the-css-clip-property/</div><div class=\"line\"></div><div class=\"line\"># 设置文字，字母间距，很实用 letter-spacing</div><div class=\"line\">~~~css </div><div class=\"line\">    h1 &#123;</div><div class=\"line\">        letter-spacing: *px; //也可以是负数</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<p><code>更新4-3 补充</code></p>\n<p>关于display: box 和 display: flex，前者是2009实施，后者2012年，如果你的安卓比较老请使用display: box，但是2者的表现可能有点不同。下面是兼容方法。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">-webkit-box</span>; <span class=\"comment\">/* Chrome 4+, Safari 3.1, iOS Safari 3.2+ */</span></div><div class=\"line\"><span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">-moz-box</span>; <span class=\"comment\">/* Firefox 17- */</span></div><div class=\"line\"><span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">-webkit-flex</span>; <span class=\"comment\">/* Chrome 21+, Safari 6.1+, iOS Safari 7+, Opera 15/16 */</span></div><div class=\"line\"><span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">-moz-flex</span>; <span class=\"comment\">/* Firefox 18+ */</span></div><div class=\"line\"><span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">-ms-flexbox</span>; <span class=\"comment\">/* IE 10 */</span></div><div class=\"line\"><span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">flex</span>; <span class=\"comment\">/* Chrome 29+, Firefox 22+, IE 11+, Opera 12.1/17/18, Android 4.4+ */</span></div></pre></td></tr></table></figure></p>\n<p><a href=\"https://www.zhihu.com/question/22991944/answer/23302749\" target=\"_blank\" rel=\"external\">知乎一丝</a>具体问题可以参考这篇文章。</p>\n<hr>\n<p><code>更新4-12 补充</code></p>\n<h1 id=\"图片模糊效果\"><a href=\"#图片模糊效果\" class=\"headerlink\" title=\"图片模糊效果\"></a>图片模糊效果</h1><pre><code class=\"css\"><span class=\"selector-tag\">-webkit-filter</span>: <span class=\"selector-tag\">blur</span>(5<span class=\"selector-tag\">px</span>);\n</code></pre>\n<h1 id=\"图片运动过程中，导致图片模糊\"><a href=\"#图片运动过程中，导致图片模糊\" class=\"headerlink\" title=\"图片运动过程中，导致图片模糊\"></a>图片运动过程中，导致图片模糊</h1><p>在animation过程中，图片会出现模糊的情况，可以设置如下在图片上面。</p>\n<pre><code class=\"css\"><span class=\"selector-tag\">transform</span>: <span class=\"selector-tag\">translate3d</span>(0, 0, 0);\n</code></pre>\n<p>后续追加…有错误的地方请指正，谢谢。</p>\n<p>下面是一些CSS的网站，项目中也经常使用的。</p>\n<p><a href=\"http://isux.tencent.com/css3/\" target=\"_blank\" rel=\"external\">Css3动画手册</a><br><a href=\"http://css.doyoe.com/\" target=\"_blank\" rel=\"external\">Css参考手册</a><br><a href=\"http://anicollection.github.io/#/\" target=\"_blank\" rel=\"external\">Anicollection 动画库</a><br><a href=\"https://daneden.github.io/animate.css/\" target=\"_blank\" rel=\"external\">Animate 动画库</a><br><a href=\"http://elrumordelaluz.github.io/csshake/\" target=\"_blank\" rel=\"external\">csshake 抖动很逗</a><br><a href=\"http://weloveiconfonts.com/\" target=\"_blank\" rel=\"external\">字体图标</a><br><a href=\"https://www.w3schools.com/cssref/pr_pos_clip.asp\" target=\"_blank\" rel=\"external\">w3schools</a></p>"},{"title":"有意思的网站","date":"2017-06-27T08:44:02.000Z","_content":"\n### 加载动画\n地址：https://preloaders.net/en/circular\n描述：许多加载动画，GIF图，SVG，\n收藏指数：※※※※\n","source":"_posts/2017年06月27日.md","raw":"---\ntitle: 有意思的网站\ndate: 2017-06-27 16:44:02\ntags: 一些有用的网站\n---\n\n### 加载动画\n地址：https://preloaders.net/en/circular\n描述：许多加载动画，GIF图，SVG，\n收藏指数：※※※※\n","slug":"2017年06月27日","published":1,"updated":"2017-06-28T07:02:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfnkq5x0009lyfypzaarwxv","content":"<h3 id=\"加载动画\"><a href=\"#加载动画\" class=\"headerlink\" title=\"加载动画\"></a>加载动画</h3><p>地址：<a href=\"https://preloaders.net/en/circular\" target=\"_blank\" rel=\"external\">https://preloaders.net/en/circular</a><br>描述：许多加载动画，GIF图，SVG，<br>收藏指数：※※※※</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"加载动画\"><a href=\"#加载动画\" class=\"headerlink\" title=\"加载动画\"></a>加载动画</h3><p>地址：<a href=\"https://preloaders.net/en/circular\" target=\"_blank\" rel=\"external\">https://preloaders.net/en/circular</a><br>描述：许多加载动画，GIF图，SVG，<br>收藏指数：※※※※</p>\n"},{"title":"2017年04月27日19:01:12","date":"2017-04-27T11:01:14.000Z","toc":true,"_content":"以后的东西：\n##    第一：HTML布局\n>     \n##    第二：CSS样式\n>     \n##    第三：正则表达式\n>     \n##    第四：JavaScript高级API\n>     \n##    第五：React\n>     \n##    第六：Vue\n>     ","source":"_posts/2017年04月27日19-01-12.md","raw":"---\ntitle: '2017年04月27日19:01:12'\ndate: 2017-04-27 19:01:14\ntags: 【前端日志】\ntoc: true\n---\n以后的东西：\n##    第一：HTML布局\n>     \n##    第二：CSS样式\n>     \n##    第三：正则表达式\n>     \n##    第四：JavaScript高级API\n>     \n##    第五：React\n>     \n##    第六：Vue\n>     ","slug":"2017年04月27日19-01-12","published":1,"updated":"2017-06-28T06:58:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfnkq60000blyfyjvae149o","content":"<p>以后的东西：</p>\n<h2 id=\"第一：HTML布局\"><a href=\"#第一：HTML布局\" class=\"headerlink\" title=\"第一：HTML布局\"></a>第一：HTML布局</h2><blockquote>\n<h2 id=\"第二：CSS样式\"><a href=\"#第二：CSS样式\" class=\"headerlink\" title=\"第二：CSS样式\"></a>第二：CSS样式</h2><h2 id=\"第三：正则表达式\"><a href=\"#第三：正则表达式\" class=\"headerlink\" title=\"第三：正则表达式\"></a>第三：正则表达式</h2><h2 id=\"第四：JavaScript高级API\"><a href=\"#第四：JavaScript高级API\" class=\"headerlink\" title=\"第四：JavaScript高级API\"></a>第四：JavaScript高级API</h2><h2 id=\"第五：React\"><a href=\"#第五：React\" class=\"headerlink\" title=\"第五：React\"></a>第五：React</h2><h2 id=\"第六：Vue\"><a href=\"#第六：Vue\" class=\"headerlink\" title=\"第六：Vue\"></a>第六：Vue</h2></blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>以后的东西：</p>\n<h2 id=\"第一：HTML布局\"><a href=\"#第一：HTML布局\" class=\"headerlink\" title=\"第一：HTML布局\"></a>第一：HTML布局</h2><blockquote>\n<h2 id=\"第二：CSS样式\"><a href=\"#第二：CSS样式\" class=\"headerlink\" title=\"第二：CSS样式\"></a>第二：CSS样式</h2><h2 id=\"第三：正则表达式\"><a href=\"#第三：正则表达式\" class=\"headerlink\" title=\"第三：正则表达式\"></a>第三：正则表达式</h2><h2 id=\"第四：JavaScript高级API\"><a href=\"#第四：JavaScript高级API\" class=\"headerlink\" title=\"第四：JavaScript高级API\"></a>第四：JavaScript高级API</h2><h2 id=\"第五：React\"><a href=\"#第五：React\" class=\"headerlink\" title=\"第五：React\"></a>第五：React</h2><h2 id=\"第六：Vue\"><a href=\"#第六：Vue\" class=\"headerlink\" title=\"第六：Vue\"></a>第六：Vue</h2></blockquote>\n"},{"title":"meta 标签使用总结","date":"2017-05-03T10:23:43.000Z","toc":true,"_content":"Meta标签给搜索引擎提供了许多关于网页的信息。这些信息都是隐含信息,意味着对于网页自身的访问者是不可见的\n<!--more-->\nformat-detection\n用法:\n```html\n<meta name=\"format-detection\" content=\"telephone=no\">\n<meta name=\"format-detection\" content=\"email=no\">\n<meta name=\"format-detection\" content=\"telephone=no,email=no\">\n```\n\n介绍: 默认telephone=yes, 如果在页面中有一串数字, Safari 会自动给数字添加链接样式,并且点击可跳转到拨号界面.设为 no 则禁止了把数字转为拨号连接.\nHandheldFriendly\n用法:\n```html\n<!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 -->\n<meta name=\"HandheldFriendly\" content=\"true\">\n```\n介绍: 功能机时代的事实标签,最早在 AvantGo 用来标识移动内容,后来变成一个通用的标准来标识移动站点.\nMobileOptimized\n用法:\n```html\n<meta name=\"MobileOptimized\" content=\"320\">\n```\n介绍: 功能机时代的事实标签,用于标识移动内容的另一种方法,改标签的缺点是—特定的宽度必须给出\nviewport\n用法:\n```html\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no,minimal-ui\">\n```\ncontent的几个属性介绍: \n\nwidth: viewport 的宽度[device-width | pixel_value]width如果直接设置pixel_value数值，大部分的安卓手机不支持，但是iOS支持；\nheight: viewport 的高度(范围从223到10000)\nuser-scalable: [yes | no] 是否允许缩放\ninitial-scale : [数值] 初始化比例（范围从 > 0 到 10）\nminimum-scale : [数值] 允许缩放的最小比例\nmaximum-scale:  [数值] 允许缩放的最大比例\nminimal-ui : IOS7.1的新属性，最小化浏览器UI\n\nkeywords\n用法:\n```html\n<meta name=\"keywords\" content=\"\">\n```\nHTML\n介绍:这个标签在过去很重要，但是现在却没什么价值了。现在没有一个主流的搜索引擎使用meta keywords来判断网页的内容了。\nrobots\n用法:\n```html\n<meta name=\"robots\" content=\"noindex,nofollow\">\n```\n\n介绍: Meta robots标签管理着搜索引擎是否可以进入网页，你可以用它来允许或不允许搜索引擎来获取你的网页、进入你网页中的子链接或对你的网页存档。\n如果你不小心使用了两个矛盾的术语 (例如noindex和index)，谷歌会选择最具限制性的选项。\n为什么这个标签会对搜索引擎优化(SEO)起作用呢?首先，它可以防止对拷贝内容的冗余抓取，例如页面的打印版页面。它也可能会对那些内容不完整的页面或者而存在私密信息的网页起作用。\ndescription\n用法:\n```html\n<meta name=\"description\" content=\"string\">\n```\n\n介绍: 这个标签曾经在搜索排名中占有很大的比重,但随着算法的不断更新升级,他的地位也逐渐下降.他虽然不会提高网站的排名,但是,因为他会被用在搜索引擎的结果页,所以依然有用.\n这也就意味着它仍然可以提高你的网页点击率。毕竟，当用户搜索的关键词与之相匹配时，会以粗体显示突出显示。这就是为什么一个好的页面说明 (利用关键字的) 可以显示更多与用户相关的信息，进而提高了点击率。推荐的description长度为160 个字符。\nauthor\n用法:\n```html\n<meta name=\"author\" content=\"name,xxx@163.com\">\n```\n介绍: 设置作者和联系方式\ncharset\n用法:\n```html\n <!-- 声明文档使用的字符编码 -->\n <meta charset='utf-8'>\n```\nhttp-equiv\n```html\n<!-- 优先使用 IE 最新版本和 Chrome -->\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"/>\n<!-- 不让百度转码 -->\n<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />\n```\nrenderer\n```html\n <!-- 启用360浏览器的极速模式(webkit) --> \n <meta name=\"renderer\" content=\"webkit\">\n```\n浏览器强制竖屏\n```html\n<!-- uc强制竖屏 -->\n<meta name=\"screen-orientation\" content=\"portrait\">\n<!-- QQ强制竖屏 -->\n<meta name=\"x5-orientation\" content=\"portrait\">\n<!-- UC强制全屏 -->\n<meta name=\"full-screen\" content=\"yes\">\n<!-- QQ强制全屏 -->\n<meta name=\"x5-fullscreen\" content=\"true\">\n<!-- UC应用模式 -->\n<meta name=\"browsermode\" content=\"application\">\n<!-- QQ应用模式 -->\n<meta name=\"x5-page-mode\" content=\"app\">\n```\n","source":"_posts/2017年05月03日18-23-40.md","raw":"---\ntitle: 'meta 标签使用总结'\ndate: 2017-05-03 18:23:43\ntags: HTML\ntoc: true\n---\nMeta标签给搜索引擎提供了许多关于网页的信息。这些信息都是隐含信息,意味着对于网页自身的访问者是不可见的\n<!--more-->\nformat-detection\n用法:\n```html\n<meta name=\"format-detection\" content=\"telephone=no\">\n<meta name=\"format-detection\" content=\"email=no\">\n<meta name=\"format-detection\" content=\"telephone=no,email=no\">\n```\n\n介绍: 默认telephone=yes, 如果在页面中有一串数字, Safari 会自动给数字添加链接样式,并且点击可跳转到拨号界面.设为 no 则禁止了把数字转为拨号连接.\nHandheldFriendly\n用法:\n```html\n<!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 -->\n<meta name=\"HandheldFriendly\" content=\"true\">\n```\n介绍: 功能机时代的事实标签,最早在 AvantGo 用来标识移动内容,后来变成一个通用的标准来标识移动站点.\nMobileOptimized\n用法:\n```html\n<meta name=\"MobileOptimized\" content=\"320\">\n```\n介绍: 功能机时代的事实标签,用于标识移动内容的另一种方法,改标签的缺点是—特定的宽度必须给出\nviewport\n用法:\n```html\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no,minimal-ui\">\n```\ncontent的几个属性介绍: \n\nwidth: viewport 的宽度[device-width | pixel_value]width如果直接设置pixel_value数值，大部分的安卓手机不支持，但是iOS支持；\nheight: viewport 的高度(范围从223到10000)\nuser-scalable: [yes | no] 是否允许缩放\ninitial-scale : [数值] 初始化比例（范围从 > 0 到 10）\nminimum-scale : [数值] 允许缩放的最小比例\nmaximum-scale:  [数值] 允许缩放的最大比例\nminimal-ui : IOS7.1的新属性，最小化浏览器UI\n\nkeywords\n用法:\n```html\n<meta name=\"keywords\" content=\"\">\n```\nHTML\n介绍:这个标签在过去很重要，但是现在却没什么价值了。现在没有一个主流的搜索引擎使用meta keywords来判断网页的内容了。\nrobots\n用法:\n```html\n<meta name=\"robots\" content=\"noindex,nofollow\">\n```\n\n介绍: Meta robots标签管理着搜索引擎是否可以进入网页，你可以用它来允许或不允许搜索引擎来获取你的网页、进入你网页中的子链接或对你的网页存档。\n如果你不小心使用了两个矛盾的术语 (例如noindex和index)，谷歌会选择最具限制性的选项。\n为什么这个标签会对搜索引擎优化(SEO)起作用呢?首先，它可以防止对拷贝内容的冗余抓取，例如页面的打印版页面。它也可能会对那些内容不完整的页面或者而存在私密信息的网页起作用。\ndescription\n用法:\n```html\n<meta name=\"description\" content=\"string\">\n```\n\n介绍: 这个标签曾经在搜索排名中占有很大的比重,但随着算法的不断更新升级,他的地位也逐渐下降.他虽然不会提高网站的排名,但是,因为他会被用在搜索引擎的结果页,所以依然有用.\n这也就意味着它仍然可以提高你的网页点击率。毕竟，当用户搜索的关键词与之相匹配时，会以粗体显示突出显示。这就是为什么一个好的页面说明 (利用关键字的) 可以显示更多与用户相关的信息，进而提高了点击率。推荐的description长度为160 个字符。\nauthor\n用法:\n```html\n<meta name=\"author\" content=\"name,xxx@163.com\">\n```\n介绍: 设置作者和联系方式\ncharset\n用法:\n```html\n <!-- 声明文档使用的字符编码 -->\n <meta charset='utf-8'>\n```\nhttp-equiv\n```html\n<!-- 优先使用 IE 最新版本和 Chrome -->\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"/>\n<!-- 不让百度转码 -->\n<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />\n```\nrenderer\n```html\n <!-- 启用360浏览器的极速模式(webkit) --> \n <meta name=\"renderer\" content=\"webkit\">\n```\n浏览器强制竖屏\n```html\n<!-- uc强制竖屏 -->\n<meta name=\"screen-orientation\" content=\"portrait\">\n<!-- QQ强制竖屏 -->\n<meta name=\"x5-orientation\" content=\"portrait\">\n<!-- UC强制全屏 -->\n<meta name=\"full-screen\" content=\"yes\">\n<!-- QQ强制全屏 -->\n<meta name=\"x5-fullscreen\" content=\"true\">\n<!-- UC应用模式 -->\n<meta name=\"browsermode\" content=\"application\">\n<!-- QQ应用模式 -->\n<meta name=\"x5-page-mode\" content=\"app\">\n```\n","slug":"2017年05月03日18-23-40","published":1,"updated":"2017-06-28T06:58:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfnkq61000dlyfywz88sa8q","content":"<p>Meta标签给搜索引擎提供了许多关于网页的信息。这些信息都是隐含信息,意味着对于网页自身的访问者是不可见的<br><a id=\"more\"></a><br>format-detection<br>用法:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"telephone=no\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"email=no\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"telephone=no,email=no\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>介绍: 默认telephone=yes, 如果在页面中有一串数字, Safari 会自动给数字添加链接样式,并且点击可跳转到拨号界面.设为 no 则禁止了把数字转为拨号连接.<br>HandheldFriendly<br>用法:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"HandheldFriendly\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"true\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>介绍: 功能机时代的事实标签,最早在 AvantGo 用来标识移动内容,后来变成一个通用的标准来标识移动站点.<br>MobileOptimized<br>用法:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MobileOptimized\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"320\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>介绍: 功能机时代的事实标签,用于标识移动内容的另一种方法,改标签的缺点是—特定的宽度必须给出<br>viewport<br>用法:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no,minimal-ui\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>content的几个属性介绍: </p>\n<p>width: viewport 的宽度[device-width | pixel_value]width如果直接设置pixel_value数值，大部分的安卓手机不支持，但是iOS支持；<br>height: viewport 的高度(范围从223到10000)<br>user-scalable: [yes | no] 是否允许缩放<br>initial-scale : [数值] 初始化比例（范围从 &gt; 0 到 10）<br>minimum-scale : [数值] 允许缩放的最小比例<br>maximum-scale:  [数值] 允许缩放的最大比例<br>minimal-ui : IOS7.1的新属性，最小化浏览器UI</p>\n<p>keywords<br>用法:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>HTML<br>介绍:这个标签在过去很重要，但是现在却没什么价值了。现在没有一个主流的搜索引擎使用meta keywords来判断网页的内容了。<br>robots<br>用法:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"noindex,nofollow\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>介绍: Meta robots标签管理着搜索引擎是否可以进入网页，你可以用它来允许或不允许搜索引擎来获取你的网页、进入你网页中的子链接或对你的网页存档。<br>如果你不小心使用了两个矛盾的术语 (例如noindex和index)，谷歌会选择最具限制性的选项。<br>为什么这个标签会对搜索引擎优化(SEO)起作用呢?首先，它可以防止对拷贝内容的冗余抓取，例如页面的打印版页面。它也可能会对那些内容不完整的页面或者而存在私密信息的网页起作用。<br>description<br>用法:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"string\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>介绍: 这个标签曾经在搜索排名中占有很大的比重,但随着算法的不断更新升级,他的地位也逐渐下降.他虽然不会提高网站的排名,但是,因为他会被用在搜索引擎的结果页,所以依然有用.<br>这也就意味着它仍然可以提高你的网页点击率。毕竟，当用户搜索的关键词与之相匹配时，会以粗体显示突出显示。这就是为什么一个好的页面说明 (利用关键字的) 可以显示更多与用户相关的信息，进而提高了点击率。推荐的description长度为160 个字符。<br>author<br>用法:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"author\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"name,xxx@163.com\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>介绍: 设置作者和联系方式<br>charset<br>用法:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 声明文档使用的字符编码 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">'utf-8'</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>http-equiv<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 优先使用 IE 最新版本和 Chrome --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge,chrome=1\"</span>/&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 不让百度转码 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Cache-Control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-siteapp\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<p>renderer<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 启用360浏览器的极速模式(webkit) --&gt;</span> </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"webkit\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>浏览器强制竖屏<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- uc强制竖屏 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"screen-orientation\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"portrait\"</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- QQ强制竖屏 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x5-orientation\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"portrait\"</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- UC强制全屏 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"full-screen\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"yes\"</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- QQ强制全屏 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x5-fullscreen\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"true\"</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- UC应用模式 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"browsermode\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"application\"</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- QQ应用模式 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x5-page-mode\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"app\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>Meta标签给搜索引擎提供了许多关于网页的信息。这些信息都是隐含信息,意味着对于网页自身的访问者是不可见的<br>","more":"<br>format-detection<br>用法:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"telephone=no\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"email=no\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"telephone=no,email=no\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>介绍: 默认telephone=yes, 如果在页面中有一串数字, Safari 会自动给数字添加链接样式,并且点击可跳转到拨号界面.设为 no 则禁止了把数字转为拨号连接.<br>HandheldFriendly<br>用法:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"HandheldFriendly\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"true\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>介绍: 功能机时代的事实标签,最早在 AvantGo 用来标识移动内容,后来变成一个通用的标准来标识移动站点.<br>MobileOptimized<br>用法:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MobileOptimized\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"320\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>介绍: 功能机时代的事实标签,用于标识移动内容的另一种方法,改标签的缺点是—特定的宽度必须给出<br>viewport<br>用法:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no,minimal-ui\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>content的几个属性介绍: </p>\n<p>width: viewport 的宽度[device-width | pixel_value]width如果直接设置pixel_value数值，大部分的安卓手机不支持，但是iOS支持；<br>height: viewport 的高度(范围从223到10000)<br>user-scalable: [yes | no] 是否允许缩放<br>initial-scale : [数值] 初始化比例（范围从 &gt; 0 到 10）<br>minimum-scale : [数值] 允许缩放的最小比例<br>maximum-scale:  [数值] 允许缩放的最大比例<br>minimal-ui : IOS7.1的新属性，最小化浏览器UI</p>\n<p>keywords<br>用法:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>HTML<br>介绍:这个标签在过去很重要，但是现在却没什么价值了。现在没有一个主流的搜索引擎使用meta keywords来判断网页的内容了。<br>robots<br>用法:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"noindex,nofollow\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>介绍: Meta robots标签管理着搜索引擎是否可以进入网页，你可以用它来允许或不允许搜索引擎来获取你的网页、进入你网页中的子链接或对你的网页存档。<br>如果你不小心使用了两个矛盾的术语 (例如noindex和index)，谷歌会选择最具限制性的选项。<br>为什么这个标签会对搜索引擎优化(SEO)起作用呢?首先，它可以防止对拷贝内容的冗余抓取，例如页面的打印版页面。它也可能会对那些内容不完整的页面或者而存在私密信息的网页起作用。<br>description<br>用法:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"string\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>介绍: 这个标签曾经在搜索排名中占有很大的比重,但随着算法的不断更新升级,他的地位也逐渐下降.他虽然不会提高网站的排名,但是,因为他会被用在搜索引擎的结果页,所以依然有用.<br>这也就意味着它仍然可以提高你的网页点击率。毕竟，当用户搜索的关键词与之相匹配时，会以粗体显示突出显示。这就是为什么一个好的页面说明 (利用关键字的) 可以显示更多与用户相关的信息，进而提高了点击率。推荐的description长度为160 个字符。<br>author<br>用法:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"author\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"name,xxx@163.com\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>介绍: 设置作者和联系方式<br>charset<br>用法:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 声明文档使用的字符编码 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">'utf-8'</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>http-equiv<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 优先使用 IE 最新版本和 Chrome --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge,chrome=1\"</span>/&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 不让百度转码 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Cache-Control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-siteapp\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<p>renderer<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 启用360浏览器的极速模式(webkit) --&gt;</span> </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"webkit\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>浏览器强制竖屏<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- uc强制竖屏 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"screen-orientation\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"portrait\"</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- QQ强制竖屏 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x5-orientation\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"portrait\"</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- UC强制全屏 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"full-screen\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"yes\"</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- QQ强制全屏 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x5-fullscreen\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"true\"</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- UC应用模式 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"browsermode\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"application\"</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- QQ应用模式 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x5-page-mode\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"app\"</span>&gt;</span></div></pre></td></tr></table></figure></p>"},{"title":"ITem2APP","date":"2017-06-07T08:38:35.000Z","toc":true,"_content":"\n做一个好看的终端。--Mac\n\n首先呢下载item2，官方的下载地址：https://www.iterm2.com/downloads.html\n\n其次，安装oh-my-zsh\n<!--more-->\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)”\n\n把上边的代码放到item2中执行\n\n前戏准备好了，下面开始正餐\n\n首先要去安装字体。（如果不安装字体，会导致主题出现乱码。）\n\n下载字体的地址：https://github.com/powerline/fonts/\n\n下载主题的地址：https://github.com/robbyrussell/oh-my-zsh/wiki/Themes\n\n\n字体对应主题（猜测）\n\n我自己的主题案例\n\n主题下载地址：https://github.com/powerline/fonts/\n\n字体下载地址：https://github.com/powerline/fonts/blob/master/Inconsolata/Inconsolata%20for%20Powerline.otf\n主题名字：agnoster\n\n字体安装完成之后，打开ITem2APP\n\nMac 快捷键 command+，打开偏好设置。然后打开Profiles==>Text\n\n修改Font和Non-ASCll Font 字体为；lnconsolata\n\n然后就大功告成。","source":"_posts/ITem2APP.md","raw":"---\ntitle: ITem2APP\ndate: 2017-06-07 16:38:35\ntags: MacAPP\ntoc: true\n---\n\n做一个好看的终端。--Mac\n\n首先呢下载item2，官方的下载地址：https://www.iterm2.com/downloads.html\n\n其次，安装oh-my-zsh\n<!--more-->\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)”\n\n把上边的代码放到item2中执行\n\n前戏准备好了，下面开始正餐\n\n首先要去安装字体。（如果不安装字体，会导致主题出现乱码。）\n\n下载字体的地址：https://github.com/powerline/fonts/\n\n下载主题的地址：https://github.com/robbyrussell/oh-my-zsh/wiki/Themes\n\n\n字体对应主题（猜测）\n\n我自己的主题案例\n\n主题下载地址：https://github.com/powerline/fonts/\n\n字体下载地址：https://github.com/powerline/fonts/blob/master/Inconsolata/Inconsolata%20for%20Powerline.otf\n主题名字：agnoster\n\n字体安装完成之后，打开ITem2APP\n\nMac 快捷键 command+，打开偏好设置。然后打开Profiles==>Text\n\n修改Font和Non-ASCll Font 字体为；lnconsolata\n\n然后就大功告成。","slug":"ITem2APP","published":1,"updated":"2017-06-28T06:59:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfnkq63000flyfyc15t55wp","content":"<p>做一个好看的终端。–Mac</p>\n<p>首先呢下载item2，官方的下载地址：<a href=\"https://www.iterm2.com/downloads.html\" target=\"_blank\" rel=\"external\">https://www.iterm2.com/downloads.html</a></p>\n<p>其次，安装oh-my-zsh<br><a id=\"more\"></a><br>sh -c “$(curl -fsSL <a href=\"https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)”\" target=\"_blank\" rel=\"external\">https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)”</a></p>\n<p>把上边的代码放到item2中执行</p>\n<p>前戏准备好了，下面开始正餐</p>\n<p>首先要去安装字体。（如果不安装字体，会导致主题出现乱码。）</p>\n<p>下载字体的地址：<a href=\"https://github.com/powerline/fonts/\" target=\"_blank\" rel=\"external\">https://github.com/powerline/fonts/</a></p>\n<p>下载主题的地址：<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Themes\" target=\"_blank\" rel=\"external\">https://github.com/robbyrussell/oh-my-zsh/wiki/Themes</a></p>\n<p>字体对应主题（猜测）</p>\n<p>我自己的主题案例</p>\n<p>主题下载地址：<a href=\"https://github.com/powerline/fonts/\" target=\"_blank\" rel=\"external\">https://github.com/powerline/fonts/</a></p>\n<p>字体下载地址：<a href=\"https://github.com/powerline/fonts/blob/master/Inconsolata/Inconsolata%20for%20Powerline.otf\" target=\"_blank\" rel=\"external\">https://github.com/powerline/fonts/blob/master/Inconsolata/Inconsolata%20for%20Powerline.otf</a><br>主题名字：agnoster</p>\n<p>字体安装完成之后，打开ITem2APP</p>\n<p>Mac 快捷键 command+，打开偏好设置。然后打开Profiles==&gt;Text</p>\n<p>修改Font和Non-ASCll Font 字体为；lnconsolata</p>\n<p>然后就大功告成。</p>\n","site":{"data":{}},"excerpt":"<p>做一个好看的终端。–Mac</p>\n<p>首先呢下载item2，官方的下载地址：<a href=\"https://www.iterm2.com/downloads.html\" target=\"_blank\" rel=\"external\">https://www.iterm2.com/downloads.html</a></p>\n<p>其次，安装oh-my-zsh<br>","more":"<br>sh -c “$(curl -fsSL <a href=\"https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)”\" target=\"_blank\" rel=\"external\">https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)”</a></p>\n<p>把上边的代码放到item2中执行</p>\n<p>前戏准备好了，下面开始正餐</p>\n<p>首先要去安装字体。（如果不安装字体，会导致主题出现乱码。）</p>\n<p>下载字体的地址：<a href=\"https://github.com/powerline/fonts/\" target=\"_blank\" rel=\"external\">https://github.com/powerline/fonts/</a></p>\n<p>下载主题的地址：<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Themes\" target=\"_blank\" rel=\"external\">https://github.com/robbyrussell/oh-my-zsh/wiki/Themes</a></p>\n<p>字体对应主题（猜测）</p>\n<p>我自己的主题案例</p>\n<p>主题下载地址：<a href=\"https://github.com/powerline/fonts/\" target=\"_blank\" rel=\"external\">https://github.com/powerline/fonts/</a></p>\n<p>字体下载地址：<a href=\"https://github.com/powerline/fonts/blob/master/Inconsolata/Inconsolata%20for%20Powerline.otf\" target=\"_blank\" rel=\"external\">https://github.com/powerline/fonts/blob/master/Inconsolata/Inconsolata%20for%20Powerline.otf</a><br>主题名字：agnoster</p>\n<p>字体安装完成之后，打开ITem2APP</p>\n<p>Mac 快捷键 command+，打开偏好设置。然后打开Profiles==&gt;Text</p>\n<p>修改Font和Non-ASCll Font 字体为；lnconsolata</p>\n<p>然后就大功告成。</p>"},{"title":"Mac版 sublime text 3 快捷键","date":"2017-04-20T13:52:22.000Z","toc":true,"_content":"一、快速生成HTML5的头部信息的步骤：\n\n1.Ctrl + N，新建一个文档；\n\n2.Ctrl + Shift + P，打开命令模式，再输入 sshtml 进行模糊匹配，将语法切换到html模式；切换语法\n\n3.输入 !，再按下 Tab键或者 Ctrl + E ，就能快速打开HTML5的整体结构。\n\n<!--more-->\n二、常用的快捷键：\n\nCtrl + P，打开搜索框。具体操作为：1、输入当前项目中的文件名，快速搜索文件，2、输入@和关键字，查找文件中函数名，3、输入：和数字，跳转到文件中该行代码，4、输入#和关键字，查找变量名。 \ncommand + F 搜索当前文件函数、方法 \nCtrl + 回车，在当前行的下一行添加一行空行。 \nCtrl + Shift + 回车，在当前行的上一行添加一行空行。 \nCtrl + Z，撤销。 \nCtrl + Y，取消撤销。 \nCtrl + ]，或者Tab键，向右缩进。 \nCtrl + [，或者Shift +Tab，向左缩进。 \nCtrl + Shift + V，粘贴过程中保持缩进。 \nAlt + F3，选中选择的词。 \n“>”号，子元素选择符；“.”号，后面跟的是class名；“$”符，代表的是序号。\n\n举个例子：输入 ul>.item$*10,再按下Ctrl + E，则会一次性输出一个无需列表，列表中有10个带有class名为item的 li 行。\n\n无疑这种一次性输入多行的方式十分快捷。如果多行有同一种操作，可以运用多行游标，Alt + F3会选中鼠标之前选择的词，此时多行被选中，按方向键可以选择\n\n选择类\n\nCtrl+D 选中光标所占的文本，继续操作则会选中下一个相同的文本。\nAlt+F3 选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑。举个栗子：快速选中并更改所有相同的变量名、函数名等。\nCtrl+L 选中整行，继续操作则继续选择下一行，效果和 Shift+↓ 效果一样。\nCtrl+Shift+L 先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。\nCtrl+Shift+M 选择括号内的内容（继续选择父括号）。举个栗子：快速选中删除函数中的代码，重写函数体代码或重写括号内里的内容。\nCtrl+M 光标移动至括号内结束或开始的位置。\nCtrl+Enter 在下一行插入新行。举个栗子：即使光标不在行尾，也能快速向下插入一行。\nCtrl+Shift+Enter 在上一行插入新行。举个栗子：即使光标不在行首，也能快速向上插入一行。\nCtrl+Shift+[ 选中代码，按下快捷键，折叠代码。\nCtrl+Shift+] 选中代码，按下快捷键，展开代码。\nCtrl+K+0 展开所有折叠代码。\nCtrl+← 向左单位性地移动光标，快速移动光标。\nCtrl+→ 向右单位性地移动光标，快速移动光标。\nshift+↑ 向上选中多行。\nshift+↓ 向下选中多行。\nShift+← 向左选中文本。\nShift+→ 向右选中文本。\nCtrl+Shift+← 向左单位性地选中文本。\nCtrl+Shift+→ 向右单位性地选中文本。\nCtrl+Shift+↑ 将光标所在行和上一行代码互换（将光标所在行插入到上一行之前）\nCtrl+Shift+↓ 将光标所在行和下一行代码互换（将光标所在行插入到下一行之后）。\nCtrl+Alt+↑ 向上添加多行光标，可同时编辑多行。\nCtrl+Alt+↓ 向下添加多行光标，可同时编辑多行。\n编辑类\n\nCtrl+J 合并选中的多行代码为一行。举个栗子：将多行格式的CSS属性合并为一行。\nCtrl+Shift+D 复制光标所在整行，插入到下一行。\nTab 向右缩进。\nShift+Tab 向左缩进。\nShift+Tab 向左缩进。\nCtrl+K+K 从光标处开始删除代码至行尾。\nCtrl+Shift+K 删除整行。\nCtrl+/ 注释单行。\nCtrl+Shift+/ 注释多行。\nCtrl+K+U 转换大写。\nCtrl+K+L 转换小写。\nCtrl+Z 撤销。\nCtrl+Y 恢复撤销。\nCtrl+U 软撤销，感觉和 Gtrl+Z 一样。\nCtrl+F2 设置书签\nCtrl+T 左右字母互换。\nF6 单词检测拼写\n搜索类\n\nCtrl+F 打开底部搜索框，查找关键字。\nCtrl+shift+F 在文件夹内查找，与普通编辑器不同的地方是sublime允许添加多个文件夹进行查找，略高端，未研究。\nCtrl+P 打开搜索框。举个栗子：1、输入当前项目中的文件名，快速搜索文件，2、输入@和关键字，查找文件中函数名，3、输入：和数字，跳转到文件中该行代码，4、输入#和关键字，查找变量名。\nCtrl+G 打开搜索框，自动带：，输入数字跳转到该行代码。举个栗子：在页面代码比较长的文件中快速定位。\nCtrl+R 打开搜索框，自动带@，输入关键字，查找文件中的函数名。举个栗子：在函数较多的页面快速查找某个函数。\nCtrl+： 打开搜索框，自动带#，输入关键字，查找文件中的变量名、属性名等。\nCtrl+Shift+P 打开命令框。场景栗子：打开命名框，输入关键字，调用sublime text或插件的功能，例如使用package安装插件。\nEsc 退出光标多行选择，退出搜索框，命令框等。\n显示类\n\nCtrl+Tab 按文件浏览过的顺序，切换当前窗口的标签页。\nCtrl+PageDown 向左切换当前窗口的标签页。\nCtrl+PageUp 向右切换当前窗口的标签页。\nAlt+Shift+1 窗口分屏，恢复默认1屏（非小键盘的数字）\nAlt+Shift+2 左右分屏-2列\nAlt+Shift+3 左右分屏-3列\nAlt+Shift+4 左右分屏-4列\nAlt+Shift+5 等分4屏\nAlt+Shift+8 垂直分屏-2屏\nAlt+Shift+9 垂直分屏-3屏\nCtrl+K+B 开启/关闭侧边栏。\nF11 全屏模式\nShift+F11 免打扰模式","source":"_posts/Mac版-sublime-text-3-快捷键.md","raw":"---\ntitle: Mac版 sublime text 3 快捷键\ndate: 2017-04-20 21:52:22\ntags: Mac APP\ntoc: true\n---\n一、快速生成HTML5的头部信息的步骤：\n\n1.Ctrl + N，新建一个文档；\n\n2.Ctrl + Shift + P，打开命令模式，再输入 sshtml 进行模糊匹配，将语法切换到html模式；切换语法\n\n3.输入 !，再按下 Tab键或者 Ctrl + E ，就能快速打开HTML5的整体结构。\n\n<!--more-->\n二、常用的快捷键：\n\nCtrl + P，打开搜索框。具体操作为：1、输入当前项目中的文件名，快速搜索文件，2、输入@和关键字，查找文件中函数名，3、输入：和数字，跳转到文件中该行代码，4、输入#和关键字，查找变量名。 \ncommand + F 搜索当前文件函数、方法 \nCtrl + 回车，在当前行的下一行添加一行空行。 \nCtrl + Shift + 回车，在当前行的上一行添加一行空行。 \nCtrl + Z，撤销。 \nCtrl + Y，取消撤销。 \nCtrl + ]，或者Tab键，向右缩进。 \nCtrl + [，或者Shift +Tab，向左缩进。 \nCtrl + Shift + V，粘贴过程中保持缩进。 \nAlt + F3，选中选择的词。 \n“>”号，子元素选择符；“.”号，后面跟的是class名；“$”符，代表的是序号。\n\n举个例子：输入 ul>.item$*10,再按下Ctrl + E，则会一次性输出一个无需列表，列表中有10个带有class名为item的 li 行。\n\n无疑这种一次性输入多行的方式十分快捷。如果多行有同一种操作，可以运用多行游标，Alt + F3会选中鼠标之前选择的词，此时多行被选中，按方向键可以选择\n\n选择类\n\nCtrl+D 选中光标所占的文本，继续操作则会选中下一个相同的文本。\nAlt+F3 选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑。举个栗子：快速选中并更改所有相同的变量名、函数名等。\nCtrl+L 选中整行，继续操作则继续选择下一行，效果和 Shift+↓ 效果一样。\nCtrl+Shift+L 先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。\nCtrl+Shift+M 选择括号内的内容（继续选择父括号）。举个栗子：快速选中删除函数中的代码，重写函数体代码或重写括号内里的内容。\nCtrl+M 光标移动至括号内结束或开始的位置。\nCtrl+Enter 在下一行插入新行。举个栗子：即使光标不在行尾，也能快速向下插入一行。\nCtrl+Shift+Enter 在上一行插入新行。举个栗子：即使光标不在行首，也能快速向上插入一行。\nCtrl+Shift+[ 选中代码，按下快捷键，折叠代码。\nCtrl+Shift+] 选中代码，按下快捷键，展开代码。\nCtrl+K+0 展开所有折叠代码。\nCtrl+← 向左单位性地移动光标，快速移动光标。\nCtrl+→ 向右单位性地移动光标，快速移动光标。\nshift+↑ 向上选中多行。\nshift+↓ 向下选中多行。\nShift+← 向左选中文本。\nShift+→ 向右选中文本。\nCtrl+Shift+← 向左单位性地选中文本。\nCtrl+Shift+→ 向右单位性地选中文本。\nCtrl+Shift+↑ 将光标所在行和上一行代码互换（将光标所在行插入到上一行之前）\nCtrl+Shift+↓ 将光标所在行和下一行代码互换（将光标所在行插入到下一行之后）。\nCtrl+Alt+↑ 向上添加多行光标，可同时编辑多行。\nCtrl+Alt+↓ 向下添加多行光标，可同时编辑多行。\n编辑类\n\nCtrl+J 合并选中的多行代码为一行。举个栗子：将多行格式的CSS属性合并为一行。\nCtrl+Shift+D 复制光标所在整行，插入到下一行。\nTab 向右缩进。\nShift+Tab 向左缩进。\nShift+Tab 向左缩进。\nCtrl+K+K 从光标处开始删除代码至行尾。\nCtrl+Shift+K 删除整行。\nCtrl+/ 注释单行。\nCtrl+Shift+/ 注释多行。\nCtrl+K+U 转换大写。\nCtrl+K+L 转换小写。\nCtrl+Z 撤销。\nCtrl+Y 恢复撤销。\nCtrl+U 软撤销，感觉和 Gtrl+Z 一样。\nCtrl+F2 设置书签\nCtrl+T 左右字母互换。\nF6 单词检测拼写\n搜索类\n\nCtrl+F 打开底部搜索框，查找关键字。\nCtrl+shift+F 在文件夹内查找，与普通编辑器不同的地方是sublime允许添加多个文件夹进行查找，略高端，未研究。\nCtrl+P 打开搜索框。举个栗子：1、输入当前项目中的文件名，快速搜索文件，2、输入@和关键字，查找文件中函数名，3、输入：和数字，跳转到文件中该行代码，4、输入#和关键字，查找变量名。\nCtrl+G 打开搜索框，自动带：，输入数字跳转到该行代码。举个栗子：在页面代码比较长的文件中快速定位。\nCtrl+R 打开搜索框，自动带@，输入关键字，查找文件中的函数名。举个栗子：在函数较多的页面快速查找某个函数。\nCtrl+： 打开搜索框，自动带#，输入关键字，查找文件中的变量名、属性名等。\nCtrl+Shift+P 打开命令框。场景栗子：打开命名框，输入关键字，调用sublime text或插件的功能，例如使用package安装插件。\nEsc 退出光标多行选择，退出搜索框，命令框等。\n显示类\n\nCtrl+Tab 按文件浏览过的顺序，切换当前窗口的标签页。\nCtrl+PageDown 向左切换当前窗口的标签页。\nCtrl+PageUp 向右切换当前窗口的标签页。\nAlt+Shift+1 窗口分屏，恢复默认1屏（非小键盘的数字）\nAlt+Shift+2 左右分屏-2列\nAlt+Shift+3 左右分屏-3列\nAlt+Shift+4 左右分屏-4列\nAlt+Shift+5 等分4屏\nAlt+Shift+8 垂直分屏-2屏\nAlt+Shift+9 垂直分屏-3屏\nCtrl+K+B 开启/关闭侧边栏。\nF11 全屏模式\nShift+F11 免打扰模式","slug":"Mac版-sublime-text-3-快捷键","published":1,"updated":"2017-06-28T06:59:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfnkq64000hlyfydpk1hhew","content":"<p>一、快速生成HTML5的头部信息的步骤：</p>\n<p>1.Ctrl + N，新建一个文档；</p>\n<p>2.Ctrl + Shift + P，打开命令模式，再输入 sshtml 进行模糊匹配，将语法切换到html模式；切换语法</p>\n<p>3.输入 !，再按下 Tab键或者 Ctrl + E ，就能快速打开HTML5的整体结构。</p>\n<a id=\"more\"></a>\n<p>二、常用的快捷键：</p>\n<p>Ctrl + P，打开搜索框。具体操作为：1、输入当前项目中的文件名，快速搜索文件，2、输入@和关键字，查找文件中函数名，3、输入：和数字，跳转到文件中该行代码，4、输入#和关键字，查找变量名。<br>command + F 搜索当前文件函数、方法<br>Ctrl + 回车，在当前行的下一行添加一行空行。<br>Ctrl + Shift + 回车，在当前行的上一行添加一行空行。<br>Ctrl + Z，撤销。<br>Ctrl + Y，取消撤销。<br>Ctrl + ]，或者Tab键，向右缩进。<br>Ctrl + [，或者Shift +Tab，向左缩进。<br>Ctrl + Shift + V，粘贴过程中保持缩进。<br>Alt + F3，选中选择的词。<br>“&gt;”号，子元素选择符；“.”号，后面跟的是class名；“$”符，代表的是序号。</p>\n<p>举个例子：输入 ul&gt;.item$*10,再按下Ctrl + E，则会一次性输出一个无需列表，列表中有10个带有class名为item的 li 行。</p>\n<p>无疑这种一次性输入多行的方式十分快捷。如果多行有同一种操作，可以运用多行游标，Alt + F3会选中鼠标之前选择的词，此时多行被选中，按方向键可以选择</p>\n<p>选择类</p>\n<p>Ctrl+D 选中光标所占的文本，继续操作则会选中下一个相同的文本。<br>Alt+F3 选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑。举个栗子：快速选中并更改所有相同的变量名、函数名等。<br>Ctrl+L 选中整行，继续操作则继续选择下一行，效果和 Shift+↓ 效果一样。<br>Ctrl+Shift+L 先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。<br>Ctrl+Shift+M 选择括号内的内容（继续选择父括号）。举个栗子：快速选中删除函数中的代码，重写函数体代码或重写括号内里的内容。<br>Ctrl+M 光标移动至括号内结束或开始的位置。<br>Ctrl+Enter 在下一行插入新行。举个栗子：即使光标不在行尾，也能快速向下插入一行。<br>Ctrl+Shift+Enter 在上一行插入新行。举个栗子：即使光标不在行首，也能快速向上插入一行。<br>Ctrl+Shift+[ 选中代码，按下快捷键，折叠代码。<br>Ctrl+Shift+] 选中代码，按下快捷键，展开代码。<br>Ctrl+K+0 展开所有折叠代码。<br>Ctrl+← 向左单位性地移动光标，快速移动光标。<br>Ctrl+→ 向右单位性地移动光标，快速移动光标。<br>shift+↑ 向上选中多行。<br>shift+↓ 向下选中多行。<br>Shift+← 向左选中文本。<br>Shift+→ 向右选中文本。<br>Ctrl+Shift+← 向左单位性地选中文本。<br>Ctrl+Shift+→ 向右单位性地选中文本。<br>Ctrl+Shift+↑ 将光标所在行和上一行代码互换（将光标所在行插入到上一行之前）<br>Ctrl+Shift+↓ 将光标所在行和下一行代码互换（将光标所在行插入到下一行之后）。<br>Ctrl+Alt+↑ 向上添加多行光标，可同时编辑多行。<br>Ctrl+Alt+↓ 向下添加多行光标，可同时编辑多行。<br>编辑类</p>\n<p>Ctrl+J 合并选中的多行代码为一行。举个栗子：将多行格式的CSS属性合并为一行。<br>Ctrl+Shift+D 复制光标所在整行，插入到下一行。<br>Tab 向右缩进。<br>Shift+Tab 向左缩进。<br>Shift+Tab 向左缩进。<br>Ctrl+K+K 从光标处开始删除代码至行尾。<br>Ctrl+Shift+K 删除整行。<br>Ctrl+/ 注释单行。<br>Ctrl+Shift+/ 注释多行。<br>Ctrl+K+U 转换大写。<br>Ctrl+K+L 转换小写。<br>Ctrl+Z 撤销。<br>Ctrl+Y 恢复撤销。<br>Ctrl+U 软撤销，感觉和 Gtrl+Z 一样。<br>Ctrl+F2 设置书签<br>Ctrl+T 左右字母互换。<br>F6 单词检测拼写<br>搜索类</p>\n<p>Ctrl+F 打开底部搜索框，查找关键字。<br>Ctrl+shift+F 在文件夹内查找，与普通编辑器不同的地方是sublime允许添加多个文件夹进行查找，略高端，未研究。<br>Ctrl+P 打开搜索框。举个栗子：1、输入当前项目中的文件名，快速搜索文件，2、输入@和关键字，查找文件中函数名，3、输入：和数字，跳转到文件中该行代码，4、输入#和关键字，查找变量名。<br>Ctrl+G 打开搜索框，自动带：，输入数字跳转到该行代码。举个栗子：在页面代码比较长的文件中快速定位。<br>Ctrl+R 打开搜索框，自动带@，输入关键字，查找文件中的函数名。举个栗子：在函数较多的页面快速查找某个函数。<br>Ctrl+： 打开搜索框，自动带#，输入关键字，查找文件中的变量名、属性名等。<br>Ctrl+Shift+P 打开命令框。场景栗子：打开命名框，输入关键字，调用sublime text或插件的功能，例如使用package安装插件。<br>Esc 退出光标多行选择，退出搜索框，命令框等。<br>显示类</p>\n<p>Ctrl+Tab 按文件浏览过的顺序，切换当前窗口的标签页。<br>Ctrl+PageDown 向左切换当前窗口的标签页。<br>Ctrl+PageUp 向右切换当前窗口的标签页。<br>Alt+Shift+1 窗口分屏，恢复默认1屏（非小键盘的数字）<br>Alt+Shift+2 左右分屏-2列<br>Alt+Shift+3 左右分屏-3列<br>Alt+Shift+4 左右分屏-4列<br>Alt+Shift+5 等分4屏<br>Alt+Shift+8 垂直分屏-2屏<br>Alt+Shift+9 垂直分屏-3屏<br>Ctrl+K+B 开启/关闭侧边栏。<br>F11 全屏模式<br>Shift+F11 免打扰模式</p>\n","site":{"data":{}},"excerpt":"<p>一、快速生成HTML5的头部信息的步骤：</p>\n<p>1.Ctrl + N，新建一个文档；</p>\n<p>2.Ctrl + Shift + P，打开命令模式，再输入 sshtml 进行模糊匹配，将语法切换到html模式；切换语法</p>\n<p>3.输入 !，再按下 Tab键或者 Ctrl + E ，就能快速打开HTML5的整体结构。</p>","more":"<p>二、常用的快捷键：</p>\n<p>Ctrl + P，打开搜索框。具体操作为：1、输入当前项目中的文件名，快速搜索文件，2、输入@和关键字，查找文件中函数名，3、输入：和数字，跳转到文件中该行代码，4、输入#和关键字，查找变量名。<br>command + F 搜索当前文件函数、方法<br>Ctrl + 回车，在当前行的下一行添加一行空行。<br>Ctrl + Shift + 回车，在当前行的上一行添加一行空行。<br>Ctrl + Z，撤销。<br>Ctrl + Y，取消撤销。<br>Ctrl + ]，或者Tab键，向右缩进。<br>Ctrl + [，或者Shift +Tab，向左缩进。<br>Ctrl + Shift + V，粘贴过程中保持缩进。<br>Alt + F3，选中选择的词。<br>“&gt;”号，子元素选择符；“.”号，后面跟的是class名；“$”符，代表的是序号。</p>\n<p>举个例子：输入 ul&gt;.item$*10,再按下Ctrl + E，则会一次性输出一个无需列表，列表中有10个带有class名为item的 li 行。</p>\n<p>无疑这种一次性输入多行的方式十分快捷。如果多行有同一种操作，可以运用多行游标，Alt + F3会选中鼠标之前选择的词，此时多行被选中，按方向键可以选择</p>\n<p>选择类</p>\n<p>Ctrl+D 选中光标所占的文本，继续操作则会选中下一个相同的文本。<br>Alt+F3 选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑。举个栗子：快速选中并更改所有相同的变量名、函数名等。<br>Ctrl+L 选中整行，继续操作则继续选择下一行，效果和 Shift+↓ 效果一样。<br>Ctrl+Shift+L 先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。<br>Ctrl+Shift+M 选择括号内的内容（继续选择父括号）。举个栗子：快速选中删除函数中的代码，重写函数体代码或重写括号内里的内容。<br>Ctrl+M 光标移动至括号内结束或开始的位置。<br>Ctrl+Enter 在下一行插入新行。举个栗子：即使光标不在行尾，也能快速向下插入一行。<br>Ctrl+Shift+Enter 在上一行插入新行。举个栗子：即使光标不在行首，也能快速向上插入一行。<br>Ctrl+Shift+[ 选中代码，按下快捷键，折叠代码。<br>Ctrl+Shift+] 选中代码，按下快捷键，展开代码。<br>Ctrl+K+0 展开所有折叠代码。<br>Ctrl+← 向左单位性地移动光标，快速移动光标。<br>Ctrl+→ 向右单位性地移动光标，快速移动光标。<br>shift+↑ 向上选中多行。<br>shift+↓ 向下选中多行。<br>Shift+← 向左选中文本。<br>Shift+→ 向右选中文本。<br>Ctrl+Shift+← 向左单位性地选中文本。<br>Ctrl+Shift+→ 向右单位性地选中文本。<br>Ctrl+Shift+↑ 将光标所在行和上一行代码互换（将光标所在行插入到上一行之前）<br>Ctrl+Shift+↓ 将光标所在行和下一行代码互换（将光标所在行插入到下一行之后）。<br>Ctrl+Alt+↑ 向上添加多行光标，可同时编辑多行。<br>Ctrl+Alt+↓ 向下添加多行光标，可同时编辑多行。<br>编辑类</p>\n<p>Ctrl+J 合并选中的多行代码为一行。举个栗子：将多行格式的CSS属性合并为一行。<br>Ctrl+Shift+D 复制光标所在整行，插入到下一行。<br>Tab 向右缩进。<br>Shift+Tab 向左缩进。<br>Shift+Tab 向左缩进。<br>Ctrl+K+K 从光标处开始删除代码至行尾。<br>Ctrl+Shift+K 删除整行。<br>Ctrl+/ 注释单行。<br>Ctrl+Shift+/ 注释多行。<br>Ctrl+K+U 转换大写。<br>Ctrl+K+L 转换小写。<br>Ctrl+Z 撤销。<br>Ctrl+Y 恢复撤销。<br>Ctrl+U 软撤销，感觉和 Gtrl+Z 一样。<br>Ctrl+F2 设置书签<br>Ctrl+T 左右字母互换。<br>F6 单词检测拼写<br>搜索类</p>\n<p>Ctrl+F 打开底部搜索框，查找关键字。<br>Ctrl+shift+F 在文件夹内查找，与普通编辑器不同的地方是sublime允许添加多个文件夹进行查找，略高端，未研究。<br>Ctrl+P 打开搜索框。举个栗子：1、输入当前项目中的文件名，快速搜索文件，2、输入@和关键字，查找文件中函数名，3、输入：和数字，跳转到文件中该行代码，4、输入#和关键字，查找变量名。<br>Ctrl+G 打开搜索框，自动带：，输入数字跳转到该行代码。举个栗子：在页面代码比较长的文件中快速定位。<br>Ctrl+R 打开搜索框，自动带@，输入关键字，查找文件中的函数名。举个栗子：在函数较多的页面快速查找某个函数。<br>Ctrl+： 打开搜索框，自动带#，输入关键字，查找文件中的变量名、属性名等。<br>Ctrl+Shift+P 打开命令框。场景栗子：打开命名框，输入关键字，调用sublime text或插件的功能，例如使用package安装插件。<br>Esc 退出光标多行选择，退出搜索框，命令框等。<br>显示类</p>\n<p>Ctrl+Tab 按文件浏览过的顺序，切换当前窗口的标签页。<br>Ctrl+PageDown 向左切换当前窗口的标签页。<br>Ctrl+PageUp 向右切换当前窗口的标签页。<br>Alt+Shift+1 窗口分屏，恢复默认1屏（非小键盘的数字）<br>Alt+Shift+2 左右分屏-2列<br>Alt+Shift+3 左右分屏-3列<br>Alt+Shift+4 左右分屏-4列<br>Alt+Shift+5 等分4屏<br>Alt+Shift+8 垂直分屏-2屏<br>Alt+Shift+9 垂直分屏-3屏<br>Ctrl+K+B 开启/关闭侧边栏。<br>F11 全屏模式<br>Shift+F11 免打扰模式</p>"},{"title":"hexo-Markdown语法","date":"2017-06-29T06:52:04.000Z","_content":"~~~js\n    超链接：\n        [链接文字](链接地址);\n    图片：\n        ![图片说明](图片地址);\n    ~~~type（js,html,css）\n     内容\n    ~~~\n~~~\n<!--more-->","source":"_posts/Markdown.md","raw":"---\ntitle: hexo-Markdown语法\ndate: 2017-06-29 14:52:04\ntags: Markdown\n---\n~~~js\n    超链接：\n        [链接文字](链接地址);\n    图片：\n        ![图片说明](图片地址);\n    ~~~type（js,html,css）\n     内容\n    ~~~\n~~~\n<!--more-->","slug":"Markdown","published":1,"updated":"2017-06-29T07:56:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfnkq65000jlyfyabodpigf","content":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">超链接：</div><div class=\"line\">    [链接文字](链接地址);</div><div class=\"line\">图片：</div><div class=\"line\">    ![图片说明](图片地址);</div><div class=\"line\">~~~type（js,html,css）</div><div class=\"line\"> 内容</div></pre></td></tr></table></figure>\n<p>~~~<br><a id=\"more\"></a></p>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">超链接：</div><div class=\"line\">    [链接文字](链接地址);</div><div class=\"line\">图片：</div><div class=\"line\">    ![图片说明](图片地址);</div><div class=\"line\">~~~type（js,html,css）</div><div class=\"line\"> 内容</div></pre></td></tr></table></figure>\n<p>~~~<br>","more":"</p>"},{"title":"React表格项目使用","date":"2017-04-15T19:24:47.000Z","toc":true,"_content":"总结只有两个字“很坑”。\n个人理解，用表格。要看'行'里看列，而不是从'列'里看行。\ndemo：\n\n```\n<!--more--> \n  <table>  \n\n    <thead>  \n\n      <tr>  \n\n            <td rowSpan={2}>这是头部1</td>  \n\n            <td rowSpan={2}>这是头部1</td>  \n\n            <td rowSpan={2}>这是头部1</td>  \n\n            <td rowSpan={2}>这是头部1</td>  \n\n            <td rowSpan={2}>这是头部1</td>  \n\n            <td rowSpan={2}>这是头部1</td>  \n\n            <td rowSpan={2}>这是头部1</td>  \n\n            <td rowSpan={2}>这是头部1</td>  \n\n            <td colSpan={6}>这是头部1</td>  \n\n            <td colSpan={7}>这是头部1</td>  \n\n            <td colSpan={2}>这是头部1</td>  \n\n            <td colSpan={3}>这是头部1</td>  \n\n            <td rowSpan={2}>这是头部1</td>  \n\n            <td rowSpan={2}>这是头部1</td>  \n\n            <td rowSpan={2}>这是头部1</td>  \n\n      </tr>  \n\n      <tr>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n        </tr>  \n\n    </thead>  \n\n    <tbody>  \n\n      <tr>  \n        <td>12</td>  \n\n        <td>1</td>  \n\n        <td>2017-5</td>  \n\n        <td>759849</td>  \n\n        <td>21</td>  \n\n        <td>21</td>  \n\n        <td>1004340000</td>  \n\n        <td>546</td>  \n\n        <td>656</td>  \n\n        <td>3</td>  \n\n        <td>546他</td>  \n\n        <td>1000</td>  \n\n        <td>400</td>  \n\n        <td>600</td>  \n\n        <td>100</td>  \n\n        <td>100</td>  \n\n        <td>100</td>  \n\n        <td>321</td>  \n\n        <td>300</td>  \n\n        <td>201</td>  \n\n        <td>321</td>  \n\n        <td>321</td>  \n\n        <td>321</td>  \n\n        <td>-100</td>  \n\n        <td>-100</td>  \n\n        <td>-100</td>  \n\n        <td>/</td>  \n\n        <td>10000</td>  \n\n        <td>sdfgerefd</td>  \n\n      </tr>  \n\n    </tbody>  \n\n  </table>  \n\n  ``","source":"_posts/React表格项目使用.md","raw":"---\ntitle: React表格项目使用\ndate: 2017-04-16 03:24:47\ntags: table\ntoc: true\n---\n总结只有两个字“很坑”。\n个人理解，用表格。要看'行'里看列，而不是从'列'里看行。\ndemo：\n\n```\n<!--more--> \n  <table>  \n\n    <thead>  \n\n      <tr>  \n\n            <td rowSpan={2}>这是头部1</td>  \n\n            <td rowSpan={2}>这是头部1</td>  \n\n            <td rowSpan={2}>这是头部1</td>  \n\n            <td rowSpan={2}>这是头部1</td>  \n\n            <td rowSpan={2}>这是头部1</td>  \n\n            <td rowSpan={2}>这是头部1</td>  \n\n            <td rowSpan={2}>这是头部1</td>  \n\n            <td rowSpan={2}>这是头部1</td>  \n\n            <td colSpan={6}>这是头部1</td>  \n\n            <td colSpan={7}>这是头部1</td>  \n\n            <td colSpan={2}>这是头部1</td>  \n\n            <td colSpan={3}>这是头部1</td>  \n\n            <td rowSpan={2}>这是头部1</td>  \n\n            <td rowSpan={2}>这是头部1</td>  \n\n            <td rowSpan={2}>这是头部1</td>  \n\n      </tr>  \n\n      <tr>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n          <td></td>  \n\n        </tr>  \n\n    </thead>  \n\n    <tbody>  \n\n      <tr>  \n        <td>12</td>  \n\n        <td>1</td>  \n\n        <td>2017-5</td>  \n\n        <td>759849</td>  \n\n        <td>21</td>  \n\n        <td>21</td>  \n\n        <td>1004340000</td>  \n\n        <td>546</td>  \n\n        <td>656</td>  \n\n        <td>3</td>  \n\n        <td>546他</td>  \n\n        <td>1000</td>  \n\n        <td>400</td>  \n\n        <td>600</td>  \n\n        <td>100</td>  \n\n        <td>100</td>  \n\n        <td>100</td>  \n\n        <td>321</td>  \n\n        <td>300</td>  \n\n        <td>201</td>  \n\n        <td>321</td>  \n\n        <td>321</td>  \n\n        <td>321</td>  \n\n        <td>-100</td>  \n\n        <td>-100</td>  \n\n        <td>-100</td>  \n\n        <td>/</td>  \n\n        <td>10000</td>  \n\n        <td>sdfgerefd</td>  \n\n      </tr>  \n\n    </tbody>  \n\n  </table>  \n\n  ``","slug":"React表格项目使用","published":1,"updated":"2017-06-28T06:59:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfnkq66000llyfy22ybt5py","content":"<p>总结只有两个字“很坑”。<br>个人理解，用表格。要看’行’里看列，而不是从’列’里看行。<br>demo：</p>\n<p>```<br><a id=\"more\"></a><br>  <table>  </table></p>\n<pre><code>&lt;thead&gt;  \n\n  &lt;tr&gt;  \n\n        &lt;td rowSpan={2}&gt;这是头部1&lt;/td&gt;  \n\n        &lt;td rowSpan={2}&gt;这是头部1&lt;/td&gt;  \n\n        &lt;td rowSpan={2}&gt;这是头部1&lt;/td&gt;  \n\n        &lt;td rowSpan={2}&gt;这是头部1&lt;/td&gt;  \n\n        &lt;td rowSpan={2}&gt;这是头部1&lt;/td&gt;  \n\n        &lt;td rowSpan={2}&gt;这是头部1&lt;/td&gt;  \n\n        &lt;td rowSpan={2}&gt;这是头部1&lt;/td&gt;  \n\n        &lt;td rowSpan={2}&gt;这是头部1&lt;/td&gt;  \n\n        &lt;td colSpan={6}&gt;这是头部1&lt;/td&gt;  \n\n        &lt;td colSpan={7}&gt;这是头部1&lt;/td&gt;  \n\n        &lt;td colSpan={2}&gt;这是头部1&lt;/td&gt;  \n\n        &lt;td colSpan={3}&gt;这是头部1&lt;/td&gt;  \n\n        &lt;td rowSpan={2}&gt;这是头部1&lt;/td&gt;  \n\n        &lt;td rowSpan={2}&gt;这是头部1&lt;/td&gt;  \n\n        &lt;td rowSpan={2}&gt;这是头部1&lt;/td&gt;  \n\n  &lt;/tr&gt;  \n\n  &lt;tr&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n    &lt;/tr&gt;  \n\n&lt;/thead&gt;  \n\n&lt;tbody&gt;  \n\n  &lt;tr&gt;  \n    &lt;td&gt;12&lt;/td&gt;  \n\n    &lt;td&gt;1&lt;/td&gt;  \n\n    &lt;td&gt;2017-5&lt;/td&gt;  \n\n    &lt;td&gt;759849&lt;/td&gt;  \n\n    &lt;td&gt;21&lt;/td&gt;  \n\n    &lt;td&gt;21&lt;/td&gt;  \n\n    &lt;td&gt;1004340000&lt;/td&gt;  \n\n    &lt;td&gt;546&lt;/td&gt;  \n\n    &lt;td&gt;656&lt;/td&gt;  \n\n    &lt;td&gt;3&lt;/td&gt;  \n\n    &lt;td&gt;546他&lt;/td&gt;  \n\n    &lt;td&gt;1000&lt;/td&gt;  \n\n    &lt;td&gt;400&lt;/td&gt;  \n\n    &lt;td&gt;600&lt;/td&gt;  \n\n    &lt;td&gt;100&lt;/td&gt;  \n\n    &lt;td&gt;100&lt;/td&gt;  \n\n    &lt;td&gt;100&lt;/td&gt;  \n\n    &lt;td&gt;321&lt;/td&gt;  \n\n    &lt;td&gt;300&lt;/td&gt;  \n\n    &lt;td&gt;201&lt;/td&gt;  \n\n    &lt;td&gt;321&lt;/td&gt;  \n\n    &lt;td&gt;321&lt;/td&gt;  \n\n    &lt;td&gt;321&lt;/td&gt;  \n\n    &lt;td&gt;-100&lt;/td&gt;  \n\n    &lt;td&gt;-100&lt;/td&gt;  \n\n    &lt;td&gt;-100&lt;/td&gt;  \n\n    &lt;td&gt;/&lt;/td&gt;  \n\n    &lt;td&gt;10000&lt;/td&gt;  \n\n    &lt;td&gt;sdfgerefd&lt;/td&gt;  \n\n  &lt;/tr&gt;  \n\n&lt;/tbody&gt;  \n</code></pre><p>    </p>\n<p>  ``</p>\n","site":{"data":{}},"excerpt":"<p>总结只有两个字“很坑”。<br>个人理解，用表格。要看’行’里看列，而不是从’列’里看行。<br>demo：</p>\n<p>```<br>","more":"<br>  <table>  </table></p>\n<pre><code>&lt;thead&gt;  \n\n  &lt;tr&gt;  \n\n        &lt;td rowSpan={2}&gt;这是头部1&lt;/td&gt;  \n\n        &lt;td rowSpan={2}&gt;这是头部1&lt;/td&gt;  \n\n        &lt;td rowSpan={2}&gt;这是头部1&lt;/td&gt;  \n\n        &lt;td rowSpan={2}&gt;这是头部1&lt;/td&gt;  \n\n        &lt;td rowSpan={2}&gt;这是头部1&lt;/td&gt;  \n\n        &lt;td rowSpan={2}&gt;这是头部1&lt;/td&gt;  \n\n        &lt;td rowSpan={2}&gt;这是头部1&lt;/td&gt;  \n\n        &lt;td rowSpan={2}&gt;这是头部1&lt;/td&gt;  \n\n        &lt;td colSpan={6}&gt;这是头部1&lt;/td&gt;  \n\n        &lt;td colSpan={7}&gt;这是头部1&lt;/td&gt;  \n\n        &lt;td colSpan={2}&gt;这是头部1&lt;/td&gt;  \n\n        &lt;td colSpan={3}&gt;这是头部1&lt;/td&gt;  \n\n        &lt;td rowSpan={2}&gt;这是头部1&lt;/td&gt;  \n\n        &lt;td rowSpan={2}&gt;这是头部1&lt;/td&gt;  \n\n        &lt;td rowSpan={2}&gt;这是头部1&lt;/td&gt;  \n\n  &lt;/tr&gt;  \n\n  &lt;tr&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n      &lt;td&gt;&lt;/td&gt;  \n\n    &lt;/tr&gt;  \n\n&lt;/thead&gt;  \n\n&lt;tbody&gt;  \n\n  &lt;tr&gt;  \n    &lt;td&gt;12&lt;/td&gt;  \n\n    &lt;td&gt;1&lt;/td&gt;  \n\n    &lt;td&gt;2017-5&lt;/td&gt;  \n\n    &lt;td&gt;759849&lt;/td&gt;  \n\n    &lt;td&gt;21&lt;/td&gt;  \n\n    &lt;td&gt;21&lt;/td&gt;  \n\n    &lt;td&gt;1004340000&lt;/td&gt;  \n\n    &lt;td&gt;546&lt;/td&gt;  \n\n    &lt;td&gt;656&lt;/td&gt;  \n\n    &lt;td&gt;3&lt;/td&gt;  \n\n    &lt;td&gt;546他&lt;/td&gt;  \n\n    &lt;td&gt;1000&lt;/td&gt;  \n\n    &lt;td&gt;400&lt;/td&gt;  \n\n    &lt;td&gt;600&lt;/td&gt;  \n\n    &lt;td&gt;100&lt;/td&gt;  \n\n    &lt;td&gt;100&lt;/td&gt;  \n\n    &lt;td&gt;100&lt;/td&gt;  \n\n    &lt;td&gt;321&lt;/td&gt;  \n\n    &lt;td&gt;300&lt;/td&gt;  \n\n    &lt;td&gt;201&lt;/td&gt;  \n\n    &lt;td&gt;321&lt;/td&gt;  \n\n    &lt;td&gt;321&lt;/td&gt;  \n\n    &lt;td&gt;321&lt;/td&gt;  \n\n    &lt;td&gt;-100&lt;/td&gt;  \n\n    &lt;td&gt;-100&lt;/td&gt;  \n\n    &lt;td&gt;-100&lt;/td&gt;  \n\n    &lt;td&gt;/&lt;/td&gt;  \n\n    &lt;td&gt;10000&lt;/td&gt;  \n\n    &lt;td&gt;sdfgerefd&lt;/td&gt;  \n\n  &lt;/tr&gt;  \n\n&lt;/tbody&gt;  \n</code></pre><p>    </p>\n<p>  ``</p>"},{"title":"Vue-api","date":"2017-06-29T06:42:18.000Z","toc":true,"_content":"<!--more-->","source":"_posts/Vue-api.md","raw":"---\ntitle: Vue-api\ndate: 2017-06-29 14:42:18\ntags:  Vue\ntoc: true\n---\n<!--more-->","slug":"Vue-api","published":1,"updated":"2017-07-03T03:35:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfnkq69000nlyfycxv325z4","content":"<a id=\"more\"></a>","site":{"data":{}},"excerpt":"","more":""},{"title":"Javascript中的Form表单知识点总结","date":"2017-04-24T10:52:49.000Z","toc":true,"_content":"转载(http://www.cnblogs.com/tugenhua0707/p/4508986.html)\n 在HTML中，表单是由form元素来表示的，但是在javascript中，表单则由HTMLFormElement类型，此元素继承了HTMLElement，因此与其他HTML元素具有相同的默认属性；HTMLFormElement有自己以下属性和方法；\n\nacceptCharset: 服务器能够处理的字符集；等价于HTML中的accept-charset特性；\n\naction:  接收请求的URL，等价于HTML中的action\n\nelements: 表单中所有控件的集合.\n\nenctype: 请求的编码类型；等价于HTML中的enctype特性；\n<!--more-->\nlength: 表单中控件的数量；\n\nmethod： 要发送的http请求类型，一般是get或者是post，等价于HTML中的method；\n\nname: 表单的名称；\n\nreset(): 将所有表单域重置为默认值；\n\nsubmit(): 提交表单；\n\ntarget:用于发送请求和接收响应的窗口名称；\n\n如何获取form表单的引用？\n\n假如现在页面上有一个form表单元素，html代码如下：\n\n<form id=\"form\" name=\"form1\"></form>\n我现在想取到上面的form表单的引用，一共有以下方式可以获取到上面 的form表单引用；\n\n1. 通过获取form表单的id，来获取form表单的引用；如下代码：\n\nvar formId = document.getElementById(\"form\");\nconsole.log(formId);\n2. 通过document.forms 取得页面中的所有表单元素，然后通过索引来取到对应的form元素，如下代码所示：取得页面第一个form元素；\n\nconsole.log(document.forms[0]);\n3. 通过from表单中的name属性来获取，代码如下：\n\nconsole.log(document.forms['form1']);\n如何提交表单\n\n下面的所有事件都是来自上一篇博客javascript事件总结的事件，都依赖于此封装的事件，代码如下：\n\n复制代码\nvar EventUtil = {\n    addHandler: function(element,type,handler) {\n        if(element.addEventListener) {\n            element.addEventListener(type,handler,false);\n        }else if(element.attachEvent) {\n            element.attachEvent(\"on\"+type,handler);\n        }else {\n            element[\"on\" +type] = handler;\n        }\n    },\n    removeHandler: function(element,type,handler){\n        if(element.removeEventListener) {\n            element.removeEventListener(type,handler,false);\n        }else if(element.detachEvent) {\n            element.detachEvent(\"on\"+type,handler);\n        }else {\n            element[\"on\" +type] = null;\n        }\n    },\n    getEvent: function(event) {\n        return event ? event : window.event;\n    },\n    getTarget: function(event) {\n        return event.target || event.srcElement;\n    },\n    preventDefault: function(event){\n        if(event.preventDefault) {\n            event.preventDefault();\n        }else {\n            event.returnValue = false;\n        }\n    },\n    stopPropagation: function(event) {\n        if(event.stopPropagation) {\n            event.stopPropagation();\n        }else {\n            event.cancelBubble = true;\n        }\n    },\n    getRelatedTarget: function(event){\n        if (event.relatedTarget){\n            return event.relatedTarget;\n        } else if (event.toElement){\n            return event.toElement;\n        } else if (event.fromElement){\n            return event.fromElement;\n        } else {\n            return null;\n        }\n    },\n    getWheelDelta: function(event) {\n        if(event.wheelDelta) {\n            return event.wheelDelta;\n        }else {\n            return -event.detail * 40\n        }\n    },\n    getCharCode: function(event) {\n        if(typeof event.charCode == 'number') {\n            return event.charCode;\n        }else {\n            return event.keyCode;\n        }\n    }\n};\n复制代码\n用户单击提交按钮或图像按钮时，就会提交表单，使用input或者button都可以提交表单，只需将type设置为submit或者image即可，如下三种方式都可以；\n\n第一种：\n\n<form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\">\n    <!-- 存放一个input放在这，为了获取焦点，然后我们可以按enter键提交 -->\n    <input type=\"text\">\n    <input type=\"submit\" value=\"submit\">\n</form>\n第二种：\n\n<form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\">\n    <!-- 存放一个input放在这，为了获取焦点，然后我们可以按enter键提交 -->\n    <input type=\"text\">\n    <button type=\"submit\">submit</button>\n</form>\n第三种：\n\n<form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\">\n    <!-- 存放一个input放在这，为了获取焦点，然后我们可以按enter键提交 -->\n    <input type=\"text\">\n    <input type=\"image\" src=\"aa.jpg\">\n</form>\n我们也可以通过如下方式提交表单，但是也可以阻止form表单提交：如下代码：\n\n复制代码\nEventUtil.addHandler(formId,\"submit\",function(event){\n    // 取得事件对象\n    event = EventUtil.getEvent(event);\n    // 阻止默认事件\n    EventUtil.preventDefault(event);\n});\n复制代码\n如何重置表单\n\n如果我们使用按钮重置表单的话，有下面2种方式：\n\n第一种代码如下：\n\n<form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\">\n    <input type=\"text\">\n    <input type=\"reset\" value=\"reset\">\n</form>\n第二种代码如下：\n\n<form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\">\n    <input type=\"text\">\n    <button type=\"reset\">reset</button>\n</form>\n我们也可以通过像提交form表单一样来进行重置表单，代码如下：\n\nvar formId = document.getElementById(\"form\");\nformId.reset();\n如何访问表单字段？\n\n第一种方式我们可以使用dom节点来访问；\n\n第二种方式：每个表单都有elements属性，该属性是表单中所有表单元素的集合；这个elements是个有序列表；包含着所有字段，比如有input,textarea,button,fieldset等；\n\n比如如下HTML代码：\n\n复制代码\n<form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\">\n    <input type=\"text\" name=\"input1\">\n    <select name=\"select1\">\n        <option>111</option>\n    </select>\n</form>\n复制代码\nJS获取表单字段如下：\n\n复制代码\nvar formId = document.getElementById(\"form\");\n// 取得表单中的第一个字段\nvar firstCol = formId.elements[0];\nconsole.log(firstCol);\n// 取得名字name为select1的字段\nconsole.log(formId.elements['select1']);\n// 取得表单中包含字段的数量\nconsole.log(formId.elements.length);\n复制代码\n如果一个表单中，有多个name相同的属性，那么取得数据是一个集合，如下HTML代码：\n\n<form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\">\n    <input type=\"radio\" name=\"radio2\"/>\n    <input type=\"radio\" name=\"radio2\"/>\n    <input type=\"radio\" name=\"radio2\"/>\n</form>\nJS代码如下：\n\nvar formId = document.getElementById(\"form\");\nvar radios = formId.elements[\"radio2\"];\nconsole.log(radios.length);  // 打印3\n共有的表单字段属性\n\n所有的表单字段都有一组相同的属性；表单共有的属性如下：\n\ndisabled: 布尔值，表示当前字段是否被禁用；\n\nform: 指向当前字段所属表单的指针，只读；\n\nname: 当前字段的名称;\n\nreadOnly:布尔值，表示当前字段是否可读。\n\ntabIndex: 表示当前字段的切换(tab)序号。\n\ntype: 当前字段的类型，如checkbox,radio等；\n\nvalue: 当前字段被提交到服务器的值；\n\n共有的表单字段方法\n\n每个表单字段都有两个方法focus()和blur()，其中focus是获取焦点；比如在页面加载完成后，我希望form表单中的第一个字段获取焦点（除隐藏域之外）；如下代码：\n\n<form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\">\n    <input type=\"text\" name=\"radio2\"/>\n    <input type=\"text\" name=\"radio2\"/>\n    <input type=\"text\" name=\"radio2\"/>\n</form>\nJS代码如下：\n\nvar formId = document.getElementById(\"form\");\nEventUtil.addHandler(window,'load',function(event){\n    formId.elements[0].focus();\n});\n但是HTML5中为表单字段新增了一个autofocus属性，在支持这个属性浏览器中，如果设置了这个属性，不用javascript就能将焦点移动到某个输入框下，比如如下HTML代码，在页面加载完成后，我把焦点放在第二个输入框内，如下HTML代码：\n\n<form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\">\n    <input type=\"text\" name=\"radio2\" />\n    <input type=\"text\" name=\"radio2\" autofocus/>\n    <input type=\"text\" name=\"radio2\"/>\n</form>\n支持autofocus属性的浏览器有：firefox4+，safari5+，chrome和Opera9.6+\n\n但是我想要兼容其他不支持autofocus的浏览器，我们可以写一段JS，为了全兼容；\n\n复制代码\nvar formId = document.getElementById(\"form\");\nEventUtil.addHandler(window,'load',function(event){\n    var element = formId.elements[1];\n    if(element.autofocus !== true) {\n        element.focus();\n    }\n});\n复制代码\n因为autofocus是一个布尔值，支持他的浏览器默认为true；不支持他的浏览器，默认值为空字符串；\n\n共有的表单字段事件\n\n所有的表单字段都支持以下三个事件；\n\nblur:当前字段失去焦点时触发；\n\nchange:对于input和textarea元素，值发生改变的时候触发；\n\nfocus: 当前字段获得焦点时触发；\n\n理解文本框脚本\n\n在HTML中，有2种方式来实现文本框，一种是input元素的单行文本框，另一种是textarea元素的多行文本框；\n\ninput元素有属性type=”text”, 还可以通过设置size属性，用来指定文本框显示的字符数，还可以设置value，用来显示文本框的初始值，还可以设置maxlength属性，用于指定文本框可以接受的最大字符数；如下代码：\n\n<input type=\"text\" size=\"2\" maxlength='12' value=\"\"/>\n\n多行文本框textarea也有一些属性，这里就不做多介绍了；\n\n如何选择文本：\n\ninput和select两种元素都支持select()方法，这个方法用于选择文本框中的所有文本，在调用select()方法中(除Opera外),都会将焦点设置到文本框中，这个方法不接受任何参数，如下代码：\n\n<form id=\"formId\">\n    <input type=\"text\" name=\"input\" value=\"我是龙恩\"/>\n</form>\nJS代码如下：\n\nvar formId = document.getElementById(\"formId\");\nformId.elements['input'].select();\n如下图所示：\n\n\n\n如上是页面一进来的时候，默认选择input元素框所有的内容；我们也可以当获取焦点的时候，就选中所有的内容，JS代码可以改为如下：\n\n复制代码\nvar formId = document.getElementById(\"formId\"),\ninput = formId.elements['input'];\nEventUtil.addHandler(input,\"focus\",function(event){\n    event = EventUtil.getEvent(event);\n    var target = EventUtil.getTarget(event);\n    target.select();\n});\n复制代码\n在火狐和谷歌浏览器下能实现当获取焦点的时候，就选中input元素框内的所有内容，但是在IE7或者8下，还是页面加载完后就已经选中了文本框内的所有元素；\n\n  1.   选择事件(select)\n\n与select方法对应的，还有一个select事件，在IE9+，firefox，chrome，opera和safari中，只有用户选择了文本且释放鼠标时，会触发select事件；但是在IE8及以下，只要用户选择了一个字母且不必释放鼠标，就会触发select事件；如下代码：\n\nvar formId = document.getElementById(\"formId\"),\ninput = formId.elements['input'];\nEventUtil.addHandler(input,\"select\",function(event){\n    alert(input.value);\n});\n2. 取的选择的文本\n\n虽然通过select事件我们知道用户什么时候选择了文本，但是我们并不知道用户选择了什么文本，在HTML5中，我们通过两个属性selectionStart和selectionEnd，这两个属性表示选择的范围(即文本区开头和结尾的偏移量)；因此要取得用户选择的文本，可以使用如下代码；\n\n复制代码\nvar formId = document.getElementById(\"formId\"),\n    input = formId.elements['input'];\nEventUtil.addHandler(input,\"select\",function(event){\n    alert(getSelectedText(input));\n});\nfunction getSelectedText(elem) {\n    return elem.value.substring(elem.selectionStart,elem.selectionEnd);\n}\n复制代码\n但是目前浏览器支持程度有：IE9+，firefox，chrome，Opera及safari；\n\nIE8及之前的版本不支持这两个属性，但是他们提供了另外一种document.selection对象，其中保存着用户在整个文档范围内选择的文本信息，但是呢与前面的select事件使用在一起的话，只能选择一个字符就会触发事件，也就是说，不能选择大于1和字符的文字，不过可以知道选择的值时多少；如下代码：\n\n复制代码\nvar formId = document.getElementById(\"formId\"),\ninput = formId.elements['input'];\nEventUtil.addHandler(input,\"select\",function(event){\n    alert(getSelectedText(input));\n});\nfunction getSelectedText(elem) {\n    if(typeof elem.selectionStart == \"number\") {\n         return elem.value.substring(elem.selectionStart,elem.selectionEnd);\n    }else if(document.selection) {\n        return document.selection.createRange().text;\n    }\n}\n复制代码\n选择部分文本\n\nHTML5也为选择文本框中的部分文本提供了解决方案，使用setSelectionRange()方法，这个方法接收2个参数，要选择的第一个字符的索引，和要选择的最后一个字符之后的字符的索引；\n\n浏览器支持有：IE9+，chrome，safari和opera，firefox貌似不支持；\n\n代码如下：\n\nvar formId = document.getElementById(\"formId\"),\n    input = formId.elements['input'];\ninput.value = \"我是龙恩，我是中国人\";\n// 选择所有文本\ninput.setSelectionRange(0,input.value.length);\n截图如下：\n\n\n\n// 选择前3个字符\n\ninput.setSelectionRange(0,3);\n截图如下：\n\n\n\n// 选择第四到第六个字符\n\ninput.setSelectionRange(4,7);\n\n截图如下：\n\n\n\nIE8及以下版本可以使用范围来选择部分文本，要选择部分文本，必须首先使用IE在所有文本框中提供的createTextRange()方法创建一个范围，且我们需要使用collapse()将范围折叠到文本框的开始位置，再使用moveStart()和moveEnd()这两个范围方法将范围移动到位；\n\n如下代码选择所有的文本：\n\n复制代码\ninput.value = \"我是龙恩，我是中国人\";\nvar range = input.createTextRange();\n// 选择所有文本\nrange.collapse(true);\nrange.moveStart(\"character\",0);\nrange.moveEnd(\"character\",input.value.length);\nrange.select();\n复制代码\n演示如下：\n\n\n\n切记：使用F5刷新没有用的，要在地址栏中，然后按enter键刷新即可看到效果；\n\n// 选择前3个字符\nrange.collapse(true);\nrange.moveStart(\"character\",0);\nrange.moveEnd(\"character\",3);\nrange.select();\n演示如下：\n\n\n\n// 选择第4到第6个字符\nrange.collapse(true);\nrange.moveStart(\"character\",4);\nrange.moveEnd(\"character\",3);\nrange.select();\n演示如下：\n\n\n\n为了让跨浏览器效果，我们可以封装一个方法，如下：\n\n复制代码\nfunction selectText(elem,startIndex,stopIndex) {\n    if(elem.setSelectionRange) {\n          elem.setSelectionRange(startIndex,stopIndex);\n    }else if(elem.createTextRange) {\n        var range = elem.createTextRange();\n        range.collapse(true);\n        range.moveStart(\"character\",startIndex);\n        range.moveEnd(\"character\",stopIndex - startIndex);\n        range.select();\n    }\n}\n复制代码\n测试数据如下：貌似firefox不支持\n\n复制代码\n// 选择所有文本\nselectText(input,0,input.value.length);\n        \n// 选择前3个字符\nselectText(input,0,3);\n\n// 选择第四个字符到第六个字符\nselectText(input,4,7);\n复制代码\n过滤输入\n\n    有时候我们会要求用户在输入框里面输入特定格式的数据，我们就可以使用过滤输入这种手段来进行了，首先我们来看看如何屏蔽字符；\n\n 1.   屏蔽字符\n\n比如我在一个input输入框中，只允许只能输入数字，那么我们可以先获取通过keypress事件来监听，然后每次获取到键码，然后通过String.fromCharCode()这个方法，把键码转换成字符串，然后通过正则判断下，如果不是数字，直接阻止默认事件即可不让用户输入，如下代码：\n\n<form id=\"formId\">\n    <input type=\"text\" name=\"input\"/>\n</form>\nJS代码如下：\n\n复制代码\nvar formId = document.getElementById(\"formId\"),\ninput = formId.elements['input'];    \nEventUtil.addHandler(input,'keypress',function(event) {\n    event = EventUtil.getEvent(event);\n    var charCode = EventUtil.getCharCode(event);\n    if(!/\\d/.test(String.fromCharCode(charCode))) {\n        EventUtil.preventDefault(event);\n    }\n});    \n复制代码\n如上代码能满足日常需求，但是有些游览器，比如firefox，safari(3.1版本之前)会对向上键，向下键，退格键和删除键也会触发keypress事件了；所以为了避免这些事件的发生，我们需要做一些处理来满足所有版本的浏览器的需求，我们发现在firefox中，所有由非字符键触发keypress键码都为0；而在safari3以前的版本中，对应的字符编码全部为8；所以我们要对字符编码进行判断下；\n\n如下代码：\n\n复制代码\nEventUtil.addHandler(input,'keypress',function(event) {\n    event = EventUtil.getEvent(event);\n    var charCode = EventUtil.getCharCode(event);\n    if(!/\\d/.test(String.fromCharCode(charCode)) && charCode > 9) {\n        EventUtil.preventDefault(event);\n    }\n});\n复制代码\n操作剪贴板\n\n到目前为止，IE，chrome，safari，opera都支持剪贴板事件，貌似firefox就不支持了（书上说支持）；但是我操作就不支持了；下面是6个操作剪贴板事件；如下：\n\nbeforecopy: 在发生复制操作前触发；\n\ncopy: 在发生复制操作时触发；\n\nbeforecut: 在发生剪贴操作前触发；\n\ncut: 在发生剪贴操作时触发；\n\nbeforepaste: 在发生黏贴操作前触发；\n\npaste: 在发生粘帖操作时触发；\n\n针对上面的事件，我们可以使用如下代码测试下就可以证明了；代码如下所示：\n\nEventUtil.addHandler(input,'beforecopy',function(event) {\n    alert(1);\n});\n如果要访问剪贴板中的数据，可以使用clipboardData对象，在IE中，这个对象是window对象的属性，在safari或者chrome上，这个对象是event的属性，这个clipboardData对象有三个方法，getData(),setData(),和clearData();\n\ngetData()是从剪贴板中取得数据，他接受一个参数，即要取得数据的格式，在IE中，有二种数据格式”text” 和 “url”，在safari和chrome中这个参数是一种MIME类型，不过，可以使用text代表text/plain.\n\nsetData()方法是给剪贴板设置文本，接受2个参数，第一个数据是数据类型；第二个参数是放在剪贴板中的文本；但是此方法接受的数据类型只能是text/plain,不能是text；因此为了全兼容浏览器(出firefox外)，我们可以写一个通用的方法出来，如下：\n\n复制代码\ngetClipboardText: function(event) {\n    var clipboardData = (event.clipboardData || window.clipboardData);\n        return clipboardData.getData(\"text\");\n    },\nsetClipboardText:function(event,value) {\n    if(event.clipboardData) {\n        return event.clipboardData.setData(\"text/plain\",value);\n    }else if(window.clipboardData) {\n        return window.clipboardData.setData(\"text\",value);\n    }\n}\n复制代码\n因此EventUtil封装的所有方法如下：\n\n复制代码\nvar EventUtil = {\n    addHandler: function(element,type,handler) {\n        if(element.addEventListener) {\n                    element.addEventListener(type,handler,false);\n        }else if(element.attachEvent) {\n            element.attachEvent(\"on\"+type,handler);\n        }else {\n            element[\"on\" +type] = handler;\n        }\n    },\n    removeHandler: function(element,type,handler){\n        if(element.removeEventListener) {\n                    element.removeEventListener(type,handler,false);\n        }else if(element.detachEvent) {\n            element.detachEvent(\"on\"+type,handler);\n        }else {\n            element[\"on\" +type] = null;\n        }\n    },\n    getEvent: function(event) {\n        return event ? event : window.event;\n    },\n    getTarget: function(event) {\n        return event.target || event.srcElement;\n    },\n    preventDefault: function(event){\n        if(event.preventDefault) {\n            event.preventDefault();\n        }else {\n            event.returnValue = false;\n        }\n    },\n    stopPropagation: function(event) {\n        if(event.stopPropagation) {\n            event.stopPropagation();\n        }else {\n            event.cancelBubble = true;\n        }\n    },\n    getRelatedTarget: function(event){\n        if (event.relatedTarget){\n            return event.relatedTarget;\n        } else if (event.toElement){\n            return event.toElement;\n        } else if (event.fromElement){\n            return event.fromElement;\n        } else {\n            return null;\n        }\n    },\n    getWheelDelta: function(event) {\n        if(event.wheelDelta) {\n            return event.wheelDelta;\n        }else {\n            return -event.detail * 40\n        }\n    },\n    getCharCode: function(event) {\n        if(typeof event.charCode == 'number') {\n            return event.charCode;\n        }else {\n            return event.keyCode;\n        }\n    },\n    getClipboardText: function(event) {\n        var clipboardData = (event.clipboardData || window.clipboardData);\n        return clipboardData.getData(\"text\");\n    },\n    setClipboardText:function(event,value) {\n        if(event.clipboardData) {\n        return event.clipboardData.setData(\"text/plain\",value);\n            }else if(window.clipboardData) {\n            return window.clipboardData.setData(\"text\",value);\n        }\n    }\n};\n复制代码\n测试代码如下：还是上面测试输入框的值是否为数字；每次粘帖上次，都能获取到黏贴的是文字数据，代码如下：\n\nHTML代码如下：\n\n<form id=\"formId\">\n     <input type=\"text\" name=\"input\"/>\n</form>\nJS代码如下：\n\n复制代码\nvar formId = document.getElementById(\"formId\"),\ninput = formId.elements['input'];\nEventUtil.addHandler(input,'paste',function(event) {\n    event = EventUtil.getEvent(event);\n    var text = EventUtil.getClipboardText(event);\n    alert(text);\n    if (!/^\\d*$/.test(text)){\n        EventUtil.preventDefault(event);\n    }\n});\n复制代码\n理解自动切换输入框或者textarea的焦点\n\n比如我们在填写表单的页面上，当用户输入完自己的数据的时候，不需要用户手动切换到下一个输入框里面去，我们可以自动切换去，这样的话，对于用户体验来说，比较方便，比如我们现在页面上有一个form表单，这里为了做测试，我们先用一个输入框用于手机号码的，另外一个是textarea，当手机号码输入11位数字后，会自动切换到textarea中；当然页面中的隐藏域除外；代码如下：\n\nHTML代码如下：\n\n<form id=\"formId\">\n    <input type=\"text\" name=\"input\" maxlength=11/>\n    <textarea></textarea>\n</form>\nJS代码如下：\n\n复制代码\nvar formId = document.getElementById(\"formId\"),\ninput = formId.elements['input'];\nEventUtil.addHandler(input,'keyup',tabForward);\nfunction tabForward(event) {\n    event = EventUtil.getEvent(event);\n    var target = EventUtil.getTarget(event);\n    if(target.value.length == target.maxLength) {\n        // 获取当前的form表单的引用\n        var form = target.form;\n        for(var i = 0, ilen = form.elements.length; i < ilen; i++) {\n            if(form.elements[i] == target) {\n                if(form.elements[i+1]) {\n                    form.elements[i+1].focus();\n                }\n                return;\n            }\n        }        \n    }\n}\n复制代码\n理解HTML5新增属性\n\nrequired属性；\n\n比如在HTML5中对表单input，textarea，或者select标签的话，提交表单时，需要判断是否为空，特别对于在做移动端的朋友来说，可以使用HTML5中的新增属性required；如下HTML代码：\n\n<form id=\"formId\">\n    <input type=\"text\" name=\"input\" maxlength=11 required/>\n    <textarea></textarea>\n    <input type=\"submit\"/>\n</form>\n提交时候，在chrome下看到效果如下：\n\n\n\n在firefox下，提示如下：\n\n\n\n如上是根据不同的浏览器本身的性质来提示的，因此样式不同，所以适合在移动端根据本身浏览器内核来提示；\n\n但是在Javascript是如何判断的呢？比如如下HTML代码：\n\n<form id=\"formId\">\n    <input type=\"text\" name=\"input\" maxlength=11 required/>\n    <textarea></textarea>\n    <input type=\"submit\" name=\"submit\"/>\n</form>\nJS代码如下：\n\n复制代码\nvar formId = document.getElementById(\"formId\"),\nsubmit = formId.elements['submit'];\nEventUtil.addHandler(submit,'click',function(event) {\n    var isRequired = formId.elements[\"submit\"].required;\n    console.log(isRequired);\n});\n复制代码\n如上打印出false；可以获取到submit的属性required，如果输入框值为空的话，会打印出false出来；\n\n如果想知道浏览器是否支持required这个属性的话，我们可以使用如下代码判断下，如果返回true，说明支持，否则不支持；如下：\n\nvar isRequiredSupported = \"required\" in document.createElement(\"input\");\nconsole.log(isRequiredSupported);\ninput输入框类型type的值是email或者url\n\n<input type=”email” name=”email”/>\n\n<input type=”url” name=”url”/>\n\nemail类型要求输入的文本必须符合电子邮件的格式，url类型要求输入的文本必须符合URL的格式；如下chrome浏览器截图如下；\n\n\n\n\n\n选择框脚本\n\n选择框是通过<select>和<option>元素创建的，除了表单所有的共有属性和方法外，HTMLSelectElement类还提供了下列属性和方法；\n\nadd(newOption,relOption);向控件中插入新<option>元素，其位置在relOption之前；\n\nmultiple:布尔值; 表示是否允许多项选择，等价于HTML中的multiple特性；\n\noptions: 控件中所有<option>元素的HTMLCollection；\n\nremove(index):   移除给定位置的选项；\n\nselectedIndex:   基于0的选中索引，如果没有该选项，则值为 -1；\n\nsize:  选择框中的可见的行数。\n\n如下select框代码：\n\n复制代码\n<form id=\"formId\">\n    <select name=\"location\" id=\"selLocation\">\n        <option value=\"A\">A</option>\n        <option value=\"B\">B</option>\n        <option value=\"C\">C</option>\n        <option value=\"\">D</option>\n        <option>E</option>\n    </select>\n</form>\n复制代码\nJS代码如下：\n\n复制代码\nvar formId = document.getElementById(\"formId\"),\nselect = formId.elements['location'];\nconsole.log(select.value);\nEventUtil.addHandler(select,'change',function(){\n    console.log(select.value)\n});\n复制代码\n第一次页面加载完成后，打印出值为A；\n\n当每次切换的时候，如果有value就打印出值，如果value=””;则打印空字符串，但是如果option选项没有指定value，在firfox和chrome下打印出当前的文本值，比如上面的文本为E，则值为E；但是IE8及以下，打印的还是空字符串；\n\n在DOM中，每个<option>元素都有一个HTMLOptionElement对象表示；为方便访问数据，对象添加了如下属性；\n\nindex: 当前选项在options集合中的索引；\n\nlabel： 当前选项的标签，等价于HTML中的label\n\nselected：布尔值，表示当前选项是否被选中，将这个属性设置为true可以选中当前选项。\n\ntext：选项的文本；\n\nvalue：选项的值；\n\n我们还是以上面的form表单作为HTML代码，我们使用JS来测试下：\n\n如下代码：\n\n复制代码\nvar formId = document.getElementById(\"formId\"),\nselect = formId.elements['location'];\n// 获取options集合中的第一项选项的文本\nconsole.log(select.options[0].text);   // 打印出A\n// 获取options集合中的第一项选项的value\nconsole.log(select.options[0].value);  // 打印出A\n复制代码\n对于下拉框只能选择一项的选择框，访问最简单的方式，就是使用selectedIndex属性，如下HTML代码：\n\n复制代码\n<form id=\"formId\">\n    <select name=\"location\" id=\"selLocation\">\n        <option value=\"A\">A</option>\n        <option value=\"B\" selected>B</option>\n        <option value=\"C\">C</option>\n        <option value=\"\">D</option>\n        <option>E</option>\n    </select>\n</form>\n复制代码\n假如页面初始化的时候默认选择第二项，那么我们可以先使用selectedIndex的属性获取选中的索引，然后根据索引获取当前的文本和值；如下JS代码：\n\n复制代码\nvar formId = document.getElementById(\"formId\"),\nselect = formId.elements['location'];\n// 获取当前选中的选项的索引selectedIndex\nvar selectedIndex = select.selectedIndex;\n// 获取索引为selectedIndex的option\nvar selectedOption = select.options[selectedIndex];    \nconsole.log(\"selected index:\"+selectedIndex+\"\\nselect text:\"+selectedOption.text+\"\\nselect value:\"+selectedOption.value);\n复制代码\n添加选项\n\n可以使用javascript动态创建选项，并将它们添加到选择框中，添加选择框有以下常见3种方式；\n\n第一种方式使用DOM的方式如下：\n\nHTML代码如下：\n\n<form id=\"formId\">\n    <select name=\"location\" id=\"selLocation\">\n            \n    </select>\n</form>\nJS代码如下：\n\n复制代码\nvar formId = document.getElementById(\"formId\"),\nselect = formId.elements['location'];\nvar newOption = document.createElement(\"option\");\nnewOption.appendChild(document.createTextNode(\"A\"));\nnewOption.setAttribute(\"value\",\"AAAA\");\nselect.appendChild(newOption);\n复制代码\n第二种方式使用Option构造函数来创建新选项，Option构造函数接收2个参数，文本(text)和值(value),第二个参数可选，比如如下代码：\n\nvar formId = document.getElementById(\"formId\"),\nselect = formId.elements['location'];\nvar newOption = new Option(\"Option text\",\"Option value\");\nselect.appendChild(newOption);\n但是这种方式在IE下是不生效的；\n\n下面我们来看看第三种方式吧！是使用选择框add()方法，DOM规定这个方法接收2个参数，要添加的新选项和将位于新选项之后的选项，如果想在列表的最后添加一个选项，应将第二个参数设置为null；在IE对add()方法的实现中，第二个参数是可选的，但是标准DOM浏览器中，必须要指定第二个参数，因此为了全兼容浏览器，我们必须添加第二个参数，但是我们可以将第二个参数设置为undefined，含义是：在所有的浏览器将新选项插入到列表的最后了~\n\n如下代码：\n\nvar formId = document.getElementById(\"formId\"),\nselect = formId.elements['location'];\nvar newOption = new Option(\"Option text\",\"Option value\");\nselect.add(newOption,undefined);\n移除选项的方式如下：\n\n使用dom的removeChild()方法，为其传入要移除的选项；如下代码：\nHTML代码如下：\n\n复制代码\n<form id=\"formId\">\n    <select name=\"location\" id=\"selLocation\">\n        <option value=\"A\">A</option>\n        <option value=\"B\">B</option>\n        <option value=\"C\">C</option>\n    </select>\n</form>\n复制代码\nJavascript代码如下：\n\nvar formId = document.getElementById(\"formId\"),\nselect = formId.elements['location'];\n// 第一种：移除第一项如下方式\nselect.removeChild(select.options[0]);\n2. 第二种方式是使用选择框的remove()方法，这个方法接收一个参数，既要移除选项的索引；如下代码：\n\nvar formId = document.getElementById(\"formId\"),\nselect = formId.elements['location'];\n// 移除第一项\nselect.remove(0);\n3. 最后一种方式，就是将相应的选项设置为null，如下代码：\n\nvar formId = document.getElementById(\"formId\"),\nselect = formId.elements['location'];\n// 移除第一项\nselect.options[0] = null;\n理解表单序列化\n\n在javascript中，可以利用表单字段的type属性，连同name和value属性一起实现对表单的序列化，序列化后将把这些数据发送给服务器。\n\n下面是将那些字段需要进行序列化的；\n\n对表单字段的名称和值进行URL编码，使用&分割；\n不发送禁用的表单字段；\n只发送勾选的单选框和复选框按钮数据；\n不发送type为reset和button的按钮\n多选选择框中的每个选中的值单独一个条目；\nSelect元素的值，就是选中option元素的value的值，如果option没有属性value，则是选中的文本值；\n如下JS代码是封装form表单的序列化的JS如下：\n\n// 序列化JS代码封装\n\n复制代码\nfunction serialize(form) {\n    var arrs = [],\n    field = null,\n    i,\n    len,\n    j,\n    optLen,\n    option,\n    optValue;\n    for(i = 0,len = form.elements.length; i < len; i++) {\n        field = form.elements[i];\n        switch(field.type) {\n            case \"select-one\":\n               case  \"select-multiple\":\n            if(field.name.length) {\n                 for(j = 0,optLen = field.options.length; j < optLen; j++) {\n                       option = field.options[j];\n                       if(option.selected) {\n                           optValue = '';\n                           if(option.hasAttribute) {\n                               optValue = option.hasAttribute(\"value\") ? option.value : option.text;\n                           }else {\n                               optValue = option.attributes[\"value\"].specified ? option.value : option.text;\n                           }\n                           arrs.push(encodeURIComponent(field.name) + \"=\" +encodeURIComponent(optValue));\n                       }\n                   }\n             }\n            break;\n            case undefined:      //字段集\n            case \"file\":         // 文件输入\n            case \"submit\":       // 提交按钮\n            case \"reset\":        // 重置按钮\n            case \"button\":       // 自定义按钮\n            break;\n                    \n            case \"radio\":        // 单选框\n            case \"checkbox\":     // 复选框\n            if(!field.checked) {\n                break;\n            }\n            /* 执行默认动作 */\n           default:\n           // 不包含没有名字的表单字段\n           if(field.name.length) {\n               arrs.push(encodeURIComponent(field.name) + \"=\" +encodeURIComponent(field.value));\n           }\n       }\n    }\n    return arrs.join(\"&\");\n}\n复制代码\n     如上对form表单序列化的函数serialize，定义了一个arrs数组，用来保存需要序列化后的名值对，然后通过for循环迭代每个表单中的字段，先使用临时变量field保存表单中任意一个字段的引用，然后使用switch语句判断字段的类型type(如果type未定义的话，此元素就不需要表单序列化)，第一种情况是select的单选和多选框，对于select单选框，只可能有一个选中项，对于多选框可能有零或多个选中项，如果有选中项的话(通过属性selected来判断)，需要确定使用什么值，如果不存在value特性，或者虽然存在该特性，但是值为空字符串，都是使用选项的文本来代替，为检查这个特性，在兼容DOM的浏览器下我们需要使用hasAttribute()方法，而在IE中需要使用特性的specified属性；对于type=“file”或者submit，reset，button等就不支持，如果比如上传图片的时候，需要图片的二进制数据使用form表单提交的话，可以在序列化后在加上这个参数即可；对于单选框和复选框如果没有选中的话，同样不进行序列化；下面我们现在来看看一个demo吧！如下HTML代码：\n\n复制代码\n<form id=\"formId\">\n    <select name=\"location\" id=\"selLocation\" one=\"one\">\n        <option value=\"A\">A</option>\n        <option value=\"B\">B</option>\n        <option value=\"C\">C</option>\n    </select>\n    <select multiple=\"multiple\" style=\"width: 50px;\" id=\"mymultiple\" name=\"select2\">\n        <option>1</option>\n        <option>2</option>\n        <option>3</option>\n        <option>4</option>\n        <option>5</option>\n    </select>\n    <input name=\"a\" type=\"radio\"/>\n    <input name=\"b\" type=\"checkbox\"/>\n    <input type=\"file\" name=\"aaaa\">\n    <input type=\"hidden\" name=\"hidden\" value=\"hidden\"/>\n    <input type=\"submit\" value=\"提交\" name=\"submit\"/>\n</form>\n复制代码\nJS代码如下：\n\n复制代码\nvar formId = document.getElementById(\"formId\");\nconsole.log(serialize(formId));\nvar submit = formId.elements['submit'];\nEventUtil.addHandler(submit,'click',function(e){\n    EventUtil.preventDefault(e);\n    console.log(serialize(formId));\n});\n复制代码\n我们看到上面的form表单代码，上面有select单选框，也有select多选框，也有隐藏域和input框，但是请注意：上面name=”a”和name=”b”，当他们选中的时候，没有值属性，所以在各个浏览器上都会自带一个值为on的值传给服务器端，但是这个并不是我们想要的，所以的如果需要值的话，一定要设置值，如下如下截图：\n\n在火狐和谷歌下截图如下：\n\n\n\n在IE下：\n\n\n\n上面的select多选框，如果需要多选的话，记得先要按住键盘上的ctrl键就可以多选了，比如上面的select2=2&select2=3&select2=4 就是select框多选。\n\n理解富文本编辑\n\n在网页中编辑内容，IE最早引入这个功能，随后opera，safari，firefox和chrome也实现了这个功能，基本原理就是在页面中嵌入一个空HTML页面的iframe，通过设置designMode属性，这个空白的HTML页面可以添加文字，而添加文字则是该页面的body元素的html代码，如下所示：\n\n\n\ndesignMode有2个属性，off（默认值）和on, 当设置为on的时候，整个文档变得可编辑，但是我们也可以给他们添加css样式，为了更加美观；首先我们先来看看demo，如下HTML页面嵌套一个iframe；\n\n<iframe name=\"richedit\" src=\"bank.html\"></iframe>\n\n而bank.html页面是一个空页面，代码如下：\n\n复制代码\n<!doctype html>\n<html lang=\"en\">\n <head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"Generator\" content=\"EditPlus®\">\n  <meta name=\"Author\" content=\"\">\n  <meta name=\"Keywords\" content=\"\">\n  <meta name=\"Description\" content=\"\">\n  <title>Document</title>\n </head>\n <body>\n    \n </body>\n</html>\n复制代码\n然后在主页面上使用JS，当页面加载完成后，将designMode属性设置为on即可，如下JS代码：\n\nEventUtil.addHandler(window,'load',function(event){\n    frames['richedit'].document.designMode = \"on\";\n});\n然后在页面上显示如下：\n\n\n\n第二种实现方式是使用contenteditable属性来实现\n\ncontenteditable属性是有IE最早实现的，可以把contenteditable属性给页面中的任何元素，然后用户可以立即编辑该元素，不需要iframe，空页面及JS，只需要使用contenteditable属性即可；如下代码给div设置contenteditable属性；如下代码：\n\n<div class=\"richedit\" contenteditable style=\"width:100px;height:100px;border:1px solid #ccc\"></div>\n在浏览器下效果如下：\n\n\n\n支持的浏览器有；IE，firefox，chrome，safari和opera；\n\n在移动设备上，有ios5+和Android3+；\n\nContenteditable属性有三个可能值，true表示打开，false表示关闭，inherit表示从父元素那边继承。","source":"_posts/Javascript中的Form表单知识点总结.md","raw":"---\ntitle: Javascript中的Form表单知识点总结\ndate: 2017-04-24 18:52:49\ntags: HTML\ntoc: true\n---\n转载(http://www.cnblogs.com/tugenhua0707/p/4508986.html)\n 在HTML中，表单是由form元素来表示的，但是在javascript中，表单则由HTMLFormElement类型，此元素继承了HTMLElement，因此与其他HTML元素具有相同的默认属性；HTMLFormElement有自己以下属性和方法；\n\nacceptCharset: 服务器能够处理的字符集；等价于HTML中的accept-charset特性；\n\naction:  接收请求的URL，等价于HTML中的action\n\nelements: 表单中所有控件的集合.\n\nenctype: 请求的编码类型；等价于HTML中的enctype特性；\n<!--more-->\nlength: 表单中控件的数量；\n\nmethod： 要发送的http请求类型，一般是get或者是post，等价于HTML中的method；\n\nname: 表单的名称；\n\nreset(): 将所有表单域重置为默认值；\n\nsubmit(): 提交表单；\n\ntarget:用于发送请求和接收响应的窗口名称；\n\n如何获取form表单的引用？\n\n假如现在页面上有一个form表单元素，html代码如下：\n\n<form id=\"form\" name=\"form1\"></form>\n我现在想取到上面的form表单的引用，一共有以下方式可以获取到上面 的form表单引用；\n\n1. 通过获取form表单的id，来获取form表单的引用；如下代码：\n\nvar formId = document.getElementById(\"form\");\nconsole.log(formId);\n2. 通过document.forms 取得页面中的所有表单元素，然后通过索引来取到对应的form元素，如下代码所示：取得页面第一个form元素；\n\nconsole.log(document.forms[0]);\n3. 通过from表单中的name属性来获取，代码如下：\n\nconsole.log(document.forms['form1']);\n如何提交表单\n\n下面的所有事件都是来自上一篇博客javascript事件总结的事件，都依赖于此封装的事件，代码如下：\n\n复制代码\nvar EventUtil = {\n    addHandler: function(element,type,handler) {\n        if(element.addEventListener) {\n            element.addEventListener(type,handler,false);\n        }else if(element.attachEvent) {\n            element.attachEvent(\"on\"+type,handler);\n        }else {\n            element[\"on\" +type] = handler;\n        }\n    },\n    removeHandler: function(element,type,handler){\n        if(element.removeEventListener) {\n            element.removeEventListener(type,handler,false);\n        }else if(element.detachEvent) {\n            element.detachEvent(\"on\"+type,handler);\n        }else {\n            element[\"on\" +type] = null;\n        }\n    },\n    getEvent: function(event) {\n        return event ? event : window.event;\n    },\n    getTarget: function(event) {\n        return event.target || event.srcElement;\n    },\n    preventDefault: function(event){\n        if(event.preventDefault) {\n            event.preventDefault();\n        }else {\n            event.returnValue = false;\n        }\n    },\n    stopPropagation: function(event) {\n        if(event.stopPropagation) {\n            event.stopPropagation();\n        }else {\n            event.cancelBubble = true;\n        }\n    },\n    getRelatedTarget: function(event){\n        if (event.relatedTarget){\n            return event.relatedTarget;\n        } else if (event.toElement){\n            return event.toElement;\n        } else if (event.fromElement){\n            return event.fromElement;\n        } else {\n            return null;\n        }\n    },\n    getWheelDelta: function(event) {\n        if(event.wheelDelta) {\n            return event.wheelDelta;\n        }else {\n            return -event.detail * 40\n        }\n    },\n    getCharCode: function(event) {\n        if(typeof event.charCode == 'number') {\n            return event.charCode;\n        }else {\n            return event.keyCode;\n        }\n    }\n};\n复制代码\n用户单击提交按钮或图像按钮时，就会提交表单，使用input或者button都可以提交表单，只需将type设置为submit或者image即可，如下三种方式都可以；\n\n第一种：\n\n<form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\">\n    <!-- 存放一个input放在这，为了获取焦点，然后我们可以按enter键提交 -->\n    <input type=\"text\">\n    <input type=\"submit\" value=\"submit\">\n</form>\n第二种：\n\n<form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\">\n    <!-- 存放一个input放在这，为了获取焦点，然后我们可以按enter键提交 -->\n    <input type=\"text\">\n    <button type=\"submit\">submit</button>\n</form>\n第三种：\n\n<form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\">\n    <!-- 存放一个input放在这，为了获取焦点，然后我们可以按enter键提交 -->\n    <input type=\"text\">\n    <input type=\"image\" src=\"aa.jpg\">\n</form>\n我们也可以通过如下方式提交表单，但是也可以阻止form表单提交：如下代码：\n\n复制代码\nEventUtil.addHandler(formId,\"submit\",function(event){\n    // 取得事件对象\n    event = EventUtil.getEvent(event);\n    // 阻止默认事件\n    EventUtil.preventDefault(event);\n});\n复制代码\n如何重置表单\n\n如果我们使用按钮重置表单的话，有下面2种方式：\n\n第一种代码如下：\n\n<form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\">\n    <input type=\"text\">\n    <input type=\"reset\" value=\"reset\">\n</form>\n第二种代码如下：\n\n<form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\">\n    <input type=\"text\">\n    <button type=\"reset\">reset</button>\n</form>\n我们也可以通过像提交form表单一样来进行重置表单，代码如下：\n\nvar formId = document.getElementById(\"form\");\nformId.reset();\n如何访问表单字段？\n\n第一种方式我们可以使用dom节点来访问；\n\n第二种方式：每个表单都有elements属性，该属性是表单中所有表单元素的集合；这个elements是个有序列表；包含着所有字段，比如有input,textarea,button,fieldset等；\n\n比如如下HTML代码：\n\n复制代码\n<form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\">\n    <input type=\"text\" name=\"input1\">\n    <select name=\"select1\">\n        <option>111</option>\n    </select>\n</form>\n复制代码\nJS获取表单字段如下：\n\n复制代码\nvar formId = document.getElementById(\"form\");\n// 取得表单中的第一个字段\nvar firstCol = formId.elements[0];\nconsole.log(firstCol);\n// 取得名字name为select1的字段\nconsole.log(formId.elements['select1']);\n// 取得表单中包含字段的数量\nconsole.log(formId.elements.length);\n复制代码\n如果一个表单中，有多个name相同的属性，那么取得数据是一个集合，如下HTML代码：\n\n<form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\">\n    <input type=\"radio\" name=\"radio2\"/>\n    <input type=\"radio\" name=\"radio2\"/>\n    <input type=\"radio\" name=\"radio2\"/>\n</form>\nJS代码如下：\n\nvar formId = document.getElementById(\"form\");\nvar radios = formId.elements[\"radio2\"];\nconsole.log(radios.length);  // 打印3\n共有的表单字段属性\n\n所有的表单字段都有一组相同的属性；表单共有的属性如下：\n\ndisabled: 布尔值，表示当前字段是否被禁用；\n\nform: 指向当前字段所属表单的指针，只读；\n\nname: 当前字段的名称;\n\nreadOnly:布尔值，表示当前字段是否可读。\n\ntabIndex: 表示当前字段的切换(tab)序号。\n\ntype: 当前字段的类型，如checkbox,radio等；\n\nvalue: 当前字段被提交到服务器的值；\n\n共有的表单字段方法\n\n每个表单字段都有两个方法focus()和blur()，其中focus是获取焦点；比如在页面加载完成后，我希望form表单中的第一个字段获取焦点（除隐藏域之外）；如下代码：\n\n<form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\">\n    <input type=\"text\" name=\"radio2\"/>\n    <input type=\"text\" name=\"radio2\"/>\n    <input type=\"text\" name=\"radio2\"/>\n</form>\nJS代码如下：\n\nvar formId = document.getElementById(\"form\");\nEventUtil.addHandler(window,'load',function(event){\n    formId.elements[0].focus();\n});\n但是HTML5中为表单字段新增了一个autofocus属性，在支持这个属性浏览器中，如果设置了这个属性，不用javascript就能将焦点移动到某个输入框下，比如如下HTML代码，在页面加载完成后，我把焦点放在第二个输入框内，如下HTML代码：\n\n<form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\">\n    <input type=\"text\" name=\"radio2\" />\n    <input type=\"text\" name=\"radio2\" autofocus/>\n    <input type=\"text\" name=\"radio2\"/>\n</form>\n支持autofocus属性的浏览器有：firefox4+，safari5+，chrome和Opera9.6+\n\n但是我想要兼容其他不支持autofocus的浏览器，我们可以写一段JS，为了全兼容；\n\n复制代码\nvar formId = document.getElementById(\"form\");\nEventUtil.addHandler(window,'load',function(event){\n    var element = formId.elements[1];\n    if(element.autofocus !== true) {\n        element.focus();\n    }\n});\n复制代码\n因为autofocus是一个布尔值，支持他的浏览器默认为true；不支持他的浏览器，默认值为空字符串；\n\n共有的表单字段事件\n\n所有的表单字段都支持以下三个事件；\n\nblur:当前字段失去焦点时触发；\n\nchange:对于input和textarea元素，值发生改变的时候触发；\n\nfocus: 当前字段获得焦点时触发；\n\n理解文本框脚本\n\n在HTML中，有2种方式来实现文本框，一种是input元素的单行文本框，另一种是textarea元素的多行文本框；\n\ninput元素有属性type=”text”, 还可以通过设置size属性，用来指定文本框显示的字符数，还可以设置value，用来显示文本框的初始值，还可以设置maxlength属性，用于指定文本框可以接受的最大字符数；如下代码：\n\n<input type=\"text\" size=\"2\" maxlength='12' value=\"\"/>\n\n多行文本框textarea也有一些属性，这里就不做多介绍了；\n\n如何选择文本：\n\ninput和select两种元素都支持select()方法，这个方法用于选择文本框中的所有文本，在调用select()方法中(除Opera外),都会将焦点设置到文本框中，这个方法不接受任何参数，如下代码：\n\n<form id=\"formId\">\n    <input type=\"text\" name=\"input\" value=\"我是龙恩\"/>\n</form>\nJS代码如下：\n\nvar formId = document.getElementById(\"formId\");\nformId.elements['input'].select();\n如下图所示：\n\n\n\n如上是页面一进来的时候，默认选择input元素框所有的内容；我们也可以当获取焦点的时候，就选中所有的内容，JS代码可以改为如下：\n\n复制代码\nvar formId = document.getElementById(\"formId\"),\ninput = formId.elements['input'];\nEventUtil.addHandler(input,\"focus\",function(event){\n    event = EventUtil.getEvent(event);\n    var target = EventUtil.getTarget(event);\n    target.select();\n});\n复制代码\n在火狐和谷歌浏览器下能实现当获取焦点的时候，就选中input元素框内的所有内容，但是在IE7或者8下，还是页面加载完后就已经选中了文本框内的所有元素；\n\n  1.   选择事件(select)\n\n与select方法对应的，还有一个select事件，在IE9+，firefox，chrome，opera和safari中，只有用户选择了文本且释放鼠标时，会触发select事件；但是在IE8及以下，只要用户选择了一个字母且不必释放鼠标，就会触发select事件；如下代码：\n\nvar formId = document.getElementById(\"formId\"),\ninput = formId.elements['input'];\nEventUtil.addHandler(input,\"select\",function(event){\n    alert(input.value);\n});\n2. 取的选择的文本\n\n虽然通过select事件我们知道用户什么时候选择了文本，但是我们并不知道用户选择了什么文本，在HTML5中，我们通过两个属性selectionStart和selectionEnd，这两个属性表示选择的范围(即文本区开头和结尾的偏移量)；因此要取得用户选择的文本，可以使用如下代码；\n\n复制代码\nvar formId = document.getElementById(\"formId\"),\n    input = formId.elements['input'];\nEventUtil.addHandler(input,\"select\",function(event){\n    alert(getSelectedText(input));\n});\nfunction getSelectedText(elem) {\n    return elem.value.substring(elem.selectionStart,elem.selectionEnd);\n}\n复制代码\n但是目前浏览器支持程度有：IE9+，firefox，chrome，Opera及safari；\n\nIE8及之前的版本不支持这两个属性，但是他们提供了另外一种document.selection对象，其中保存着用户在整个文档范围内选择的文本信息，但是呢与前面的select事件使用在一起的话，只能选择一个字符就会触发事件，也就是说，不能选择大于1和字符的文字，不过可以知道选择的值时多少；如下代码：\n\n复制代码\nvar formId = document.getElementById(\"formId\"),\ninput = formId.elements['input'];\nEventUtil.addHandler(input,\"select\",function(event){\n    alert(getSelectedText(input));\n});\nfunction getSelectedText(elem) {\n    if(typeof elem.selectionStart == \"number\") {\n         return elem.value.substring(elem.selectionStart,elem.selectionEnd);\n    }else if(document.selection) {\n        return document.selection.createRange().text;\n    }\n}\n复制代码\n选择部分文本\n\nHTML5也为选择文本框中的部分文本提供了解决方案，使用setSelectionRange()方法，这个方法接收2个参数，要选择的第一个字符的索引，和要选择的最后一个字符之后的字符的索引；\n\n浏览器支持有：IE9+，chrome，safari和opera，firefox貌似不支持；\n\n代码如下：\n\nvar formId = document.getElementById(\"formId\"),\n    input = formId.elements['input'];\ninput.value = \"我是龙恩，我是中国人\";\n// 选择所有文本\ninput.setSelectionRange(0,input.value.length);\n截图如下：\n\n\n\n// 选择前3个字符\n\ninput.setSelectionRange(0,3);\n截图如下：\n\n\n\n// 选择第四到第六个字符\n\ninput.setSelectionRange(4,7);\n\n截图如下：\n\n\n\nIE8及以下版本可以使用范围来选择部分文本，要选择部分文本，必须首先使用IE在所有文本框中提供的createTextRange()方法创建一个范围，且我们需要使用collapse()将范围折叠到文本框的开始位置，再使用moveStart()和moveEnd()这两个范围方法将范围移动到位；\n\n如下代码选择所有的文本：\n\n复制代码\ninput.value = \"我是龙恩，我是中国人\";\nvar range = input.createTextRange();\n// 选择所有文本\nrange.collapse(true);\nrange.moveStart(\"character\",0);\nrange.moveEnd(\"character\",input.value.length);\nrange.select();\n复制代码\n演示如下：\n\n\n\n切记：使用F5刷新没有用的，要在地址栏中，然后按enter键刷新即可看到效果；\n\n// 选择前3个字符\nrange.collapse(true);\nrange.moveStart(\"character\",0);\nrange.moveEnd(\"character\",3);\nrange.select();\n演示如下：\n\n\n\n// 选择第4到第6个字符\nrange.collapse(true);\nrange.moveStart(\"character\",4);\nrange.moveEnd(\"character\",3);\nrange.select();\n演示如下：\n\n\n\n为了让跨浏览器效果，我们可以封装一个方法，如下：\n\n复制代码\nfunction selectText(elem,startIndex,stopIndex) {\n    if(elem.setSelectionRange) {\n          elem.setSelectionRange(startIndex,stopIndex);\n    }else if(elem.createTextRange) {\n        var range = elem.createTextRange();\n        range.collapse(true);\n        range.moveStart(\"character\",startIndex);\n        range.moveEnd(\"character\",stopIndex - startIndex);\n        range.select();\n    }\n}\n复制代码\n测试数据如下：貌似firefox不支持\n\n复制代码\n// 选择所有文本\nselectText(input,0,input.value.length);\n        \n// 选择前3个字符\nselectText(input,0,3);\n\n// 选择第四个字符到第六个字符\nselectText(input,4,7);\n复制代码\n过滤输入\n\n    有时候我们会要求用户在输入框里面输入特定格式的数据，我们就可以使用过滤输入这种手段来进行了，首先我们来看看如何屏蔽字符；\n\n 1.   屏蔽字符\n\n比如我在一个input输入框中，只允许只能输入数字，那么我们可以先获取通过keypress事件来监听，然后每次获取到键码，然后通过String.fromCharCode()这个方法，把键码转换成字符串，然后通过正则判断下，如果不是数字，直接阻止默认事件即可不让用户输入，如下代码：\n\n<form id=\"formId\">\n    <input type=\"text\" name=\"input\"/>\n</form>\nJS代码如下：\n\n复制代码\nvar formId = document.getElementById(\"formId\"),\ninput = formId.elements['input'];    \nEventUtil.addHandler(input,'keypress',function(event) {\n    event = EventUtil.getEvent(event);\n    var charCode = EventUtil.getCharCode(event);\n    if(!/\\d/.test(String.fromCharCode(charCode))) {\n        EventUtil.preventDefault(event);\n    }\n});    \n复制代码\n如上代码能满足日常需求，但是有些游览器，比如firefox，safari(3.1版本之前)会对向上键，向下键，退格键和删除键也会触发keypress事件了；所以为了避免这些事件的发生，我们需要做一些处理来满足所有版本的浏览器的需求，我们发现在firefox中，所有由非字符键触发keypress键码都为0；而在safari3以前的版本中，对应的字符编码全部为8；所以我们要对字符编码进行判断下；\n\n如下代码：\n\n复制代码\nEventUtil.addHandler(input,'keypress',function(event) {\n    event = EventUtil.getEvent(event);\n    var charCode = EventUtil.getCharCode(event);\n    if(!/\\d/.test(String.fromCharCode(charCode)) && charCode > 9) {\n        EventUtil.preventDefault(event);\n    }\n});\n复制代码\n操作剪贴板\n\n到目前为止，IE，chrome，safari，opera都支持剪贴板事件，貌似firefox就不支持了（书上说支持）；但是我操作就不支持了；下面是6个操作剪贴板事件；如下：\n\nbeforecopy: 在发生复制操作前触发；\n\ncopy: 在发生复制操作时触发；\n\nbeforecut: 在发生剪贴操作前触发；\n\ncut: 在发生剪贴操作时触发；\n\nbeforepaste: 在发生黏贴操作前触发；\n\npaste: 在发生粘帖操作时触发；\n\n针对上面的事件，我们可以使用如下代码测试下就可以证明了；代码如下所示：\n\nEventUtil.addHandler(input,'beforecopy',function(event) {\n    alert(1);\n});\n如果要访问剪贴板中的数据，可以使用clipboardData对象，在IE中，这个对象是window对象的属性，在safari或者chrome上，这个对象是event的属性，这个clipboardData对象有三个方法，getData(),setData(),和clearData();\n\ngetData()是从剪贴板中取得数据，他接受一个参数，即要取得数据的格式，在IE中，有二种数据格式”text” 和 “url”，在safari和chrome中这个参数是一种MIME类型，不过，可以使用text代表text/plain.\n\nsetData()方法是给剪贴板设置文本，接受2个参数，第一个数据是数据类型；第二个参数是放在剪贴板中的文本；但是此方法接受的数据类型只能是text/plain,不能是text；因此为了全兼容浏览器(出firefox外)，我们可以写一个通用的方法出来，如下：\n\n复制代码\ngetClipboardText: function(event) {\n    var clipboardData = (event.clipboardData || window.clipboardData);\n        return clipboardData.getData(\"text\");\n    },\nsetClipboardText:function(event,value) {\n    if(event.clipboardData) {\n        return event.clipboardData.setData(\"text/plain\",value);\n    }else if(window.clipboardData) {\n        return window.clipboardData.setData(\"text\",value);\n    }\n}\n复制代码\n因此EventUtil封装的所有方法如下：\n\n复制代码\nvar EventUtil = {\n    addHandler: function(element,type,handler) {\n        if(element.addEventListener) {\n                    element.addEventListener(type,handler,false);\n        }else if(element.attachEvent) {\n            element.attachEvent(\"on\"+type,handler);\n        }else {\n            element[\"on\" +type] = handler;\n        }\n    },\n    removeHandler: function(element,type,handler){\n        if(element.removeEventListener) {\n                    element.removeEventListener(type,handler,false);\n        }else if(element.detachEvent) {\n            element.detachEvent(\"on\"+type,handler);\n        }else {\n            element[\"on\" +type] = null;\n        }\n    },\n    getEvent: function(event) {\n        return event ? event : window.event;\n    },\n    getTarget: function(event) {\n        return event.target || event.srcElement;\n    },\n    preventDefault: function(event){\n        if(event.preventDefault) {\n            event.preventDefault();\n        }else {\n            event.returnValue = false;\n        }\n    },\n    stopPropagation: function(event) {\n        if(event.stopPropagation) {\n            event.stopPropagation();\n        }else {\n            event.cancelBubble = true;\n        }\n    },\n    getRelatedTarget: function(event){\n        if (event.relatedTarget){\n            return event.relatedTarget;\n        } else if (event.toElement){\n            return event.toElement;\n        } else if (event.fromElement){\n            return event.fromElement;\n        } else {\n            return null;\n        }\n    },\n    getWheelDelta: function(event) {\n        if(event.wheelDelta) {\n            return event.wheelDelta;\n        }else {\n            return -event.detail * 40\n        }\n    },\n    getCharCode: function(event) {\n        if(typeof event.charCode == 'number') {\n            return event.charCode;\n        }else {\n            return event.keyCode;\n        }\n    },\n    getClipboardText: function(event) {\n        var clipboardData = (event.clipboardData || window.clipboardData);\n        return clipboardData.getData(\"text\");\n    },\n    setClipboardText:function(event,value) {\n        if(event.clipboardData) {\n        return event.clipboardData.setData(\"text/plain\",value);\n            }else if(window.clipboardData) {\n            return window.clipboardData.setData(\"text\",value);\n        }\n    }\n};\n复制代码\n测试代码如下：还是上面测试输入框的值是否为数字；每次粘帖上次，都能获取到黏贴的是文字数据，代码如下：\n\nHTML代码如下：\n\n<form id=\"formId\">\n     <input type=\"text\" name=\"input\"/>\n</form>\nJS代码如下：\n\n复制代码\nvar formId = document.getElementById(\"formId\"),\ninput = formId.elements['input'];\nEventUtil.addHandler(input,'paste',function(event) {\n    event = EventUtil.getEvent(event);\n    var text = EventUtil.getClipboardText(event);\n    alert(text);\n    if (!/^\\d*$/.test(text)){\n        EventUtil.preventDefault(event);\n    }\n});\n复制代码\n理解自动切换输入框或者textarea的焦点\n\n比如我们在填写表单的页面上，当用户输入完自己的数据的时候，不需要用户手动切换到下一个输入框里面去，我们可以自动切换去，这样的话，对于用户体验来说，比较方便，比如我们现在页面上有一个form表单，这里为了做测试，我们先用一个输入框用于手机号码的，另外一个是textarea，当手机号码输入11位数字后，会自动切换到textarea中；当然页面中的隐藏域除外；代码如下：\n\nHTML代码如下：\n\n<form id=\"formId\">\n    <input type=\"text\" name=\"input\" maxlength=11/>\n    <textarea></textarea>\n</form>\nJS代码如下：\n\n复制代码\nvar formId = document.getElementById(\"formId\"),\ninput = formId.elements['input'];\nEventUtil.addHandler(input,'keyup',tabForward);\nfunction tabForward(event) {\n    event = EventUtil.getEvent(event);\n    var target = EventUtil.getTarget(event);\n    if(target.value.length == target.maxLength) {\n        // 获取当前的form表单的引用\n        var form = target.form;\n        for(var i = 0, ilen = form.elements.length; i < ilen; i++) {\n            if(form.elements[i] == target) {\n                if(form.elements[i+1]) {\n                    form.elements[i+1].focus();\n                }\n                return;\n            }\n        }        \n    }\n}\n复制代码\n理解HTML5新增属性\n\nrequired属性；\n\n比如在HTML5中对表单input，textarea，或者select标签的话，提交表单时，需要判断是否为空，特别对于在做移动端的朋友来说，可以使用HTML5中的新增属性required；如下HTML代码：\n\n<form id=\"formId\">\n    <input type=\"text\" name=\"input\" maxlength=11 required/>\n    <textarea></textarea>\n    <input type=\"submit\"/>\n</form>\n提交时候，在chrome下看到效果如下：\n\n\n\n在firefox下，提示如下：\n\n\n\n如上是根据不同的浏览器本身的性质来提示的，因此样式不同，所以适合在移动端根据本身浏览器内核来提示；\n\n但是在Javascript是如何判断的呢？比如如下HTML代码：\n\n<form id=\"formId\">\n    <input type=\"text\" name=\"input\" maxlength=11 required/>\n    <textarea></textarea>\n    <input type=\"submit\" name=\"submit\"/>\n</form>\nJS代码如下：\n\n复制代码\nvar formId = document.getElementById(\"formId\"),\nsubmit = formId.elements['submit'];\nEventUtil.addHandler(submit,'click',function(event) {\n    var isRequired = formId.elements[\"submit\"].required;\n    console.log(isRequired);\n});\n复制代码\n如上打印出false；可以获取到submit的属性required，如果输入框值为空的话，会打印出false出来；\n\n如果想知道浏览器是否支持required这个属性的话，我们可以使用如下代码判断下，如果返回true，说明支持，否则不支持；如下：\n\nvar isRequiredSupported = \"required\" in document.createElement(\"input\");\nconsole.log(isRequiredSupported);\ninput输入框类型type的值是email或者url\n\n<input type=”email” name=”email”/>\n\n<input type=”url” name=”url”/>\n\nemail类型要求输入的文本必须符合电子邮件的格式，url类型要求输入的文本必须符合URL的格式；如下chrome浏览器截图如下；\n\n\n\n\n\n选择框脚本\n\n选择框是通过<select>和<option>元素创建的，除了表单所有的共有属性和方法外，HTMLSelectElement类还提供了下列属性和方法；\n\nadd(newOption,relOption);向控件中插入新<option>元素，其位置在relOption之前；\n\nmultiple:布尔值; 表示是否允许多项选择，等价于HTML中的multiple特性；\n\noptions: 控件中所有<option>元素的HTMLCollection；\n\nremove(index):   移除给定位置的选项；\n\nselectedIndex:   基于0的选中索引，如果没有该选项，则值为 -1；\n\nsize:  选择框中的可见的行数。\n\n如下select框代码：\n\n复制代码\n<form id=\"formId\">\n    <select name=\"location\" id=\"selLocation\">\n        <option value=\"A\">A</option>\n        <option value=\"B\">B</option>\n        <option value=\"C\">C</option>\n        <option value=\"\">D</option>\n        <option>E</option>\n    </select>\n</form>\n复制代码\nJS代码如下：\n\n复制代码\nvar formId = document.getElementById(\"formId\"),\nselect = formId.elements['location'];\nconsole.log(select.value);\nEventUtil.addHandler(select,'change',function(){\n    console.log(select.value)\n});\n复制代码\n第一次页面加载完成后，打印出值为A；\n\n当每次切换的时候，如果有value就打印出值，如果value=””;则打印空字符串，但是如果option选项没有指定value，在firfox和chrome下打印出当前的文本值，比如上面的文本为E，则值为E；但是IE8及以下，打印的还是空字符串；\n\n在DOM中，每个<option>元素都有一个HTMLOptionElement对象表示；为方便访问数据，对象添加了如下属性；\n\nindex: 当前选项在options集合中的索引；\n\nlabel： 当前选项的标签，等价于HTML中的label\n\nselected：布尔值，表示当前选项是否被选中，将这个属性设置为true可以选中当前选项。\n\ntext：选项的文本；\n\nvalue：选项的值；\n\n我们还是以上面的form表单作为HTML代码，我们使用JS来测试下：\n\n如下代码：\n\n复制代码\nvar formId = document.getElementById(\"formId\"),\nselect = formId.elements['location'];\n// 获取options集合中的第一项选项的文本\nconsole.log(select.options[0].text);   // 打印出A\n// 获取options集合中的第一项选项的value\nconsole.log(select.options[0].value);  // 打印出A\n复制代码\n对于下拉框只能选择一项的选择框，访问最简单的方式，就是使用selectedIndex属性，如下HTML代码：\n\n复制代码\n<form id=\"formId\">\n    <select name=\"location\" id=\"selLocation\">\n        <option value=\"A\">A</option>\n        <option value=\"B\" selected>B</option>\n        <option value=\"C\">C</option>\n        <option value=\"\">D</option>\n        <option>E</option>\n    </select>\n</form>\n复制代码\n假如页面初始化的时候默认选择第二项，那么我们可以先使用selectedIndex的属性获取选中的索引，然后根据索引获取当前的文本和值；如下JS代码：\n\n复制代码\nvar formId = document.getElementById(\"formId\"),\nselect = formId.elements['location'];\n// 获取当前选中的选项的索引selectedIndex\nvar selectedIndex = select.selectedIndex;\n// 获取索引为selectedIndex的option\nvar selectedOption = select.options[selectedIndex];    \nconsole.log(\"selected index:\"+selectedIndex+\"\\nselect text:\"+selectedOption.text+\"\\nselect value:\"+selectedOption.value);\n复制代码\n添加选项\n\n可以使用javascript动态创建选项，并将它们添加到选择框中，添加选择框有以下常见3种方式；\n\n第一种方式使用DOM的方式如下：\n\nHTML代码如下：\n\n<form id=\"formId\">\n    <select name=\"location\" id=\"selLocation\">\n            \n    </select>\n</form>\nJS代码如下：\n\n复制代码\nvar formId = document.getElementById(\"formId\"),\nselect = formId.elements['location'];\nvar newOption = document.createElement(\"option\");\nnewOption.appendChild(document.createTextNode(\"A\"));\nnewOption.setAttribute(\"value\",\"AAAA\");\nselect.appendChild(newOption);\n复制代码\n第二种方式使用Option构造函数来创建新选项，Option构造函数接收2个参数，文本(text)和值(value),第二个参数可选，比如如下代码：\n\nvar formId = document.getElementById(\"formId\"),\nselect = formId.elements['location'];\nvar newOption = new Option(\"Option text\",\"Option value\");\nselect.appendChild(newOption);\n但是这种方式在IE下是不生效的；\n\n下面我们来看看第三种方式吧！是使用选择框add()方法，DOM规定这个方法接收2个参数，要添加的新选项和将位于新选项之后的选项，如果想在列表的最后添加一个选项，应将第二个参数设置为null；在IE对add()方法的实现中，第二个参数是可选的，但是标准DOM浏览器中，必须要指定第二个参数，因此为了全兼容浏览器，我们必须添加第二个参数，但是我们可以将第二个参数设置为undefined，含义是：在所有的浏览器将新选项插入到列表的最后了~\n\n如下代码：\n\nvar formId = document.getElementById(\"formId\"),\nselect = formId.elements['location'];\nvar newOption = new Option(\"Option text\",\"Option value\");\nselect.add(newOption,undefined);\n移除选项的方式如下：\n\n使用dom的removeChild()方法，为其传入要移除的选项；如下代码：\nHTML代码如下：\n\n复制代码\n<form id=\"formId\">\n    <select name=\"location\" id=\"selLocation\">\n        <option value=\"A\">A</option>\n        <option value=\"B\">B</option>\n        <option value=\"C\">C</option>\n    </select>\n</form>\n复制代码\nJavascript代码如下：\n\nvar formId = document.getElementById(\"formId\"),\nselect = formId.elements['location'];\n// 第一种：移除第一项如下方式\nselect.removeChild(select.options[0]);\n2. 第二种方式是使用选择框的remove()方法，这个方法接收一个参数，既要移除选项的索引；如下代码：\n\nvar formId = document.getElementById(\"formId\"),\nselect = formId.elements['location'];\n// 移除第一项\nselect.remove(0);\n3. 最后一种方式，就是将相应的选项设置为null，如下代码：\n\nvar formId = document.getElementById(\"formId\"),\nselect = formId.elements['location'];\n// 移除第一项\nselect.options[0] = null;\n理解表单序列化\n\n在javascript中，可以利用表单字段的type属性，连同name和value属性一起实现对表单的序列化，序列化后将把这些数据发送给服务器。\n\n下面是将那些字段需要进行序列化的；\n\n对表单字段的名称和值进行URL编码，使用&分割；\n不发送禁用的表单字段；\n只发送勾选的单选框和复选框按钮数据；\n不发送type为reset和button的按钮\n多选选择框中的每个选中的值单独一个条目；\nSelect元素的值，就是选中option元素的value的值，如果option没有属性value，则是选中的文本值；\n如下JS代码是封装form表单的序列化的JS如下：\n\n// 序列化JS代码封装\n\n复制代码\nfunction serialize(form) {\n    var arrs = [],\n    field = null,\n    i,\n    len,\n    j,\n    optLen,\n    option,\n    optValue;\n    for(i = 0,len = form.elements.length; i < len; i++) {\n        field = form.elements[i];\n        switch(field.type) {\n            case \"select-one\":\n               case  \"select-multiple\":\n            if(field.name.length) {\n                 for(j = 0,optLen = field.options.length; j < optLen; j++) {\n                       option = field.options[j];\n                       if(option.selected) {\n                           optValue = '';\n                           if(option.hasAttribute) {\n                               optValue = option.hasAttribute(\"value\") ? option.value : option.text;\n                           }else {\n                               optValue = option.attributes[\"value\"].specified ? option.value : option.text;\n                           }\n                           arrs.push(encodeURIComponent(field.name) + \"=\" +encodeURIComponent(optValue));\n                       }\n                   }\n             }\n            break;\n            case undefined:      //字段集\n            case \"file\":         // 文件输入\n            case \"submit\":       // 提交按钮\n            case \"reset\":        // 重置按钮\n            case \"button\":       // 自定义按钮\n            break;\n                    \n            case \"radio\":        // 单选框\n            case \"checkbox\":     // 复选框\n            if(!field.checked) {\n                break;\n            }\n            /* 执行默认动作 */\n           default:\n           // 不包含没有名字的表单字段\n           if(field.name.length) {\n               arrs.push(encodeURIComponent(field.name) + \"=\" +encodeURIComponent(field.value));\n           }\n       }\n    }\n    return arrs.join(\"&\");\n}\n复制代码\n     如上对form表单序列化的函数serialize，定义了一个arrs数组，用来保存需要序列化后的名值对，然后通过for循环迭代每个表单中的字段，先使用临时变量field保存表单中任意一个字段的引用，然后使用switch语句判断字段的类型type(如果type未定义的话，此元素就不需要表单序列化)，第一种情况是select的单选和多选框，对于select单选框，只可能有一个选中项，对于多选框可能有零或多个选中项，如果有选中项的话(通过属性selected来判断)，需要确定使用什么值，如果不存在value特性，或者虽然存在该特性，但是值为空字符串，都是使用选项的文本来代替，为检查这个特性，在兼容DOM的浏览器下我们需要使用hasAttribute()方法，而在IE中需要使用特性的specified属性；对于type=“file”或者submit，reset，button等就不支持，如果比如上传图片的时候，需要图片的二进制数据使用form表单提交的话，可以在序列化后在加上这个参数即可；对于单选框和复选框如果没有选中的话，同样不进行序列化；下面我们现在来看看一个demo吧！如下HTML代码：\n\n复制代码\n<form id=\"formId\">\n    <select name=\"location\" id=\"selLocation\" one=\"one\">\n        <option value=\"A\">A</option>\n        <option value=\"B\">B</option>\n        <option value=\"C\">C</option>\n    </select>\n    <select multiple=\"multiple\" style=\"width: 50px;\" id=\"mymultiple\" name=\"select2\">\n        <option>1</option>\n        <option>2</option>\n        <option>3</option>\n        <option>4</option>\n        <option>5</option>\n    </select>\n    <input name=\"a\" type=\"radio\"/>\n    <input name=\"b\" type=\"checkbox\"/>\n    <input type=\"file\" name=\"aaaa\">\n    <input type=\"hidden\" name=\"hidden\" value=\"hidden\"/>\n    <input type=\"submit\" value=\"提交\" name=\"submit\"/>\n</form>\n复制代码\nJS代码如下：\n\n复制代码\nvar formId = document.getElementById(\"formId\");\nconsole.log(serialize(formId));\nvar submit = formId.elements['submit'];\nEventUtil.addHandler(submit,'click',function(e){\n    EventUtil.preventDefault(e);\n    console.log(serialize(formId));\n});\n复制代码\n我们看到上面的form表单代码，上面有select单选框，也有select多选框，也有隐藏域和input框，但是请注意：上面name=”a”和name=”b”，当他们选中的时候，没有值属性，所以在各个浏览器上都会自带一个值为on的值传给服务器端，但是这个并不是我们想要的，所以的如果需要值的话，一定要设置值，如下如下截图：\n\n在火狐和谷歌下截图如下：\n\n\n\n在IE下：\n\n\n\n上面的select多选框，如果需要多选的话，记得先要按住键盘上的ctrl键就可以多选了，比如上面的select2=2&select2=3&select2=4 就是select框多选。\n\n理解富文本编辑\n\n在网页中编辑内容，IE最早引入这个功能，随后opera，safari，firefox和chrome也实现了这个功能，基本原理就是在页面中嵌入一个空HTML页面的iframe，通过设置designMode属性，这个空白的HTML页面可以添加文字，而添加文字则是该页面的body元素的html代码，如下所示：\n\n\n\ndesignMode有2个属性，off（默认值）和on, 当设置为on的时候，整个文档变得可编辑，但是我们也可以给他们添加css样式，为了更加美观；首先我们先来看看demo，如下HTML页面嵌套一个iframe；\n\n<iframe name=\"richedit\" src=\"bank.html\"></iframe>\n\n而bank.html页面是一个空页面，代码如下：\n\n复制代码\n<!doctype html>\n<html lang=\"en\">\n <head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"Generator\" content=\"EditPlus®\">\n  <meta name=\"Author\" content=\"\">\n  <meta name=\"Keywords\" content=\"\">\n  <meta name=\"Description\" content=\"\">\n  <title>Document</title>\n </head>\n <body>\n    \n </body>\n</html>\n复制代码\n然后在主页面上使用JS，当页面加载完成后，将designMode属性设置为on即可，如下JS代码：\n\nEventUtil.addHandler(window,'load',function(event){\n    frames['richedit'].document.designMode = \"on\";\n});\n然后在页面上显示如下：\n\n\n\n第二种实现方式是使用contenteditable属性来实现\n\ncontenteditable属性是有IE最早实现的，可以把contenteditable属性给页面中的任何元素，然后用户可以立即编辑该元素，不需要iframe，空页面及JS，只需要使用contenteditable属性即可；如下代码给div设置contenteditable属性；如下代码：\n\n<div class=\"richedit\" contenteditable style=\"width:100px;height:100px;border:1px solid #ccc\"></div>\n在浏览器下效果如下：\n\n\n\n支持的浏览器有；IE，firefox，chrome，safari和opera；\n\n在移动设备上，有ios5+和Android3+；\n\nContenteditable属性有三个可能值，true表示打开，false表示关闭，inherit表示从父元素那边继承。","slug":"Javascript中的Form表单知识点总结","published":1,"updated":"2017-06-28T06:59:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfnkq6a000plyfyccxlvecy","content":"<p>转载(<a href=\"http://www.cnblogs.com/tugenhua0707/p/4508986.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/tugenhua0707/p/4508986.html</a>)<br> 在HTML中，表单是由form元素来表示的，但是在javascript中，表单则由HTMLFormElement类型，此元素继承了HTMLElement，因此与其他HTML元素具有相同的默认属性；HTMLFormElement有自己以下属性和方法；</p>\n<p>acceptCharset: 服务器能够处理的字符集；等价于HTML中的accept-charset特性；</p>\n<p>action:  接收请求的URL，等价于HTML中的action</p>\n<p>elements: 表单中所有控件的集合.</p>\n<p>enctype: 请求的编码类型；等价于HTML中的enctype特性；<br><a id=\"more\"></a><br>length: 表单中控件的数量；</p>\n<p>method： 要发送的http请求类型，一般是get或者是post，等价于HTML中的method；</p>\n<p>name: 表单的名称；</p>\n<p>reset(): 将所有表单域重置为默认值；</p>\n<p>submit(): 提交表单；</p>\n<p>target:用于发送请求和接收响应的窗口名称；</p>\n<p>如何获取form表单的引用？</p>\n<p>假如现在页面上有一个form表单元素，html代码如下：</p>\n<p><form id=\"form\" name=\"form1\"></form><br>我现在想取到上面的form表单的引用，一共有以下方式可以获取到上面 的form表单引用；</p>\n<ol>\n<li>通过获取form表单的id，来获取form表单的引用；如下代码：</li>\n</ol>\n<p>var formId = document.getElementById(“form”);<br>console.log(formId);</p>\n<ol>\n<li>通过document.forms 取得页面中的所有表单元素，然后通过索引来取到对应的form元素，如下代码所示：取得页面第一个form元素；</li>\n</ol>\n<p>console.log(document.forms[0]);</p>\n<ol>\n<li>通过from表单中的name属性来获取，代码如下：</li>\n</ol>\n<p>console.log(document.forms[‘form1’]);<br>如何提交表单</p>\n<p>下面的所有事件都是来自上一篇博客javascript事件总结的事件，都依赖于此封装的事件，代码如下：</p>\n<p>复制代码<br>var EventUtil = {<br>    addHandler: function(element,type,handler) {<br>        if(element.addEventListener) {<br>            element.addEventListener(type,handler,false);<br>        }else if(element.attachEvent) {<br>            element.attachEvent(“on”+type,handler);<br>        }else {<br>            element[“on” +type] = handler;<br>        }<br>    },<br>    removeHandler: function(element,type,handler){<br>        if(element.removeEventListener) {<br>            element.removeEventListener(type,handler,false);<br>        }else if(element.detachEvent) {<br>            element.detachEvent(“on”+type,handler);<br>        }else {<br>            element[“on” +type] = null;<br>        }<br>    },<br>    getEvent: function(event) {<br>        return event ? event : window.event;<br>    },<br>    getTarget: function(event) {<br>        return event.target || event.srcElement;<br>    },<br>    preventDefault: function(event){<br>        if(event.preventDefault) {<br>            event.preventDefault();<br>        }else {<br>            event.returnValue = false;<br>        }<br>    },<br>    stopPropagation: function(event) {<br>        if(event.stopPropagation) {<br>            event.stopPropagation();<br>        }else {<br>            event.cancelBubble = true;<br>        }<br>    },<br>    getRelatedTarget: function(event){<br>        if (event.relatedTarget){<br>            return event.relatedTarget;<br>        } else if (event.toElement){<br>            return event.toElement;<br>        } else if (event.fromElement){<br>            return event.fromElement;<br>        } else {<br>            return null;<br>        }<br>    },<br>    getWheelDelta: function(event) {<br>        if(event.wheelDelta) {<br>            return event.wheelDelta;<br>        }else {<br>            return -event.detail * 40<br>        }<br>    },<br>    getCharCode: function(event) {<br>        if(typeof event.charCode == ‘number’) {<br>            return event.charCode;<br>        }else {<br>            return event.keyCode;<br>        }<br>    }<br>};<br>复制代码<br>用户单击提交按钮或图像按钮时，就会提交表单，使用input或者button都可以提交表单，只需将type设置为submit或者image即可，如下三种方式都可以；</p>\n<p>第一种：</p>\n<p><form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\"><br>    <!-- 存放一个input放在这，为了获取焦点，然后我们可以按enter键提交 --><br>    <input type=\"text\"><br>    <input type=\"submit\" value=\"submit\"><br></form><br>第二种：</p>\n<p><form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\"><br>    <!-- 存放一个input放在这，为了获取焦点，然后我们可以按enter键提交 --><br>    <input type=\"text\"><br>    <button type=\"submit\">submit</button><br></form><br>第三种：</p>\n<p><form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\"><br>    <!-- 存放一个input放在这，为了获取焦点，然后我们可以按enter键提交 --><br>    <input type=\"text\"><br>    <input type=\"image\" src=\"aa.jpg\"><br></form><br>我们也可以通过如下方式提交表单，但是也可以阻止form表单提交：如下代码：</p>\n<p>复制代码<br>EventUtil.addHandler(formId,”submit”,function(event){<br>    // 取得事件对象<br>    event = EventUtil.getEvent(event);<br>    // 阻止默认事件<br>    EventUtil.preventDefault(event);<br>});<br>复制代码<br>如何重置表单</p>\n<p>如果我们使用按钮重置表单的话，有下面2种方式：</p>\n<p>第一种代码如下：</p>\n<p><form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\"><br>    <input type=\"text\"><br>    <input type=\"reset\" value=\"reset\"><br></form><br>第二种代码如下：</p>\n<p><form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\"><br>    <input type=\"text\"><br>    <button type=\"reset\">reset</button><br></form><br>我们也可以通过像提交form表单一样来进行重置表单，代码如下：</p>\n<p>var formId = document.getElementById(“form”);<br>formId.reset();<br>如何访问表单字段？</p>\n<p>第一种方式我们可以使用dom节点来访问；</p>\n<p>第二种方式：每个表单都有elements属性，该属性是表单中所有表单元素的集合；这个elements是个有序列表；包含着所有字段，比如有input,textarea,button,fieldset等；</p>\n<p>比如如下HTML代码：</p>\n<p>复制代码</p>\n<p><form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\"><br>    <input type=\"text\" name=\"input1\"><br>    <select name=\"select1\"><br>        <option>111</option><br>    </select><br></form><br>复制代码<br>JS获取表单字段如下：</p>\n<p>复制代码<br>var formId = document.getElementById(“form”);<br>// 取得表单中的第一个字段<br>var firstCol = formId.elements[0];<br>console.log(firstCol);<br>// 取得名字name为select1的字段<br>console.log(formId.elements[‘select1’]);<br>// 取得表单中包含字段的数量<br>console.log(formId.elements.length);<br>复制代码<br>如果一个表单中，有多个name相同的属性，那么取得数据是一个集合，如下HTML代码：</p>\n<p><form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\"><br>    <input type=\"radio\" name=\"radio2\"><br>    <input type=\"radio\" name=\"radio2\"><br>    <input type=\"radio\" name=\"radio2\"><br></form><br>JS代码如下：</p>\n<p>var formId = document.getElementById(“form”);<br>var radios = formId.elements[“radio2”];<br>console.log(radios.length);  // 打印3<br>共有的表单字段属性</p>\n<p>所有的表单字段都有一组相同的属性；表单共有的属性如下：</p>\n<p>disabled: 布尔值，表示当前字段是否被禁用；</p>\n<p>form: 指向当前字段所属表单的指针，只读；</p>\n<p>name: 当前字段的名称;</p>\n<p>readOnly:布尔值，表示当前字段是否可读。</p>\n<p>tabIndex: 表示当前字段的切换(tab)序号。</p>\n<p>type: 当前字段的类型，如checkbox,radio等；</p>\n<p>value: 当前字段被提交到服务器的值；</p>\n<p>共有的表单字段方法</p>\n<p>每个表单字段都有两个方法focus()和blur()，其中focus是获取焦点；比如在页面加载完成后，我希望form表单中的第一个字段获取焦点（除隐藏域之外）；如下代码：</p>\n<p><form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\"><br>    <input type=\"text\" name=\"radio2\"><br>    <input type=\"text\" name=\"radio2\"><br>    <input type=\"text\" name=\"radio2\"><br></form><br>JS代码如下：</p>\n<p>var formId = document.getElementById(“form”);<br>EventUtil.addHandler(window,’load’,function(event){<br>    formId.elements[0].focus();<br>});<br>但是HTML5中为表单字段新增了一个autofocus属性，在支持这个属性浏览器中，如果设置了这个属性，不用javascript就能将焦点移动到某个输入框下，比如如下HTML代码，在页面加载完成后，我把焦点放在第二个输入框内，如下HTML代码：</p>\n<p><form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\"><br>    <input type=\"text\" name=\"radio2\"><br>    <input type=\"text\" name=\"radio2\" autofocus><br>    <input type=\"text\" name=\"radio2\"><br></form><br>支持autofocus属性的浏览器有：firefox4+，safari5+，chrome和Opera9.6+</p>\n<p>但是我想要兼容其他不支持autofocus的浏览器，我们可以写一段JS，为了全兼容；</p>\n<p>复制代码<br>var formId = document.getElementById(“form”);<br>EventUtil.addHandler(window,’load’,function(event){<br>    var element = formId.elements[1];<br>    if(element.autofocus !== true) {<br>        element.focus();<br>    }<br>});<br>复制代码<br>因为autofocus是一个布尔值，支持他的浏览器默认为true；不支持他的浏览器，默认值为空字符串；</p>\n<p>共有的表单字段事件</p>\n<p>所有的表单字段都支持以下三个事件；</p>\n<p>blur:当前字段失去焦点时触发；</p>\n<p>change:对于input和textarea元素，值发生改变的时候触发；</p>\n<p>focus: 当前字段获得焦点时触发；</p>\n<p>理解文本框脚本</p>\n<p>在HTML中，有2种方式来实现文本框，一种是input元素的单行文本框，另一种是textarea元素的多行文本框；</p>\n<p>input元素有属性type=”text”, 还可以通过设置size属性，用来指定文本框显示的字符数，还可以设置value，用来显示文本框的初始值，还可以设置maxlength属性，用于指定文本框可以接受的最大字符数；如下代码：</p>\n<input type=\"text\" size=\"2\" maxlength=\"12\" value=\"\">\n\n<p>多行文本框textarea也有一些属性，这里就不做多介绍了；</p>\n<p>如何选择文本：</p>\n<p>input和select两种元素都支持select()方法，这个方法用于选择文本框中的所有文本，在调用select()方法中(除Opera外),都会将焦点设置到文本框中，这个方法不接受任何参数，如下代码：</p>\n<p><form id=\"formId\"><br>    <input type=\"text\" name=\"input\" value=\"我是龙恩\"><br></form><br>JS代码如下：</p>\n<p>var formId = document.getElementById(“formId”);<br>formId.elements[‘input’].select();<br>如下图所示：</p>\n<p>如上是页面一进来的时候，默认选择input元素框所有的内容；我们也可以当获取焦点的时候，就选中所有的内容，JS代码可以改为如下：</p>\n<p>复制代码<br>var formId = document.getElementById(“formId”),<br>input = formId.elements[‘input’];<br>EventUtil.addHandler(input,”focus”,function(event){<br>    event = EventUtil.getEvent(event);<br>    var target = EventUtil.getTarget(event);<br>    target.select();<br>});<br>复制代码<br>在火狐和谷歌浏览器下能实现当获取焦点的时候，就选中input元素框内的所有内容，但是在IE7或者8下，还是页面加载完后就已经选中了文本框内的所有元素；</p>\n<ol>\n<li>选择事件(select)</li>\n</ol>\n<p>与select方法对应的，还有一个select事件，在IE9+，firefox，chrome，opera和safari中，只有用户选择了文本且释放鼠标时，会触发select事件；但是在IE8及以下，只要用户选择了一个字母且不必释放鼠标，就会触发select事件；如下代码：</p>\n<p>var formId = document.getElementById(“formId”),<br>input = formId.elements[‘input’];<br>EventUtil.addHandler(input,”select”,function(event){<br>    alert(input.value);<br>});</p>\n<ol>\n<li>取的选择的文本</li>\n</ol>\n<p>虽然通过select事件我们知道用户什么时候选择了文本，但是我们并不知道用户选择了什么文本，在HTML5中，我们通过两个属性selectionStart和selectionEnd，这两个属性表示选择的范围(即文本区开头和结尾的偏移量)；因此要取得用户选择的文本，可以使用如下代码；</p>\n<p>复制代码<br>var formId = document.getElementById(“formId”),<br>    input = formId.elements[‘input’];<br>EventUtil.addHandler(input,”select”,function(event){<br>    alert(getSelectedText(input));<br>});<br>function getSelectedText(elem) {<br>    return elem.value.substring(elem.selectionStart,elem.selectionEnd);<br>}<br>复制代码<br>但是目前浏览器支持程度有：IE9+，firefox，chrome，Opera及safari；</p>\n<p>IE8及之前的版本不支持这两个属性，但是他们提供了另外一种document.selection对象，其中保存着用户在整个文档范围内选择的文本信息，但是呢与前面的select事件使用在一起的话，只能选择一个字符就会触发事件，也就是说，不能选择大于1和字符的文字，不过可以知道选择的值时多少；如下代码：</p>\n<p>复制代码<br>var formId = document.getElementById(“formId”),<br>input = formId.elements[‘input’];<br>EventUtil.addHandler(input,”select”,function(event){<br>    alert(getSelectedText(input));<br>});<br>function getSelectedText(elem) {<br>    if(typeof elem.selectionStart == “number”) {<br>         return elem.value.substring(elem.selectionStart,elem.selectionEnd);<br>    }else if(document.selection) {<br>        return document.selection.createRange().text;<br>    }<br>}<br>复制代码<br>选择部分文本</p>\n<p>HTML5也为选择文本框中的部分文本提供了解决方案，使用setSelectionRange()方法，这个方法接收2个参数，要选择的第一个字符的索引，和要选择的最后一个字符之后的字符的索引；</p>\n<p>浏览器支持有：IE9+，chrome，safari和opera，firefox貌似不支持；</p>\n<p>代码如下：</p>\n<p>var formId = document.getElementById(“formId”),<br>    input = formId.elements[‘input’];<br>input.value = “我是龙恩，我是中国人”;<br>// 选择所有文本<br>input.setSelectionRange(0,input.value.length);<br>截图如下：</p>\n<p>// 选择前3个字符</p>\n<p>input.setSelectionRange(0,3);<br>截图如下：</p>\n<p>// 选择第四到第六个字符</p>\n<p>input.setSelectionRange(4,7);</p>\n<p>截图如下：</p>\n<p>IE8及以下版本可以使用范围来选择部分文本，要选择部分文本，必须首先使用IE在所有文本框中提供的createTextRange()方法创建一个范围，且我们需要使用collapse()将范围折叠到文本框的开始位置，再使用moveStart()和moveEnd()这两个范围方法将范围移动到位；</p>\n<p>如下代码选择所有的文本：</p>\n<p>复制代码<br>input.value = “我是龙恩，我是中国人”;<br>var range = input.createTextRange();<br>// 选择所有文本<br>range.collapse(true);<br>range.moveStart(“character”,0);<br>range.moveEnd(“character”,input.value.length);<br>range.select();<br>复制代码<br>演示如下：</p>\n<p>切记：使用F5刷新没有用的，要在地址栏中，然后按enter键刷新即可看到效果；</p>\n<p>// 选择前3个字符<br>range.collapse(true);<br>range.moveStart(“character”,0);<br>range.moveEnd(“character”,3);<br>range.select();<br>演示如下：</p>\n<p>// 选择第4到第6个字符<br>range.collapse(true);<br>range.moveStart(“character”,4);<br>range.moveEnd(“character”,3);<br>range.select();<br>演示如下：</p>\n<p>为了让跨浏览器效果，我们可以封装一个方法，如下：</p>\n<p>复制代码<br>function selectText(elem,startIndex,stopIndex) {<br>    if(elem.setSelectionRange) {<br>          elem.setSelectionRange(startIndex,stopIndex);<br>    }else if(elem.createTextRange) {<br>        var range = elem.createTextRange();<br>        range.collapse(true);<br>        range.moveStart(“character”,startIndex);<br>        range.moveEnd(“character”,stopIndex - startIndex);<br>        range.select();<br>    }<br>}<br>复制代码<br>测试数据如下：貌似firefox不支持</p>\n<p>复制代码<br>// 选择所有文本<br>selectText(input,0,input.value.length);</p>\n<p>// 选择前3个字符<br>selectText(input,0,3);</p>\n<p>// 选择第四个字符到第六个字符<br>selectText(input,4,7);<br>复制代码<br>过滤输入</p>\n<pre><code>有时候我们会要求用户在输入框里面输入特定格式的数据，我们就可以使用过滤输入这种手段来进行了，首先我们来看看如何屏蔽字符；\n</code></pre><ol>\n<li>屏蔽字符</li>\n</ol>\n<p>比如我在一个input输入框中，只允许只能输入数字，那么我们可以先获取通过keypress事件来监听，然后每次获取到键码，然后通过String.fromCharCode()这个方法，把键码转换成字符串，然后通过正则判断下，如果不是数字，直接阻止默认事件即可不让用户输入，如下代码：</p>\n<p><form id=\"formId\"><br>    <input type=\"text\" name=\"input\"><br></form><br>JS代码如下：</p>\n<p>复制代码<br>var formId = document.getElementById(“formId”),<br>input = formId.elements[‘input’];<br>EventUtil.addHandler(input,’keypress’,function(event) {<br>    event = EventUtil.getEvent(event);<br>    var charCode = EventUtil.getCharCode(event);<br>    if(!/\\d/.test(String.fromCharCode(charCode))) {<br>        EventUtil.preventDefault(event);<br>    }<br>});<br>复制代码<br>如上代码能满足日常需求，但是有些游览器，比如firefox，safari(3.1版本之前)会对向上键，向下键，退格键和删除键也会触发keypress事件了；所以为了避免这些事件的发生，我们需要做一些处理来满足所有版本的浏览器的需求，我们发现在firefox中，所有由非字符键触发keypress键码都为0；而在safari3以前的版本中，对应的字符编码全部为8；所以我们要对字符编码进行判断下；</p>\n<p>如下代码：</p>\n<p>复制代码<br>EventUtil.addHandler(input,’keypress’,function(event) {<br>    event = EventUtil.getEvent(event);<br>    var charCode = EventUtil.getCharCode(event);<br>    if(!/\\d/.test(String.fromCharCode(charCode)) &amp;&amp; charCode &gt; 9) {<br>        EventUtil.preventDefault(event);<br>    }<br>});<br>复制代码<br>操作剪贴板</p>\n<p>到目前为止，IE，chrome，safari，opera都支持剪贴板事件，貌似firefox就不支持了（书上说支持）；但是我操作就不支持了；下面是6个操作剪贴板事件；如下：</p>\n<p>beforecopy: 在发生复制操作前触发；</p>\n<p>copy: 在发生复制操作时触发；</p>\n<p>beforecut: 在发生剪贴操作前触发；</p>\n<p>cut: 在发生剪贴操作时触发；</p>\n<p>beforepaste: 在发生黏贴操作前触发；</p>\n<p>paste: 在发生粘帖操作时触发；</p>\n<p>针对上面的事件，我们可以使用如下代码测试下就可以证明了；代码如下所示：</p>\n<p>EventUtil.addHandler(input,’beforecopy’,function(event) {<br>    alert(1);<br>});<br>如果要访问剪贴板中的数据，可以使用clipboardData对象，在IE中，这个对象是window对象的属性，在safari或者chrome上，这个对象是event的属性，这个clipboardData对象有三个方法，getData(),setData(),和clearData();</p>\n<p>getData()是从剪贴板中取得数据，他接受一个参数，即要取得数据的格式，在IE中，有二种数据格式”text” 和 “url”，在safari和chrome中这个参数是一种MIME类型，不过，可以使用text代表text/plain.</p>\n<p>setData()方法是给剪贴板设置文本，接受2个参数，第一个数据是数据类型；第二个参数是放在剪贴板中的文本；但是此方法接受的数据类型只能是text/plain,不能是text；因此为了全兼容浏览器(出firefox外)，我们可以写一个通用的方法出来，如下：</p>\n<p>复制代码<br>getClipboardText: function(event) {<br>    var clipboardData = (event.clipboardData || window.clipboardData);<br>        return clipboardData.getData(“text”);<br>    },<br>setClipboardText:function(event,value) {<br>    if(event.clipboardData) {<br>        return event.clipboardData.setData(“text/plain”,value);<br>    }else if(window.clipboardData) {<br>        return window.clipboardData.setData(“text”,value);<br>    }<br>}<br>复制代码<br>因此EventUtil封装的所有方法如下：</p>\n<p>复制代码<br>var EventUtil = {<br>    addHandler: function(element,type,handler) {<br>        if(element.addEventListener) {<br>                    element.addEventListener(type,handler,false);<br>        }else if(element.attachEvent) {<br>            element.attachEvent(“on”+type,handler);<br>        }else {<br>            element[“on” +type] = handler;<br>        }<br>    },<br>    removeHandler: function(element,type,handler){<br>        if(element.removeEventListener) {<br>                    element.removeEventListener(type,handler,false);<br>        }else if(element.detachEvent) {<br>            element.detachEvent(“on”+type,handler);<br>        }else {<br>            element[“on” +type] = null;<br>        }<br>    },<br>    getEvent: function(event) {<br>        return event ? event : window.event;<br>    },<br>    getTarget: function(event) {<br>        return event.target || event.srcElement;<br>    },<br>    preventDefault: function(event){<br>        if(event.preventDefault) {<br>            event.preventDefault();<br>        }else {<br>            event.returnValue = false;<br>        }<br>    },<br>    stopPropagation: function(event) {<br>        if(event.stopPropagation) {<br>            event.stopPropagation();<br>        }else {<br>            event.cancelBubble = true;<br>        }<br>    },<br>    getRelatedTarget: function(event){<br>        if (event.relatedTarget){<br>            return event.relatedTarget;<br>        } else if (event.toElement){<br>            return event.toElement;<br>        } else if (event.fromElement){<br>            return event.fromElement;<br>        } else {<br>            return null;<br>        }<br>    },<br>    getWheelDelta: function(event) {<br>        if(event.wheelDelta) {<br>            return event.wheelDelta;<br>        }else {<br>            return -event.detail * 40<br>        }<br>    },<br>    getCharCode: function(event) {<br>        if(typeof event.charCode == ‘number’) {<br>            return event.charCode;<br>        }else {<br>            return event.keyCode;<br>        }<br>    },<br>    getClipboardText: function(event) {<br>        var clipboardData = (event.clipboardData || window.clipboardData);<br>        return clipboardData.getData(“text”);<br>    },<br>    setClipboardText:function(event,value) {<br>        if(event.clipboardData) {<br>        return event.clipboardData.setData(“text/plain”,value);<br>            }else if(window.clipboardData) {<br>            return window.clipboardData.setData(“text”,value);<br>        }<br>    }<br>};<br>复制代码<br>测试代码如下：还是上面测试输入框的值是否为数字；每次粘帖上次，都能获取到黏贴的是文字数据，代码如下：</p>\n<p>HTML代码如下：</p>\n<p><form id=\"formId\"><br>     <input type=\"text\" name=\"input\"><br></form><br>JS代码如下：</p>\n<p>复制代码<br>var formId = document.getElementById(“formId”),<br>input = formId.elements[‘input’];<br>EventUtil.addHandler(input,’paste’,function(event) {<br>    event = EventUtil.getEvent(event);<br>    var text = EventUtil.getClipboardText(event);<br>    alert(text);<br>    if (!/^\\d*$/.test(text)){<br>        EventUtil.preventDefault(event);<br>    }<br>});<br>复制代码<br>理解自动切换输入框或者textarea的焦点</p>\n<p>比如我们在填写表单的页面上，当用户输入完自己的数据的时候，不需要用户手动切换到下一个输入框里面去，我们可以自动切换去，这样的话，对于用户体验来说，比较方便，比如我们现在页面上有一个form表单，这里为了做测试，我们先用一个输入框用于手机号码的，另外一个是textarea，当手机号码输入11位数字后，会自动切换到textarea中；当然页面中的隐藏域除外；代码如下：</p>\n<p>HTML代码如下：</p>\n<p><form id=\"formId\"><br>    <input type=\"text\" name=\"input\" maxlength=\"11/\"><br>    <textarea></textarea><br></form><br>JS代码如下：</p>\n<p>复制代码<br>var formId = document.getElementById(“formId”),<br>input = formId.elements[‘input’];<br>EventUtil.addHandler(input,’keyup’,tabForward);<br>function tabForward(event) {<br>    event = EventUtil.getEvent(event);<br>    var target = EventUtil.getTarget(event);<br>    if(target.value.length == target.maxLength) {<br>        // 获取当前的form表单的引用<br>        var form = target.form;<br>        for(var i = 0, ilen = form.elements.length; i &lt; ilen; i++) {<br>            if(form.elements[i] == target) {<br>                if(form.elements[i+1]) {<br>                    form.elements[i+1].focus();<br>                }<br>                return;<br>            }<br>        }<br>    }<br>}<br>复制代码<br>理解HTML5新增属性</p>\n<p>required属性；</p>\n<p>比如在HTML5中对表单input，textarea，或者select标签的话，提交表单时，需要判断是否为空，特别对于在做移动端的朋友来说，可以使用HTML5中的新增属性required；如下HTML代码：</p>\n<p><form id=\"formId\"><br>    <input type=\"text\" name=\"input\" maxlength=\"11\" required><br>    <textarea></textarea><br>    <input type=\"submit\"><br></form><br>提交时候，在chrome下看到效果如下：</p>\n<p>在firefox下，提示如下：</p>\n<p>如上是根据不同的浏览器本身的性质来提示的，因此样式不同，所以适合在移动端根据本身浏览器内核来提示；</p>\n<p>但是在Javascript是如何判断的呢？比如如下HTML代码：</p>\n<p><form id=\"formId\"><br>    <input type=\"text\" name=\"input\" maxlength=\"11\" required><br>    <textarea></textarea><br>    <input type=\"submit\" name=\"submit\"><br></form><br>JS代码如下：</p>\n<p>复制代码<br>var formId = document.getElementById(“formId”),<br>submit = formId.elements[‘submit’];<br>EventUtil.addHandler(submit,’click’,function(event) {<br>    var isRequired = formId.elements[“submit”].required;<br>    console.log(isRequired);<br>});<br>复制代码<br>如上打印出false；可以获取到submit的属性required，如果输入框值为空的话，会打印出false出来；</p>\n<p>如果想知道浏览器是否支持required这个属性的话，我们可以使用如下代码判断下，如果返回true，说明支持，否则不支持；如下：</p>\n<p>var isRequiredSupported = “required” in document.createElement(“input”);<br>console.log(isRequiredSupported);<br>input输入框类型type的值是email或者url</p>\n<input type=\"”email”\" name=\"”email”/\">\n\n<input type=\"”url”\" name=\"”url”/\">\n\n<p>email类型要求输入的文本必须符合电子邮件的格式，url类型要求输入的文本必须符合URL的格式；如下chrome浏览器截图如下；</p>\n<p>选择框脚本</p>\n<p>选择框是通过<select>和<option>元素创建的，除了表单所有的共有属性和方法外，HTMLSelectElement类还提供了下列属性和方法；</option></select></p>\n<p>add(newOption,relOption);向控件中插入新<option>元素，其位置在relOption之前；</option></p>\n<p>multiple:布尔值; 表示是否允许多项选择，等价于HTML中的multiple特性；</p>\n<p>options: 控件中所有<option>元素的HTMLCollection；</option></p>\n<p>remove(index):   移除给定位置的选项；</p>\n<p>selectedIndex:   基于0的选中索引，如果没有该选项，则值为 -1；</p>\n<p>size:  选择框中的可见的行数。</p>\n<p>如下select框代码：</p>\n<p>复制代码</p>\n<p><form id=\"formId\"><br>    <select name=\"location\" id=\"selLocation\"><br>        <option value=\"A\">A</option><br>        <option value=\"B\">B</option><br>        <option value=\"C\">C</option><br>        <option value=\"\">D</option><br>        <option>E</option><br>    </select><br></form><br>复制代码<br>JS代码如下：</p>\n<p>复制代码<br>var formId = document.getElementById(“formId”),<br>select = formId.elements[‘location’];<br>console.log(select.value);<br>EventUtil.addHandler(select,’change’,function(){<br>    console.log(select.value)<br>});<br>复制代码<br>第一次页面加载完成后，打印出值为A；</p>\n<p>当每次切换的时候，如果有value就打印出值，如果value=””;则打印空字符串，但是如果option选项没有指定value，在firfox和chrome下打印出当前的文本值，比如上面的文本为E，则值为E；但是IE8及以下，打印的还是空字符串；</p>\n<p>在DOM中，每个<option>元素都有一个HTMLOptionElement对象表示；为方便访问数据，对象添加了如下属性；</option></p>\n<p>index: 当前选项在options集合中的索引；</p>\n<p>label： 当前选项的标签，等价于HTML中的label</p>\n<p>selected：布尔值，表示当前选项是否被选中，将这个属性设置为true可以选中当前选项。</p>\n<p>text：选项的文本；</p>\n<p>value：选项的值；</p>\n<p>我们还是以上面的form表单作为HTML代码，我们使用JS来测试下：</p>\n<p>如下代码：</p>\n<p>复制代码<br>var formId = document.getElementById(“formId”),<br>select = formId.elements[‘location’];<br>// 获取options集合中的第一项选项的文本<br>console.log(select.options[0].text);   // 打印出A<br>// 获取options集合中的第一项选项的value<br>console.log(select.options[0].value);  // 打印出A<br>复制代码<br>对于下拉框只能选择一项的选择框，访问最简单的方式，就是使用selectedIndex属性，如下HTML代码：</p>\n<p>复制代码</p>\n<p><form id=\"formId\"><br>    <select name=\"location\" id=\"selLocation\"><br>        <option value=\"A\">A</option><br>        <option value=\"B\" selected>B</option><br>        <option value=\"C\">C</option><br>        <option value=\"\">D</option><br>        <option>E</option><br>    </select><br></form><br>复制代码<br>假如页面初始化的时候默认选择第二项，那么我们可以先使用selectedIndex的属性获取选中的索引，然后根据索引获取当前的文本和值；如下JS代码：</p>\n<p>复制代码<br>var formId = document.getElementById(“formId”),<br>select = formId.elements[‘location’];<br>// 获取当前选中的选项的索引selectedIndex<br>var selectedIndex = select.selectedIndex;<br>// 获取索引为selectedIndex的option<br>var selectedOption = select.options[selectedIndex];<br>console.log(“selected index:”+selectedIndex+”\\nselect text:”+selectedOption.text+”\\nselect value:”+selectedOption.value);<br>复制代码<br>添加选项</p>\n<p>可以使用javascript动态创建选项，并将它们添加到选择框中，添加选择框有以下常见3种方式；</p>\n<p>第一种方式使用DOM的方式如下：</p>\n<p>HTML代码如下：</p>\n<p><form id=\"formId\"><br>    <select name=\"location\" id=\"selLocation\"></select></form></p>\n<pre><code>&lt;/select&gt;\n</code></pre><p><br>JS代码如下：</p>\n<p>复制代码<br>var formId = document.getElementById(“formId”),<br>select = formId.elements[‘location’];<br>var newOption = document.createElement(“option”);<br>newOption.appendChild(document.createTextNode(“A”));<br>newOption.setAttribute(“value”,”AAAA”);<br>select.appendChild(newOption);<br>复制代码<br>第二种方式使用Option构造函数来创建新选项，Option构造函数接收2个参数，文本(text)和值(value),第二个参数可选，比如如下代码：</p>\n<p>var formId = document.getElementById(“formId”),<br>select = formId.elements[‘location’];<br>var newOption = new Option(“Option text”,”Option value”);<br>select.appendChild(newOption);<br>但是这种方式在IE下是不生效的；</p>\n<p>下面我们来看看第三种方式吧！是使用选择框add()方法，DOM规定这个方法接收2个参数，要添加的新选项和将位于新选项之后的选项，如果想在列表的最后添加一个选项，应将第二个参数设置为null；在IE对add()方法的实现中，第二个参数是可选的，但是标准DOM浏览器中，必须要指定第二个参数，因此为了全兼容浏览器，我们必须添加第二个参数，但是我们可以将第二个参数设置为undefined，含义是：在所有的浏览器将新选项插入到列表的最后了~</p>\n<p>如下代码：</p>\n<p>var formId = document.getElementById(“formId”),<br>select = formId.elements[‘location’];<br>var newOption = new Option(“Option text”,”Option value”);<br>select.add(newOption,undefined);<br>移除选项的方式如下：</p>\n<p>使用dom的removeChild()方法，为其传入要移除的选项；如下代码：<br>HTML代码如下：</p>\n<p>复制代码</p>\n<p><form id=\"formId\"><br>    <select name=\"location\" id=\"selLocation\"><br>        <option value=\"A\">A</option><br>        <option value=\"B\">B</option><br>        <option value=\"C\">C</option><br>    </select><br></form><br>复制代码<br>Javascript代码如下：</p>\n<p>var formId = document.getElementById(“formId”),<br>select = formId.elements[‘location’];<br>// 第一种：移除第一项如下方式<br>select.removeChild(select.options[0]);</p>\n<ol>\n<li>第二种方式是使用选择框的remove()方法，这个方法接收一个参数，既要移除选项的索引；如下代码：</li>\n</ol>\n<p>var formId = document.getElementById(“formId”),<br>select = formId.elements[‘location’];<br>// 移除第一项<br>select.remove(0);</p>\n<ol>\n<li>最后一种方式，就是将相应的选项设置为null，如下代码：</li>\n</ol>\n<p>var formId = document.getElementById(“formId”),<br>select = formId.elements[‘location’];<br>// 移除第一项<br>select.options[0] = null;<br>理解表单序列化</p>\n<p>在javascript中，可以利用表单字段的type属性，连同name和value属性一起实现对表单的序列化，序列化后将把这些数据发送给服务器。</p>\n<p>下面是将那些字段需要进行序列化的；</p>\n<p>对表单字段的名称和值进行URL编码，使用&amp;分割；<br>不发送禁用的表单字段；<br>只发送勾选的单选框和复选框按钮数据；<br>不发送type为reset和button的按钮<br>多选选择框中的每个选中的值单独一个条目；<br>Select元素的值，就是选中option元素的value的值，如果option没有属性value，则是选中的文本值；<br>如下JS代码是封装form表单的序列化的JS如下：</p>\n<p>// 序列化JS代码封装</p>\n<p>复制代码<br>function serialize(form) {<br>    var arrs = [],<br>    field = null,<br>    i,<br>    len,<br>    j,<br>    optLen,<br>    option,<br>    optValue;<br>    for(i = 0,len = form.elements.length; i &lt; len; i++) {<br>        field = form.elements[i];<br>        switch(field.type) {<br>            case “select-one”:<br>               case  “select-multiple”:<br>            if(field.name.length) {<br>                 for(j = 0,optLen = field.options.length; j &lt; optLen; j++) {<br>                       option = field.options[j];<br>                       if(option.selected) {<br>                           optValue = ‘’;<br>                           if(option.hasAttribute) {<br>                               optValue = option.hasAttribute(“value”) ? option.value : option.text;<br>                           }else {<br>                               optValue = option.attributes[“value”].specified ? option.value : option.text;<br>                           }<br>                           arrs.push(encodeURIComponent(field.name) + “=” +encodeURIComponent(optValue));<br>                       }<br>                   }<br>             }<br>            break;<br>            case undefined:      //字段集<br>            case “file”:         // 文件输入<br>            case “submit”:       // 提交按钮<br>            case “reset”:        // 重置按钮<br>            case “button”:       // 自定义按钮<br>            break;</p>\n<pre><code>        case &quot;radio&quot;:        // 单选框\n        case &quot;checkbox&quot;:     // 复选框\n        if(!field.checked) {\n            break;\n        }\n        /* 执行默认动作 */\n       default:\n       // 不包含没有名字的表单字段\n       if(field.name.length) {\n           arrs.push(encodeURIComponent(field.name) + &quot;=&quot; +encodeURIComponent(field.value));\n       }\n   }\n}\nreturn arrs.join(&quot;&amp;&quot;);\n</code></pre><p>}<br>复制代码<br>     如上对form表单序列化的函数serialize，定义了一个arrs数组，用来保存需要序列化后的名值对，然后通过for循环迭代每个表单中的字段，先使用临时变量field保存表单中任意一个字段的引用，然后使用switch语句判断字段的类型type(如果type未定义的话，此元素就不需要表单序列化)，第一种情况是select的单选和多选框，对于select单选框，只可能有一个选中项，对于多选框可能有零或多个选中项，如果有选中项的话(通过属性selected来判断)，需要确定使用什么值，如果不存在value特性，或者虽然存在该特性，但是值为空字符串，都是使用选项的文本来代替，为检查这个特性，在兼容DOM的浏览器下我们需要使用hasAttribute()方法，而在IE中需要使用特性的specified属性；对于type=“file”或者submit，reset，button等就不支持，如果比如上传图片的时候，需要图片的二进制数据使用form表单提交的话，可以在序列化后在加上这个参数即可；对于单选框和复选框如果没有选中的话，同样不进行序列化；下面我们现在来看看一个demo吧！如下HTML代码：</p>\n<p>复制代码</p>\n<p><form id=\"formId\"><br>    <select name=\"location\" id=\"selLocation\" one=\"one\"><br>        <option value=\"A\">A</option><br>        <option value=\"B\">B</option><br>        <option value=\"C\">C</option><br>    </select><br>    <select multiple=\"multiple\" style=\"width: 50px;\" id=\"mymultiple\" name=\"select2\"><br>        <option>1</option><br>        <option>2</option><br>        <option>3</option><br>        <option>4</option><br>        <option>5</option><br>    </select><br>    <input name=\"a\" type=\"radio\"><br>    <input name=\"b\" type=\"checkbox\"><br>    <input type=\"file\" name=\"aaaa\"><br>    <input type=\"hidden\" name=\"hidden\" value=\"hidden\"><br>    <input type=\"submit\" value=\"提交\" name=\"submit\"><br></form><br>复制代码<br>JS代码如下：</p>\n<p>复制代码<br>var formId = document.getElementById(“formId”);<br>console.log(serialize(formId));<br>var submit = formId.elements[‘submit’];<br>EventUtil.addHandler(submit,’click’,function(e){<br>    EventUtil.preventDefault(e);<br>    console.log(serialize(formId));<br>});<br>复制代码<br>我们看到上面的form表单代码，上面有select单选框，也有select多选框，也有隐藏域和input框，但是请注意：上面name=”a”和name=”b”，当他们选中的时候，没有值属性，所以在各个浏览器上都会自带一个值为on的值传给服务器端，但是这个并不是我们想要的，所以的如果需要值的话，一定要设置值，如下如下截图：</p>\n<p>在火狐和谷歌下截图如下：</p>\n<p>在IE下：</p>\n<p>上面的select多选框，如果需要多选的话，记得先要按住键盘上的ctrl键就可以多选了，比如上面的select2=2&amp;select2=3&amp;select2=4 就是select框多选。</p>\n<p>理解富文本编辑</p>\n<p>在网页中编辑内容，IE最早引入这个功能，随后opera，safari，firefox和chrome也实现了这个功能，基本原理就是在页面中嵌入一个空HTML页面的iframe，通过设置designMode属性，这个空白的HTML页面可以添加文字，而添加文字则是该页面的body元素的html代码，如下所示：</p>\n<p>designMode有2个属性，off（默认值）和on, 当设置为on的时候，整个文档变得可编辑，但是我们也可以给他们添加css样式，为了更加美观；首先我们先来看看demo，如下HTML页面嵌套一个iframe；</p>\n<iframe name=\"richedit\" src=\"bank.html\"></iframe>\n\n<p>而bank.html页面是一个空页面，代码如下：</p>\n<p>复制代码<br>&lt;!doctype html&gt;</p>\n<p><html lang=\"en\"><br> <head><br>  <meta charset=\"UTF-8\"><br>  <meta name=\"Generator\" content=\"EditPlus®\"><br>  <meta name=\"Author\" content=\"\"><br>  <meta name=\"Keywords\" content=\"\"><br>  <meta name=\"Description\" content=\"\"><br>  <title>Document</title><br> </head><br> <body></body></html></p>\n<p> <br><br>复制代码<br>然后在主页面上使用JS，当页面加载完成后，将designMode属性设置为on即可，如下JS代码：</p>\n<p>EventUtil.addHandler(window,’load’,function(event){<br>    frames[‘richedit’].document.designMode = “on”;<br>});<br>然后在页面上显示如下：</p>\n<p>第二种实现方式是使用contenteditable属性来实现</p>\n<p>contenteditable属性是有IE最早实现的，可以把contenteditable属性给页面中的任何元素，然后用户可以立即编辑该元素，不需要iframe，空页面及JS，只需要使用contenteditable属性即可；如下代码给div设置contenteditable属性；如下代码：</p>\n<p><div class=\"richedit\" contenteditable=\"\" style=\"width:100px;height:100px;border:1px solid #ccc\"></div><br>在浏览器下效果如下：</p>\n<p>支持的浏览器有；IE，firefox，chrome，safari和opera；</p>\n<p>在移动设备上，有ios5+和Android3+；</p>\n<p>Contenteditable属性有三个可能值，true表示打开，false表示关闭，inherit表示从父元素那边继承。</p>\n","site":{"data":{}},"excerpt":"<p>转载(<a href=\"http://www.cnblogs.com/tugenhua0707/p/4508986.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/tugenhua0707/p/4508986.html</a>)<br> 在HTML中，表单是由form元素来表示的，但是在javascript中，表单则由HTMLFormElement类型，此元素继承了HTMLElement，因此与其他HTML元素具有相同的默认属性；HTMLFormElement有自己以下属性和方法；</p>\n<p>acceptCharset: 服务器能够处理的字符集；等价于HTML中的accept-charset特性；</p>\n<p>action:  接收请求的URL，等价于HTML中的action</p>\n<p>elements: 表单中所有控件的集合.</p>\n<p>enctype: 请求的编码类型；等价于HTML中的enctype特性；<br>","more":"<br>length: 表单中控件的数量；</p>\n<p>method： 要发送的http请求类型，一般是get或者是post，等价于HTML中的method；</p>\n<p>name: 表单的名称；</p>\n<p>reset(): 将所有表单域重置为默认值；</p>\n<p>submit(): 提交表单；</p>\n<p>target:用于发送请求和接收响应的窗口名称；</p>\n<p>如何获取form表单的引用？</p>\n<p>假如现在页面上有一个form表单元素，html代码如下：</p>\n<p><form id=\"form\" name=\"form1\"></form><br>我现在想取到上面的form表单的引用，一共有以下方式可以获取到上面 的form表单引用；</p>\n<ol>\n<li>通过获取form表单的id，来获取form表单的引用；如下代码：</li>\n</ol>\n<p>var formId = document.getElementById(“form”);<br>console.log(formId);</p>\n<ol>\n<li>通过document.forms 取得页面中的所有表单元素，然后通过索引来取到对应的form元素，如下代码所示：取得页面第一个form元素；</li>\n</ol>\n<p>console.log(document.forms[0]);</p>\n<ol>\n<li>通过from表单中的name属性来获取，代码如下：</li>\n</ol>\n<p>console.log(document.forms[‘form1’]);<br>如何提交表单</p>\n<p>下面的所有事件都是来自上一篇博客javascript事件总结的事件，都依赖于此封装的事件，代码如下：</p>\n<p>复制代码<br>var EventUtil = {<br>    addHandler: function(element,type,handler) {<br>        if(element.addEventListener) {<br>            element.addEventListener(type,handler,false);<br>        }else if(element.attachEvent) {<br>            element.attachEvent(“on”+type,handler);<br>        }else {<br>            element[“on” +type] = handler;<br>        }<br>    },<br>    removeHandler: function(element,type,handler){<br>        if(element.removeEventListener) {<br>            element.removeEventListener(type,handler,false);<br>        }else if(element.detachEvent) {<br>            element.detachEvent(“on”+type,handler);<br>        }else {<br>            element[“on” +type] = null;<br>        }<br>    },<br>    getEvent: function(event) {<br>        return event ? event : window.event;<br>    },<br>    getTarget: function(event) {<br>        return event.target || event.srcElement;<br>    },<br>    preventDefault: function(event){<br>        if(event.preventDefault) {<br>            event.preventDefault();<br>        }else {<br>            event.returnValue = false;<br>        }<br>    },<br>    stopPropagation: function(event) {<br>        if(event.stopPropagation) {<br>            event.stopPropagation();<br>        }else {<br>            event.cancelBubble = true;<br>        }<br>    },<br>    getRelatedTarget: function(event){<br>        if (event.relatedTarget){<br>            return event.relatedTarget;<br>        } else if (event.toElement){<br>            return event.toElement;<br>        } else if (event.fromElement){<br>            return event.fromElement;<br>        } else {<br>            return null;<br>        }<br>    },<br>    getWheelDelta: function(event) {<br>        if(event.wheelDelta) {<br>            return event.wheelDelta;<br>        }else {<br>            return -event.detail * 40<br>        }<br>    },<br>    getCharCode: function(event) {<br>        if(typeof event.charCode == ‘number’) {<br>            return event.charCode;<br>        }else {<br>            return event.keyCode;<br>        }<br>    }<br>};<br>复制代码<br>用户单击提交按钮或图像按钮时，就会提交表单，使用input或者button都可以提交表单，只需将type设置为submit或者image即可，如下三种方式都可以；</p>\n<p>第一种：</p>\n<p><form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\"><br>    <!-- 存放一个input放在这，为了获取焦点，然后我们可以按enter键提交 --><br>    <input type=\"text\"><br>    <input type=\"submit\" value=\"submit\"><br></form><br>第二种：</p>\n<p><form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\"><br>    <!-- 存放一个input放在这，为了获取焦点，然后我们可以按enter键提交 --><br>    <input type=\"text\"><br>    <button type=\"submit\">submit</button><br></form><br>第三种：</p>\n<p><form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\"><br>    <!-- 存放一个input放在这，为了获取焦点，然后我们可以按enter键提交 --><br>    <input type=\"text\"><br>    <input type=\"image\" src=\"aa.jpg\"><br></form><br>我们也可以通过如下方式提交表单，但是也可以阻止form表单提交：如下代码：</p>\n<p>复制代码<br>EventUtil.addHandler(formId,”submit”,function(event){<br>    // 取得事件对象<br>    event = EventUtil.getEvent(event);<br>    // 阻止默认事件<br>    EventUtil.preventDefault(event);<br>});<br>复制代码<br>如何重置表单</p>\n<p>如果我们使用按钮重置表单的话，有下面2种方式：</p>\n<p>第一种代码如下：</p>\n<p><form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\"><br>    <input type=\"text\"><br>    <input type=\"reset\" value=\"reset\"><br></form><br>第二种代码如下：</p>\n<p><form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\"><br>    <input type=\"text\"><br>    <button type=\"reset\">reset</button><br></form><br>我们也可以通过像提交form表单一样来进行重置表单，代码如下：</p>\n<p>var formId = document.getElementById(“form”);<br>formId.reset();<br>如何访问表单字段？</p>\n<p>第一种方式我们可以使用dom节点来访问；</p>\n<p>第二种方式：每个表单都有elements属性，该属性是表单中所有表单元素的集合；这个elements是个有序列表；包含着所有字段，比如有input,textarea,button,fieldset等；</p>\n<p>比如如下HTML代码：</p>\n<p>复制代码</p>\n<p><form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\"><br>    <input type=\"text\" name=\"input1\"><br>    <select name=\"select1\"><br>        <option>111</option><br>    </select><br></form><br>复制代码<br>JS获取表单字段如下：</p>\n<p>复制代码<br>var formId = document.getElementById(“form”);<br>// 取得表单中的第一个字段<br>var firstCol = formId.elements[0];<br>console.log(firstCol);<br>// 取得名字name为select1的字段<br>console.log(formId.elements[‘select1’]);<br>// 取得表单中包含字段的数量<br>console.log(formId.elements.length);<br>复制代码<br>如果一个表单中，有多个name相同的属性，那么取得数据是一个集合，如下HTML代码：</p>\n<p><form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\"><br>    <input type=\"radio\" name=\"radio2\"><br>    <input type=\"radio\" name=\"radio2\"><br>    <input type=\"radio\" name=\"radio2\"><br></form><br>JS代码如下：</p>\n<p>var formId = document.getElementById(“form”);<br>var radios = formId.elements[“radio2”];<br>console.log(radios.length);  // 打印3<br>共有的表单字段属性</p>\n<p>所有的表单字段都有一组相同的属性；表单共有的属性如下：</p>\n<p>disabled: 布尔值，表示当前字段是否被禁用；</p>\n<p>form: 指向当前字段所属表单的指针，只读；</p>\n<p>name: 当前字段的名称;</p>\n<p>readOnly:布尔值，表示当前字段是否可读。</p>\n<p>tabIndex: 表示当前字段的切换(tab)序号。</p>\n<p>type: 当前字段的类型，如checkbox,radio等；</p>\n<p>value: 当前字段被提交到服务器的值；</p>\n<p>共有的表单字段方法</p>\n<p>每个表单字段都有两个方法focus()和blur()，其中focus是获取焦点；比如在页面加载完成后，我希望form表单中的第一个字段获取焦点（除隐藏域之外）；如下代码：</p>\n<p><form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\"><br>    <input type=\"text\" name=\"radio2\"><br>    <input type=\"text\" name=\"radio2\"><br>    <input type=\"text\" name=\"radio2\"><br></form><br>JS代码如下：</p>\n<p>var formId = document.getElementById(“form”);<br>EventUtil.addHandler(window,’load’,function(event){<br>    formId.elements[0].focus();<br>});<br>但是HTML5中为表单字段新增了一个autofocus属性，在支持这个属性浏览器中，如果设置了这个属性，不用javascript就能将焦点移动到某个输入框下，比如如下HTML代码，在页面加载完成后，我把焦点放在第二个输入框内，如下HTML代码：</p>\n<p><form id=\"form\" name=\"form1\" action=\"http://www.baidu.com\"><br>    <input type=\"text\" name=\"radio2\"><br>    <input type=\"text\" name=\"radio2\" autofocus><br>    <input type=\"text\" name=\"radio2\"><br></form><br>支持autofocus属性的浏览器有：firefox4+，safari5+，chrome和Opera9.6+</p>\n<p>但是我想要兼容其他不支持autofocus的浏览器，我们可以写一段JS，为了全兼容；</p>\n<p>复制代码<br>var formId = document.getElementById(“form”);<br>EventUtil.addHandler(window,’load’,function(event){<br>    var element = formId.elements[1];<br>    if(element.autofocus !== true) {<br>        element.focus();<br>    }<br>});<br>复制代码<br>因为autofocus是一个布尔值，支持他的浏览器默认为true；不支持他的浏览器，默认值为空字符串；</p>\n<p>共有的表单字段事件</p>\n<p>所有的表单字段都支持以下三个事件；</p>\n<p>blur:当前字段失去焦点时触发；</p>\n<p>change:对于input和textarea元素，值发生改变的时候触发；</p>\n<p>focus: 当前字段获得焦点时触发；</p>\n<p>理解文本框脚本</p>\n<p>在HTML中，有2种方式来实现文本框，一种是input元素的单行文本框，另一种是textarea元素的多行文本框；</p>\n<p>input元素有属性type=”text”, 还可以通过设置size属性，用来指定文本框显示的字符数，还可以设置value，用来显示文本框的初始值，还可以设置maxlength属性，用于指定文本框可以接受的最大字符数；如下代码：</p>\n<input type=\"text\" size=\"2\" maxlength=\"12\" value=\"\">\n\n<p>多行文本框textarea也有一些属性，这里就不做多介绍了；</p>\n<p>如何选择文本：</p>\n<p>input和select两种元素都支持select()方法，这个方法用于选择文本框中的所有文本，在调用select()方法中(除Opera外),都会将焦点设置到文本框中，这个方法不接受任何参数，如下代码：</p>\n<p><form id=\"formId\"><br>    <input type=\"text\" name=\"input\" value=\"我是龙恩\"><br></form><br>JS代码如下：</p>\n<p>var formId = document.getElementById(“formId”);<br>formId.elements[‘input’].select();<br>如下图所示：</p>\n<p>如上是页面一进来的时候，默认选择input元素框所有的内容；我们也可以当获取焦点的时候，就选中所有的内容，JS代码可以改为如下：</p>\n<p>复制代码<br>var formId = document.getElementById(“formId”),<br>input = formId.elements[‘input’];<br>EventUtil.addHandler(input,”focus”,function(event){<br>    event = EventUtil.getEvent(event);<br>    var target = EventUtil.getTarget(event);<br>    target.select();<br>});<br>复制代码<br>在火狐和谷歌浏览器下能实现当获取焦点的时候，就选中input元素框内的所有内容，但是在IE7或者8下，还是页面加载完后就已经选中了文本框内的所有元素；</p>\n<ol>\n<li>选择事件(select)</li>\n</ol>\n<p>与select方法对应的，还有一个select事件，在IE9+，firefox，chrome，opera和safari中，只有用户选择了文本且释放鼠标时，会触发select事件；但是在IE8及以下，只要用户选择了一个字母且不必释放鼠标，就会触发select事件；如下代码：</p>\n<p>var formId = document.getElementById(“formId”),<br>input = formId.elements[‘input’];<br>EventUtil.addHandler(input,”select”,function(event){<br>    alert(input.value);<br>});</p>\n<ol>\n<li>取的选择的文本</li>\n</ol>\n<p>虽然通过select事件我们知道用户什么时候选择了文本，但是我们并不知道用户选择了什么文本，在HTML5中，我们通过两个属性selectionStart和selectionEnd，这两个属性表示选择的范围(即文本区开头和结尾的偏移量)；因此要取得用户选择的文本，可以使用如下代码；</p>\n<p>复制代码<br>var formId = document.getElementById(“formId”),<br>    input = formId.elements[‘input’];<br>EventUtil.addHandler(input,”select”,function(event){<br>    alert(getSelectedText(input));<br>});<br>function getSelectedText(elem) {<br>    return elem.value.substring(elem.selectionStart,elem.selectionEnd);<br>}<br>复制代码<br>但是目前浏览器支持程度有：IE9+，firefox，chrome，Opera及safari；</p>\n<p>IE8及之前的版本不支持这两个属性，但是他们提供了另外一种document.selection对象，其中保存着用户在整个文档范围内选择的文本信息，但是呢与前面的select事件使用在一起的话，只能选择一个字符就会触发事件，也就是说，不能选择大于1和字符的文字，不过可以知道选择的值时多少；如下代码：</p>\n<p>复制代码<br>var formId = document.getElementById(“formId”),<br>input = formId.elements[‘input’];<br>EventUtil.addHandler(input,”select”,function(event){<br>    alert(getSelectedText(input));<br>});<br>function getSelectedText(elem) {<br>    if(typeof elem.selectionStart == “number”) {<br>         return elem.value.substring(elem.selectionStart,elem.selectionEnd);<br>    }else if(document.selection) {<br>        return document.selection.createRange().text;<br>    }<br>}<br>复制代码<br>选择部分文本</p>\n<p>HTML5也为选择文本框中的部分文本提供了解决方案，使用setSelectionRange()方法，这个方法接收2个参数，要选择的第一个字符的索引，和要选择的最后一个字符之后的字符的索引；</p>\n<p>浏览器支持有：IE9+，chrome，safari和opera，firefox貌似不支持；</p>\n<p>代码如下：</p>\n<p>var formId = document.getElementById(“formId”),<br>    input = formId.elements[‘input’];<br>input.value = “我是龙恩，我是中国人”;<br>// 选择所有文本<br>input.setSelectionRange(0,input.value.length);<br>截图如下：</p>\n<p>// 选择前3个字符</p>\n<p>input.setSelectionRange(0,3);<br>截图如下：</p>\n<p>// 选择第四到第六个字符</p>\n<p>input.setSelectionRange(4,7);</p>\n<p>截图如下：</p>\n<p>IE8及以下版本可以使用范围来选择部分文本，要选择部分文本，必须首先使用IE在所有文本框中提供的createTextRange()方法创建一个范围，且我们需要使用collapse()将范围折叠到文本框的开始位置，再使用moveStart()和moveEnd()这两个范围方法将范围移动到位；</p>\n<p>如下代码选择所有的文本：</p>\n<p>复制代码<br>input.value = “我是龙恩，我是中国人”;<br>var range = input.createTextRange();<br>// 选择所有文本<br>range.collapse(true);<br>range.moveStart(“character”,0);<br>range.moveEnd(“character”,input.value.length);<br>range.select();<br>复制代码<br>演示如下：</p>\n<p>切记：使用F5刷新没有用的，要在地址栏中，然后按enter键刷新即可看到效果；</p>\n<p>// 选择前3个字符<br>range.collapse(true);<br>range.moveStart(“character”,0);<br>range.moveEnd(“character”,3);<br>range.select();<br>演示如下：</p>\n<p>// 选择第4到第6个字符<br>range.collapse(true);<br>range.moveStart(“character”,4);<br>range.moveEnd(“character”,3);<br>range.select();<br>演示如下：</p>\n<p>为了让跨浏览器效果，我们可以封装一个方法，如下：</p>\n<p>复制代码<br>function selectText(elem,startIndex,stopIndex) {<br>    if(elem.setSelectionRange) {<br>          elem.setSelectionRange(startIndex,stopIndex);<br>    }else if(elem.createTextRange) {<br>        var range = elem.createTextRange();<br>        range.collapse(true);<br>        range.moveStart(“character”,startIndex);<br>        range.moveEnd(“character”,stopIndex - startIndex);<br>        range.select();<br>    }<br>}<br>复制代码<br>测试数据如下：貌似firefox不支持</p>\n<p>复制代码<br>// 选择所有文本<br>selectText(input,0,input.value.length);</p>\n<p>// 选择前3个字符<br>selectText(input,0,3);</p>\n<p>// 选择第四个字符到第六个字符<br>selectText(input,4,7);<br>复制代码<br>过滤输入</p>\n<pre><code>有时候我们会要求用户在输入框里面输入特定格式的数据，我们就可以使用过滤输入这种手段来进行了，首先我们来看看如何屏蔽字符；\n</code></pre><ol>\n<li>屏蔽字符</li>\n</ol>\n<p>比如我在一个input输入框中，只允许只能输入数字，那么我们可以先获取通过keypress事件来监听，然后每次获取到键码，然后通过String.fromCharCode()这个方法，把键码转换成字符串，然后通过正则判断下，如果不是数字，直接阻止默认事件即可不让用户输入，如下代码：</p>\n<p><form id=\"formId\"><br>    <input type=\"text\" name=\"input\"><br></form><br>JS代码如下：</p>\n<p>复制代码<br>var formId = document.getElementById(“formId”),<br>input = formId.elements[‘input’];<br>EventUtil.addHandler(input,’keypress’,function(event) {<br>    event = EventUtil.getEvent(event);<br>    var charCode = EventUtil.getCharCode(event);<br>    if(!/\\d/.test(String.fromCharCode(charCode))) {<br>        EventUtil.preventDefault(event);<br>    }<br>});<br>复制代码<br>如上代码能满足日常需求，但是有些游览器，比如firefox，safari(3.1版本之前)会对向上键，向下键，退格键和删除键也会触发keypress事件了；所以为了避免这些事件的发生，我们需要做一些处理来满足所有版本的浏览器的需求，我们发现在firefox中，所有由非字符键触发keypress键码都为0；而在safari3以前的版本中，对应的字符编码全部为8；所以我们要对字符编码进行判断下；</p>\n<p>如下代码：</p>\n<p>复制代码<br>EventUtil.addHandler(input,’keypress’,function(event) {<br>    event = EventUtil.getEvent(event);<br>    var charCode = EventUtil.getCharCode(event);<br>    if(!/\\d/.test(String.fromCharCode(charCode)) &amp;&amp; charCode &gt; 9) {<br>        EventUtil.preventDefault(event);<br>    }<br>});<br>复制代码<br>操作剪贴板</p>\n<p>到目前为止，IE，chrome，safari，opera都支持剪贴板事件，貌似firefox就不支持了（书上说支持）；但是我操作就不支持了；下面是6个操作剪贴板事件；如下：</p>\n<p>beforecopy: 在发生复制操作前触发；</p>\n<p>copy: 在发生复制操作时触发；</p>\n<p>beforecut: 在发生剪贴操作前触发；</p>\n<p>cut: 在发生剪贴操作时触发；</p>\n<p>beforepaste: 在发生黏贴操作前触发；</p>\n<p>paste: 在发生粘帖操作时触发；</p>\n<p>针对上面的事件，我们可以使用如下代码测试下就可以证明了；代码如下所示：</p>\n<p>EventUtil.addHandler(input,’beforecopy’,function(event) {<br>    alert(1);<br>});<br>如果要访问剪贴板中的数据，可以使用clipboardData对象，在IE中，这个对象是window对象的属性，在safari或者chrome上，这个对象是event的属性，这个clipboardData对象有三个方法，getData(),setData(),和clearData();</p>\n<p>getData()是从剪贴板中取得数据，他接受一个参数，即要取得数据的格式，在IE中，有二种数据格式”text” 和 “url”，在safari和chrome中这个参数是一种MIME类型，不过，可以使用text代表text/plain.</p>\n<p>setData()方法是给剪贴板设置文本，接受2个参数，第一个数据是数据类型；第二个参数是放在剪贴板中的文本；但是此方法接受的数据类型只能是text/plain,不能是text；因此为了全兼容浏览器(出firefox外)，我们可以写一个通用的方法出来，如下：</p>\n<p>复制代码<br>getClipboardText: function(event) {<br>    var clipboardData = (event.clipboardData || window.clipboardData);<br>        return clipboardData.getData(“text”);<br>    },<br>setClipboardText:function(event,value) {<br>    if(event.clipboardData) {<br>        return event.clipboardData.setData(“text/plain”,value);<br>    }else if(window.clipboardData) {<br>        return window.clipboardData.setData(“text”,value);<br>    }<br>}<br>复制代码<br>因此EventUtil封装的所有方法如下：</p>\n<p>复制代码<br>var EventUtil = {<br>    addHandler: function(element,type,handler) {<br>        if(element.addEventListener) {<br>                    element.addEventListener(type,handler,false);<br>        }else if(element.attachEvent) {<br>            element.attachEvent(“on”+type,handler);<br>        }else {<br>            element[“on” +type] = handler;<br>        }<br>    },<br>    removeHandler: function(element,type,handler){<br>        if(element.removeEventListener) {<br>                    element.removeEventListener(type,handler,false);<br>        }else if(element.detachEvent) {<br>            element.detachEvent(“on”+type,handler);<br>        }else {<br>            element[“on” +type] = null;<br>        }<br>    },<br>    getEvent: function(event) {<br>        return event ? event : window.event;<br>    },<br>    getTarget: function(event) {<br>        return event.target || event.srcElement;<br>    },<br>    preventDefault: function(event){<br>        if(event.preventDefault) {<br>            event.preventDefault();<br>        }else {<br>            event.returnValue = false;<br>        }<br>    },<br>    stopPropagation: function(event) {<br>        if(event.stopPropagation) {<br>            event.stopPropagation();<br>        }else {<br>            event.cancelBubble = true;<br>        }<br>    },<br>    getRelatedTarget: function(event){<br>        if (event.relatedTarget){<br>            return event.relatedTarget;<br>        } else if (event.toElement){<br>            return event.toElement;<br>        } else if (event.fromElement){<br>            return event.fromElement;<br>        } else {<br>            return null;<br>        }<br>    },<br>    getWheelDelta: function(event) {<br>        if(event.wheelDelta) {<br>            return event.wheelDelta;<br>        }else {<br>            return -event.detail * 40<br>        }<br>    },<br>    getCharCode: function(event) {<br>        if(typeof event.charCode == ‘number’) {<br>            return event.charCode;<br>        }else {<br>            return event.keyCode;<br>        }<br>    },<br>    getClipboardText: function(event) {<br>        var clipboardData = (event.clipboardData || window.clipboardData);<br>        return clipboardData.getData(“text”);<br>    },<br>    setClipboardText:function(event,value) {<br>        if(event.clipboardData) {<br>        return event.clipboardData.setData(“text/plain”,value);<br>            }else if(window.clipboardData) {<br>            return window.clipboardData.setData(“text”,value);<br>        }<br>    }<br>};<br>复制代码<br>测试代码如下：还是上面测试输入框的值是否为数字；每次粘帖上次，都能获取到黏贴的是文字数据，代码如下：</p>\n<p>HTML代码如下：</p>\n<p><form id=\"formId\"><br>     <input type=\"text\" name=\"input\"><br></form><br>JS代码如下：</p>\n<p>复制代码<br>var formId = document.getElementById(“formId”),<br>input = formId.elements[‘input’];<br>EventUtil.addHandler(input,’paste’,function(event) {<br>    event = EventUtil.getEvent(event);<br>    var text = EventUtil.getClipboardText(event);<br>    alert(text);<br>    if (!/^\\d*$/.test(text)){<br>        EventUtil.preventDefault(event);<br>    }<br>});<br>复制代码<br>理解自动切换输入框或者textarea的焦点</p>\n<p>比如我们在填写表单的页面上，当用户输入完自己的数据的时候，不需要用户手动切换到下一个输入框里面去，我们可以自动切换去，这样的话，对于用户体验来说，比较方便，比如我们现在页面上有一个form表单，这里为了做测试，我们先用一个输入框用于手机号码的，另外一个是textarea，当手机号码输入11位数字后，会自动切换到textarea中；当然页面中的隐藏域除外；代码如下：</p>\n<p>HTML代码如下：</p>\n<p><form id=\"formId\"><br>    <input type=\"text\" name=\"input\" maxlength=\"11/\"><br>    <textarea></textarea><br></form><br>JS代码如下：</p>\n<p>复制代码<br>var formId = document.getElementById(“formId”),<br>input = formId.elements[‘input’];<br>EventUtil.addHandler(input,’keyup’,tabForward);<br>function tabForward(event) {<br>    event = EventUtil.getEvent(event);<br>    var target = EventUtil.getTarget(event);<br>    if(target.value.length == target.maxLength) {<br>        // 获取当前的form表单的引用<br>        var form = target.form;<br>        for(var i = 0, ilen = form.elements.length; i &lt; ilen; i++) {<br>            if(form.elements[i] == target) {<br>                if(form.elements[i+1]) {<br>                    form.elements[i+1].focus();<br>                }<br>                return;<br>            }<br>        }<br>    }<br>}<br>复制代码<br>理解HTML5新增属性</p>\n<p>required属性；</p>\n<p>比如在HTML5中对表单input，textarea，或者select标签的话，提交表单时，需要判断是否为空，特别对于在做移动端的朋友来说，可以使用HTML5中的新增属性required；如下HTML代码：</p>\n<p><form id=\"formId\"><br>    <input type=\"text\" name=\"input\" maxlength=\"11\" required><br>    <textarea></textarea><br>    <input type=\"submit\"><br></form><br>提交时候，在chrome下看到效果如下：</p>\n<p>在firefox下，提示如下：</p>\n<p>如上是根据不同的浏览器本身的性质来提示的，因此样式不同，所以适合在移动端根据本身浏览器内核来提示；</p>\n<p>但是在Javascript是如何判断的呢？比如如下HTML代码：</p>\n<p><form id=\"formId\"><br>    <input type=\"text\" name=\"input\" maxlength=\"11\" required><br>    <textarea></textarea><br>    <input type=\"submit\" name=\"submit\"><br></form><br>JS代码如下：</p>\n<p>复制代码<br>var formId = document.getElementById(“formId”),<br>submit = formId.elements[‘submit’];<br>EventUtil.addHandler(submit,’click’,function(event) {<br>    var isRequired = formId.elements[“submit”].required;<br>    console.log(isRequired);<br>});<br>复制代码<br>如上打印出false；可以获取到submit的属性required，如果输入框值为空的话，会打印出false出来；</p>\n<p>如果想知道浏览器是否支持required这个属性的话，我们可以使用如下代码判断下，如果返回true，说明支持，否则不支持；如下：</p>\n<p>var isRequiredSupported = “required” in document.createElement(“input”);<br>console.log(isRequiredSupported);<br>input输入框类型type的值是email或者url</p>\n<input type=\"”email”\" name=\"”email”/\">\n\n<input type=\"”url”\" name=\"”url”/\">\n\n<p>email类型要求输入的文本必须符合电子邮件的格式，url类型要求输入的文本必须符合URL的格式；如下chrome浏览器截图如下；</p>\n<p>选择框脚本</p>\n<p>选择框是通过<select>和<option>元素创建的，除了表单所有的共有属性和方法外，HTMLSelectElement类还提供了下列属性和方法；</option></select></p>\n<p>add(newOption,relOption);向控件中插入新<option>元素，其位置在relOption之前；</option></p>\n<p>multiple:布尔值; 表示是否允许多项选择，等价于HTML中的multiple特性；</p>\n<p>options: 控件中所有<option>元素的HTMLCollection；</option></p>\n<p>remove(index):   移除给定位置的选项；</p>\n<p>selectedIndex:   基于0的选中索引，如果没有该选项，则值为 -1；</p>\n<p>size:  选择框中的可见的行数。</p>\n<p>如下select框代码：</p>\n<p>复制代码</p>\n<p><form id=\"formId\"><br>    <select name=\"location\" id=\"selLocation\"><br>        <option value=\"A\">A</option><br>        <option value=\"B\">B</option><br>        <option value=\"C\">C</option><br>        <option value=\"\">D</option><br>        <option>E</option><br>    </select><br></form><br>复制代码<br>JS代码如下：</p>\n<p>复制代码<br>var formId = document.getElementById(“formId”),<br>select = formId.elements[‘location’];<br>console.log(select.value);<br>EventUtil.addHandler(select,’change’,function(){<br>    console.log(select.value)<br>});<br>复制代码<br>第一次页面加载完成后，打印出值为A；</p>\n<p>当每次切换的时候，如果有value就打印出值，如果value=””;则打印空字符串，但是如果option选项没有指定value，在firfox和chrome下打印出当前的文本值，比如上面的文本为E，则值为E；但是IE8及以下，打印的还是空字符串；</p>\n<p>在DOM中，每个<option>元素都有一个HTMLOptionElement对象表示；为方便访问数据，对象添加了如下属性；</option></p>\n<p>index: 当前选项在options集合中的索引；</p>\n<p>label： 当前选项的标签，等价于HTML中的label</p>\n<p>selected：布尔值，表示当前选项是否被选中，将这个属性设置为true可以选中当前选项。</p>\n<p>text：选项的文本；</p>\n<p>value：选项的值；</p>\n<p>我们还是以上面的form表单作为HTML代码，我们使用JS来测试下：</p>\n<p>如下代码：</p>\n<p>复制代码<br>var formId = document.getElementById(“formId”),<br>select = formId.elements[‘location’];<br>// 获取options集合中的第一项选项的文本<br>console.log(select.options[0].text);   // 打印出A<br>// 获取options集合中的第一项选项的value<br>console.log(select.options[0].value);  // 打印出A<br>复制代码<br>对于下拉框只能选择一项的选择框，访问最简单的方式，就是使用selectedIndex属性，如下HTML代码：</p>\n<p>复制代码</p>\n<p><form id=\"formId\"><br>    <select name=\"location\" id=\"selLocation\"><br>        <option value=\"A\">A</option><br>        <option value=\"B\" selected>B</option><br>        <option value=\"C\">C</option><br>        <option value=\"\">D</option><br>        <option>E</option><br>    </select><br></form><br>复制代码<br>假如页面初始化的时候默认选择第二项，那么我们可以先使用selectedIndex的属性获取选中的索引，然后根据索引获取当前的文本和值；如下JS代码：</p>\n<p>复制代码<br>var formId = document.getElementById(“formId”),<br>select = formId.elements[‘location’];<br>// 获取当前选中的选项的索引selectedIndex<br>var selectedIndex = select.selectedIndex;<br>// 获取索引为selectedIndex的option<br>var selectedOption = select.options[selectedIndex];<br>console.log(“selected index:”+selectedIndex+”\\nselect text:”+selectedOption.text+”\\nselect value:”+selectedOption.value);<br>复制代码<br>添加选项</p>\n<p>可以使用javascript动态创建选项，并将它们添加到选择框中，添加选择框有以下常见3种方式；</p>\n<p>第一种方式使用DOM的方式如下：</p>\n<p>HTML代码如下：</p>\n<p><form id=\"formId\"><br>    <select name=\"location\" id=\"selLocation\"></select></form></p>\n<pre><code>&lt;/select&gt;\n</code></pre><p><br>JS代码如下：</p>\n<p>复制代码<br>var formId = document.getElementById(“formId”),<br>select = formId.elements[‘location’];<br>var newOption = document.createElement(“option”);<br>newOption.appendChild(document.createTextNode(“A”));<br>newOption.setAttribute(“value”,”AAAA”);<br>select.appendChild(newOption);<br>复制代码<br>第二种方式使用Option构造函数来创建新选项，Option构造函数接收2个参数，文本(text)和值(value),第二个参数可选，比如如下代码：</p>\n<p>var formId = document.getElementById(“formId”),<br>select = formId.elements[‘location’];<br>var newOption = new Option(“Option text”,”Option value”);<br>select.appendChild(newOption);<br>但是这种方式在IE下是不生效的；</p>\n<p>下面我们来看看第三种方式吧！是使用选择框add()方法，DOM规定这个方法接收2个参数，要添加的新选项和将位于新选项之后的选项，如果想在列表的最后添加一个选项，应将第二个参数设置为null；在IE对add()方法的实现中，第二个参数是可选的，但是标准DOM浏览器中，必须要指定第二个参数，因此为了全兼容浏览器，我们必须添加第二个参数，但是我们可以将第二个参数设置为undefined，含义是：在所有的浏览器将新选项插入到列表的最后了~</p>\n<p>如下代码：</p>\n<p>var formId = document.getElementById(“formId”),<br>select = formId.elements[‘location’];<br>var newOption = new Option(“Option text”,”Option value”);<br>select.add(newOption,undefined);<br>移除选项的方式如下：</p>\n<p>使用dom的removeChild()方法，为其传入要移除的选项；如下代码：<br>HTML代码如下：</p>\n<p>复制代码</p>\n<p><form id=\"formId\"><br>    <select name=\"location\" id=\"selLocation\"><br>        <option value=\"A\">A</option><br>        <option value=\"B\">B</option><br>        <option value=\"C\">C</option><br>    </select><br></form><br>复制代码<br>Javascript代码如下：</p>\n<p>var formId = document.getElementById(“formId”),<br>select = formId.elements[‘location’];<br>// 第一种：移除第一项如下方式<br>select.removeChild(select.options[0]);</p>\n<ol>\n<li>第二种方式是使用选择框的remove()方法，这个方法接收一个参数，既要移除选项的索引；如下代码：</li>\n</ol>\n<p>var formId = document.getElementById(“formId”),<br>select = formId.elements[‘location’];<br>// 移除第一项<br>select.remove(0);</p>\n<ol>\n<li>最后一种方式，就是将相应的选项设置为null，如下代码：</li>\n</ol>\n<p>var formId = document.getElementById(“formId”),<br>select = formId.elements[‘location’];<br>// 移除第一项<br>select.options[0] = null;<br>理解表单序列化</p>\n<p>在javascript中，可以利用表单字段的type属性，连同name和value属性一起实现对表单的序列化，序列化后将把这些数据发送给服务器。</p>\n<p>下面是将那些字段需要进行序列化的；</p>\n<p>对表单字段的名称和值进行URL编码，使用&amp;分割；<br>不发送禁用的表单字段；<br>只发送勾选的单选框和复选框按钮数据；<br>不发送type为reset和button的按钮<br>多选选择框中的每个选中的值单独一个条目；<br>Select元素的值，就是选中option元素的value的值，如果option没有属性value，则是选中的文本值；<br>如下JS代码是封装form表单的序列化的JS如下：</p>\n<p>// 序列化JS代码封装</p>\n<p>复制代码<br>function serialize(form) {<br>    var arrs = [],<br>    field = null,<br>    i,<br>    len,<br>    j,<br>    optLen,<br>    option,<br>    optValue;<br>    for(i = 0,len = form.elements.length; i &lt; len; i++) {<br>        field = form.elements[i];<br>        switch(field.type) {<br>            case “select-one”:<br>               case  “select-multiple”:<br>            if(field.name.length) {<br>                 for(j = 0,optLen = field.options.length; j &lt; optLen; j++) {<br>                       option = field.options[j];<br>                       if(option.selected) {<br>                           optValue = ‘’;<br>                           if(option.hasAttribute) {<br>                               optValue = option.hasAttribute(“value”) ? option.value : option.text;<br>                           }else {<br>                               optValue = option.attributes[“value”].specified ? option.value : option.text;<br>                           }<br>                           arrs.push(encodeURIComponent(field.name) + “=” +encodeURIComponent(optValue));<br>                       }<br>                   }<br>             }<br>            break;<br>            case undefined:      //字段集<br>            case “file”:         // 文件输入<br>            case “submit”:       // 提交按钮<br>            case “reset”:        // 重置按钮<br>            case “button”:       // 自定义按钮<br>            break;</p>\n<pre><code>        case &quot;radio&quot;:        // 单选框\n        case &quot;checkbox&quot;:     // 复选框\n        if(!field.checked) {\n            break;\n        }\n        /* 执行默认动作 */\n       default:\n       // 不包含没有名字的表单字段\n       if(field.name.length) {\n           arrs.push(encodeURIComponent(field.name) + &quot;=&quot; +encodeURIComponent(field.value));\n       }\n   }\n}\nreturn arrs.join(&quot;&amp;&quot;);\n</code></pre><p>}<br>复制代码<br>     如上对form表单序列化的函数serialize，定义了一个arrs数组，用来保存需要序列化后的名值对，然后通过for循环迭代每个表单中的字段，先使用临时变量field保存表单中任意一个字段的引用，然后使用switch语句判断字段的类型type(如果type未定义的话，此元素就不需要表单序列化)，第一种情况是select的单选和多选框，对于select单选框，只可能有一个选中项，对于多选框可能有零或多个选中项，如果有选中项的话(通过属性selected来判断)，需要确定使用什么值，如果不存在value特性，或者虽然存在该特性，但是值为空字符串，都是使用选项的文本来代替，为检查这个特性，在兼容DOM的浏览器下我们需要使用hasAttribute()方法，而在IE中需要使用特性的specified属性；对于type=“file”或者submit，reset，button等就不支持，如果比如上传图片的时候，需要图片的二进制数据使用form表单提交的话，可以在序列化后在加上这个参数即可；对于单选框和复选框如果没有选中的话，同样不进行序列化；下面我们现在来看看一个demo吧！如下HTML代码：</p>\n<p>复制代码</p>\n<p><form id=\"formId\"><br>    <select name=\"location\" id=\"selLocation\" one=\"one\"><br>        <option value=\"A\">A</option><br>        <option value=\"B\">B</option><br>        <option value=\"C\">C</option><br>    </select><br>    <select multiple=\"multiple\" style=\"width: 50px;\" id=\"mymultiple\" name=\"select2\"><br>        <option>1</option><br>        <option>2</option><br>        <option>3</option><br>        <option>4</option><br>        <option>5</option><br>    </select><br>    <input name=\"a\" type=\"radio\"><br>    <input name=\"b\" type=\"checkbox\"><br>    <input type=\"file\" name=\"aaaa\"><br>    <input type=\"hidden\" name=\"hidden\" value=\"hidden\"><br>    <input type=\"submit\" value=\"提交\" name=\"submit\"><br></form><br>复制代码<br>JS代码如下：</p>\n<p>复制代码<br>var formId = document.getElementById(“formId”);<br>console.log(serialize(formId));<br>var submit = formId.elements[‘submit’];<br>EventUtil.addHandler(submit,’click’,function(e){<br>    EventUtil.preventDefault(e);<br>    console.log(serialize(formId));<br>});<br>复制代码<br>我们看到上面的form表单代码，上面有select单选框，也有select多选框，也有隐藏域和input框，但是请注意：上面name=”a”和name=”b”，当他们选中的时候，没有值属性，所以在各个浏览器上都会自带一个值为on的值传给服务器端，但是这个并不是我们想要的，所以的如果需要值的话，一定要设置值，如下如下截图：</p>\n<p>在火狐和谷歌下截图如下：</p>\n<p>在IE下：</p>\n<p>上面的select多选框，如果需要多选的话，记得先要按住键盘上的ctrl键就可以多选了，比如上面的select2=2&amp;select2=3&amp;select2=4 就是select框多选。</p>\n<p>理解富文本编辑</p>\n<p>在网页中编辑内容，IE最早引入这个功能，随后opera，safari，firefox和chrome也实现了这个功能，基本原理就是在页面中嵌入一个空HTML页面的iframe，通过设置designMode属性，这个空白的HTML页面可以添加文字，而添加文字则是该页面的body元素的html代码，如下所示：</p>\n<p>designMode有2个属性，off（默认值）和on, 当设置为on的时候，整个文档变得可编辑，但是我们也可以给他们添加css样式，为了更加美观；首先我们先来看看demo，如下HTML页面嵌套一个iframe；</p>\n<iframe name=\"richedit\" src=\"bank.html\"></iframe>\n\n<p>而bank.html页面是一个空页面，代码如下：</p>\n<p>复制代码<br>&lt;!doctype html&gt;</p>\n<p><html lang=\"en\"><br> <head><br>  <meta charset=\"UTF-8\"><br>  <meta name=\"Generator\" content=\"EditPlus®\"><br>  <meta name=\"Author\" content=\"\"><br>  <meta name=\"Keywords\" content=\"\"><br>  <meta name=\"Description\" content=\"\"><br>  <title>Document</title><br> </head><br> <body></body></html></p>\n<p> <br><br>复制代码<br>然后在主页面上使用JS，当页面加载完成后，将designMode属性设置为on即可，如下JS代码：</p>\n<p>EventUtil.addHandler(window,’load’,function(event){<br>    frames[‘richedit’].document.designMode = “on”;<br>});<br>然后在页面上显示如下：</p>\n<p>第二种实现方式是使用contenteditable属性来实现</p>\n<p>contenteditable属性是有IE最早实现的，可以把contenteditable属性给页面中的任何元素，然后用户可以立即编辑该元素，不需要iframe，空页面及JS，只需要使用contenteditable属性即可；如下代码给div设置contenteditable属性；如下代码：</p>\n<p><div class=\"richedit\" contenteditable=\"\" style=\"width:100px;height:100px;border:1px solid #ccc\"></div><br>在浏览器下效果如下：</p>\n<p>支持的浏览器有；IE，firefox，chrome，safari和opera；</p>\n<p>在移动设备上，有ios5+和Android3+；</p>\n<p>Contenteditable属性有三个可能值，true表示打开，false表示关闭，inherit表示从父元素那边继承。</p>"},{"title":"Vue-components","date":"2017-06-29T06:43:52.000Z","toc":true,"_content":"# 组件系统\n## 什么是组件？\n>组件（Component）是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素， Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 is 特性扩展。\n\n## 使用组件\n### 注册\n之前还说过，我们可以通过一下方式创建一个Vue实例：\n~~~js\n    new Vue({\n        el: '#some-element',\n        // 选项\n    })\n~~~\n要注册一个全局组件，你可以使用 Vue.component(tagName, options)。 例如：\n~~~js\n    Vue.component('my-component', {\n            // 选项\n    })\n~~~\n**对于自定义标签名，Vue.js 不强制要求遵循 W3C规则 （小写，并且包含一个短杠），尽管遵循这个规则比较好。**\n<!--more-->\n组件在注册之后，便可以在父实例的模块中以自定义元素 <my-component></my-component> 的形式使用。要确保在初始化根实例 之前 注册了组件：\n~~~html\n    <div id=\"example\">\n        <my-component></my-component>\n    </div>\n~~~\n~~~js\n    // 注册\n    Vue.component('my-component', {\n        template: '<div>A custom component!</div>'\n    })\n    // 创建根实例\n    new Vue({\n        el: '#example'\n    })\n~~~\n渲染为：\n~~~html\n    <div id=\"example\">\n        <div>A custom component!</div>\n    </div>\n~~~\n### 局部注册\n不必在全局注册每个组件。通过使用组件实例选项注册，可以使组件仅在另一个实例/组件的作用域中可用：\n~~~js\n    var Child = {\n    template: '<div>A custom component!</div>'\n    }\n    new Vue({\n    // ...\n    components: {\n        // <my-component> 将只在父模板可用\n        'my-component': Child\n    }\n    })\n~~~\n>这种封装也适用于其它可注册的 Vue 功能，如指令。\n\n### DOM模型解析说明\n当使用 DOM 作为模版时（例如，将 el 选项挂载到一个已存在的元素上）, 你会受到 HTML 的一些限制，因为 Vue 只有在浏览器解析和标准化 HTML 后才能获取模版内容。尤其像这些元素 <ul> ，<ol>，<table> ，<select> 限制了能被它包裹的元素， 而一些像 <option> 这样的元素只能出现在某些其它元素内部。\n在自定义组件中使用这些受限制的元素时会导致一些问题，例如：\n~~~html\n    <table>\n        <my-row>...</my-row>\n    </table>\n~~~\n>自定义组件 <my-row> 被认为是无效的内容，因此在渲染的时候会导致错误。变通的方案是使用特殊的 is 属性：\n~~~js\n    <table>\n        <tr is=\"my-row\"></tr>\n    </table>\n~~~\n**应当注意，如果您使用来自以下来源之一的字符串模板，这些限制将不适用：**\n> * < script type=\"text/x-template\">\n> * JavaScript内联模版字符串\n> * .vue 组件\n\n因此，有必要的话请使用字符串模版。\n### data必须是函数\n通过Vue构造器传入的各种选项大多数都可以在组件里用。 data 是一个例外，它必须是函数。 实际上，如果你这么做：\n~~~js\n    Vue.component('my-component', {\n        template: '<span>{{ message }}</span>',\n        data: {\n            message: 'hello'\n        }\n    })\n~~~\n那么 Vue 会停止，并在控制台发出警告，告诉你在组件中 data 必须是一个函数。理解这种规则的存在意义很有帮助，让我们假设用如下方式来绕开Vue的警告：\n~~~html\n    <div id=\"example-2\">\n        <simple-counter></simple-counter>\n        <simple-counter></simple-counter>\n        <simple-counter></simple-counter>\n    </div>\n~~~\n~~~js\n    var data = { counter: 0 }\n    Vue.component('simple-counter', {\n        template: '<button v-on:click=\"counter += 1\">{{ counter }}</button>',\n        // 技术上 data 的确是一个函数了，因此 Vue 不会警告，\n        // 但是我们返回给每个组件的实例的却引用了同一个data对象\n        data: function () {\n            return data\n        }\n    })\n    new Vue({\n        el: '#example-2'\n    })\n~~~\n由于这三个组件共享了同一个 data ， 因此增加一个 counter 会影响所有组件！这不对。我们可以通过为每个组件返回全新的 data 对象来解决这个问题：\n\n~~~js\n    data: function () {\n        return {\n            counter: 0\n        }\n    }\n~~~\n现在每个 counter 都有它自己内部的状态了\n\n### 构成组件\n组件意味着协同工作，通常父子组件会是这样的关系：组件 A 在它的模版中使用了组件 B 。它们之间必然需要相互通信：父组件要给子组件传递数据，子组件需要将它内部发生的事情告知给父组件。然而，在一个良好定义的接口中尽可能将父子组件解耦是很重要的。这保证了每个组件可以在相对隔离的环境中书写和理解，也大幅提高了组件的可维护性和可重用性。\n在 Vue.js 中，父子组件的关系可以总结为 **props down, events up** 。父组件通过 **props** 向下传递数据给子组件，子组件通过 **events** 给父组件发送消息。看看它们是怎么工作的。\n![](https://anhaoran.github.io/ImageServer/Vue/props-events.png)\n\n## Prop\n### 使用Prop传递数据\n组件实例的作用域是**孤立的。**这意味着不能(也不应该)在子组件的模板内直接引用父组件的数据。要让子组件使用父组件的数据，我们需要通过子组件的props选项。\n子组件要显式地用 props 选项声明它期待获得的数据：\n~~~js\n    Vue.component('child', {\n    // 声明 props\n    props: ['message'],\n    // 就像 data 一样，prop 可以用在模板内\n    // 同样也可以在 vm 实例中像 “this.message” 这样使用\n    template: '<span>{{ message }}</span>'\n    })\n~~~\n然后我们可以这样向它传入一个普通字符串：\n~~~html\n    <child message=\"hello!\"></child>\n~~~\n### camelCase vs. kebab-case\nHTML 特性是不区分大小写的。所以，当使用的不是字符串模版，camelCased (驼峰式) 命名的 prop 需要转换为相对应的 kebab-case (短横线隔开式) 命名：\n~~~js\nVue.component('child', {\n  // camelCase in JavaScript\n  props: ['myMessage'],\n  template: '<span>{{ myMessage }}</span>'\n})\n~~~\n~~~html\n<!-- kebab-case in HTML -->\n<child my-message=\"hello!\"></child>\n~~~\n如果你使用字符串模版，则没有这些限制。\n### 动态Prop\n在模板中，要动态地绑定父组件的数据到子模板的props，与绑定到任何普通的HTML特性相类似，就是用 v-bind。每当父组件的数据变化时，该变化也会传导给子组件：\n~~~html\n<div>\n  <input v-model=\"parentMsg\">\n  <br>\n  <child v-bind:my-message=\"parentMsg\"></child>\n</div>\n~~~\n使用 v-bind 的缩写语法通常更简单：\n~~~html\n    <child :my-message=\"parentMsg\"></child>\n~~~\n### 字面量语法-vs-动态语法\n初学者常犯的一个错误是使用字面量语法传递数值：\n~~~html\n    <!-- 传递了一个字符串 \"1\" -->\n    <comp some-prop=\"1\"></comp>\n~~~\n因为它是一个字面 prop ，它的值是字符串 \"1\" 而不是number。如果想传递一个实际的number，需要使用 v-bind ，从而让它的值被当作 JavaScript 表达式计算：\n~~~html\n    <!-- 传递实际的 number -->\n    <comp v-bind:some-prop=\"1\"></comp>    \n~~~\n### 单项数据流\nprop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。这是为了防止子组件无意修改了父组件的状态——这会让应用的数据流难以理解。\n另外，每次父组件更新时，子组件的所有 prop 都会更新为最新值。这意味着你不应该在子组件内部改变 prop 。如果你这么做了，Vue 会在控制台给出警告。\n为什么我们会有修改prop中数据的冲动呢？通常是这两种原因：\n> * prop 作为初始值传入后，子组件想把它当作局部数据来用；\n> * prop 作为初始值传入，由子组件处理成其它数据输出。\n\n对这两种原因，正确的应对方式是：\n1.定义一个局部变量，并用 prop 的值初始化它：\n~~~js\n    props: ['initialCounter'],\n    data: function () {\n        return { counter: this.initialCounter }\n    }\n~~~\n2.定义一个计算属性，处理 prop 的值并返回。\n~~~js\n    props: ['size'],\n    computed: {\n        normalizedSize: function () {\n            return this.size.trim().toLowerCase()\n        }\n    }\n~~~\n> 注意在 JavaScript 中对象和数组是引用类型，指向同一个内存空间，如果 prop 是一个对象或数组，在子组件内部改变它**会影响**父组件的状态。\n\n### Prop验证\n我们可以为组件的 props 指定验证规格。如果传入的数据不符合规格，Vue 会发出警告。当组件给其他人使用时，这很有用。\n要指定验证规格，需要用对象的形式，而不能用字符串数组：\n~~~js\nVue.component('example', {\n        props: {\n            // 基础类型检测 （`null` 意思是任何类型都可以）\n            propA: Number,\n            // 多种类型\n            propB: [String, Number],\n            // 必传且是字符串\n            propC: {\n            type: String,\n            required: true\n            },\n            // 数字，有默认值\n            propD: {\n            type: Number,\n            default: 100\n            },\n            // 数组／对象的默认值应当由一个工厂函数返回\n            propE: {\n            type: Object,\n            default: function () {\n                return { message: 'hello' }\n            }\n            },\n            // 自定义验证函数\n            propF: {\n            validator: function (value) {\n                return value > 10\n            }\n            }\n        }\n    })\n~~~\ntype 可以是下面原生构造器：\n * String\n * Number\n * Boolean\n * Function\n * Object\n * Array\n type 也可以是一个自定义构造器函数，使用 instanceof 检测。\n当 prop 验证失败，Vue会在抛出警告 (如果使用的是开发版本)。\n## 自定义事件\n我们知道，父组件是使用 props 传递数据给子组件，但如果子组件要把数据传递回去，应该怎样做？那就是自定义事件！\n### 使用-v-on-绑定自定义事件\n每个 Vue 实例都实现了事件接口(Events interface)，即：\n使用 $on(eventName) 监听事件\n使用 $emit(eventName) 触发事件\n>Vue的事件系统分离自浏览器的EventTarget API。尽管它们的运行类似，但是$on 和 $emit 不是addEventListener 和 dispatchEvent 的别名。\n\n另外，父组件可以在使用子组件的地方直接用 v-on 来监听子组件触发的事件。\n\n>不能用$on侦听子组件抛出的事件，而必须在模板里直接用v-on绑定，就像以下的例子：\n\n下面是一个例子：\n~~~html\n    <div id=\"counter-event-example\">\n        <p>{{ total }}</p>\n        <button-counter v-on:increment=\"incrementTotal\"></button-counter>\n        <button-counter v-on:increment=\"incrementTotal\"></button-counter>\n    </div>\n~~~\n~~~js\n    Vue.component('button-counter', {\n        template: '<button v-on:click=\"increment\">{{ counter }}</button>',\n        data: function () {\n            return {\n            counter: 0\n            }\n        },\n        methods: {\n            increment: function () {\n            this.counter += 1\n            this.$emit('increment')\n            }\n        },\n        })\n        new Vue({\n        el: '#counter-event-example',\n        data: {\n            total: 0\n        },\n        methods: {\n            incrementTotal: function () {\n            this.total += 1\n            }\n        }\n    })\n~~~\n在本例中，子组件已经和它外部完全解耦了。它所做的只是报告自己的内部事件，至于父组件是否关心则与它无关。留意到这一点很重要。\n给组件绑定原生事件\n\n有时候，你可能想在某个组件的根元素上监听一个原生事件。可以使用 .native 修饰 v-on 。例如：\n~~~html\n    <my-component v-on:click.native=\"doTheThing\"></my-component>\n~~~\n### sync-修饰符\n>2.3.0+\n\n在一些情况下，我们可能会需要对一个 prop 进行『双向绑定』。事实上，这正是 Vue 1.x 中的 `.sync`修饰符所提供的功能。当一个子组件改变了一个 prop 的值时，这个变化也会同步到父组件中所绑定的值。这很方便，但也会导致问题，因为它破坏了『单向数据流』的假设。由于子组件改变 prop 的代码和普通的状态改动代码毫无区别，当光看子组件的代码时，你完全不知道它何时悄悄地改变了父组件的状态。这在 debug 复杂结构的应用时会带来很高的维护成本。\n上面所说的正是我们在 2.0 中移除 `.sync` 的理由。但是在 2.0 发布之后的实际应用中，我们发现 .sync 还是有其适用之处，比如在开发可复用的组件库时。我们需要做的只是**让子组件改变父组件状态的代码更容易被区分。**\n在 2.3 我们重新引入了 `.sync` 修饰符，但是这次它只是作为一个编译时的语法糖存在。它会被扩展为一个自动更新父组件属性的 v-on 侦听器。\n如下代码\n~~~html\n    <comp :foo.sync=\"bar\"></comp>\n~~~\n会被扩展为：\n~~~html\n    <comp :foo=\"bar\" @update:foo=\"val => bar = val\"></comp>\n~~~\n当子组件需要更新 foo 的值时，它需要显式地触发一个更新事件：\n~~~js\n    this.$emit('update:foo', newValue)\n~~~\n### 使用自定义事件的表单输入组件\n自定义事件可以用来创建自定义的表单输入组件，使用 `v-model` 来进行数据双向绑定。看看这个：\n~~~html\n    <input v-model=\"something\">\n~~~\n这不过是以下示例的语法糖：\n~~~html\n    <input v-bind:value=\"something\" v-on:input=\"something = $event.target.value\">\n~~~\n所以在组件中使用时，它相当于下面的简写：\n~~~html\n    <custom-input v-bind:value=\"something\" v-on:input=\"something = arguments[0]\"></custom-input>\n~~~\n所以要让组件的 v-model 生效，它必须：\n接受一个 value 属性\n在有新的 value 时触发 input 事件\n我们来看一个非常简单的货币输入的自定义控件：\n~~~html\n    <currency-input v-model=\"price\"></currency-input>\n~~~\n~~~js\nVue.component('currency-input', {\n  template: '\\\n    <span>\\\n      $\\\n      <input\\\n        ref=\"input\"\\\n        v-bind:value=\"value\"\\\n        v-on:input=\"updateValue($event.target.value)\"\\\n      >\\\n    </span>\\\n  ',\n  props: ['value'],\n  methods: {\n    // 不是直接更新值，而是使用此方法来对输入值进行格式化和位数限制\n    updateValue: function (value) {\n      var formattedValue = value\n        // 删除两侧的空格符\n        .trim()\n        // 保留 2 小数位\n        .slice(0, value.indexOf('.') + 3)\n      // 如果值不统一，手动覆盖以保持一致\n      if (formattedValue !== value) {\n        this.$refs.input.value = formattedValue\n      }\n      // 通过 input 事件发出数值\n      this.$emit('input', Number(formattedValue))\n    }\n  }\n})\n~~~\n当然，上面的例子是比较幼稚的。 比如，用户甚至可以输入多个小数点或句号 - 哦哦！因此我们需要一个更有意义的例子，下面是一个更加完善的货币过滤器：\n~~~html\n <script src=\"https://unpkg.com/vue/dist/vue.js\"></script>\n<script src=\"https://cdn.rawgit.com/chrisvfritz/5f0a639590d6e648933416f90ba7ae4e/raw/974aa47f8f9c5361c5233bd56be37db8ed765a09/currency-validator.js\"></script>\n\n<div id=\"app\">\n  <currency-input \n    label=\"Price\" \n    v-model=\"price\"\n  ></currency-input>\n  <currency-input \n    label=\"Shipping\" \n    v-model=\"shipping\"\n  ></currency-input>\n  <currency-input \n    label=\"Handling\" \n    v-model=\"handling\"\n  ></currency-input>\n  <currency-input \n    label=\"Discount\" \n    v-model=\"discount\"\n  ></currency-input>\n  \n  <p>Total: ${{ total }}</p>\n</div>\n~~~\n~~~js\nVue.component('currency-input', {\n  template: '\\\n    <div>\\\n      <label v-if=\"label\">{{ label }}</label>\\\n      $\\\n      <input\\\n        ref=\"input\"\\\n        v-bind:value=\"value\"\\\n        v-on:input=\"updateValue($event.target.value)\"\\\n        v-on:focus=\"selectAll\"\\\n        v-on:blur=\"formatValue\"\\\n      >\\\n    </div>\\\n  ',\n  props: {\n    value: {\n      type: Number,\n      default: 0\n    },\n    label: {\n      type: String,\n      default: ''\n    }\n  },\n  mounted: function () {\n    this.formatValue()\n  },\n  methods: {\n    updateValue: function (value) {\n      var result = currencyValidator.parse(value, this.value)\n      if (result.warning) {\n        this.$refs.input.value = result.value\n      }\n      this.$emit('input', result.value)\n    },\n    formatValue: function () {\n      this.$refs.input.value = currencyValidator.format(this.value)\n    },\n    selectAll: function (event) {\n      // Workaround for Safari bug\n      // http://stackoverflow.com/questions/1269722/selecting-text-on-focus-using-jquery-not-working-in-safari-and-chrome\n      setTimeout(function () {\n      \tevent.target.select()\n      }, 0)\n    }\n  }\n})\n\nnew Vue({\n  el: '#app',\n  data: {\n    price: 0,\n    shipping: 0,\n    handling: 0,\n    discount: 0\n  },\n  computed: {\n    total: function () {\n      return ((\n        this.price * 100 + \n        this.shipping * 100 + \n        this.handling * 100 - \n        this.discount * 100\n      ) / 100).toFixed(2)\n    }\n  }\n})\n~~~\n>事件接口不仅仅可以用来连接组件内部的表单输入，也很容易集成你自己创造的输入类型。想象一下：\n\n~~~html\n<voice-recognizer v-model=\"question\"></voice-recognizer>\n<webcam-gesture-reader v-model=\"gesture\"></webcam-gesture-reader>\n<webcam-retinal-scanner v-model=\"retinalImage\"></webcam-retinal-scanner>\n~~~\n\n### 非父子组件通信\n有时候两个组件也需要通信(非父子关系)。在简单的场景下，可以使用一个空的 Vue 实例作为中央事件总线：\n~~~js\nvar bus = new Vue()\n~~~\n~~~js\n// 触发组件 A 中的事件\nbus.$emit('id-selected', 1)\n~~~\n~~~js\n// 在组件 B 创建的钩子中监听事件\nbus.$on('id-selected', function (id) {\n  // ...\n})\n~~~\n在复杂的情况下，我们应该考虑使用专门的 状态管理模式.\n## 使用 Slot 分发内容\n在使用组件时，我们常常要像这样组合它们：\n~~~html\n<app>\n  <app-header></app-header>\n  <app-footer></app-footer>\n</app>\n~~~\n注意两点：\n1.<app> 组件不知道它的挂载点会有什么内容。挂载点的内容是由<app>的父组件决定的。\n2.<app> 组件很可能有它自己的模版。\n为了让组件可以组合，我们需要一种方式来混合父组件的内容与子组件自己的模板。这个过程被称为 内容分发 (或 “transclusion” 如果你熟悉 Angular)。Vue.js 实现了一个内容分发 API ，参照了当前 Web 组件规范草案，使用特殊的 <slot> 元素作为原始内容的插槽。\n### 编译作用域\n在深入内容分发 API 之前，我们先明确内容在哪个作用域里编译。假定模板为：\n~~~html\n<child-component>\n  {{ message }}\n</child-component>\n~~~\n`message` 应该绑定到父组件的数据，还是绑定到子组件的数据？答案是父组件。组件作用域简单地说是：\n父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译。\n一个常见错误是试图在父组件模板内将一个指令绑定到子组件的属性/方法：\n~~~html\n<!-- 无效 -->\n<child-component v-show=\"someChildProperty\"></child-component>\n~~~\n假定 `someChildProperty` 是子组件的属性，上例不会如预期那样工作。父组件模板不应该知道子组件的状态。\n如果要绑定作用域内的指令到一个组件的根节点，你应当在组件自己的模板上做：\n~~~js\nVue.component('child-component', {\n  // 有效，因为是在正确的作用域内\n  template: '<div v-show=\"someChildProperty\">Child</div>',\n  data: function () {\n    return {\n      someChildProperty: true\n    }\n  }\n})\n~~~\n类似地，分发内容是在父作用域内编译。\n### 单个-Slot\n除非子组件模板包含至少一个 `<slot>` 插口，否则父组件的内容将会被丢弃。当子组件模板只有一个没有属性的 slot 时，父组件整个内容片段将插入到 slot 所在的 DOM 位置，并替换掉 slot 标签本身。\n最初在 `<slot>` 标签中的任何内容都被视为*备用内容*。备用内容在子组件的作用域内编译，并且只有在宿主元素为空，且没有要插入的内容时才显示备用内容。\n假定 `my-component` 组件有下面模板：\n~~~html\n<div>\n  <h2>我是子组件的标题</h2>\n  <slot>\n    只有在没有要分发的内容时才会显示。\n  </slot>\n</div>\n~~~\n父组件模版：\n~~~html\n<div>\n  <h1>我是父组件的标题</h1>\n  <my-component>\n    <p>这是一些初始内容</p>\n    <p>这是更多的初始内容</p>\n  </my-component>\n</div>\n~~~\n渲染结果：\n~~~html\n<div>\n  <h1>我是父组件的标题</h1>\n  <div>\n    <h2>我是子组件的标题</h2>\n    <p>这是一些初始内容</p>\n    <p>这是更多的初始内容</p>\n  </div>\n</div>\n~~~\n### 具名-Slot\n`<slot>` 元素可以用一个特殊的属性 `name` 来配置如何分发内容。多个 slot 可以有不同的名字。具名 slot 将匹配内容片段中有对应 `slot` 特性的元素。\n仍然可以有一个匿名 slot ，它是*默认 slot* ，作为找不到匹配的内容片段的备用插槽。如果没有默认的 slot ，这些找不到匹配的内容片段将被抛弃。\n例如，假定我们有一个 `app-layout` 组件，它的模板为：\n~~~html\n<div class=\"container\">\n  <header>\n    <slot name=\"header\"></slot>\n  </header>\n  <main>\n    <slot></slot>\n  </main>\n  <footer>\n    <slot name=\"footer\"></slot>\n  </footer>\n</div>\n~~~\n父组件模版：\n~~~html\n<app-layout>\n  <h1 slot=\"header\">这里可能是一个页面标题</h1>\n  <p>主要内容的一个段落。</p>\n  <p>另一个主要段落。</p>\n  <p slot=\"footer\">这里有一些联系信息</p>\n</app-layout>\n~~~\n渲染结果为：\n~~~html\n<div class=\"container\">\n  <header>\n    <h1>这里可能是一个页面标题</h1>\n  </header>\n  <main>\n    <p>主要内容的一个段落。</p>\n    <p>另一个主要段落。</p>\n  </main>\n  <footer>\n    <p>这里有一些联系信息</p>\n  </footer>\n</div>\n~~~\n在组合组件时，内容分发 API 是非常有用的机制。\n### 作用域插槽\n>2.1.0新增\n\n作用域插槽是一种特殊类型的插槽，用作使用一个（能够传递数据到）可重用模板替换已渲染元素。\n在子组件中，只需将数据传递到插槽，就像你将 prop 传递给组件一样：\n~~~html\n<div class=\"child\">\n  <slot text=\"hello from child\"></slot>\n</div>\n~~~\n在父级中，具有特殊属性 `scope` 的 `<template>` 元素，表示它是作用域插槽的模板。`scope` 的值对应一个临时变量名，此变量接收从子组件中传递的 prop 对象：\n~~~html\n<div class=\"parent\">\n  <child>\n    <template scope=\"props\">\n      <span>hello from parent</span>\n      <span>{{ props.text }}</span>\n    </template>\n  </child>\n</div>\n~~~\n如果我们渲染以上结果，得到的输出会是：\n~~~html\n<div class=\"parent\">\n  <div class=\"child\">\n    <span>hello from parent</span>\n    <span>hello from child</span>\n  </div>\n</div>\n~~~\n作用域插槽更具代表性的用例是列表组件，允许组件自定义应该如何渲染列表每一项：","source":"_posts/Vue-components.md","raw":"---\ntitle: Vue-components\ndate: 2017-06-29 14:43:52\ntags:  Vue\ntoc: true\n---\n# 组件系统\n## 什么是组件？\n>组件（Component）是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素， Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 is 特性扩展。\n\n## 使用组件\n### 注册\n之前还说过，我们可以通过一下方式创建一个Vue实例：\n~~~js\n    new Vue({\n        el: '#some-element',\n        // 选项\n    })\n~~~\n要注册一个全局组件，你可以使用 Vue.component(tagName, options)。 例如：\n~~~js\n    Vue.component('my-component', {\n            // 选项\n    })\n~~~\n**对于自定义标签名，Vue.js 不强制要求遵循 W3C规则 （小写，并且包含一个短杠），尽管遵循这个规则比较好。**\n<!--more-->\n组件在注册之后，便可以在父实例的模块中以自定义元素 <my-component></my-component> 的形式使用。要确保在初始化根实例 之前 注册了组件：\n~~~html\n    <div id=\"example\">\n        <my-component></my-component>\n    </div>\n~~~\n~~~js\n    // 注册\n    Vue.component('my-component', {\n        template: '<div>A custom component!</div>'\n    })\n    // 创建根实例\n    new Vue({\n        el: '#example'\n    })\n~~~\n渲染为：\n~~~html\n    <div id=\"example\">\n        <div>A custom component!</div>\n    </div>\n~~~\n### 局部注册\n不必在全局注册每个组件。通过使用组件实例选项注册，可以使组件仅在另一个实例/组件的作用域中可用：\n~~~js\n    var Child = {\n    template: '<div>A custom component!</div>'\n    }\n    new Vue({\n    // ...\n    components: {\n        // <my-component> 将只在父模板可用\n        'my-component': Child\n    }\n    })\n~~~\n>这种封装也适用于其它可注册的 Vue 功能，如指令。\n\n### DOM模型解析说明\n当使用 DOM 作为模版时（例如，将 el 选项挂载到一个已存在的元素上）, 你会受到 HTML 的一些限制，因为 Vue 只有在浏览器解析和标准化 HTML 后才能获取模版内容。尤其像这些元素 <ul> ，<ol>，<table> ，<select> 限制了能被它包裹的元素， 而一些像 <option> 这样的元素只能出现在某些其它元素内部。\n在自定义组件中使用这些受限制的元素时会导致一些问题，例如：\n~~~html\n    <table>\n        <my-row>...</my-row>\n    </table>\n~~~\n>自定义组件 <my-row> 被认为是无效的内容，因此在渲染的时候会导致错误。变通的方案是使用特殊的 is 属性：\n~~~js\n    <table>\n        <tr is=\"my-row\"></tr>\n    </table>\n~~~\n**应当注意，如果您使用来自以下来源之一的字符串模板，这些限制将不适用：**\n> * < script type=\"text/x-template\">\n> * JavaScript内联模版字符串\n> * .vue 组件\n\n因此，有必要的话请使用字符串模版。\n### data必须是函数\n通过Vue构造器传入的各种选项大多数都可以在组件里用。 data 是一个例外，它必须是函数。 实际上，如果你这么做：\n~~~js\n    Vue.component('my-component', {\n        template: '<span>{{ message }}</span>',\n        data: {\n            message: 'hello'\n        }\n    })\n~~~\n那么 Vue 会停止，并在控制台发出警告，告诉你在组件中 data 必须是一个函数。理解这种规则的存在意义很有帮助，让我们假设用如下方式来绕开Vue的警告：\n~~~html\n    <div id=\"example-2\">\n        <simple-counter></simple-counter>\n        <simple-counter></simple-counter>\n        <simple-counter></simple-counter>\n    </div>\n~~~\n~~~js\n    var data = { counter: 0 }\n    Vue.component('simple-counter', {\n        template: '<button v-on:click=\"counter += 1\">{{ counter }}</button>',\n        // 技术上 data 的确是一个函数了，因此 Vue 不会警告，\n        // 但是我们返回给每个组件的实例的却引用了同一个data对象\n        data: function () {\n            return data\n        }\n    })\n    new Vue({\n        el: '#example-2'\n    })\n~~~\n由于这三个组件共享了同一个 data ， 因此增加一个 counter 会影响所有组件！这不对。我们可以通过为每个组件返回全新的 data 对象来解决这个问题：\n\n~~~js\n    data: function () {\n        return {\n            counter: 0\n        }\n    }\n~~~\n现在每个 counter 都有它自己内部的状态了\n\n### 构成组件\n组件意味着协同工作，通常父子组件会是这样的关系：组件 A 在它的模版中使用了组件 B 。它们之间必然需要相互通信：父组件要给子组件传递数据，子组件需要将它内部发生的事情告知给父组件。然而，在一个良好定义的接口中尽可能将父子组件解耦是很重要的。这保证了每个组件可以在相对隔离的环境中书写和理解，也大幅提高了组件的可维护性和可重用性。\n在 Vue.js 中，父子组件的关系可以总结为 **props down, events up** 。父组件通过 **props** 向下传递数据给子组件，子组件通过 **events** 给父组件发送消息。看看它们是怎么工作的。\n![](https://anhaoran.github.io/ImageServer/Vue/props-events.png)\n\n## Prop\n### 使用Prop传递数据\n组件实例的作用域是**孤立的。**这意味着不能(也不应该)在子组件的模板内直接引用父组件的数据。要让子组件使用父组件的数据，我们需要通过子组件的props选项。\n子组件要显式地用 props 选项声明它期待获得的数据：\n~~~js\n    Vue.component('child', {\n    // 声明 props\n    props: ['message'],\n    // 就像 data 一样，prop 可以用在模板内\n    // 同样也可以在 vm 实例中像 “this.message” 这样使用\n    template: '<span>{{ message }}</span>'\n    })\n~~~\n然后我们可以这样向它传入一个普通字符串：\n~~~html\n    <child message=\"hello!\"></child>\n~~~\n### camelCase vs. kebab-case\nHTML 特性是不区分大小写的。所以，当使用的不是字符串模版，camelCased (驼峰式) 命名的 prop 需要转换为相对应的 kebab-case (短横线隔开式) 命名：\n~~~js\nVue.component('child', {\n  // camelCase in JavaScript\n  props: ['myMessage'],\n  template: '<span>{{ myMessage }}</span>'\n})\n~~~\n~~~html\n<!-- kebab-case in HTML -->\n<child my-message=\"hello!\"></child>\n~~~\n如果你使用字符串模版，则没有这些限制。\n### 动态Prop\n在模板中，要动态地绑定父组件的数据到子模板的props，与绑定到任何普通的HTML特性相类似，就是用 v-bind。每当父组件的数据变化时，该变化也会传导给子组件：\n~~~html\n<div>\n  <input v-model=\"parentMsg\">\n  <br>\n  <child v-bind:my-message=\"parentMsg\"></child>\n</div>\n~~~\n使用 v-bind 的缩写语法通常更简单：\n~~~html\n    <child :my-message=\"parentMsg\"></child>\n~~~\n### 字面量语法-vs-动态语法\n初学者常犯的一个错误是使用字面量语法传递数值：\n~~~html\n    <!-- 传递了一个字符串 \"1\" -->\n    <comp some-prop=\"1\"></comp>\n~~~\n因为它是一个字面 prop ，它的值是字符串 \"1\" 而不是number。如果想传递一个实际的number，需要使用 v-bind ，从而让它的值被当作 JavaScript 表达式计算：\n~~~html\n    <!-- 传递实际的 number -->\n    <comp v-bind:some-prop=\"1\"></comp>    \n~~~\n### 单项数据流\nprop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。这是为了防止子组件无意修改了父组件的状态——这会让应用的数据流难以理解。\n另外，每次父组件更新时，子组件的所有 prop 都会更新为最新值。这意味着你不应该在子组件内部改变 prop 。如果你这么做了，Vue 会在控制台给出警告。\n为什么我们会有修改prop中数据的冲动呢？通常是这两种原因：\n> * prop 作为初始值传入后，子组件想把它当作局部数据来用；\n> * prop 作为初始值传入，由子组件处理成其它数据输出。\n\n对这两种原因，正确的应对方式是：\n1.定义一个局部变量，并用 prop 的值初始化它：\n~~~js\n    props: ['initialCounter'],\n    data: function () {\n        return { counter: this.initialCounter }\n    }\n~~~\n2.定义一个计算属性，处理 prop 的值并返回。\n~~~js\n    props: ['size'],\n    computed: {\n        normalizedSize: function () {\n            return this.size.trim().toLowerCase()\n        }\n    }\n~~~\n> 注意在 JavaScript 中对象和数组是引用类型，指向同一个内存空间，如果 prop 是一个对象或数组，在子组件内部改变它**会影响**父组件的状态。\n\n### Prop验证\n我们可以为组件的 props 指定验证规格。如果传入的数据不符合规格，Vue 会发出警告。当组件给其他人使用时，这很有用。\n要指定验证规格，需要用对象的形式，而不能用字符串数组：\n~~~js\nVue.component('example', {\n        props: {\n            // 基础类型检测 （`null` 意思是任何类型都可以）\n            propA: Number,\n            // 多种类型\n            propB: [String, Number],\n            // 必传且是字符串\n            propC: {\n            type: String,\n            required: true\n            },\n            // 数字，有默认值\n            propD: {\n            type: Number,\n            default: 100\n            },\n            // 数组／对象的默认值应当由一个工厂函数返回\n            propE: {\n            type: Object,\n            default: function () {\n                return { message: 'hello' }\n            }\n            },\n            // 自定义验证函数\n            propF: {\n            validator: function (value) {\n                return value > 10\n            }\n            }\n        }\n    })\n~~~\ntype 可以是下面原生构造器：\n * String\n * Number\n * Boolean\n * Function\n * Object\n * Array\n type 也可以是一个自定义构造器函数，使用 instanceof 检测。\n当 prop 验证失败，Vue会在抛出警告 (如果使用的是开发版本)。\n## 自定义事件\n我们知道，父组件是使用 props 传递数据给子组件，但如果子组件要把数据传递回去，应该怎样做？那就是自定义事件！\n### 使用-v-on-绑定自定义事件\n每个 Vue 实例都实现了事件接口(Events interface)，即：\n使用 $on(eventName) 监听事件\n使用 $emit(eventName) 触发事件\n>Vue的事件系统分离自浏览器的EventTarget API。尽管它们的运行类似，但是$on 和 $emit 不是addEventListener 和 dispatchEvent 的别名。\n\n另外，父组件可以在使用子组件的地方直接用 v-on 来监听子组件触发的事件。\n\n>不能用$on侦听子组件抛出的事件，而必须在模板里直接用v-on绑定，就像以下的例子：\n\n下面是一个例子：\n~~~html\n    <div id=\"counter-event-example\">\n        <p>{{ total }}</p>\n        <button-counter v-on:increment=\"incrementTotal\"></button-counter>\n        <button-counter v-on:increment=\"incrementTotal\"></button-counter>\n    </div>\n~~~\n~~~js\n    Vue.component('button-counter', {\n        template: '<button v-on:click=\"increment\">{{ counter }}</button>',\n        data: function () {\n            return {\n            counter: 0\n            }\n        },\n        methods: {\n            increment: function () {\n            this.counter += 1\n            this.$emit('increment')\n            }\n        },\n        })\n        new Vue({\n        el: '#counter-event-example',\n        data: {\n            total: 0\n        },\n        methods: {\n            incrementTotal: function () {\n            this.total += 1\n            }\n        }\n    })\n~~~\n在本例中，子组件已经和它外部完全解耦了。它所做的只是报告自己的内部事件，至于父组件是否关心则与它无关。留意到这一点很重要。\n给组件绑定原生事件\n\n有时候，你可能想在某个组件的根元素上监听一个原生事件。可以使用 .native 修饰 v-on 。例如：\n~~~html\n    <my-component v-on:click.native=\"doTheThing\"></my-component>\n~~~\n### sync-修饰符\n>2.3.0+\n\n在一些情况下，我们可能会需要对一个 prop 进行『双向绑定』。事实上，这正是 Vue 1.x 中的 `.sync`修饰符所提供的功能。当一个子组件改变了一个 prop 的值时，这个变化也会同步到父组件中所绑定的值。这很方便，但也会导致问题，因为它破坏了『单向数据流』的假设。由于子组件改变 prop 的代码和普通的状态改动代码毫无区别，当光看子组件的代码时，你完全不知道它何时悄悄地改变了父组件的状态。这在 debug 复杂结构的应用时会带来很高的维护成本。\n上面所说的正是我们在 2.0 中移除 `.sync` 的理由。但是在 2.0 发布之后的实际应用中，我们发现 .sync 还是有其适用之处，比如在开发可复用的组件库时。我们需要做的只是**让子组件改变父组件状态的代码更容易被区分。**\n在 2.3 我们重新引入了 `.sync` 修饰符，但是这次它只是作为一个编译时的语法糖存在。它会被扩展为一个自动更新父组件属性的 v-on 侦听器。\n如下代码\n~~~html\n    <comp :foo.sync=\"bar\"></comp>\n~~~\n会被扩展为：\n~~~html\n    <comp :foo=\"bar\" @update:foo=\"val => bar = val\"></comp>\n~~~\n当子组件需要更新 foo 的值时，它需要显式地触发一个更新事件：\n~~~js\n    this.$emit('update:foo', newValue)\n~~~\n### 使用自定义事件的表单输入组件\n自定义事件可以用来创建自定义的表单输入组件，使用 `v-model` 来进行数据双向绑定。看看这个：\n~~~html\n    <input v-model=\"something\">\n~~~\n这不过是以下示例的语法糖：\n~~~html\n    <input v-bind:value=\"something\" v-on:input=\"something = $event.target.value\">\n~~~\n所以在组件中使用时，它相当于下面的简写：\n~~~html\n    <custom-input v-bind:value=\"something\" v-on:input=\"something = arguments[0]\"></custom-input>\n~~~\n所以要让组件的 v-model 生效，它必须：\n接受一个 value 属性\n在有新的 value 时触发 input 事件\n我们来看一个非常简单的货币输入的自定义控件：\n~~~html\n    <currency-input v-model=\"price\"></currency-input>\n~~~\n~~~js\nVue.component('currency-input', {\n  template: '\\\n    <span>\\\n      $\\\n      <input\\\n        ref=\"input\"\\\n        v-bind:value=\"value\"\\\n        v-on:input=\"updateValue($event.target.value)\"\\\n      >\\\n    </span>\\\n  ',\n  props: ['value'],\n  methods: {\n    // 不是直接更新值，而是使用此方法来对输入值进行格式化和位数限制\n    updateValue: function (value) {\n      var formattedValue = value\n        // 删除两侧的空格符\n        .trim()\n        // 保留 2 小数位\n        .slice(0, value.indexOf('.') + 3)\n      // 如果值不统一，手动覆盖以保持一致\n      if (formattedValue !== value) {\n        this.$refs.input.value = formattedValue\n      }\n      // 通过 input 事件发出数值\n      this.$emit('input', Number(formattedValue))\n    }\n  }\n})\n~~~\n当然，上面的例子是比较幼稚的。 比如，用户甚至可以输入多个小数点或句号 - 哦哦！因此我们需要一个更有意义的例子，下面是一个更加完善的货币过滤器：\n~~~html\n <script src=\"https://unpkg.com/vue/dist/vue.js\"></script>\n<script src=\"https://cdn.rawgit.com/chrisvfritz/5f0a639590d6e648933416f90ba7ae4e/raw/974aa47f8f9c5361c5233bd56be37db8ed765a09/currency-validator.js\"></script>\n\n<div id=\"app\">\n  <currency-input \n    label=\"Price\" \n    v-model=\"price\"\n  ></currency-input>\n  <currency-input \n    label=\"Shipping\" \n    v-model=\"shipping\"\n  ></currency-input>\n  <currency-input \n    label=\"Handling\" \n    v-model=\"handling\"\n  ></currency-input>\n  <currency-input \n    label=\"Discount\" \n    v-model=\"discount\"\n  ></currency-input>\n  \n  <p>Total: ${{ total }}</p>\n</div>\n~~~\n~~~js\nVue.component('currency-input', {\n  template: '\\\n    <div>\\\n      <label v-if=\"label\">{{ label }}</label>\\\n      $\\\n      <input\\\n        ref=\"input\"\\\n        v-bind:value=\"value\"\\\n        v-on:input=\"updateValue($event.target.value)\"\\\n        v-on:focus=\"selectAll\"\\\n        v-on:blur=\"formatValue\"\\\n      >\\\n    </div>\\\n  ',\n  props: {\n    value: {\n      type: Number,\n      default: 0\n    },\n    label: {\n      type: String,\n      default: ''\n    }\n  },\n  mounted: function () {\n    this.formatValue()\n  },\n  methods: {\n    updateValue: function (value) {\n      var result = currencyValidator.parse(value, this.value)\n      if (result.warning) {\n        this.$refs.input.value = result.value\n      }\n      this.$emit('input', result.value)\n    },\n    formatValue: function () {\n      this.$refs.input.value = currencyValidator.format(this.value)\n    },\n    selectAll: function (event) {\n      // Workaround for Safari bug\n      // http://stackoverflow.com/questions/1269722/selecting-text-on-focus-using-jquery-not-working-in-safari-and-chrome\n      setTimeout(function () {\n      \tevent.target.select()\n      }, 0)\n    }\n  }\n})\n\nnew Vue({\n  el: '#app',\n  data: {\n    price: 0,\n    shipping: 0,\n    handling: 0,\n    discount: 0\n  },\n  computed: {\n    total: function () {\n      return ((\n        this.price * 100 + \n        this.shipping * 100 + \n        this.handling * 100 - \n        this.discount * 100\n      ) / 100).toFixed(2)\n    }\n  }\n})\n~~~\n>事件接口不仅仅可以用来连接组件内部的表单输入，也很容易集成你自己创造的输入类型。想象一下：\n\n~~~html\n<voice-recognizer v-model=\"question\"></voice-recognizer>\n<webcam-gesture-reader v-model=\"gesture\"></webcam-gesture-reader>\n<webcam-retinal-scanner v-model=\"retinalImage\"></webcam-retinal-scanner>\n~~~\n\n### 非父子组件通信\n有时候两个组件也需要通信(非父子关系)。在简单的场景下，可以使用一个空的 Vue 实例作为中央事件总线：\n~~~js\nvar bus = new Vue()\n~~~\n~~~js\n// 触发组件 A 中的事件\nbus.$emit('id-selected', 1)\n~~~\n~~~js\n// 在组件 B 创建的钩子中监听事件\nbus.$on('id-selected', function (id) {\n  // ...\n})\n~~~\n在复杂的情况下，我们应该考虑使用专门的 状态管理模式.\n## 使用 Slot 分发内容\n在使用组件时，我们常常要像这样组合它们：\n~~~html\n<app>\n  <app-header></app-header>\n  <app-footer></app-footer>\n</app>\n~~~\n注意两点：\n1.<app> 组件不知道它的挂载点会有什么内容。挂载点的内容是由<app>的父组件决定的。\n2.<app> 组件很可能有它自己的模版。\n为了让组件可以组合，我们需要一种方式来混合父组件的内容与子组件自己的模板。这个过程被称为 内容分发 (或 “transclusion” 如果你熟悉 Angular)。Vue.js 实现了一个内容分发 API ，参照了当前 Web 组件规范草案，使用特殊的 <slot> 元素作为原始内容的插槽。\n### 编译作用域\n在深入内容分发 API 之前，我们先明确内容在哪个作用域里编译。假定模板为：\n~~~html\n<child-component>\n  {{ message }}\n</child-component>\n~~~\n`message` 应该绑定到父组件的数据，还是绑定到子组件的数据？答案是父组件。组件作用域简单地说是：\n父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译。\n一个常见错误是试图在父组件模板内将一个指令绑定到子组件的属性/方法：\n~~~html\n<!-- 无效 -->\n<child-component v-show=\"someChildProperty\"></child-component>\n~~~\n假定 `someChildProperty` 是子组件的属性，上例不会如预期那样工作。父组件模板不应该知道子组件的状态。\n如果要绑定作用域内的指令到一个组件的根节点，你应当在组件自己的模板上做：\n~~~js\nVue.component('child-component', {\n  // 有效，因为是在正确的作用域内\n  template: '<div v-show=\"someChildProperty\">Child</div>',\n  data: function () {\n    return {\n      someChildProperty: true\n    }\n  }\n})\n~~~\n类似地，分发内容是在父作用域内编译。\n### 单个-Slot\n除非子组件模板包含至少一个 `<slot>` 插口，否则父组件的内容将会被丢弃。当子组件模板只有一个没有属性的 slot 时，父组件整个内容片段将插入到 slot 所在的 DOM 位置，并替换掉 slot 标签本身。\n最初在 `<slot>` 标签中的任何内容都被视为*备用内容*。备用内容在子组件的作用域内编译，并且只有在宿主元素为空，且没有要插入的内容时才显示备用内容。\n假定 `my-component` 组件有下面模板：\n~~~html\n<div>\n  <h2>我是子组件的标题</h2>\n  <slot>\n    只有在没有要分发的内容时才会显示。\n  </slot>\n</div>\n~~~\n父组件模版：\n~~~html\n<div>\n  <h1>我是父组件的标题</h1>\n  <my-component>\n    <p>这是一些初始内容</p>\n    <p>这是更多的初始内容</p>\n  </my-component>\n</div>\n~~~\n渲染结果：\n~~~html\n<div>\n  <h1>我是父组件的标题</h1>\n  <div>\n    <h2>我是子组件的标题</h2>\n    <p>这是一些初始内容</p>\n    <p>这是更多的初始内容</p>\n  </div>\n</div>\n~~~\n### 具名-Slot\n`<slot>` 元素可以用一个特殊的属性 `name` 来配置如何分发内容。多个 slot 可以有不同的名字。具名 slot 将匹配内容片段中有对应 `slot` 特性的元素。\n仍然可以有一个匿名 slot ，它是*默认 slot* ，作为找不到匹配的内容片段的备用插槽。如果没有默认的 slot ，这些找不到匹配的内容片段将被抛弃。\n例如，假定我们有一个 `app-layout` 组件，它的模板为：\n~~~html\n<div class=\"container\">\n  <header>\n    <slot name=\"header\"></slot>\n  </header>\n  <main>\n    <slot></slot>\n  </main>\n  <footer>\n    <slot name=\"footer\"></slot>\n  </footer>\n</div>\n~~~\n父组件模版：\n~~~html\n<app-layout>\n  <h1 slot=\"header\">这里可能是一个页面标题</h1>\n  <p>主要内容的一个段落。</p>\n  <p>另一个主要段落。</p>\n  <p slot=\"footer\">这里有一些联系信息</p>\n</app-layout>\n~~~\n渲染结果为：\n~~~html\n<div class=\"container\">\n  <header>\n    <h1>这里可能是一个页面标题</h1>\n  </header>\n  <main>\n    <p>主要内容的一个段落。</p>\n    <p>另一个主要段落。</p>\n  </main>\n  <footer>\n    <p>这里有一些联系信息</p>\n  </footer>\n</div>\n~~~\n在组合组件时，内容分发 API 是非常有用的机制。\n### 作用域插槽\n>2.1.0新增\n\n作用域插槽是一种特殊类型的插槽，用作使用一个（能够传递数据到）可重用模板替换已渲染元素。\n在子组件中，只需将数据传递到插槽，就像你将 prop 传递给组件一样：\n~~~html\n<div class=\"child\">\n  <slot text=\"hello from child\"></slot>\n</div>\n~~~\n在父级中，具有特殊属性 `scope` 的 `<template>` 元素，表示它是作用域插槽的模板。`scope` 的值对应一个临时变量名，此变量接收从子组件中传递的 prop 对象：\n~~~html\n<div class=\"parent\">\n  <child>\n    <template scope=\"props\">\n      <span>hello from parent</span>\n      <span>{{ props.text }}</span>\n    </template>\n  </child>\n</div>\n~~~\n如果我们渲染以上结果，得到的输出会是：\n~~~html\n<div class=\"parent\">\n  <div class=\"child\">\n    <span>hello from parent</span>\n    <span>hello from child</span>\n  </div>\n</div>\n~~~\n作用域插槽更具代表性的用例是列表组件，允许组件自定义应该如何渲染列表每一项：","slug":"Vue-components","published":1,"updated":"2017-07-03T03:35:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfnkq6d000qlyfyg4lrdb16","content":"<h1 id=\"组件系统\"><a href=\"#组件系统\" class=\"headerlink\" title=\"组件系统\"></a>组件系统</h1><h2 id=\"什么是组件？\"><a href=\"#什么是组件？\" class=\"headerlink\" title=\"什么是组件？\"></a>什么是组件？</h2><blockquote>\n<p>组件（Component）是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素， Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 is 特性扩展。</p>\n</blockquote>\n<h2 id=\"使用组件\"><a href=\"#使用组件\" class=\"headerlink\" title=\"使用组件\"></a>使用组件</h2><h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p>之前还说过，我们可以通过一下方式创建一个Vue实例：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    <span class=\"attr\">el</span>: <span class=\"string\">'#some-element'</span>,</div><div class=\"line\">    <span class=\"comment\">// 选项</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>要注册一个全局组件，你可以使用 Vue.component(tagName, options)。 例如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</div><div class=\"line\">        <span class=\"comment\">// 选项</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><strong>对于自定义标签名，Vue.js 不强制要求遵循 W3C规则 （小写，并且包含一个短杠），尽管遵循这个规则比较好。</strong><br><a id=\"more\"></a><br>组件在注册之后，便可以在父实例的模块中以自定义元素 <my-component></my-component> 的形式使用。要确保在初始化根实例 之前 注册了组件：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 注册</span></div><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 创建根实例</span></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    <span class=\"attr\">el</span>: <span class=\"string\">'#example'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>渲染为：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>A custom component!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"局部注册\"><a href=\"#局部注册\" class=\"headerlink\" title=\"局部注册\"></a>局部注册</h3><p>不必在全局注册每个组件。通过使用组件实例选项注册，可以使组件仅在另一个实例/组件的作用域中可用：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Child = &#123;</div><div class=\"line\"><span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">components: &#123;</div><div class=\"line\">    <span class=\"comment\">// &lt;my-component&gt; 将只在父模板可用</span></div><div class=\"line\">    <span class=\"string\">'my-component'</span>: Child</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这种封装也适用于其它可注册的 Vue 功能，如指令。</p>\n</blockquote>\n<h3 id=\"DOM模型解析说明\"><a href=\"#DOM模型解析说明\" class=\"headerlink\" title=\"DOM模型解析说明\"></a>DOM模型解析说明</h3><p>当使用 DOM 作为模版时（例如，将 el 选项挂载到一个已存在的元素上）, 你会受到 HTML 的一些限制，因为 Vue 只有在浏览器解析和标准化 HTML 后才能获取模版内容。尤其像这些元素 <ul> ，<ol>，<table> ，<select> 限制了能被它包裹的元素， 而一些像 <option> 这样的元素只能出现在某些其它元素内部。<br>在自定义组件中使用这些受限制的元素时会导致一些问题，例如：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-row</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">my-row</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div></pre></td></tr></table></figure></option></select></table></ol></ul></p>\n<blockquote>\n<p>自定义组件 <my-row> 被认为是无效的内容，因此在渲染的时候会导致错误。变通的方案是使用特殊的 is 属性：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;table&gt;</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">is</span>=<span class=\"string\">\"my-row\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></div><div class=\"line\">&lt;<span class=\"regexp\">/table&gt;</span></div></pre></td></tr></table></figure></my-row></p>\n</blockquote>\n<p><strong>应当注意，如果您使用来自以下来源之一的字符串模板，这些限制将不适用：</strong></p>\n<blockquote>\n<ul>\n<li>&lt; script type=”text/x-template”&gt;</li>\n<li>JavaScript内联模版字符串</li>\n<li>.vue 组件</li>\n</ul>\n</blockquote>\n<p>因此，有必要的话请使用字符串模版。</p>\n<h3 id=\"data必须是函数\"><a href=\"#data必须是函数\" class=\"headerlink\" title=\"data必须是函数\"></a>data必须是函数</h3><p>通过Vue构造器传入的各种选项大多数都可以在组件里用。 data 是一个例外，它必须是函数。 实际上，如果你这么做：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">'&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;'</span>,</div><div class=\"line\">    <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">'hello'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>那么 Vue 会停止，并在控制台发出警告，告诉你在组件中 data 必须是一个函数。理解这种规则的存在意义很有帮助，让我们假设用如下方式来绕开Vue的警告：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-2\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">simple-counter</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">simple-counter</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">simple-counter</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">simple-counter</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">simple-counter</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">simple-counter</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data = &#123; <span class=\"attr\">counter</span>: <span class=\"number\">0</span> &#125;</div><div class=\"line\">Vue.component(<span class=\"string\">'simple-counter'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">'&lt;button v-on:click=\"counter += 1\"&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt;'</span>,</div><div class=\"line\">    <span class=\"comment\">// 技术上 data 的确是一个函数了，因此 Vue 不会警告，</span></div><div class=\"line\">    <span class=\"comment\">// 但是我们返回给每个组件的实例的却引用了同一个data对象</span></div><div class=\"line\">    data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> data</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    <span class=\"attr\">el</span>: <span class=\"string\">'#example-2'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>由于这三个组件共享了同一个 data ， 因此增加一个 counter 会影响所有组件！这不对。我们可以通过为每个组件返回全新的 data 对象来解决这个问题：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">counter</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在每个 counter 都有它自己内部的状态了</p>\n<h3 id=\"构成组件\"><a href=\"#构成组件\" class=\"headerlink\" title=\"构成组件\"></a>构成组件</h3><p>组件意味着协同工作，通常父子组件会是这样的关系：组件 A 在它的模版中使用了组件 B 。它们之间必然需要相互通信：父组件要给子组件传递数据，子组件需要将它内部发生的事情告知给父组件。然而，在一个良好定义的接口中尽可能将父子组件解耦是很重要的。这保证了每个组件可以在相对隔离的环境中书写和理解，也大幅提高了组件的可维护性和可重用性。<br>在 Vue.js 中，父子组件的关系可以总结为 <strong>props down, events up</strong> 。父组件通过 <strong>props</strong> 向下传递数据给子组件，子组件通过 <strong>events</strong> 给父组件发送消息。看看它们是怎么工作的。<br><img src=\"https://anhaoran.github.io/ImageServer/Vue/props-events.png\" alt=\"\"></p>\n<h2 id=\"Prop\"><a href=\"#Prop\" class=\"headerlink\" title=\"Prop\"></a>Prop</h2><h3 id=\"使用Prop传递数据\"><a href=\"#使用Prop传递数据\" class=\"headerlink\" title=\"使用Prop传递数据\"></a>使用Prop传递数据</h3><p>组件实例的作用域是<strong>孤立的。</strong>这意味着不能(也不应该)在子组件的模板内直接引用父组件的数据。要让子组件使用父组件的数据，我们需要通过子组件的props选项。<br>子组件要显式地用 props 选项声明它期待获得的数据：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'child'</span>, &#123;</div><div class=\"line\"><span class=\"comment\">// 声明 props</span></div><div class=\"line\">props: [<span class=\"string\">'message'</span>],</div><div class=\"line\"><span class=\"comment\">// 就像 data 一样，prop 可以用在模板内</span></div><div class=\"line\"><span class=\"comment\">// 同样也可以在 vm 实例中像 “this.message” 这样使用</span></div><div class=\"line\">template: <span class=\"string\">'&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>然后我们可以这样向它传入一个普通字符串：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">message</span>=<span class=\"string\">\"hello!\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"camelCase-vs-kebab-case\"><a href=\"#camelCase-vs-kebab-case\" class=\"headerlink\" title=\"camelCase vs. kebab-case\"></a>camelCase vs. kebab-case</h3><p>HTML 特性是不区分大小写的。所以，当使用的不是字符串模版，camelCased (驼峰式) 命名的 prop 需要转换为相对应的 kebab-case (短横线隔开式) 命名：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'child'</span>, &#123;</div><div class=\"line\">  <span class=\"comment\">// camelCase in JavaScript</span></div><div class=\"line\">  props: [<span class=\"string\">'myMessage'</span>],</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;span&gt;&#123;&#123; myMessage &#125;&#125;&lt;/span&gt;'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- kebab-case in HTML --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">my-message</span>=<span class=\"string\">\"hello!\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>如果你使用字符串模版，则没有这些限制。</p>\n<h3 id=\"动态Prop\"><a href=\"#动态Prop\" class=\"headerlink\" title=\"动态Prop\"></a>动态Prop</h3><p>在模板中，要动态地绑定父组件的数据到子模板的props，与绑定到任何普通的HTML特性相类似，就是用 v-bind。每当父组件的数据变化时，该变化也会传导给子组件：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"parentMsg\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">v-bind:my-message</span>=<span class=\"string\">\"parentMsg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>使用 v-bind 的缩写语法通常更简单：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">:my-message</span>=<span class=\"string\">\"parentMsg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"字面量语法-vs-动态语法\"><a href=\"#字面量语法-vs-动态语法\" class=\"headerlink\" title=\"字面量语法-vs-动态语法\"></a>字面量语法-vs-动态语法</h3><p>初学者常犯的一个错误是使用字面量语法传递数值：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 传递了一个字符串 \"1\" --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">comp</span> <span class=\"attr\">some-prop</span>=<span class=\"string\">\"1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>因为它是一个字面 prop ，它的值是字符串 “1” 而不是number。如果想传递一个实际的number，需要使用 v-bind ，从而让它的值被当作 JavaScript 表达式计算：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 传递实际的 number --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">comp</span> <span class=\"attr\">v-bind:some-prop</span>=<span class=\"string\">\"1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"单项数据流\"><a href=\"#单项数据流\" class=\"headerlink\" title=\"单项数据流\"></a>单项数据流</h3><p>prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。这是为了防止子组件无意修改了父组件的状态——这会让应用的数据流难以理解。<br>另外，每次父组件更新时，子组件的所有 prop 都会更新为最新值。这意味着你不应该在子组件内部改变 prop 。如果你这么做了，Vue 会在控制台给出警告。<br>为什么我们会有修改prop中数据的冲动呢？通常是这两种原因：</p>\n<blockquote>\n<ul>\n<li>prop 作为初始值传入后，子组件想把它当作局部数据来用；</li>\n<li>prop 作为初始值传入，由子组件处理成其它数据输出。</li>\n</ul>\n</blockquote>\n<p>对这两种原因，正确的应对方式是：<br>1.定义一个局部变量，并用 prop 的值初始化它：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">props: [<span class=\"string\">'initialCounter'</span>],</div><div class=\"line\"><span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">counter</span>: <span class=\"keyword\">this</span>.initialCounter &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2.定义一个计算属性，处理 prop 的值并返回。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">props: [<span class=\"string\">'size'</span>],</div><div class=\"line\"><span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">normalizedSize</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.size.trim().toLowerCase()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意在 JavaScript 中对象和数组是引用类型，指向同一个内存空间，如果 prop 是一个对象或数组，在子组件内部改变它<strong>会影响</strong>父组件的状态。</p>\n</blockquote>\n<h3 id=\"Prop验证\"><a href=\"#Prop验证\" class=\"headerlink\" title=\"Prop验证\"></a>Prop验证</h3><p>我们可以为组件的 props 指定验证规格。如果传入的数据不符合规格，Vue 会发出警告。当组件给其他人使用时，这很有用。<br>要指定验证规格，需要用对象的形式，而不能用字符串数组：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'example'</span>, &#123;</div><div class=\"line\">        <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">            <span class=\"comment\">// 基础类型检测 （`null` 意思是任何类型都可以）</span></div><div class=\"line\">            propA: <span class=\"built_in\">Number</span>,</div><div class=\"line\">            <span class=\"comment\">// 多种类型</span></div><div class=\"line\">            propB: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>],</div><div class=\"line\">            <span class=\"comment\">// 必传且是字符串</span></div><div class=\"line\">            propC: &#123;</div><div class=\"line\">            <span class=\"attr\">type</span>: <span class=\"built_in\">String</span>,</div><div class=\"line\">            <span class=\"attr\">required</span>: <span class=\"literal\">true</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"comment\">// 数字，有默认值</span></div><div class=\"line\">            propD: &#123;</div><div class=\"line\">            <span class=\"attr\">type</span>: <span class=\"built_in\">Number</span>,</div><div class=\"line\">            <span class=\"attr\">default</span>: <span class=\"number\">100</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"comment\">// 数组／对象的默认值应当由一个工厂函数返回</span></div><div class=\"line\">            propE: &#123;</div><div class=\"line\">            <span class=\"attr\">type</span>: <span class=\"built_in\">Object</span>,</div><div class=\"line\">            <span class=\"attr\">default</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> &#123; <span class=\"attr\">message</span>: <span class=\"string\">'hello'</span> &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"comment\">// 自定义验证函数</span></div><div class=\"line\">            propF: &#123;</div><div class=\"line\">            <span class=\"attr\">validator</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> value &gt; <span class=\"number\">10</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure></p>\n<p>type 可以是下面原生构造器：</p>\n<ul>\n<li>String</li>\n<li>Number</li>\n<li>Boolean</li>\n<li>Function</li>\n<li>Object</li>\n<li>Array<br>type 也可以是一个自定义构造器函数，使用 instanceof 检测。<br>当 prop 验证失败，Vue会在抛出警告 (如果使用的是开发版本)。<h2 id=\"自定义事件\"><a href=\"#自定义事件\" class=\"headerlink\" title=\"自定义事件\"></a>自定义事件</h2>我们知道，父组件是使用 props 传递数据给子组件，但如果子组件要把数据传递回去，应该怎样做？那就是自定义事件！<h3 id=\"使用-v-on-绑定自定义事件\"><a href=\"#使用-v-on-绑定自定义事件\" class=\"headerlink\" title=\"使用-v-on-绑定自定义事件\"></a>使用-v-on-绑定自定义事件</h3>每个 Vue 实例都实现了事件接口(Events interface)，即：<br>使用 $on(eventName) 监听事件<br>使用 $emit(eventName) 触发事件<blockquote>\n<p>Vue的事件系统分离自浏览器的EventTarget API。尽管它们的运行类似，但是$on 和 $emit 不是addEventListener 和 dispatchEvent 的别名。</p>\n</blockquote>\n</li>\n</ul>\n<p>另外，父组件可以在使用子组件的地方直接用 v-on 来监听子组件触发的事件。</p>\n<blockquote>\n<p>不能用$on侦听子组件抛出的事件，而必须在模板里直接用v-on绑定，就像以下的例子：</p>\n</blockquote>\n<p>下面是一个例子：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"counter-event-example\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; total &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button-counter</span> <span class=\"attr\">v-on:increment</span>=<span class=\"string\">\"incrementTotal\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button-counter</span> <span class=\"attr\">v-on:increment</span>=<span class=\"string\">\"incrementTotal\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'button-counter'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">'&lt;button v-on:click=\"increment\"&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt;'</span>,</div><div class=\"line\">    <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">counter</span>: <span class=\"number\">0</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">increment</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.counter += <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'increment'</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#125;)</div><div class=\"line\">    <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    <span class=\"attr\">el</span>: <span class=\"string\">'#counter-event-example'</span>,</div><div class=\"line\">    <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">total</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">incrementTotal</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.total += <span class=\"number\">1</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>在本例中，子组件已经和它外部完全解耦了。它所做的只是报告自己的内部事件，至于父组件是否关心则与它无关。留意到这一点很重要。<br>给组件绑定原生事件</p>\n<p>有时候，你可能想在某个组件的根元素上监听一个原生事件。可以使用 .native 修饰 v-on 。例如：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-on:click.native</span>=<span class=\"string\">\"doTheThing\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"sync-修饰符\"><a href=\"#sync-修饰符\" class=\"headerlink\" title=\"sync-修饰符\"></a>sync-修饰符</h3><blockquote>\n<p>2.3.0+</p>\n</blockquote>\n<p>在一些情况下，我们可能会需要对一个 prop 进行『双向绑定』。事实上，这正是 Vue 1.x 中的 <code>.sync</code>修饰符所提供的功能。当一个子组件改变了一个 prop 的值时，这个变化也会同步到父组件中所绑定的值。这很方便，但也会导致问题，因为它破坏了『单向数据流』的假设。由于子组件改变 prop 的代码和普通的状态改动代码毫无区别，当光看子组件的代码时，你完全不知道它何时悄悄地改变了父组件的状态。这在 debug 复杂结构的应用时会带来很高的维护成本。<br>上面所说的正是我们在 2.0 中移除 <code>.sync</code> 的理由。但是在 2.0 发布之后的实际应用中，我们发现 .sync 还是有其适用之处，比如在开发可复用的组件库时。我们需要做的只是<strong>让子组件改变父组件状态的代码更容易被区分。</strong><br>在 2.3 我们重新引入了 <code>.sync</code> 修饰符，但是这次它只是作为一个编译时的语法糖存在。它会被扩展为一个自动更新父组件属性的 v-on 侦听器。<br>如下代码<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">comp</span> <span class=\"attr\">:foo.sync</span>=<span class=\"string\">\"bar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>会被扩展为：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">comp</span> <span class=\"attr\">:foo</span>=<span class=\"string\">\"bar\"</span> @<span class=\"attr\">update:foo</span>=<span class=\"string\">\"val =&gt; bar = val\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>当子组件需要更新 foo 的值时，它需要显式地触发一个更新事件：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.$emit(<span class=\"string\">'update:foo'</span>, newValue)</div></pre></td></tr></table></figure></p>\n<h3 id=\"使用自定义事件的表单输入组件\"><a href=\"#使用自定义事件的表单输入组件\" class=\"headerlink\" title=\"使用自定义事件的表单输入组件\"></a>使用自定义事件的表单输入组件</h3><p>自定义事件可以用来创建自定义的表单输入组件，使用 <code>v-model</code> 来进行数据双向绑定。看看这个：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"something\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这不过是以下示例的语法糖：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"something\"</span> <span class=\"attr\">v-on:input</span>=<span class=\"string\">\"something = $event.target.value\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>所以在组件中使用时，它相当于下面的简写：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">custom-input</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"something\"</span> <span class=\"attr\">v-on:input</span>=<span class=\"string\">\"something = arguments[0]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">custom-input</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>所以要让组件的 v-model 生效，它必须：<br>接受一个 value 属性<br>在有新的 value 时触发 input 事件<br>我们来看一个非常简单的货币输入的自定义控件：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">currency-input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"price\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">currency-input</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'currency-input'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'\\</span></div><div class=\"line\">    &lt;span&gt;\\</div><div class=\"line\">      $\\</div><div class=\"line\">      &lt;input\\</div><div class=\"line\">        ref=\"input\"\\</div><div class=\"line\">        v-bind:value=\"value\"\\</div><div class=\"line\">        v-on:input=\"updateValue($event.target.value)\"\\</div><div class=\"line\">      &gt;\\</div><div class=\"line\">    &lt;/span&gt;\\</div><div class=\"line\">  ',</div><div class=\"line\">  <span class=\"attr\">props</span>: [<span class=\"string\">'value'</span>],</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// 不是直接更新值，而是使用此方法来对输入值进行格式化和位数限制</span></div><div class=\"line\">    updateValue: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> formattedValue = value</div><div class=\"line\">        <span class=\"comment\">// 删除两侧的空格符</span></div><div class=\"line\">        .trim()</div><div class=\"line\">        <span class=\"comment\">// 保留 2 小数位</span></div><div class=\"line\">        .slice(<span class=\"number\">0</span>, value.indexOf(<span class=\"string\">'.'</span>) + <span class=\"number\">3</span>)</div><div class=\"line\">      <span class=\"comment\">// 如果值不统一，手动覆盖以保持一致</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (formattedValue !== value) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.$refs.input.value = formattedValue</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">// 通过 input 事件发出数值</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'input'</span>, <span class=\"built_in\">Number</span>(formattedValue))</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>当然，上面的例子是比较幼稚的。 比如，用户甚至可以输入多个小数点或句号 - 哦哦！因此我们需要一个更有意义的例子，下面是一个更加完善的货币过滤器：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue/dist/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.rawgit.com/chrisvfritz/5f0a639590d6e648933416f90ba7ae4e/raw/974aa47f8f9c5361c5233bd56be37db8ed765a09/currency-validator.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">currency-input</span> </span></div><div class=\"line\">    <span class=\"attr\">label</span>=<span class=\"string\">\"Price\"</span> </div><div class=\"line\">    <span class=\"attr\">v-model</span>=<span class=\"string\">\"price\"</span></div><div class=\"line\">  &gt;<span class=\"tag\">&lt;/<span class=\"name\">currency-input</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">currency-input</span> </span></div><div class=\"line\">    <span class=\"attr\">label</span>=<span class=\"string\">\"Shipping\"</span> </div><div class=\"line\">    <span class=\"attr\">v-model</span>=<span class=\"string\">\"shipping\"</span></div><div class=\"line\">  &gt;<span class=\"tag\">&lt;/<span class=\"name\">currency-input</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">currency-input</span> </span></div><div class=\"line\">    <span class=\"attr\">label</span>=<span class=\"string\">\"Handling\"</span> </div><div class=\"line\">    <span class=\"attr\">v-model</span>=<span class=\"string\">\"handling\"</span></div><div class=\"line\">  &gt;<span class=\"tag\">&lt;/<span class=\"name\">currency-input</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">currency-input</span> </span></div><div class=\"line\">    <span class=\"attr\">label</span>=<span class=\"string\">\"Discount\"</span> </div><div class=\"line\">    <span class=\"attr\">v-model</span>=<span class=\"string\">\"discount\"</span></div><div class=\"line\">  &gt;<span class=\"tag\">&lt;/<span class=\"name\">currency-input</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Total: $&#123;&#123; total &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'currency-input'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'\\</span></div><div class=\"line\">    &lt;div&gt;\\</div><div class=\"line\">      &lt;label v-if=\"label\"&gt;&#123;&#123; label &#125;&#125;&lt;/label&gt;\\</div><div class=\"line\">      $\\</div><div class=\"line\">      &lt;input\\</div><div class=\"line\">        ref=\"input\"\\</div><div class=\"line\">        v-bind:value=\"value\"\\</div><div class=\"line\">        v-on:input=\"updateValue($event.target.value)\"\\</div><div class=\"line\">        v-on:focus=\"selectAll\"\\</div><div class=\"line\">        v-on:blur=\"formatValue\"\\</div><div class=\"line\">      &gt;\\</div><div class=\"line\">    &lt;/div&gt;\\</div><div class=\"line\">  ',</div><div class=\"line\">  <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">value</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">Number</span>,</div><div class=\"line\">      <span class=\"attr\">default</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">label</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">String</span>,</div><div class=\"line\">      <span class=\"attr\">default</span>: <span class=\"string\">''</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">mounted</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.formatValue()</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">updateValue</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> result = currencyValidator.parse(value, <span class=\"keyword\">this</span>.value)</div><div class=\"line\">      <span class=\"keyword\">if</span> (result.warning) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.$refs.input.value = result.value</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'input'</span>, result.value)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">formatValue</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.$refs.input.value = currencyValidator.format(<span class=\"keyword\">this</span>.value)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">selectAll</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// Workaround for Safari bug</span></div><div class=\"line\">      <span class=\"comment\">// http://stackoverflow.com/questions/1269722/selecting-text-on-focus-using-jquery-not-working-in-safari-and-chrome</span></div><div class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      \tevent.target.select()</div><div class=\"line\">      &#125;, <span class=\"number\">0</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">price</span>: <span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"attr\">shipping</span>: <span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"attr\">handling</span>: <span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"attr\">discount</span>: <span class=\"number\">0</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">total</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> ((</div><div class=\"line\">        <span class=\"keyword\">this</span>.price * <span class=\"number\">100</span> + </div><div class=\"line\">        <span class=\"keyword\">this</span>.shipping * <span class=\"number\">100</span> + </div><div class=\"line\">        <span class=\"keyword\">this</span>.handling * <span class=\"number\">100</span> - </div><div class=\"line\">        <span class=\"keyword\">this</span>.discount * <span class=\"number\">100</span></div><div class=\"line\">      ) / <span class=\"number\">100</span>).toFixed(<span class=\"number\">2</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<blockquote>\n<p>事件接口不仅仅可以用来连接组件内部的表单输入，也很容易集成你自己创造的输入类型。想象一下：</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">voice-recognizer</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"question\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">voice-recognizer</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">webcam-gesture-reader</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"gesture\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">webcam-gesture-reader</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">webcam-retinal-scanner</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"retinalImage\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">webcam-retinal-scanner</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"非父子组件通信\"><a href=\"#非父子组件通信\" class=\"headerlink\" title=\"非父子组件通信\"></a>非父子组件通信</h3><p>有时候两个组件也需要通信(非父子关系)。在简单的场景下，可以使用一个空的 Vue 实例作为中央事件总线：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> bus = <span class=\"keyword\">new</span> Vue()</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 触发组件 A 中的事件</span></div><div class=\"line\">bus.$emit(<span class=\"string\">'id-selected'</span>, <span class=\"number\">1</span>)</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 在组件 B 创建的钩子中监听事件</span></div><div class=\"line\">bus.$on(<span class=\"string\">'id-selected'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>在复杂的情况下，我们应该考虑使用专门的 状态管理模式.</p>\n<h2 id=\"使用-Slot-分发内容\"><a href=\"#使用-Slot-分发内容\" class=\"headerlink\" title=\"使用 Slot 分发内容\"></a>使用 Slot 分发内容</h2><p>在使用组件时，我们常常要像这样组合它们：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-header</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-footer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-footer</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>注意两点：<br>1.<app> 组件不知道它的挂载点会有什么内容。挂载点的内容是由<app>的父组件决定的。<br>2.<app> 组件很可能有它自己的模版。<br>为了让组件可以组合，我们需要一种方式来混合父组件的内容与子组件自己的模板。这个过程被称为 内容分发 (或 “transclusion” 如果你熟悉 Angular)。Vue.js 实现了一个内容分发 API ，参照了当前 Web 组件规范草案，使用特殊的 <slot> 元素作为原始内容的插槽。</slot></app></app></app></p>\n<h3 id=\"编译作用域\"><a href=\"#编译作用域\" class=\"headerlink\" title=\"编译作用域\"></a>编译作用域</h3><p>在深入内容分发 API 之前，我们先明确内容在哪个作用域里编译。假定模板为：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child-component</span>&gt;</span></div><div class=\"line\">  &#123;&#123; message &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">child-component</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><code>message</code> 应该绑定到父组件的数据，还是绑定到子组件的数据？答案是父组件。组件作用域简单地说是：<br>父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译。<br>一个常见错误是试图在父组件模板内将一个指令绑定到子组件的属性/方法：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 无效 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child-component</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"someChildProperty\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-component</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>假定 <code>someChildProperty</code> 是子组件的属性，上例不会如预期那样工作。父组件模板不应该知道子组件的状态。<br>如果要绑定作用域内的指令到一个组件的根节点，你应当在组件自己的模板上做：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'child-component'</span>, &#123;</div><div class=\"line\">  <span class=\"comment\">// 有效，因为是在正确的作用域内</span></div><div class=\"line\">  template: <span class=\"string\">'&lt;div v-show=\"someChildProperty\"&gt;Child&lt;/div&gt;'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">someChildProperty</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>类似地，分发内容是在父作用域内编译。</p>\n<h3 id=\"单个-Slot\"><a href=\"#单个-Slot\" class=\"headerlink\" title=\"单个-Slot\"></a>单个-Slot</h3><p>除非子组件模板包含至少一个 <code>&lt;slot&gt;</code> 插口，否则父组件的内容将会被丢弃。当子组件模板只有一个没有属性的 slot 时，父组件整个内容片段将插入到 slot 所在的 DOM 位置，并替换掉 slot 标签本身。<br>最初在 <code>&lt;slot&gt;</code> 标签中的任何内容都被视为<em>备用内容</em>。备用内容在子组件的作用域内编译，并且只有在宿主元素为空，且没有要插入的内容时才显示备用内容。<br>假定 <code>my-component</code> 组件有下面模板：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>我是子组件的标题<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">    只有在没有要分发的内容时才会显示。</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>父组件模版：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我是父组件的标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一些初始内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是更多的初始内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>渲染结果：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我是父组件的标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>我是子组件的标题<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一些初始内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是更多的初始内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"具名-Slot\"><a href=\"#具名-Slot\" class=\"headerlink\" title=\"具名-Slot\"></a>具名-Slot</h3><p><code>&lt;slot&gt;</code> 元素可以用一个特殊的属性 <code>name</code> 来配置如何分发内容。多个 slot 可以有不同的名字。具名 slot 将匹配内容片段中有对应 <code>slot</code> 特性的元素。<br>仍然可以有一个匿名 slot ，它是<em>默认 slot</em> ，作为找不到匹配的内容片段的备用插槽。如果没有默认的 slot ，这些找不到匹配的内容片段将被抛弃。<br>例如，假定我们有一个 <code>app-layout</code> 组件，它的模板为：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"header\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"footer\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>父组件模版：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-layout</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"header\"</span>&gt;</span>这里可能是一个页面标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>主要内容的一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>另一个主要段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"footer\"</span>&gt;</span>这里有一些联系信息<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app-layout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>渲染结果为：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>这里可能是一个页面标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>主要内容的一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>另一个主要段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这里有一些联系信息<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在组合组件时，内容分发 API 是非常有用的机制。</p>\n<h3 id=\"作用域插槽\"><a href=\"#作用域插槽\" class=\"headerlink\" title=\"作用域插槽\"></a>作用域插槽</h3><blockquote>\n<p>2.1.0新增</p>\n</blockquote>\n<p>作用域插槽是一种特殊类型的插槽，用作使用一个（能够传递数据到）可重用模板替换已渲染元素。<br>在子组件中，只需将数据传递到插槽，就像你将 prop 传递给组件一样：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">text</span>=<span class=\"string\">\"hello from child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在父级中，具有特殊属性 <code>scope</code> 的 <code>&lt;template&gt;</code> 元素，表示它是作用域插槽的模板。<code>scope</code> 的值对应一个临时变量名，此变量接收从子组件中传递的 prop 对象：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"props\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>hello from parent<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; props.text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>如果我们渲染以上结果，得到的输出会是：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>hello from parent<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>hello from child<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>作用域插槽更具代表性的用例是列表组件，允许组件自定义应该如何渲染列表每一项：</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"组件系统\"><a href=\"#组件系统\" class=\"headerlink\" title=\"组件系统\"></a>组件系统</h1><h2 id=\"什么是组件？\"><a href=\"#什么是组件？\" class=\"headerlink\" title=\"什么是组件？\"></a>什么是组件？</h2><blockquote>\n<p>组件（Component）是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素， Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 is 特性扩展。</p>\n</blockquote>\n<h2 id=\"使用组件\"><a href=\"#使用组件\" class=\"headerlink\" title=\"使用组件\"></a>使用组件</h2><h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p>之前还说过，我们可以通过一下方式创建一个Vue实例：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    <span class=\"attr\">el</span>: <span class=\"string\">'#some-element'</span>,</div><div class=\"line\">    <span class=\"comment\">// 选项</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>要注册一个全局组件，你可以使用 Vue.component(tagName, options)。 例如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</div><div class=\"line\">        <span class=\"comment\">// 选项</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><strong>对于自定义标签名，Vue.js 不强制要求遵循 W3C规则 （小写，并且包含一个短杠），尽管遵循这个规则比较好。</strong><br>","more":"<br>组件在注册之后，便可以在父实例的模块中以自定义元素 <my-component></my-component> 的形式使用。要确保在初始化根实例 之前 注册了组件：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 注册</span></div><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 创建根实例</span></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    <span class=\"attr\">el</span>: <span class=\"string\">'#example'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>渲染为：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>A custom component!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"局部注册\"><a href=\"#局部注册\" class=\"headerlink\" title=\"局部注册\"></a>局部注册</h3><p>不必在全局注册每个组件。通过使用组件实例选项注册，可以使组件仅在另一个实例/组件的作用域中可用：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Child = &#123;</div><div class=\"line\"><span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">components: &#123;</div><div class=\"line\">    <span class=\"comment\">// &lt;my-component&gt; 将只在父模板可用</span></div><div class=\"line\">    <span class=\"string\">'my-component'</span>: Child</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这种封装也适用于其它可注册的 Vue 功能，如指令。</p>\n</blockquote>\n<h3 id=\"DOM模型解析说明\"><a href=\"#DOM模型解析说明\" class=\"headerlink\" title=\"DOM模型解析说明\"></a>DOM模型解析说明</h3><p>当使用 DOM 作为模版时（例如，将 el 选项挂载到一个已存在的元素上）, 你会受到 HTML 的一些限制，因为 Vue 只有在浏览器解析和标准化 HTML 后才能获取模版内容。尤其像这些元素 <ul> ，<ol>，<table> ，<select> 限制了能被它包裹的元素， 而一些像 <option> 这样的元素只能出现在某些其它元素内部。<br>在自定义组件中使用这些受限制的元素时会导致一些问题，例如：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-row</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">my-row</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div></pre></td></tr></table></figure></option></select></table></ol></ul></p>\n<blockquote>\n<p>自定义组件 <my-row> 被认为是无效的内容，因此在渲染的时候会导致错误。变通的方案是使用特殊的 is 属性：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;table&gt;</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">is</span>=<span class=\"string\">\"my-row\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></div><div class=\"line\">&lt;<span class=\"regexp\">/table&gt;</span></div></pre></td></tr></table></figure></my-row></p>\n</blockquote>\n<p><strong>应当注意，如果您使用来自以下来源之一的字符串模板，这些限制将不适用：</strong></p>\n<blockquote>\n<ul>\n<li>&lt; script type=”text/x-template”&gt;</li>\n<li>JavaScript内联模版字符串</li>\n<li>.vue 组件</li>\n</ul>\n</blockquote>\n<p>因此，有必要的话请使用字符串模版。</p>\n<h3 id=\"data必须是函数\"><a href=\"#data必须是函数\" class=\"headerlink\" title=\"data必须是函数\"></a>data必须是函数</h3><p>通过Vue构造器传入的各种选项大多数都可以在组件里用。 data 是一个例外，它必须是函数。 实际上，如果你这么做：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">'&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;'</span>,</div><div class=\"line\">    <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">'hello'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>那么 Vue 会停止，并在控制台发出警告，告诉你在组件中 data 必须是一个函数。理解这种规则的存在意义很有帮助，让我们假设用如下方式来绕开Vue的警告：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-2\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">simple-counter</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">simple-counter</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">simple-counter</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">simple-counter</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">simple-counter</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">simple-counter</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data = &#123; <span class=\"attr\">counter</span>: <span class=\"number\">0</span> &#125;</div><div class=\"line\">Vue.component(<span class=\"string\">'simple-counter'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">'&lt;button v-on:click=\"counter += 1\"&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt;'</span>,</div><div class=\"line\">    <span class=\"comment\">// 技术上 data 的确是一个函数了，因此 Vue 不会警告，</span></div><div class=\"line\">    <span class=\"comment\">// 但是我们返回给每个组件的实例的却引用了同一个data对象</span></div><div class=\"line\">    data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> data</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    <span class=\"attr\">el</span>: <span class=\"string\">'#example-2'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>由于这三个组件共享了同一个 data ， 因此增加一个 counter 会影响所有组件！这不对。我们可以通过为每个组件返回全新的 data 对象来解决这个问题：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">counter</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在每个 counter 都有它自己内部的状态了</p>\n<h3 id=\"构成组件\"><a href=\"#构成组件\" class=\"headerlink\" title=\"构成组件\"></a>构成组件</h3><p>组件意味着协同工作，通常父子组件会是这样的关系：组件 A 在它的模版中使用了组件 B 。它们之间必然需要相互通信：父组件要给子组件传递数据，子组件需要将它内部发生的事情告知给父组件。然而，在一个良好定义的接口中尽可能将父子组件解耦是很重要的。这保证了每个组件可以在相对隔离的环境中书写和理解，也大幅提高了组件的可维护性和可重用性。<br>在 Vue.js 中，父子组件的关系可以总结为 <strong>props down, events up</strong> 。父组件通过 <strong>props</strong> 向下传递数据给子组件，子组件通过 <strong>events</strong> 给父组件发送消息。看看它们是怎么工作的。<br><img src=\"https://anhaoran.github.io/ImageServer/Vue/props-events.png\" alt=\"\"></p>\n<h2 id=\"Prop\"><a href=\"#Prop\" class=\"headerlink\" title=\"Prop\"></a>Prop</h2><h3 id=\"使用Prop传递数据\"><a href=\"#使用Prop传递数据\" class=\"headerlink\" title=\"使用Prop传递数据\"></a>使用Prop传递数据</h3><p>组件实例的作用域是<strong>孤立的。</strong>这意味着不能(也不应该)在子组件的模板内直接引用父组件的数据。要让子组件使用父组件的数据，我们需要通过子组件的props选项。<br>子组件要显式地用 props 选项声明它期待获得的数据：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'child'</span>, &#123;</div><div class=\"line\"><span class=\"comment\">// 声明 props</span></div><div class=\"line\">props: [<span class=\"string\">'message'</span>],</div><div class=\"line\"><span class=\"comment\">// 就像 data 一样，prop 可以用在模板内</span></div><div class=\"line\"><span class=\"comment\">// 同样也可以在 vm 实例中像 “this.message” 这样使用</span></div><div class=\"line\">template: <span class=\"string\">'&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>然后我们可以这样向它传入一个普通字符串：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">message</span>=<span class=\"string\">\"hello!\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"camelCase-vs-kebab-case\"><a href=\"#camelCase-vs-kebab-case\" class=\"headerlink\" title=\"camelCase vs. kebab-case\"></a>camelCase vs. kebab-case</h3><p>HTML 特性是不区分大小写的。所以，当使用的不是字符串模版，camelCased (驼峰式) 命名的 prop 需要转换为相对应的 kebab-case (短横线隔开式) 命名：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'child'</span>, &#123;</div><div class=\"line\">  <span class=\"comment\">// camelCase in JavaScript</span></div><div class=\"line\">  props: [<span class=\"string\">'myMessage'</span>],</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;span&gt;&#123;&#123; myMessage &#125;&#125;&lt;/span&gt;'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- kebab-case in HTML --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">my-message</span>=<span class=\"string\">\"hello!\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>如果你使用字符串模版，则没有这些限制。</p>\n<h3 id=\"动态Prop\"><a href=\"#动态Prop\" class=\"headerlink\" title=\"动态Prop\"></a>动态Prop</h3><p>在模板中，要动态地绑定父组件的数据到子模板的props，与绑定到任何普通的HTML特性相类似，就是用 v-bind。每当父组件的数据变化时，该变化也会传导给子组件：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"parentMsg\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">v-bind:my-message</span>=<span class=\"string\">\"parentMsg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>使用 v-bind 的缩写语法通常更简单：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">:my-message</span>=<span class=\"string\">\"parentMsg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"字面量语法-vs-动态语法\"><a href=\"#字面量语法-vs-动态语法\" class=\"headerlink\" title=\"字面量语法-vs-动态语法\"></a>字面量语法-vs-动态语法</h3><p>初学者常犯的一个错误是使用字面量语法传递数值：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 传递了一个字符串 \"1\" --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">comp</span> <span class=\"attr\">some-prop</span>=<span class=\"string\">\"1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>因为它是一个字面 prop ，它的值是字符串 “1” 而不是number。如果想传递一个实际的number，需要使用 v-bind ，从而让它的值被当作 JavaScript 表达式计算：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 传递实际的 number --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">comp</span> <span class=\"attr\">v-bind:some-prop</span>=<span class=\"string\">\"1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"单项数据流\"><a href=\"#单项数据流\" class=\"headerlink\" title=\"单项数据流\"></a>单项数据流</h3><p>prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。这是为了防止子组件无意修改了父组件的状态——这会让应用的数据流难以理解。<br>另外，每次父组件更新时，子组件的所有 prop 都会更新为最新值。这意味着你不应该在子组件内部改变 prop 。如果你这么做了，Vue 会在控制台给出警告。<br>为什么我们会有修改prop中数据的冲动呢？通常是这两种原因：</p>\n<blockquote>\n<ul>\n<li>prop 作为初始值传入后，子组件想把它当作局部数据来用；</li>\n<li>prop 作为初始值传入，由子组件处理成其它数据输出。</li>\n</ul>\n</blockquote>\n<p>对这两种原因，正确的应对方式是：<br>1.定义一个局部变量，并用 prop 的值初始化它：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">props: [<span class=\"string\">'initialCounter'</span>],</div><div class=\"line\"><span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">counter</span>: <span class=\"keyword\">this</span>.initialCounter &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2.定义一个计算属性，处理 prop 的值并返回。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">props: [<span class=\"string\">'size'</span>],</div><div class=\"line\"><span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">normalizedSize</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.size.trim().toLowerCase()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意在 JavaScript 中对象和数组是引用类型，指向同一个内存空间，如果 prop 是一个对象或数组，在子组件内部改变它<strong>会影响</strong>父组件的状态。</p>\n</blockquote>\n<h3 id=\"Prop验证\"><a href=\"#Prop验证\" class=\"headerlink\" title=\"Prop验证\"></a>Prop验证</h3><p>我们可以为组件的 props 指定验证规格。如果传入的数据不符合规格，Vue 会发出警告。当组件给其他人使用时，这很有用。<br>要指定验证规格，需要用对象的形式，而不能用字符串数组：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'example'</span>, &#123;</div><div class=\"line\">        <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">            <span class=\"comment\">// 基础类型检测 （`null` 意思是任何类型都可以）</span></div><div class=\"line\">            propA: <span class=\"built_in\">Number</span>,</div><div class=\"line\">            <span class=\"comment\">// 多种类型</span></div><div class=\"line\">            propB: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>],</div><div class=\"line\">            <span class=\"comment\">// 必传且是字符串</span></div><div class=\"line\">            propC: &#123;</div><div class=\"line\">            <span class=\"attr\">type</span>: <span class=\"built_in\">String</span>,</div><div class=\"line\">            <span class=\"attr\">required</span>: <span class=\"literal\">true</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"comment\">// 数字，有默认值</span></div><div class=\"line\">            propD: &#123;</div><div class=\"line\">            <span class=\"attr\">type</span>: <span class=\"built_in\">Number</span>,</div><div class=\"line\">            <span class=\"attr\">default</span>: <span class=\"number\">100</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"comment\">// 数组／对象的默认值应当由一个工厂函数返回</span></div><div class=\"line\">            propE: &#123;</div><div class=\"line\">            <span class=\"attr\">type</span>: <span class=\"built_in\">Object</span>,</div><div class=\"line\">            <span class=\"attr\">default</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> &#123; <span class=\"attr\">message</span>: <span class=\"string\">'hello'</span> &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"comment\">// 自定义验证函数</span></div><div class=\"line\">            propF: &#123;</div><div class=\"line\">            <span class=\"attr\">validator</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> value &gt; <span class=\"number\">10</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure></p>\n<p>type 可以是下面原生构造器：</p>\n<ul>\n<li>String</li>\n<li>Number</li>\n<li>Boolean</li>\n<li>Function</li>\n<li>Object</li>\n<li>Array<br>type 也可以是一个自定义构造器函数，使用 instanceof 检测。<br>当 prop 验证失败，Vue会在抛出警告 (如果使用的是开发版本)。<h2 id=\"自定义事件\"><a href=\"#自定义事件\" class=\"headerlink\" title=\"自定义事件\"></a>自定义事件</h2>我们知道，父组件是使用 props 传递数据给子组件，但如果子组件要把数据传递回去，应该怎样做？那就是自定义事件！<h3 id=\"使用-v-on-绑定自定义事件\"><a href=\"#使用-v-on-绑定自定义事件\" class=\"headerlink\" title=\"使用-v-on-绑定自定义事件\"></a>使用-v-on-绑定自定义事件</h3>每个 Vue 实例都实现了事件接口(Events interface)，即：<br>使用 $on(eventName) 监听事件<br>使用 $emit(eventName) 触发事件<blockquote>\n<p>Vue的事件系统分离自浏览器的EventTarget API。尽管它们的运行类似，但是$on 和 $emit 不是addEventListener 和 dispatchEvent 的别名。</p>\n</blockquote>\n</li>\n</ul>\n<p>另外，父组件可以在使用子组件的地方直接用 v-on 来监听子组件触发的事件。</p>\n<blockquote>\n<p>不能用$on侦听子组件抛出的事件，而必须在模板里直接用v-on绑定，就像以下的例子：</p>\n</blockquote>\n<p>下面是一个例子：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"counter-event-example\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; total &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button-counter</span> <span class=\"attr\">v-on:increment</span>=<span class=\"string\">\"incrementTotal\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button-counter</span> <span class=\"attr\">v-on:increment</span>=<span class=\"string\">\"incrementTotal\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'button-counter'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">'&lt;button v-on:click=\"increment\"&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt;'</span>,</div><div class=\"line\">    <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">counter</span>: <span class=\"number\">0</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">increment</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.counter += <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'increment'</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#125;)</div><div class=\"line\">    <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    <span class=\"attr\">el</span>: <span class=\"string\">'#counter-event-example'</span>,</div><div class=\"line\">    <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">total</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">incrementTotal</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.total += <span class=\"number\">1</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>在本例中，子组件已经和它外部完全解耦了。它所做的只是报告自己的内部事件，至于父组件是否关心则与它无关。留意到这一点很重要。<br>给组件绑定原生事件</p>\n<p>有时候，你可能想在某个组件的根元素上监听一个原生事件。可以使用 .native 修饰 v-on 。例如：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-on:click.native</span>=<span class=\"string\">\"doTheThing\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"sync-修饰符\"><a href=\"#sync-修饰符\" class=\"headerlink\" title=\"sync-修饰符\"></a>sync-修饰符</h3><blockquote>\n<p>2.3.0+</p>\n</blockquote>\n<p>在一些情况下，我们可能会需要对一个 prop 进行『双向绑定』。事实上，这正是 Vue 1.x 中的 <code>.sync</code>修饰符所提供的功能。当一个子组件改变了一个 prop 的值时，这个变化也会同步到父组件中所绑定的值。这很方便，但也会导致问题，因为它破坏了『单向数据流』的假设。由于子组件改变 prop 的代码和普通的状态改动代码毫无区别，当光看子组件的代码时，你完全不知道它何时悄悄地改变了父组件的状态。这在 debug 复杂结构的应用时会带来很高的维护成本。<br>上面所说的正是我们在 2.0 中移除 <code>.sync</code> 的理由。但是在 2.0 发布之后的实际应用中，我们发现 .sync 还是有其适用之处，比如在开发可复用的组件库时。我们需要做的只是<strong>让子组件改变父组件状态的代码更容易被区分。</strong><br>在 2.3 我们重新引入了 <code>.sync</code> 修饰符，但是这次它只是作为一个编译时的语法糖存在。它会被扩展为一个自动更新父组件属性的 v-on 侦听器。<br>如下代码<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">comp</span> <span class=\"attr\">:foo.sync</span>=<span class=\"string\">\"bar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>会被扩展为：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">comp</span> <span class=\"attr\">:foo</span>=<span class=\"string\">\"bar\"</span> @<span class=\"attr\">update:foo</span>=<span class=\"string\">\"val =&gt; bar = val\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>当子组件需要更新 foo 的值时，它需要显式地触发一个更新事件：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.$emit(<span class=\"string\">'update:foo'</span>, newValue)</div></pre></td></tr></table></figure></p>\n<h3 id=\"使用自定义事件的表单输入组件\"><a href=\"#使用自定义事件的表单输入组件\" class=\"headerlink\" title=\"使用自定义事件的表单输入组件\"></a>使用自定义事件的表单输入组件</h3><p>自定义事件可以用来创建自定义的表单输入组件，使用 <code>v-model</code> 来进行数据双向绑定。看看这个：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"something\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这不过是以下示例的语法糖：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"something\"</span> <span class=\"attr\">v-on:input</span>=<span class=\"string\">\"something = $event.target.value\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>所以在组件中使用时，它相当于下面的简写：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">custom-input</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"something\"</span> <span class=\"attr\">v-on:input</span>=<span class=\"string\">\"something = arguments[0]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">custom-input</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>所以要让组件的 v-model 生效，它必须：<br>接受一个 value 属性<br>在有新的 value 时触发 input 事件<br>我们来看一个非常简单的货币输入的自定义控件：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">currency-input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"price\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">currency-input</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'currency-input'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'\\</span></div><div class=\"line\">    &lt;span&gt;\\</div><div class=\"line\">      $\\</div><div class=\"line\">      &lt;input\\</div><div class=\"line\">        ref=\"input\"\\</div><div class=\"line\">        v-bind:value=\"value\"\\</div><div class=\"line\">        v-on:input=\"updateValue($event.target.value)\"\\</div><div class=\"line\">      &gt;\\</div><div class=\"line\">    &lt;/span&gt;\\</div><div class=\"line\">  ',</div><div class=\"line\">  <span class=\"attr\">props</span>: [<span class=\"string\">'value'</span>],</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// 不是直接更新值，而是使用此方法来对输入值进行格式化和位数限制</span></div><div class=\"line\">    updateValue: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> formattedValue = value</div><div class=\"line\">        <span class=\"comment\">// 删除两侧的空格符</span></div><div class=\"line\">        .trim()</div><div class=\"line\">        <span class=\"comment\">// 保留 2 小数位</span></div><div class=\"line\">        .slice(<span class=\"number\">0</span>, value.indexOf(<span class=\"string\">'.'</span>) + <span class=\"number\">3</span>)</div><div class=\"line\">      <span class=\"comment\">// 如果值不统一，手动覆盖以保持一致</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (formattedValue !== value) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.$refs.input.value = formattedValue</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">// 通过 input 事件发出数值</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'input'</span>, <span class=\"built_in\">Number</span>(formattedValue))</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>当然，上面的例子是比较幼稚的。 比如，用户甚至可以输入多个小数点或句号 - 哦哦！因此我们需要一个更有意义的例子，下面是一个更加完善的货币过滤器：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue/dist/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.rawgit.com/chrisvfritz/5f0a639590d6e648933416f90ba7ae4e/raw/974aa47f8f9c5361c5233bd56be37db8ed765a09/currency-validator.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">currency-input</span> </span></div><div class=\"line\">    <span class=\"attr\">label</span>=<span class=\"string\">\"Price\"</span> </div><div class=\"line\">    <span class=\"attr\">v-model</span>=<span class=\"string\">\"price\"</span></div><div class=\"line\">  &gt;<span class=\"tag\">&lt;/<span class=\"name\">currency-input</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">currency-input</span> </span></div><div class=\"line\">    <span class=\"attr\">label</span>=<span class=\"string\">\"Shipping\"</span> </div><div class=\"line\">    <span class=\"attr\">v-model</span>=<span class=\"string\">\"shipping\"</span></div><div class=\"line\">  &gt;<span class=\"tag\">&lt;/<span class=\"name\">currency-input</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">currency-input</span> </span></div><div class=\"line\">    <span class=\"attr\">label</span>=<span class=\"string\">\"Handling\"</span> </div><div class=\"line\">    <span class=\"attr\">v-model</span>=<span class=\"string\">\"handling\"</span></div><div class=\"line\">  &gt;<span class=\"tag\">&lt;/<span class=\"name\">currency-input</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">currency-input</span> </span></div><div class=\"line\">    <span class=\"attr\">label</span>=<span class=\"string\">\"Discount\"</span> </div><div class=\"line\">    <span class=\"attr\">v-model</span>=<span class=\"string\">\"discount\"</span></div><div class=\"line\">  &gt;<span class=\"tag\">&lt;/<span class=\"name\">currency-input</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Total: $&#123;&#123; total &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'currency-input'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'\\</span></div><div class=\"line\">    &lt;div&gt;\\</div><div class=\"line\">      &lt;label v-if=\"label\"&gt;&#123;&#123; label &#125;&#125;&lt;/label&gt;\\</div><div class=\"line\">      $\\</div><div class=\"line\">      &lt;input\\</div><div class=\"line\">        ref=\"input\"\\</div><div class=\"line\">        v-bind:value=\"value\"\\</div><div class=\"line\">        v-on:input=\"updateValue($event.target.value)\"\\</div><div class=\"line\">        v-on:focus=\"selectAll\"\\</div><div class=\"line\">        v-on:blur=\"formatValue\"\\</div><div class=\"line\">      &gt;\\</div><div class=\"line\">    &lt;/div&gt;\\</div><div class=\"line\">  ',</div><div class=\"line\">  <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">value</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">Number</span>,</div><div class=\"line\">      <span class=\"attr\">default</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">label</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">String</span>,</div><div class=\"line\">      <span class=\"attr\">default</span>: <span class=\"string\">''</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">mounted</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.formatValue()</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">updateValue</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> result = currencyValidator.parse(value, <span class=\"keyword\">this</span>.value)</div><div class=\"line\">      <span class=\"keyword\">if</span> (result.warning) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.$refs.input.value = result.value</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'input'</span>, result.value)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">formatValue</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.$refs.input.value = currencyValidator.format(<span class=\"keyword\">this</span>.value)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">selectAll</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// Workaround for Safari bug</span></div><div class=\"line\">      <span class=\"comment\">// http://stackoverflow.com/questions/1269722/selecting-text-on-focus-using-jquery-not-working-in-safari-and-chrome</span></div><div class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      \tevent.target.select()</div><div class=\"line\">      &#125;, <span class=\"number\">0</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">price</span>: <span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"attr\">shipping</span>: <span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"attr\">handling</span>: <span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"attr\">discount</span>: <span class=\"number\">0</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">total</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> ((</div><div class=\"line\">        <span class=\"keyword\">this</span>.price * <span class=\"number\">100</span> + </div><div class=\"line\">        <span class=\"keyword\">this</span>.shipping * <span class=\"number\">100</span> + </div><div class=\"line\">        <span class=\"keyword\">this</span>.handling * <span class=\"number\">100</span> - </div><div class=\"line\">        <span class=\"keyword\">this</span>.discount * <span class=\"number\">100</span></div><div class=\"line\">      ) / <span class=\"number\">100</span>).toFixed(<span class=\"number\">2</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<blockquote>\n<p>事件接口不仅仅可以用来连接组件内部的表单输入，也很容易集成你自己创造的输入类型。想象一下：</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">voice-recognizer</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"question\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">voice-recognizer</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">webcam-gesture-reader</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"gesture\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">webcam-gesture-reader</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">webcam-retinal-scanner</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"retinalImage\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">webcam-retinal-scanner</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"非父子组件通信\"><a href=\"#非父子组件通信\" class=\"headerlink\" title=\"非父子组件通信\"></a>非父子组件通信</h3><p>有时候两个组件也需要通信(非父子关系)。在简单的场景下，可以使用一个空的 Vue 实例作为中央事件总线：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> bus = <span class=\"keyword\">new</span> Vue()</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 触发组件 A 中的事件</span></div><div class=\"line\">bus.$emit(<span class=\"string\">'id-selected'</span>, <span class=\"number\">1</span>)</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 在组件 B 创建的钩子中监听事件</span></div><div class=\"line\">bus.$on(<span class=\"string\">'id-selected'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>在复杂的情况下，我们应该考虑使用专门的 状态管理模式.</p>\n<h2 id=\"使用-Slot-分发内容\"><a href=\"#使用-Slot-分发内容\" class=\"headerlink\" title=\"使用 Slot 分发内容\"></a>使用 Slot 分发内容</h2><p>在使用组件时，我们常常要像这样组合它们：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-header</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-footer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-footer</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>注意两点：<br>1.<app> 组件不知道它的挂载点会有什么内容。挂载点的内容是由<app>的父组件决定的。<br>2.<app> 组件很可能有它自己的模版。<br>为了让组件可以组合，我们需要一种方式来混合父组件的内容与子组件自己的模板。这个过程被称为 内容分发 (或 “transclusion” 如果你熟悉 Angular)。Vue.js 实现了一个内容分发 API ，参照了当前 Web 组件规范草案，使用特殊的 <slot> 元素作为原始内容的插槽。</slot></app></app></app></p>\n<h3 id=\"编译作用域\"><a href=\"#编译作用域\" class=\"headerlink\" title=\"编译作用域\"></a>编译作用域</h3><p>在深入内容分发 API 之前，我们先明确内容在哪个作用域里编译。假定模板为：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child-component</span>&gt;</span></div><div class=\"line\">  &#123;&#123; message &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">child-component</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><code>message</code> 应该绑定到父组件的数据，还是绑定到子组件的数据？答案是父组件。组件作用域简单地说是：<br>父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译。<br>一个常见错误是试图在父组件模板内将一个指令绑定到子组件的属性/方法：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 无效 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child-component</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"someChildProperty\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-component</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>假定 <code>someChildProperty</code> 是子组件的属性，上例不会如预期那样工作。父组件模板不应该知道子组件的状态。<br>如果要绑定作用域内的指令到一个组件的根节点，你应当在组件自己的模板上做：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'child-component'</span>, &#123;</div><div class=\"line\">  <span class=\"comment\">// 有效，因为是在正确的作用域内</span></div><div class=\"line\">  template: <span class=\"string\">'&lt;div v-show=\"someChildProperty\"&gt;Child&lt;/div&gt;'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">someChildProperty</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>类似地，分发内容是在父作用域内编译。</p>\n<h3 id=\"单个-Slot\"><a href=\"#单个-Slot\" class=\"headerlink\" title=\"单个-Slot\"></a>单个-Slot</h3><p>除非子组件模板包含至少一个 <code>&lt;slot&gt;</code> 插口，否则父组件的内容将会被丢弃。当子组件模板只有一个没有属性的 slot 时，父组件整个内容片段将插入到 slot 所在的 DOM 位置，并替换掉 slot 标签本身。<br>最初在 <code>&lt;slot&gt;</code> 标签中的任何内容都被视为<em>备用内容</em>。备用内容在子组件的作用域内编译，并且只有在宿主元素为空，且没有要插入的内容时才显示备用内容。<br>假定 <code>my-component</code> 组件有下面模板：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>我是子组件的标题<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">    只有在没有要分发的内容时才会显示。</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>父组件模版：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我是父组件的标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一些初始内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是更多的初始内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>渲染结果：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我是父组件的标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>我是子组件的标题<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一些初始内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是更多的初始内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"具名-Slot\"><a href=\"#具名-Slot\" class=\"headerlink\" title=\"具名-Slot\"></a>具名-Slot</h3><p><code>&lt;slot&gt;</code> 元素可以用一个特殊的属性 <code>name</code> 来配置如何分发内容。多个 slot 可以有不同的名字。具名 slot 将匹配内容片段中有对应 <code>slot</code> 特性的元素。<br>仍然可以有一个匿名 slot ，它是<em>默认 slot</em> ，作为找不到匹配的内容片段的备用插槽。如果没有默认的 slot ，这些找不到匹配的内容片段将被抛弃。<br>例如，假定我们有一个 <code>app-layout</code> 组件，它的模板为：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"header\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"footer\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>父组件模版：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-layout</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"header\"</span>&gt;</span>这里可能是一个页面标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>主要内容的一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>另一个主要段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"footer\"</span>&gt;</span>这里有一些联系信息<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app-layout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>渲染结果为：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>这里可能是一个页面标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>主要内容的一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>另一个主要段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这里有一些联系信息<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在组合组件时，内容分发 API 是非常有用的机制。</p>\n<h3 id=\"作用域插槽\"><a href=\"#作用域插槽\" class=\"headerlink\" title=\"作用域插槽\"></a>作用域插槽</h3><blockquote>\n<p>2.1.0新增</p>\n</blockquote>\n<p>作用域插槽是一种特殊类型的插槽，用作使用一个（能够传递数据到）可重用模板替换已渲染元素。<br>在子组件中，只需将数据传递到插槽，就像你将 prop 传递给组件一样：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">text</span>=<span class=\"string\">\"hello from child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在父级中，具有特殊属性 <code>scope</code> 的 <code>&lt;template&gt;</code> 元素，表示它是作用域插槽的模板。<code>scope</code> 的值对应一个临时变量名，此变量接收从子组件中传递的 prop 对象：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"props\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>hello from parent<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; props.text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>如果我们渲染以上结果，得到的输出会是：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>hello from parent<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>hello from child<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>作用域插槽更具代表性的用例是列表组件，允许组件自定义应该如何渲染列表每一项：</p>"},{"title":"Vue","date":"2017-06-29T04:09:55.000Z","toc":true,"_content":"# Vue\n## 介绍\n### Vue.js 是什么\n>一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与单文件组件和 Vue 生态系统支持的库结合使用时，Vue 也完全能够为复杂的单页应用程序提供驱动。\n\n### 简单起步\n>双向数据绑定，所有的元素都是响应式的。\n~~~html\n    <style>\n        [v-cloak]{\n            visibility: hidden; \n        }\n    </style>\n    <div id=\"app\">\n        {{ message }}\n        <span v-bind:title=\"message\"></span>\n        <!--\n            Vue的数据绑定方法有：\n            双花括号：{{}}\n            V开头的bind：v-bind\n        -->\n    </div>\n    <script src=\"https://unpkg.com/vue/dist/vue.js\"></script>\n    <script>\n        var app = new Vue({\n            el: '#app',\n            data: {\n                message: 'Hello Vue!'+ new Date()\n            }\n        })\n    </script>\n~~~\n<!--more-->\n### Vue指令\n>看到的以v-开头的属性，被称为指令。\n>v-bind，用处表示“将这个元素节点的title属性和Vue实例中的massage属性保持一致。\n>可以简写为‘:’，:title。”\n>v-on,指令监听 DOM 事件来触发一些 JavaScript 代码。\n>可以简写为‘@’，@click\n\n## 安装\n### CDN\n>推荐：[unpkg](https://unpkg.com/vue@2.3.4/dist/vue.js), 会保持和 npm 发布的最新的版本一致。可以在 [unpkg.com/vue/](https://unpkg.com/vue/) 浏览 npm 包资源。\n>也可以从 [jsdelivr](https://cdn.jsdelivr.net/vue/2.1.3/vue.js) 或 [cdnjs](https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.3/vue.js) 获取，不过这两个服务版本更新可能略滞后。\n\n### NPM\n>在用 Vue.js 构建大型应用时推荐使用 NPM 安装， NPM 能很好地和诸如 [Webpack](http://webpack.github.io/) 或 [Browserify](http://browserify.org/) 模块打包器配合使用。 Vue.js 也提供配套工具来开发单文件组件。\n\n~~~js\n$ npm install vue\n~~~\n### 构建方式\n#### 概念\n>有两种构建方式，独立构建和运行构建。它们的区别在于前者包含模板编译器而后者不包含。\n\n#### 模板编译器\n>模板编译器的职责是将模板字符串编译为纯 JavaScript 的渲染函数。如果你想要在组件中使用 template 选项，你就需要编译器。\n\n#### 模板字符串：template\n\n####el\n>提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标。可以是 CSS 选择器，也可以是一个 HTMLElement 实例。\n\n \n\n#### template\n>一个字符串模板作为 Vue 实例的标识使用。模板将会 替换 挂载的元素。挂载元素的内容都将被忽略，除非模板的内容有分发 slot。\n\n#### render\n>字符串模板的代替方案，允许你发挥 JavaScript 最大的编程能力。render 函数接收一个 createElement 方法作为第一个参数用来创建 VNode。\n\n#### 区别\n>独立构建包含模板编译器并支持 template 选项。 它也依赖于浏览器的接口的存在，所以你不能使用它来为服务器端渲染。\n运行时构建不包含模板编译器，因此不支持 template 选项，只能用 render 选项，但即使使用运行时构建，在单文件组件中也依然可以写模板，因为单文件组件的模板会在构建时预编译为 render 函数。运行时构建比独立构建要轻量30%，只有 17.14 Kb min+gzip大小。\n\n#### 为什么要使用独立构建和运行时构建？\n\n>Vue.js 的运行过程实际上包含两步。第一步，编译器将字符串模板（template）编译为渲染函数（render），称之为编译过程；第二步，运行时实际调用编译的渲染函数，称之为运行过程\n>由于 Vue.js 1.0 的编译过程需要依赖浏览器的 DOM，所以无法（或者说没有意义）将编译器和运行时分开。因此在 Vue.js 1.0 分发包中，编译器和运行时是打包在一起，都在浏览器端执行。\n>然而到了 Vue.js 2.0，为了支持服务端渲染（server-side rendering），编译器不能依赖于 DOM，所以必须将编译器和运行时分开。这就形成了独立构建（编译器 + 运行时）和运行时构建（仅运行时）。显而易见，运行时构建要小于独立构建。\n>在现代前端工程构建中，通常会使用 vue-loader 和 vueify 预编译模板。在这种情况下，只需要打包运行时，而不需要打包编译器，运行时构建即可满足所需。当然，如果你需要在前端使用 template 选项实时编译模板，那么还是需要使用独立构建将编译器发送到浏览器。\n\n##### 总结：\n>两种编译模式是为了服务器端渲染和浏览器执行两种不同环境产生的\n一般来讲独立构建适用于服务器端渲染\n浏览器 实际运行时为 运行时构建  但是如果需要在前端使用 template 选项实时编译模板，那么还是需要使用独立构建将编译器发送到浏览器。\n\n## 命令行工具\nVue.js 提供一个[官方命令行工具](https://github.com/vuejs/vue-cli)，可用于快速搭建大型单页应用。该工具提供开箱即用的构建工具配置，带来现代化的前端开发流程。只需几分钟即可创建并启动一个带热重载、保存时静态检查以及可用于生产环境的构建配置的项目：\n~~~js\n    # 全局安装 vue-cli\n    $ npm install --global vue-cli\n    # 创建一个基于 webpack 模板的新项目\n    $ vue init webpack my-project\n    # 安装依赖，走你\n    $ cd my-project\n    $ npm install\n    $ npm run dev\n~~~\n## 实例\n### 构造器\n~~~js\n    var vm = new Vue({\n        // 选项\n        el:'#app',\n        data:{},\n        .....\n    })\n~~~\n你可以在构造器的外部用vm来代表vm构造器\n>在实例化 Vue 时，需要传入一个选项对象，它可以包含数据、模板、挂载元素、方法、生命周期钩子等选项。全部的选项可以在 [API 文档](https://cn.vuejs.org/v2/api/)中查看。\n\n### 组件构造器\n~~~js\n    var MyComponent = Vue.extend({\n        // 扩展选项\n    });\n        // 所有的 `MyComponent` 实例都将以预定义的扩展选项被创建\n    var myComponentInstance = new MyComponent();\n~~~\n>尽管可以命令式地创建扩展实例，不过在多数情况下建议将组件构造器注册为一个自定义元素，然后声明式地用在模板中。我们将在后面详细说明[组件系统](https://anhaoran.github.io/2017/06/29/Vue-components/)。现在你只需知道所有的 Vue.js 组件其实都是被扩展的 Vue 实例。\n\n## 属性和方法\n每个 Vue 实例都会代理其 data 对象里所有的属性：\n~~~js\n    var data = { a: 1 }\n    var vm = new Vue({\n        data: data\n    })\n    vm.a === data.a // -> true\n    // 设置属性也会影响到原始数据\n    vm.a = 2\n    data.a // -> 2\n    // ... 反之亦然\n    data.a = 3\n    vm.a // -> 3\n~~~\n注意只有这些被代理的属性是响应的。如果在实例创建之后添加新的属性到实例上，它不会触发视图更新。我们将在后面详细讨论响应系统。\n除了 data 属性， Vue 实例暴露了一些有用的实例属性与方法。这些属性与方法都有前缀 $，以便与代理的 data 属性区分。例如：\n~~~js\n    var data = { a: 1 }\n    var vm = new Vue({\n        el: '#example',\n            data: data\n        })\n    vm.$data === data // -> true\n    vm.$el === document.getElementById('example') // -> true\n    // $watch 是一个实例方法\n    vm.$watch('a', function (newVal, oldVal) {\n        // 这个回调将在 `vm.a`  改变后调用\n    })\n~~~\n>注意，不要在实例属性或者回调函数中（如 vm.$watch('a', newVal => this.myMethod())）使用箭头函数。因为箭头函数绑定父级上下文，所以 this 不会像预想的一样是 Vue 实例，而是 this.myMethod 未被定义。\n实例属性和方法的完整列表中查阅 [API](https://anhaoran.github.io/2017/06/29/Vue-api/) 参考。\n\n## 实例生命周期\n每个 Vue 实例在被创建之前都要经过一系列的初始化过程。例如，实例需要配置数据观测(data observer)、编译模版、挂载实例到 DOM ，然后在数据变化时更新 DOM 。在这个过程中，实例也会调用一些 生命周期钩子 ，这就给我们提供了执行自定义逻辑的机会。例如，created 这个钩子在实例被创建之后被调用：\n~~~js\n    var vm = new Vue({\n    data: {\n        a: 1\n    },\n    created: function () {\n        // `this` 指向 vm 实例\n        console.log('a is: ' + this.a)\n    }\n    })\n    // -> \"a is: 1\"\n~~~\n也有一些其它的钩子，在实例生命周期的不同阶段调用，如 mounted、 updated 、destroyed 。钩子的 this 指向调用它的 Vue 实例。一些用户可能会问 Vue.js 是否有“控制器”的概念？答案是，没有。组件的自定义逻辑可以分布在这些钩子中。\n### 生命周期图示\n下图说明了实例的生命周期。你不需要立马弄明白所有的东西，不过以后它会有帮助。\n![](https://anhaoran.github.io/ImageServer/Vue/lifecycle.png)\n## 模板语法\nVue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML ，所以能被遵循规范的浏览器和 HTML 解析器解析。\n在底层的实现上， Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，在应用状态改变时， Vue 能够智能地计算出重新渲染组件的最小代价并应用到 DOM 操作上。\n如果你熟悉虚拟 DOM 并且偏爱 JavaScript 的原始力量，你也可以不用模板，直接写渲染（render）函数，使用可选的 JSX 语法。\n### 插值\n#### 文本\n数据绑定最常见的形式就是使用 “Mustache” 语法（双大括号）的文本插值：\n~~~html\n    <span>Message: {{ msg }}</span>\n~~~\nMustache 标签将会被替代为对应数据对象上 msg 属性的值。无论何时，绑定的数据对象上 msg 属性发生了改变，插值处的内容都会更新。\n通过使用 v-once 指令，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。但请留心这会影响到该节点上所有的数据绑定：\n~~~html\n    <span v-once>This will never change: {{ msg }}</span>\n~~~\n#### 纯HTML\n双大括号会将数据解释为纯文本，而非 HTML 。为了输出真正的 HTML ，你需要使用 v-html 指令：\n~~~html\n    <div v-html=\"rawHtml\"></div>\n~~~\n被插入的内容都会被当做 HTML —— 数据绑定会被忽略。注意，你不能使用 v-html 来复合局部模板，因为 Vue 不是基于字符串的模板引擎。组件更适合担任 UI 重用与复合的基本单元。\n>你的站点上动态渲染的任意 HTML 可能会非常危险，因为它很容易导致 XSS 攻击。请只对可信内容使用 HTML 插值，绝不要对用户提供的内容插值。\n\n#### 属性\nMustache 不能在 HTML 属性中使用，应使用 v-bind 指令：\n~~~html\n    <div v-bind:id=\"dynamicId\"></div>\n~~~\n这对布尔值的属性也有效 —— 如果条件被求值为 false 的话该属性会被移除：\n~~~html\n    <button v-bind:disabled=\"someDynamicCondition\">Button</button>\n~~~\n#### 使用JavaScript表达式\n迄今为止，在我们的模板中，我们一直都只绑定简单的属性键值。但实际上，对于所有的数据绑定， Vue.js 都提供了完全的 JavaScript 表达式支持。\n~~~html\n    {{ number + 1 }}\n    {{ ok ? 'YES' : 'NO' }}\n    {{ message.split('').reverse().join('') }}\n    <div v-bind:id=\"'list-' + id\"></div>\n~~~\n这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。\n~~~html\n    <!-- 这是语句，不是表达式 -->\n    {{ var a = 1 }}\n    <!-- 流控制也不会生效，请使用三元表达式 -->\n    {{ if (ok) { return message } }}\n~~~\n>模板表达式都被放在沙盒中，只能访问全局变量的一个白名单，如 Math 和 Date 。你不应该在模板表达式中试图访问用户定义的全局变量。\n\n### 指令\n令（Directives）是带有 v- 前缀的特殊属性。指令属性的值预期是单一 JavaScript 表达式（除了 v-for，之后再讨论）。指令的职责就是当其表达式的值改变时相应地将某些行为应用到 DOM 上。让我们回顾一下在介绍里的例子：\n~~~html\n    <p v-if=\"seen\">Now you see me</p>\n~~~\n这里， v-if 指令将根据表达式 seen 的值的真假来移除/插入 <p> 元素。\n#### 参数\n一些指令能接受一个“参数”，在指令后以冒x号指明。例如， v-bind 指令被用来响应地更新 HTML 属性：\n~~~html\n    <a v-bind:href=\"url\"></a>\n~~~\n在这里 href 是参数，告知 v-bind 指令将该元素的 href 属性与表达式 url 的值绑定。\n另一个例子是 v-on 指令，它用于监听 DOM 事件：\n~~~html\n    <a v-on:click=\"doSomething\">\n~~~\n#### 修饰符\n修饰符（Modifiers）是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()：\n~~~html\n    <form v-on:submit.prevent=\"onSubmit\"></form>\n~~~\n之后当我们更深入地了解 v-on 与 v-model时，会看到更多修饰符的使用。\n### 过滤器\nVue.js 允许你自定义过滤器，可被用作一些常见的文本格式化。过滤器可以用在两个地方：mustache 插值和 v-bind 表达式。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示：\n~~~html\n    <!-- in mustaches -->\n    {{ message | capitalize }}\n    <!-- in v-bind -->\n    <div v-bind:id=\"rawId | formatId\"></div>\n~~~\n>Vue 2.x 中，过滤器只能在 mustache 绑定和 v-bind 表达式（从 2.1.0 开始支持）中使用，因为过滤器设计目的就是用于文本转换。为了在其他指令中实现更复杂的数据变换，你应该使用计算属性。\n\n过滤器函数总接受表达式的值作为第一个参数。\n~~~js\n    new Vue({\n        // ...\n        filters: {\n            capitalize: function (value) {\n            if (!value) return ''\n            value = value.toString()\n            return value.charAt(0).toUpperCase() + value.slice(1)\n            }\n        }\n    })\n~~~\n过滤器可以串联：\n~~~html\n    {{ message | filterA | filterB }}\n~~~\n过滤器是 JavaScript 函数，因此可以接受参数：\n~~~html\n    {{ message | filterA('arg1', arg2) }}\n~~~\n这里，字符串 'arg1' 将传给过滤器作为第二个参数， arg2 表达式的值将被求值然后传给过滤器作为第三个参数。\n\n### 缩写\nv- 前缀在模板中是作为一个标示 Vue 特殊属性的明显标识。当你使用 Vue.js 为现有的标记添加动态行为时，它会很有用，但对于一些经常使用的指令来说有点繁琐。同时，当搭建 Vue.js 管理所有模板的 SPA 时，v- 前缀也变得没那么重要了。因此，Vue.js 为两个最为常用的指令提供了特别的缩写：\n#### v-bind缩写\n~~~html\n    <!-- 完整语法 -->\n    <a v-bind:href=\"url\"></a>\n    <!-- 缩写 -->\n    <a :href=\"url\"></a>\n~~~\n#### v-on缩写\n~~~html\n    <!-- 完整语法 -->\n    <a v-on:click=\"doSomething\"></a>\n    <!-- 缩写 -->\n    <a @click=\"doSomething\"></a>\n~~~\n它们看起来可能与普通的 HTML 略有不同，但 : 与 @ 对于属性名来说都是合法字符，在所有支持 Vue.js 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记。缩写语法是完全可选的，但随着你更深入地了解它们的作用，你会庆幸拥有它们。","source":"_posts/Vue.md","raw":"---\ntitle: Vue\ndate: 2017-06-29 12:09:55\ntags: Vue\ntoc: true\n---\n# Vue\n## 介绍\n### Vue.js 是什么\n>一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与单文件组件和 Vue 生态系统支持的库结合使用时，Vue 也完全能够为复杂的单页应用程序提供驱动。\n\n### 简单起步\n>双向数据绑定，所有的元素都是响应式的。\n~~~html\n    <style>\n        [v-cloak]{\n            visibility: hidden; \n        }\n    </style>\n    <div id=\"app\">\n        {{ message }}\n        <span v-bind:title=\"message\"></span>\n        <!--\n            Vue的数据绑定方法有：\n            双花括号：{{}}\n            V开头的bind：v-bind\n        -->\n    </div>\n    <script src=\"https://unpkg.com/vue/dist/vue.js\"></script>\n    <script>\n        var app = new Vue({\n            el: '#app',\n            data: {\n                message: 'Hello Vue!'+ new Date()\n            }\n        })\n    </script>\n~~~\n<!--more-->\n### Vue指令\n>看到的以v-开头的属性，被称为指令。\n>v-bind，用处表示“将这个元素节点的title属性和Vue实例中的massage属性保持一致。\n>可以简写为‘:’，:title。”\n>v-on,指令监听 DOM 事件来触发一些 JavaScript 代码。\n>可以简写为‘@’，@click\n\n## 安装\n### CDN\n>推荐：[unpkg](https://unpkg.com/vue@2.3.4/dist/vue.js), 会保持和 npm 发布的最新的版本一致。可以在 [unpkg.com/vue/](https://unpkg.com/vue/) 浏览 npm 包资源。\n>也可以从 [jsdelivr](https://cdn.jsdelivr.net/vue/2.1.3/vue.js) 或 [cdnjs](https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.3/vue.js) 获取，不过这两个服务版本更新可能略滞后。\n\n### NPM\n>在用 Vue.js 构建大型应用时推荐使用 NPM 安装， NPM 能很好地和诸如 [Webpack](http://webpack.github.io/) 或 [Browserify](http://browserify.org/) 模块打包器配合使用。 Vue.js 也提供配套工具来开发单文件组件。\n\n~~~js\n$ npm install vue\n~~~\n### 构建方式\n#### 概念\n>有两种构建方式，独立构建和运行构建。它们的区别在于前者包含模板编译器而后者不包含。\n\n#### 模板编译器\n>模板编译器的职责是将模板字符串编译为纯 JavaScript 的渲染函数。如果你想要在组件中使用 template 选项，你就需要编译器。\n\n#### 模板字符串：template\n\n####el\n>提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标。可以是 CSS 选择器，也可以是一个 HTMLElement 实例。\n\n \n\n#### template\n>一个字符串模板作为 Vue 实例的标识使用。模板将会 替换 挂载的元素。挂载元素的内容都将被忽略，除非模板的内容有分发 slot。\n\n#### render\n>字符串模板的代替方案，允许你发挥 JavaScript 最大的编程能力。render 函数接收一个 createElement 方法作为第一个参数用来创建 VNode。\n\n#### 区别\n>独立构建包含模板编译器并支持 template 选项。 它也依赖于浏览器的接口的存在，所以你不能使用它来为服务器端渲染。\n运行时构建不包含模板编译器，因此不支持 template 选项，只能用 render 选项，但即使使用运行时构建，在单文件组件中也依然可以写模板，因为单文件组件的模板会在构建时预编译为 render 函数。运行时构建比独立构建要轻量30%，只有 17.14 Kb min+gzip大小。\n\n#### 为什么要使用独立构建和运行时构建？\n\n>Vue.js 的运行过程实际上包含两步。第一步，编译器将字符串模板（template）编译为渲染函数（render），称之为编译过程；第二步，运行时实际调用编译的渲染函数，称之为运行过程\n>由于 Vue.js 1.0 的编译过程需要依赖浏览器的 DOM，所以无法（或者说没有意义）将编译器和运行时分开。因此在 Vue.js 1.0 分发包中，编译器和运行时是打包在一起，都在浏览器端执行。\n>然而到了 Vue.js 2.0，为了支持服务端渲染（server-side rendering），编译器不能依赖于 DOM，所以必须将编译器和运行时分开。这就形成了独立构建（编译器 + 运行时）和运行时构建（仅运行时）。显而易见，运行时构建要小于独立构建。\n>在现代前端工程构建中，通常会使用 vue-loader 和 vueify 预编译模板。在这种情况下，只需要打包运行时，而不需要打包编译器，运行时构建即可满足所需。当然，如果你需要在前端使用 template 选项实时编译模板，那么还是需要使用独立构建将编译器发送到浏览器。\n\n##### 总结：\n>两种编译模式是为了服务器端渲染和浏览器执行两种不同环境产生的\n一般来讲独立构建适用于服务器端渲染\n浏览器 实际运行时为 运行时构建  但是如果需要在前端使用 template 选项实时编译模板，那么还是需要使用独立构建将编译器发送到浏览器。\n\n## 命令行工具\nVue.js 提供一个[官方命令行工具](https://github.com/vuejs/vue-cli)，可用于快速搭建大型单页应用。该工具提供开箱即用的构建工具配置，带来现代化的前端开发流程。只需几分钟即可创建并启动一个带热重载、保存时静态检查以及可用于生产环境的构建配置的项目：\n~~~js\n    # 全局安装 vue-cli\n    $ npm install --global vue-cli\n    # 创建一个基于 webpack 模板的新项目\n    $ vue init webpack my-project\n    # 安装依赖，走你\n    $ cd my-project\n    $ npm install\n    $ npm run dev\n~~~\n## 实例\n### 构造器\n~~~js\n    var vm = new Vue({\n        // 选项\n        el:'#app',\n        data:{},\n        .....\n    })\n~~~\n你可以在构造器的外部用vm来代表vm构造器\n>在实例化 Vue 时，需要传入一个选项对象，它可以包含数据、模板、挂载元素、方法、生命周期钩子等选项。全部的选项可以在 [API 文档](https://cn.vuejs.org/v2/api/)中查看。\n\n### 组件构造器\n~~~js\n    var MyComponent = Vue.extend({\n        // 扩展选项\n    });\n        // 所有的 `MyComponent` 实例都将以预定义的扩展选项被创建\n    var myComponentInstance = new MyComponent();\n~~~\n>尽管可以命令式地创建扩展实例，不过在多数情况下建议将组件构造器注册为一个自定义元素，然后声明式地用在模板中。我们将在后面详细说明[组件系统](https://anhaoran.github.io/2017/06/29/Vue-components/)。现在你只需知道所有的 Vue.js 组件其实都是被扩展的 Vue 实例。\n\n## 属性和方法\n每个 Vue 实例都会代理其 data 对象里所有的属性：\n~~~js\n    var data = { a: 1 }\n    var vm = new Vue({\n        data: data\n    })\n    vm.a === data.a // -> true\n    // 设置属性也会影响到原始数据\n    vm.a = 2\n    data.a // -> 2\n    // ... 反之亦然\n    data.a = 3\n    vm.a // -> 3\n~~~\n注意只有这些被代理的属性是响应的。如果在实例创建之后添加新的属性到实例上，它不会触发视图更新。我们将在后面详细讨论响应系统。\n除了 data 属性， Vue 实例暴露了一些有用的实例属性与方法。这些属性与方法都有前缀 $，以便与代理的 data 属性区分。例如：\n~~~js\n    var data = { a: 1 }\n    var vm = new Vue({\n        el: '#example',\n            data: data\n        })\n    vm.$data === data // -> true\n    vm.$el === document.getElementById('example') // -> true\n    // $watch 是一个实例方法\n    vm.$watch('a', function (newVal, oldVal) {\n        // 这个回调将在 `vm.a`  改变后调用\n    })\n~~~\n>注意，不要在实例属性或者回调函数中（如 vm.$watch('a', newVal => this.myMethod())）使用箭头函数。因为箭头函数绑定父级上下文，所以 this 不会像预想的一样是 Vue 实例，而是 this.myMethod 未被定义。\n实例属性和方法的完整列表中查阅 [API](https://anhaoran.github.io/2017/06/29/Vue-api/) 参考。\n\n## 实例生命周期\n每个 Vue 实例在被创建之前都要经过一系列的初始化过程。例如，实例需要配置数据观测(data observer)、编译模版、挂载实例到 DOM ，然后在数据变化时更新 DOM 。在这个过程中，实例也会调用一些 生命周期钩子 ，这就给我们提供了执行自定义逻辑的机会。例如，created 这个钩子在实例被创建之后被调用：\n~~~js\n    var vm = new Vue({\n    data: {\n        a: 1\n    },\n    created: function () {\n        // `this` 指向 vm 实例\n        console.log('a is: ' + this.a)\n    }\n    })\n    // -> \"a is: 1\"\n~~~\n也有一些其它的钩子，在实例生命周期的不同阶段调用，如 mounted、 updated 、destroyed 。钩子的 this 指向调用它的 Vue 实例。一些用户可能会问 Vue.js 是否有“控制器”的概念？答案是，没有。组件的自定义逻辑可以分布在这些钩子中。\n### 生命周期图示\n下图说明了实例的生命周期。你不需要立马弄明白所有的东西，不过以后它会有帮助。\n![](https://anhaoran.github.io/ImageServer/Vue/lifecycle.png)\n## 模板语法\nVue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML ，所以能被遵循规范的浏览器和 HTML 解析器解析。\n在底层的实现上， Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，在应用状态改变时， Vue 能够智能地计算出重新渲染组件的最小代价并应用到 DOM 操作上。\n如果你熟悉虚拟 DOM 并且偏爱 JavaScript 的原始力量，你也可以不用模板，直接写渲染（render）函数，使用可选的 JSX 语法。\n### 插值\n#### 文本\n数据绑定最常见的形式就是使用 “Mustache” 语法（双大括号）的文本插值：\n~~~html\n    <span>Message: {{ msg }}</span>\n~~~\nMustache 标签将会被替代为对应数据对象上 msg 属性的值。无论何时，绑定的数据对象上 msg 属性发生了改变，插值处的内容都会更新。\n通过使用 v-once 指令，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。但请留心这会影响到该节点上所有的数据绑定：\n~~~html\n    <span v-once>This will never change: {{ msg }}</span>\n~~~\n#### 纯HTML\n双大括号会将数据解释为纯文本，而非 HTML 。为了输出真正的 HTML ，你需要使用 v-html 指令：\n~~~html\n    <div v-html=\"rawHtml\"></div>\n~~~\n被插入的内容都会被当做 HTML —— 数据绑定会被忽略。注意，你不能使用 v-html 来复合局部模板，因为 Vue 不是基于字符串的模板引擎。组件更适合担任 UI 重用与复合的基本单元。\n>你的站点上动态渲染的任意 HTML 可能会非常危险，因为它很容易导致 XSS 攻击。请只对可信内容使用 HTML 插值，绝不要对用户提供的内容插值。\n\n#### 属性\nMustache 不能在 HTML 属性中使用，应使用 v-bind 指令：\n~~~html\n    <div v-bind:id=\"dynamicId\"></div>\n~~~\n这对布尔值的属性也有效 —— 如果条件被求值为 false 的话该属性会被移除：\n~~~html\n    <button v-bind:disabled=\"someDynamicCondition\">Button</button>\n~~~\n#### 使用JavaScript表达式\n迄今为止，在我们的模板中，我们一直都只绑定简单的属性键值。但实际上，对于所有的数据绑定， Vue.js 都提供了完全的 JavaScript 表达式支持。\n~~~html\n    {{ number + 1 }}\n    {{ ok ? 'YES' : 'NO' }}\n    {{ message.split('').reverse().join('') }}\n    <div v-bind:id=\"'list-' + id\"></div>\n~~~\n这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。\n~~~html\n    <!-- 这是语句，不是表达式 -->\n    {{ var a = 1 }}\n    <!-- 流控制也不会生效，请使用三元表达式 -->\n    {{ if (ok) { return message } }}\n~~~\n>模板表达式都被放在沙盒中，只能访问全局变量的一个白名单，如 Math 和 Date 。你不应该在模板表达式中试图访问用户定义的全局变量。\n\n### 指令\n令（Directives）是带有 v- 前缀的特殊属性。指令属性的值预期是单一 JavaScript 表达式（除了 v-for，之后再讨论）。指令的职责就是当其表达式的值改变时相应地将某些行为应用到 DOM 上。让我们回顾一下在介绍里的例子：\n~~~html\n    <p v-if=\"seen\">Now you see me</p>\n~~~\n这里， v-if 指令将根据表达式 seen 的值的真假来移除/插入 <p> 元素。\n#### 参数\n一些指令能接受一个“参数”，在指令后以冒x号指明。例如， v-bind 指令被用来响应地更新 HTML 属性：\n~~~html\n    <a v-bind:href=\"url\"></a>\n~~~\n在这里 href 是参数，告知 v-bind 指令将该元素的 href 属性与表达式 url 的值绑定。\n另一个例子是 v-on 指令，它用于监听 DOM 事件：\n~~~html\n    <a v-on:click=\"doSomething\">\n~~~\n#### 修饰符\n修饰符（Modifiers）是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()：\n~~~html\n    <form v-on:submit.prevent=\"onSubmit\"></form>\n~~~\n之后当我们更深入地了解 v-on 与 v-model时，会看到更多修饰符的使用。\n### 过滤器\nVue.js 允许你自定义过滤器，可被用作一些常见的文本格式化。过滤器可以用在两个地方：mustache 插值和 v-bind 表达式。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示：\n~~~html\n    <!-- in mustaches -->\n    {{ message | capitalize }}\n    <!-- in v-bind -->\n    <div v-bind:id=\"rawId | formatId\"></div>\n~~~\n>Vue 2.x 中，过滤器只能在 mustache 绑定和 v-bind 表达式（从 2.1.0 开始支持）中使用，因为过滤器设计目的就是用于文本转换。为了在其他指令中实现更复杂的数据变换，你应该使用计算属性。\n\n过滤器函数总接受表达式的值作为第一个参数。\n~~~js\n    new Vue({\n        // ...\n        filters: {\n            capitalize: function (value) {\n            if (!value) return ''\n            value = value.toString()\n            return value.charAt(0).toUpperCase() + value.slice(1)\n            }\n        }\n    })\n~~~\n过滤器可以串联：\n~~~html\n    {{ message | filterA | filterB }}\n~~~\n过滤器是 JavaScript 函数，因此可以接受参数：\n~~~html\n    {{ message | filterA('arg1', arg2) }}\n~~~\n这里，字符串 'arg1' 将传给过滤器作为第二个参数， arg2 表达式的值将被求值然后传给过滤器作为第三个参数。\n\n### 缩写\nv- 前缀在模板中是作为一个标示 Vue 特殊属性的明显标识。当你使用 Vue.js 为现有的标记添加动态行为时，它会很有用，但对于一些经常使用的指令来说有点繁琐。同时，当搭建 Vue.js 管理所有模板的 SPA 时，v- 前缀也变得没那么重要了。因此，Vue.js 为两个最为常用的指令提供了特别的缩写：\n#### v-bind缩写\n~~~html\n    <!-- 完整语法 -->\n    <a v-bind:href=\"url\"></a>\n    <!-- 缩写 -->\n    <a :href=\"url\"></a>\n~~~\n#### v-on缩写\n~~~html\n    <!-- 完整语法 -->\n    <a v-on:click=\"doSomething\"></a>\n    <!-- 缩写 -->\n    <a @click=\"doSomething\"></a>\n~~~\n它们看起来可能与普通的 HTML 略有不同，但 : 与 @ 对于属性名来说都是合法字符，在所有支持 Vue.js 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记。缩写语法是完全可选的，但随着你更深入地了解它们的作用，你会庆幸拥有它们。","slug":"Vue","published":1,"updated":"2017-06-30T02:19:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfnkq6l000tlyfyd2w1wq0c","content":"<h1 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><h3 id=\"Vue-js-是什么\"><a href=\"#Vue-js-是什么\" class=\"headerlink\" title=\"Vue.js 是什么\"></a>Vue.js 是什么</h3><blockquote>\n<p>一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与单文件组件和 Vue 生态系统支持的库结合使用时，Vue 也完全能够为复杂的单页应用程序提供驱动。</p>\n</blockquote>\n<h3 id=\"简单起步\"><a href=\"#简单起步\" class=\"headerlink\" title=\"简单起步\"></a>简单起步</h3><blockquote>\n<p>双向数据绑定，所有的元素都是响应式的。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></div><div class=\"line\">    <span class=\"selector-attr\">[v-cloak]</span>&#123;</div><div class=\"line\">        <span class=\"attribute\">visibility</span>: hidden; </div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123; message &#125;&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"message\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--</span></div><div class=\"line\">        Vue的数据绑定方法有：</div><div class=\"line\">        双花括号：&#123;&#123;&#125;&#125;</div><div class=\"line\">        V开头的bind：v-bind</div><div class=\"line\">    --&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue/dist/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">        <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span>,</div><div class=\"line\">        <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">message</span>: <span class=\"string\">'Hello Vue!'</span>+ <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"Vue指令\"><a href=\"#Vue指令\" class=\"headerlink\" title=\"Vue指令\"></a>Vue指令</h3><blockquote>\n<p>看到的以v-开头的属性，被称为指令。<br>v-bind，用处表示“将这个元素节点的title属性和Vue实例中的massage属性保持一致。<br>可以简写为‘:’，:title。”<br>v-on,指令监听 DOM 事件来触发一些 JavaScript 代码。<br>可以简写为‘@’，@click</p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"CDN\"><a href=\"#CDN\" class=\"headerlink\" title=\"CDN\"></a>CDN</h3><blockquote>\n<p>推荐：<a href=\"https://unpkg.com/vue@2.3.4/dist/vue.js\" target=\"_blank\" rel=\"external\">unpkg</a>, 会保持和 npm 发布的最新的版本一致。可以在 <a href=\"https://unpkg.com/vue/\" target=\"_blank\" rel=\"external\">unpkg.com/vue/</a> 浏览 npm 包资源。<br>也可以从 <a href=\"https://cdn.jsdelivr.net/vue/2.1.3/vue.js\" target=\"_blank\" rel=\"external\">jsdelivr</a> 或 <a href=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.3/vue.js\" target=\"_blank\" rel=\"external\">cdnjs</a> 获取，不过这两个服务版本更新可能略滞后。</p>\n</blockquote>\n<h3 id=\"NPM\"><a href=\"#NPM\" class=\"headerlink\" title=\"NPM\"></a>NPM</h3><blockquote>\n<p>在用 Vue.js 构建大型应用时推荐使用 NPM 安装， NPM 能很好地和诸如 <a href=\"http://webpack.github.io/\" target=\"_blank\" rel=\"external\">Webpack</a> 或 <a href=\"http://browserify.org/\" target=\"_blank\" rel=\"external\">Browserify</a> 模块打包器配合使用。 Vue.js 也提供配套工具来开发单文件组件。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install vue</div></pre></td></tr></table></figure>\n<h3 id=\"构建方式\"><a href=\"#构建方式\" class=\"headerlink\" title=\"构建方式\"></a>构建方式</h3><h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><blockquote>\n<p>有两种构建方式，独立构建和运行构建。它们的区别在于前者包含模板编译器而后者不包含。</p>\n</blockquote>\n<h4 id=\"模板编译器\"><a href=\"#模板编译器\" class=\"headerlink\" title=\"模板编译器\"></a>模板编译器</h4><blockquote>\n<p>模板编译器的职责是将模板字符串编译为纯 JavaScript 的渲染函数。如果你想要在组件中使用 template 选项，你就需要编译器。</p>\n</blockquote>\n<h4 id=\"模板字符串：template\"><a href=\"#模板字符串：template\" class=\"headerlink\" title=\"模板字符串：template\"></a>模板字符串：template</h4><p>####el</p>\n<blockquote>\n<p>提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标。可以是 CSS 选择器，也可以是一个 HTMLElement 实例。</p>\n</blockquote>\n<h4 id=\"template\"><a href=\"#template\" class=\"headerlink\" title=\"template\"></a>template</h4><blockquote>\n<p>一个字符串模板作为 Vue 实例的标识使用。模板将会 替换 挂载的元素。挂载元素的内容都将被忽略，除非模板的内容有分发 slot。</p>\n</blockquote>\n<h4 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h4><blockquote>\n<p>字符串模板的代替方案，允许你发挥 JavaScript 最大的编程能力。render 函数接收一个 createElement 方法作为第一个参数用来创建 VNode。</p>\n</blockquote>\n<h4 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h4><blockquote>\n<p>独立构建包含模板编译器并支持 template 选项。 它也依赖于浏览器的接口的存在，所以你不能使用它来为服务器端渲染。<br>运行时构建不包含模板编译器，因此不支持 template 选项，只能用 render 选项，但即使使用运行时构建，在单文件组件中也依然可以写模板，因为单文件组件的模板会在构建时预编译为 render 函数。运行时构建比独立构建要轻量30%，只有 17.14 Kb min+gzip大小。</p>\n</blockquote>\n<h4 id=\"为什么要使用独立构建和运行时构建？\"><a href=\"#为什么要使用独立构建和运行时构建？\" class=\"headerlink\" title=\"为什么要使用独立构建和运行时构建？\"></a>为什么要使用独立构建和运行时构建？</h4><blockquote>\n<p>Vue.js 的运行过程实际上包含两步。第一步，编译器将字符串模板（template）编译为渲染函数（render），称之为编译过程；第二步，运行时实际调用编译的渲染函数，称之为运行过程<br>由于 Vue.js 1.0 的编译过程需要依赖浏览器的 DOM，所以无法（或者说没有意义）将编译器和运行时分开。因此在 Vue.js 1.0 分发包中，编译器和运行时是打包在一起，都在浏览器端执行。<br>然而到了 Vue.js 2.0，为了支持服务端渲染（server-side rendering），编译器不能依赖于 DOM，所以必须将编译器和运行时分开。这就形成了独立构建（编译器 + 运行时）和运行时构建（仅运行时）。显而易见，运行时构建要小于独立构建。<br>在现代前端工程构建中，通常会使用 vue-loader 和 vueify 预编译模板。在这种情况下，只需要打包运行时，而不需要打包编译器，运行时构建即可满足所需。当然，如果你需要在前端使用 template 选项实时编译模板，那么还是需要使用独立构建将编译器发送到浏览器。</p>\n</blockquote>\n<h5 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h5><blockquote>\n<p>两种编译模式是为了服务器端渲染和浏览器执行两种不同环境产生的<br>一般来讲独立构建适用于服务器端渲染<br>浏览器 实际运行时为 运行时构建  但是如果需要在前端使用 template 选项实时编译模板，那么还是需要使用独立构建将编译器发送到浏览器。</p>\n</blockquote>\n<h2 id=\"命令行工具\"><a href=\"#命令行工具\" class=\"headerlink\" title=\"命令行工具\"></a>命令行工具</h2><p>Vue.js 提供一个<a href=\"https://github.com/vuejs/vue-cli\" target=\"_blank\" rel=\"external\">官方命令行工具</a>，可用于快速搭建大型单页应用。该工具提供开箱即用的构建工具配置，带来现代化的前端开发流程。只需几分钟即可创建并启动一个带热重载、保存时静态检查以及可用于生产环境的构建配置的项目：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 全局安装 vue-cli</div><div class=\"line\">$ npm install --global vue-cli</div><div class=\"line\"># 创建一个基于 webpack 模板的新项目</div><div class=\"line\">$ vue init webpack my-project</div><div class=\"line\"># 安装依赖，走你</div><div class=\"line\">$ cd my-project</div><div class=\"line\">$ npm install</div><div class=\"line\">$ npm run dev</div></pre></td></tr></table></figure></p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><h3 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    <span class=\"comment\">// 选项</span></div><div class=\"line\">    el:<span class=\"string\">'#app'</span>,</div><div class=\"line\">    <span class=\"attr\">data</span>:&#123;&#125;,</div><div class=\"line\">    .....</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>你可以在构造器的外部用vm来代表vm构造器</p>\n<blockquote>\n<p>在实例化 Vue 时，需要传入一个选项对象，它可以包含数据、模板、挂载元素、方法、生命周期钩子等选项。全部的选项可以在 <a href=\"https://cn.vuejs.org/v2/api/\" target=\"_blank\" rel=\"external\">API 文档</a>中查看。</p>\n</blockquote>\n<h3 id=\"组件构造器\"><a href=\"#组件构造器\" class=\"headerlink\" title=\"组件构造器\"></a>组件构造器</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MyComponent = Vue.extend(&#123;</div><div class=\"line\">    <span class=\"comment\">// 扩展选项</span></div><div class=\"line\">&#125;);</div><div class=\"line\">    <span class=\"comment\">// 所有的 `MyComponent` 实例都将以预定义的扩展选项被创建</span></div><div class=\"line\"><span class=\"keyword\">var</span> myComponentInstance = <span class=\"keyword\">new</span> MyComponent();</div></pre></td></tr></table></figure>\n<blockquote>\n<p>尽管可以命令式地创建扩展实例，不过在多数情况下建议将组件构造器注册为一个自定义元素，然后声明式地用在模板中。我们将在后面详细说明<a href=\"https://anhaoran.github.io/2017/06/29/Vue-components/\" target=\"_blank\" rel=\"external\">组件系统</a>。现在你只需知道所有的 Vue.js 组件其实都是被扩展的 Vue 实例。</p>\n</blockquote>\n<h2 id=\"属性和方法\"><a href=\"#属性和方法\" class=\"headerlink\" title=\"属性和方法\"></a>属性和方法</h2><p>每个 Vue 实例都会代理其 data 对象里所有的属性：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</div><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    <span class=\"attr\">data</span>: data</div><div class=\"line\">&#125;)</div><div class=\"line\">vm.a === data.a <span class=\"comment\">// -&gt; true</span></div><div class=\"line\"><span class=\"comment\">// 设置属性也会影响到原始数据</span></div><div class=\"line\">vm.a = <span class=\"number\">2</span></div><div class=\"line\">data.a <span class=\"comment\">// -&gt; 2</span></div><div class=\"line\"><span class=\"comment\">// ... 反之亦然</span></div><div class=\"line\">data.a = <span class=\"number\">3</span></div><div class=\"line\">vm.a <span class=\"comment\">// -&gt; 3</span></div></pre></td></tr></table></figure></p>\n<p>注意只有这些被代理的属性是响应的。如果在实例创建之后添加新的属性到实例上，它不会触发视图更新。我们将在后面详细讨论响应系统。<br>除了 data 属性， Vue 实例暴露了一些有用的实例属性与方法。这些属性与方法都有前缀 $，以便与代理的 data 属性区分。例如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</div><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    <span class=\"attr\">el</span>: <span class=\"string\">'#example'</span>,</div><div class=\"line\">        <span class=\"attr\">data</span>: data</div><div class=\"line\">    &#125;)</div><div class=\"line\">vm.$data === data <span class=\"comment\">// -&gt; true</span></div><div class=\"line\">vm.$el === <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'example'</span>) <span class=\"comment\">// -&gt; true</span></div><div class=\"line\"><span class=\"comment\">// $watch 是一个实例方法</span></div><div class=\"line\">vm.$watch(<span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal, oldVal</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 这个回调将在 `vm.a`  改变后调用</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意，不要在实例属性或者回调函数中（如 vm.$watch(‘a’, newVal =&gt; this.myMethod())）使用箭头函数。因为箭头函数绑定父级上下文，所以 this 不会像预想的一样是 Vue 实例，而是 this.myMethod 未被定义。<br>实例属性和方法的完整列表中查阅 <a href=\"https://anhaoran.github.io/2017/06/29/Vue-api/\" target=\"_blank\" rel=\"external\">API</a> 参考。</p>\n</blockquote>\n<h2 id=\"实例生命周期\"><a href=\"#实例生命周期\" class=\"headerlink\" title=\"实例生命周期\"></a>实例生命周期</h2><p>每个 Vue 实例在被创建之前都要经过一系列的初始化过程。例如，实例需要配置数据观测(data observer)、编译模版、挂载实例到 DOM ，然后在数据变化时更新 DOM 。在这个过程中，实例也会调用一些 生命周期钩子 ，这就给我们提供了执行自定义逻辑的机会。例如，created 这个钩子在实例被创建之后被调用：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\"><span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span></div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// `this` 指向 vm 实例</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'a is: '</span> + <span class=\"keyword\">this</span>.a)</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// -&gt; \"a is: 1\"</span></div></pre></td></tr></table></figure></p>\n<p>也有一些其它的钩子，在实例生命周期的不同阶段调用，如 mounted、 updated 、destroyed 。钩子的 this 指向调用它的 Vue 实例。一些用户可能会问 Vue.js 是否有“控制器”的概念？答案是，没有。组件的自定义逻辑可以分布在这些钩子中。</p>\n<h3 id=\"生命周期图示\"><a href=\"#生命周期图示\" class=\"headerlink\" title=\"生命周期图示\"></a>生命周期图示</h3><p>下图说明了实例的生命周期。你不需要立马弄明白所有的东西，不过以后它会有帮助。<br><img src=\"https://anhaoran.github.io/ImageServer/Vue/lifecycle.png\" alt=\"\"></p>\n<h2 id=\"模板语法\"><a href=\"#模板语法\" class=\"headerlink\" title=\"模板语法\"></a>模板语法</h2><p>Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML ，所以能被遵循规范的浏览器和 HTML 解析器解析。<br>在底层的实现上， Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，在应用状态改变时， Vue 能够智能地计算出重新渲染组件的最小代价并应用到 DOM 操作上。<br>如果你熟悉虚拟 DOM 并且偏爱 JavaScript 的原始力量，你也可以不用模板，直接写渲染（render）函数，使用可选的 JSX 语法。</p>\n<h3 id=\"插值\"><a href=\"#插值\" class=\"headerlink\" title=\"插值\"></a>插值</h3><h4 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h4><p>数据绑定最常见的形式就是使用 “Mustache” 语法（双大括号）的文本插值：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>Mustache 标签将会被替代为对应数据对象上 msg 属性的值。无论何时，绑定的数据对象上 msg 属性发生了改变，插值处的内容都会更新。<br>通过使用 v-once 指令，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。但请留心这会影响到该节点上所有的数据绑定：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-once</span>&gt;</span>This will never change: &#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"纯HTML\"><a href=\"#纯HTML\" class=\"headerlink\" title=\"纯HTML\"></a>纯HTML</h4><p>双大括号会将数据解释为纯文本，而非 HTML 。为了输出真正的 HTML ，你需要使用 v-html 指令：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"rawHtml\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>被插入的内容都会被当做 HTML —— 数据绑定会被忽略。注意，你不能使用 v-html 来复合局部模板，因为 Vue 不是基于字符串的模板引擎。组件更适合担任 UI 重用与复合的基本单元。</p>\n<blockquote>\n<p>你的站点上动态渲染的任意 HTML 可能会非常危险，因为它很容易导致 XSS 攻击。请只对可信内容使用 HTML 插值，绝不要对用户提供的内容插值。</p>\n</blockquote>\n<h4 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h4><p>Mustache 不能在 HTML 属性中使用，应使用 v-bind 指令：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"dynamicId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这对布尔值的属性也有效 —— 如果条件被求值为 false 的话该属性会被移除：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-bind:disabled</span>=<span class=\"string\">\"someDynamicCondition\"</span>&gt;</span>Button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"使用JavaScript表达式\"><a href=\"#使用JavaScript表达式\" class=\"headerlink\" title=\"使用JavaScript表达式\"></a>使用JavaScript表达式</h4><p>迄今为止，在我们的模板中，我们一直都只绑定简单的属性键值。但实际上，对于所有的数据绑定， Vue.js 都提供了完全的 JavaScript 表达式支持。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; number + 1 &#125;&#125;</div><div class=\"line\">&#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;</div><div class=\"line\">&#123;&#123; message.split('').reverse().join('') &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"'list-' + id\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 这是语句，不是表达式 --&gt;</span></div><div class=\"line\">&#123;&#123; var a = 1 &#125;&#125;</div><div class=\"line\"><span class=\"comment\">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></div><div class=\"line\">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>模板表达式都被放在沙盒中，只能访问全局变量的一个白名单，如 Math 和 Date 。你不应该在模板表达式中试图访问用户定义的全局变量。</p>\n</blockquote>\n<h3 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h3><p>令（Directives）是带有 v- 前缀的特殊属性。指令属性的值预期是单一 JavaScript 表达式（除了 v-for，之后再讨论）。指令的职责就是当其表达式的值改变时相应地将某些行为应用到 DOM 上。让我们回顾一下在介绍里的例子：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"seen\"</span>&gt;</span>Now you see me<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这里， v-if 指令将根据表达式 seen 的值的真假来移除/插入 </p><p> 元素。</p>\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h4><p>一些指令能接受一个“参数”，在指令后以冒x号指明。例如， v-bind 指令被用来响应地更新 HTML 属性：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在这里 href 是参数，告知 v-bind 指令将该元素的 href 属性与表达式 url 的值绑定。<br>另一个例子是 v-on 指令，它用于监听 DOM 事件：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h4><p>修饰符（Modifiers）是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">\"onSubmit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>之后当我们更深入地了解 v-on 与 v-model时，会看到更多修饰符的使用。</p>\n<h3 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h3><p>Vue.js 允许你自定义过滤器，可被用作一些常见的文本格式化。过滤器可以用在两个地方：mustache 插值和 v-bind 表达式。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- in mustaches --&gt;</span></div><div class=\"line\">&#123;&#123; message | capitalize &#125;&#125;</div><div class=\"line\"><span class=\"comment\">&lt;!-- in v-bind --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"rawId | formatId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Vue 2.x 中，过滤器只能在 mustache 绑定和 v-bind 表达式（从 2.1.0 开始支持）中使用，因为过滤器设计目的就是用于文本转换。为了在其他指令中实现更复杂的数据变换，你应该使用计算属性。</p>\n</blockquote>\n<p>过滤器函数总接受表达式的值作为第一个参数。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    filters: &#123;</div><div class=\"line\">        <span class=\"attr\">capitalize</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!value) <span class=\"keyword\">return</span> <span class=\"string\">''</span></div><div class=\"line\">        value = value.toString()</div><div class=\"line\">        <span class=\"keyword\">return</span> value.charAt(<span class=\"number\">0</span>).toUpperCase() + value.slice(<span class=\"number\">1</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>过滤器可以串联：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; message | filterA | filterB &#125;&#125;</div></pre></td></tr></table></figure></p>\n<p>过滤器是 JavaScript 函数，因此可以接受参数：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; message | filterA('arg1', arg2) &#125;&#125;</div></pre></td></tr></table></figure></p>\n<p>这里，字符串 ‘arg1’ 将传给过滤器作为第二个参数， arg2 表达式的值将被求值然后传给过滤器作为第三个参数。</p>\n<h3 id=\"缩写\"><a href=\"#缩写\" class=\"headerlink\" title=\"缩写\"></a>缩写</h3><p>v- 前缀在模板中是作为一个标示 Vue 特殊属性的明显标识。当你使用 Vue.js 为现有的标记添加动态行为时，它会很有用，但对于一些经常使用的指令来说有点繁琐。同时，当搭建 Vue.js 管理所有模板的 SPA 时，v- 前缀也变得没那么重要了。因此，Vue.js 为两个最为常用的指令提供了特别的缩写：</p>\n<h4 id=\"v-bind缩写\"><a href=\"#v-bind缩写\" class=\"headerlink\" title=\"v-bind缩写\"></a>v-bind缩写</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 完整语法 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 缩写 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"v-on缩写\"><a href=\"#v-on缩写\" class=\"headerlink\" title=\"v-on缩写\"></a>v-on缩写</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 完整语法 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 缩写 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>它们看起来可能与普通的 HTML 略有不同，但 : 与 @ 对于属性名来说都是合法字符，在所有支持 Vue.js 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记。缩写语法是完全可选的，但随着你更深入地了解它们的作用，你会庆幸拥有它们。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><h3 id=\"Vue-js-是什么\"><a href=\"#Vue-js-是什么\" class=\"headerlink\" title=\"Vue.js 是什么\"></a>Vue.js 是什么</h3><blockquote>\n<p>一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与单文件组件和 Vue 生态系统支持的库结合使用时，Vue 也完全能够为复杂的单页应用程序提供驱动。</p>\n</blockquote>\n<h3 id=\"简单起步\"><a href=\"#简单起步\" class=\"headerlink\" title=\"简单起步\"></a>简单起步</h3><blockquote>\n<p>双向数据绑定，所有的元素都是响应式的。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></div><div class=\"line\">    <span class=\"selector-attr\">[v-cloak]</span>&#123;</div><div class=\"line\">        <span class=\"attribute\">visibility</span>: hidden; </div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123; message &#125;&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"message\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--</span></div><div class=\"line\">        Vue的数据绑定方法有：</div><div class=\"line\">        双花括号：&#123;&#123;&#125;&#125;</div><div class=\"line\">        V开头的bind：v-bind</div><div class=\"line\">    --&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue/dist/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">        <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span>,</div><div class=\"line\">        <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">message</span>: <span class=\"string\">'Hello Vue!'</span>+ <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n</blockquote>","more":"<h3 id=\"Vue指令\"><a href=\"#Vue指令\" class=\"headerlink\" title=\"Vue指令\"></a>Vue指令</h3><blockquote>\n<p>看到的以v-开头的属性，被称为指令。<br>v-bind，用处表示“将这个元素节点的title属性和Vue实例中的massage属性保持一致。<br>可以简写为‘:’，:title。”<br>v-on,指令监听 DOM 事件来触发一些 JavaScript 代码。<br>可以简写为‘@’，@click</p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"CDN\"><a href=\"#CDN\" class=\"headerlink\" title=\"CDN\"></a>CDN</h3><blockquote>\n<p>推荐：<a href=\"https://unpkg.com/vue@2.3.4/dist/vue.js\" target=\"_blank\" rel=\"external\">unpkg</a>, 会保持和 npm 发布的最新的版本一致。可以在 <a href=\"https://unpkg.com/vue/\" target=\"_blank\" rel=\"external\">unpkg.com/vue/</a> 浏览 npm 包资源。<br>也可以从 <a href=\"https://cdn.jsdelivr.net/vue/2.1.3/vue.js\" target=\"_blank\" rel=\"external\">jsdelivr</a> 或 <a href=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.3/vue.js\" target=\"_blank\" rel=\"external\">cdnjs</a> 获取，不过这两个服务版本更新可能略滞后。</p>\n</blockquote>\n<h3 id=\"NPM\"><a href=\"#NPM\" class=\"headerlink\" title=\"NPM\"></a>NPM</h3><blockquote>\n<p>在用 Vue.js 构建大型应用时推荐使用 NPM 安装， NPM 能很好地和诸如 <a href=\"http://webpack.github.io/\" target=\"_blank\" rel=\"external\">Webpack</a> 或 <a href=\"http://browserify.org/\" target=\"_blank\" rel=\"external\">Browserify</a> 模块打包器配合使用。 Vue.js 也提供配套工具来开发单文件组件。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install vue</div></pre></td></tr></table></figure>\n<h3 id=\"构建方式\"><a href=\"#构建方式\" class=\"headerlink\" title=\"构建方式\"></a>构建方式</h3><h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><blockquote>\n<p>有两种构建方式，独立构建和运行构建。它们的区别在于前者包含模板编译器而后者不包含。</p>\n</blockquote>\n<h4 id=\"模板编译器\"><a href=\"#模板编译器\" class=\"headerlink\" title=\"模板编译器\"></a>模板编译器</h4><blockquote>\n<p>模板编译器的职责是将模板字符串编译为纯 JavaScript 的渲染函数。如果你想要在组件中使用 template 选项，你就需要编译器。</p>\n</blockquote>\n<h4 id=\"模板字符串：template\"><a href=\"#模板字符串：template\" class=\"headerlink\" title=\"模板字符串：template\"></a>模板字符串：template</h4><p>####el</p>\n<blockquote>\n<p>提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标。可以是 CSS 选择器，也可以是一个 HTMLElement 实例。</p>\n</blockquote>\n<h4 id=\"template\"><a href=\"#template\" class=\"headerlink\" title=\"template\"></a>template</h4><blockquote>\n<p>一个字符串模板作为 Vue 实例的标识使用。模板将会 替换 挂载的元素。挂载元素的内容都将被忽略，除非模板的内容有分发 slot。</p>\n</blockquote>\n<h4 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h4><blockquote>\n<p>字符串模板的代替方案，允许你发挥 JavaScript 最大的编程能力。render 函数接收一个 createElement 方法作为第一个参数用来创建 VNode。</p>\n</blockquote>\n<h4 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h4><blockquote>\n<p>独立构建包含模板编译器并支持 template 选项。 它也依赖于浏览器的接口的存在，所以你不能使用它来为服务器端渲染。<br>运行时构建不包含模板编译器，因此不支持 template 选项，只能用 render 选项，但即使使用运行时构建，在单文件组件中也依然可以写模板，因为单文件组件的模板会在构建时预编译为 render 函数。运行时构建比独立构建要轻量30%，只有 17.14 Kb min+gzip大小。</p>\n</blockquote>\n<h4 id=\"为什么要使用独立构建和运行时构建？\"><a href=\"#为什么要使用独立构建和运行时构建？\" class=\"headerlink\" title=\"为什么要使用独立构建和运行时构建？\"></a>为什么要使用独立构建和运行时构建？</h4><blockquote>\n<p>Vue.js 的运行过程实际上包含两步。第一步，编译器将字符串模板（template）编译为渲染函数（render），称之为编译过程；第二步，运行时实际调用编译的渲染函数，称之为运行过程<br>由于 Vue.js 1.0 的编译过程需要依赖浏览器的 DOM，所以无法（或者说没有意义）将编译器和运行时分开。因此在 Vue.js 1.0 分发包中，编译器和运行时是打包在一起，都在浏览器端执行。<br>然而到了 Vue.js 2.0，为了支持服务端渲染（server-side rendering），编译器不能依赖于 DOM，所以必须将编译器和运行时分开。这就形成了独立构建（编译器 + 运行时）和运行时构建（仅运行时）。显而易见，运行时构建要小于独立构建。<br>在现代前端工程构建中，通常会使用 vue-loader 和 vueify 预编译模板。在这种情况下，只需要打包运行时，而不需要打包编译器，运行时构建即可满足所需。当然，如果你需要在前端使用 template 选项实时编译模板，那么还是需要使用独立构建将编译器发送到浏览器。</p>\n</blockquote>\n<h5 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h5><blockquote>\n<p>两种编译模式是为了服务器端渲染和浏览器执行两种不同环境产生的<br>一般来讲独立构建适用于服务器端渲染<br>浏览器 实际运行时为 运行时构建  但是如果需要在前端使用 template 选项实时编译模板，那么还是需要使用独立构建将编译器发送到浏览器。</p>\n</blockquote>\n<h2 id=\"命令行工具\"><a href=\"#命令行工具\" class=\"headerlink\" title=\"命令行工具\"></a>命令行工具</h2><p>Vue.js 提供一个<a href=\"https://github.com/vuejs/vue-cli\" target=\"_blank\" rel=\"external\">官方命令行工具</a>，可用于快速搭建大型单页应用。该工具提供开箱即用的构建工具配置，带来现代化的前端开发流程。只需几分钟即可创建并启动一个带热重载、保存时静态检查以及可用于生产环境的构建配置的项目：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 全局安装 vue-cli</div><div class=\"line\">$ npm install --global vue-cli</div><div class=\"line\"># 创建一个基于 webpack 模板的新项目</div><div class=\"line\">$ vue init webpack my-project</div><div class=\"line\"># 安装依赖，走你</div><div class=\"line\">$ cd my-project</div><div class=\"line\">$ npm install</div><div class=\"line\">$ npm run dev</div></pre></td></tr></table></figure></p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><h3 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    <span class=\"comment\">// 选项</span></div><div class=\"line\">    el:<span class=\"string\">'#app'</span>,</div><div class=\"line\">    <span class=\"attr\">data</span>:&#123;&#125;,</div><div class=\"line\">    .....</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>你可以在构造器的外部用vm来代表vm构造器</p>\n<blockquote>\n<p>在实例化 Vue 时，需要传入一个选项对象，它可以包含数据、模板、挂载元素、方法、生命周期钩子等选项。全部的选项可以在 <a href=\"https://cn.vuejs.org/v2/api/\" target=\"_blank\" rel=\"external\">API 文档</a>中查看。</p>\n</blockquote>\n<h3 id=\"组件构造器\"><a href=\"#组件构造器\" class=\"headerlink\" title=\"组件构造器\"></a>组件构造器</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MyComponent = Vue.extend(&#123;</div><div class=\"line\">    <span class=\"comment\">// 扩展选项</span></div><div class=\"line\">&#125;);</div><div class=\"line\">    <span class=\"comment\">// 所有的 `MyComponent` 实例都将以预定义的扩展选项被创建</span></div><div class=\"line\"><span class=\"keyword\">var</span> myComponentInstance = <span class=\"keyword\">new</span> MyComponent();</div></pre></td></tr></table></figure>\n<blockquote>\n<p>尽管可以命令式地创建扩展实例，不过在多数情况下建议将组件构造器注册为一个自定义元素，然后声明式地用在模板中。我们将在后面详细说明<a href=\"https://anhaoran.github.io/2017/06/29/Vue-components/\" target=\"_blank\" rel=\"external\">组件系统</a>。现在你只需知道所有的 Vue.js 组件其实都是被扩展的 Vue 实例。</p>\n</blockquote>\n<h2 id=\"属性和方法\"><a href=\"#属性和方法\" class=\"headerlink\" title=\"属性和方法\"></a>属性和方法</h2><p>每个 Vue 实例都会代理其 data 对象里所有的属性：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</div><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    <span class=\"attr\">data</span>: data</div><div class=\"line\">&#125;)</div><div class=\"line\">vm.a === data.a <span class=\"comment\">// -&gt; true</span></div><div class=\"line\"><span class=\"comment\">// 设置属性也会影响到原始数据</span></div><div class=\"line\">vm.a = <span class=\"number\">2</span></div><div class=\"line\">data.a <span class=\"comment\">// -&gt; 2</span></div><div class=\"line\"><span class=\"comment\">// ... 反之亦然</span></div><div class=\"line\">data.a = <span class=\"number\">3</span></div><div class=\"line\">vm.a <span class=\"comment\">// -&gt; 3</span></div></pre></td></tr></table></figure></p>\n<p>注意只有这些被代理的属性是响应的。如果在实例创建之后添加新的属性到实例上，它不会触发视图更新。我们将在后面详细讨论响应系统。<br>除了 data 属性， Vue 实例暴露了一些有用的实例属性与方法。这些属性与方法都有前缀 $，以便与代理的 data 属性区分。例如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</div><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    <span class=\"attr\">el</span>: <span class=\"string\">'#example'</span>,</div><div class=\"line\">        <span class=\"attr\">data</span>: data</div><div class=\"line\">    &#125;)</div><div class=\"line\">vm.$data === data <span class=\"comment\">// -&gt; true</span></div><div class=\"line\">vm.$el === <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'example'</span>) <span class=\"comment\">// -&gt; true</span></div><div class=\"line\"><span class=\"comment\">// $watch 是一个实例方法</span></div><div class=\"line\">vm.$watch(<span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal, oldVal</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 这个回调将在 `vm.a`  改变后调用</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意，不要在实例属性或者回调函数中（如 vm.$watch(‘a’, newVal =&gt; this.myMethod())）使用箭头函数。因为箭头函数绑定父级上下文，所以 this 不会像预想的一样是 Vue 实例，而是 this.myMethod 未被定义。<br>实例属性和方法的完整列表中查阅 <a href=\"https://anhaoran.github.io/2017/06/29/Vue-api/\" target=\"_blank\" rel=\"external\">API</a> 参考。</p>\n</blockquote>\n<h2 id=\"实例生命周期\"><a href=\"#实例生命周期\" class=\"headerlink\" title=\"实例生命周期\"></a>实例生命周期</h2><p>每个 Vue 实例在被创建之前都要经过一系列的初始化过程。例如，实例需要配置数据观测(data observer)、编译模版、挂载实例到 DOM ，然后在数据变化时更新 DOM 。在这个过程中，实例也会调用一些 生命周期钩子 ，这就给我们提供了执行自定义逻辑的机会。例如，created 这个钩子在实例被创建之后被调用：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\"><span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span></div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// `this` 指向 vm 实例</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'a is: '</span> + <span class=\"keyword\">this</span>.a)</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// -&gt; \"a is: 1\"</span></div></pre></td></tr></table></figure></p>\n<p>也有一些其它的钩子，在实例生命周期的不同阶段调用，如 mounted、 updated 、destroyed 。钩子的 this 指向调用它的 Vue 实例。一些用户可能会问 Vue.js 是否有“控制器”的概念？答案是，没有。组件的自定义逻辑可以分布在这些钩子中。</p>\n<h3 id=\"生命周期图示\"><a href=\"#生命周期图示\" class=\"headerlink\" title=\"生命周期图示\"></a>生命周期图示</h3><p>下图说明了实例的生命周期。你不需要立马弄明白所有的东西，不过以后它会有帮助。<br><img src=\"https://anhaoran.github.io/ImageServer/Vue/lifecycle.png\" alt=\"\"></p>\n<h2 id=\"模板语法\"><a href=\"#模板语法\" class=\"headerlink\" title=\"模板语法\"></a>模板语法</h2><p>Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML ，所以能被遵循规范的浏览器和 HTML 解析器解析。<br>在底层的实现上， Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，在应用状态改变时， Vue 能够智能地计算出重新渲染组件的最小代价并应用到 DOM 操作上。<br>如果你熟悉虚拟 DOM 并且偏爱 JavaScript 的原始力量，你也可以不用模板，直接写渲染（render）函数，使用可选的 JSX 语法。</p>\n<h3 id=\"插值\"><a href=\"#插值\" class=\"headerlink\" title=\"插值\"></a>插值</h3><h4 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h4><p>数据绑定最常见的形式就是使用 “Mustache” 语法（双大括号）的文本插值：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>Mustache 标签将会被替代为对应数据对象上 msg 属性的值。无论何时，绑定的数据对象上 msg 属性发生了改变，插值处的内容都会更新。<br>通过使用 v-once 指令，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。但请留心这会影响到该节点上所有的数据绑定：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-once</span>&gt;</span>This will never change: &#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"纯HTML\"><a href=\"#纯HTML\" class=\"headerlink\" title=\"纯HTML\"></a>纯HTML</h4><p>双大括号会将数据解释为纯文本，而非 HTML 。为了输出真正的 HTML ，你需要使用 v-html 指令：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"rawHtml\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>被插入的内容都会被当做 HTML —— 数据绑定会被忽略。注意，你不能使用 v-html 来复合局部模板，因为 Vue 不是基于字符串的模板引擎。组件更适合担任 UI 重用与复合的基本单元。</p>\n<blockquote>\n<p>你的站点上动态渲染的任意 HTML 可能会非常危险，因为它很容易导致 XSS 攻击。请只对可信内容使用 HTML 插值，绝不要对用户提供的内容插值。</p>\n</blockquote>\n<h4 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h4><p>Mustache 不能在 HTML 属性中使用，应使用 v-bind 指令：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"dynamicId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这对布尔值的属性也有效 —— 如果条件被求值为 false 的话该属性会被移除：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-bind:disabled</span>=<span class=\"string\">\"someDynamicCondition\"</span>&gt;</span>Button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"使用JavaScript表达式\"><a href=\"#使用JavaScript表达式\" class=\"headerlink\" title=\"使用JavaScript表达式\"></a>使用JavaScript表达式</h4><p>迄今为止，在我们的模板中，我们一直都只绑定简单的属性键值。但实际上，对于所有的数据绑定， Vue.js 都提供了完全的 JavaScript 表达式支持。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; number + 1 &#125;&#125;</div><div class=\"line\">&#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;</div><div class=\"line\">&#123;&#123; message.split('').reverse().join('') &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"'list-' + id\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 这是语句，不是表达式 --&gt;</span></div><div class=\"line\">&#123;&#123; var a = 1 &#125;&#125;</div><div class=\"line\"><span class=\"comment\">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></div><div class=\"line\">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>模板表达式都被放在沙盒中，只能访问全局变量的一个白名单，如 Math 和 Date 。你不应该在模板表达式中试图访问用户定义的全局变量。</p>\n</blockquote>\n<h3 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h3><p>令（Directives）是带有 v- 前缀的特殊属性。指令属性的值预期是单一 JavaScript 表达式（除了 v-for，之后再讨论）。指令的职责就是当其表达式的值改变时相应地将某些行为应用到 DOM 上。让我们回顾一下在介绍里的例子：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"seen\"</span>&gt;</span>Now you see me<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这里， v-if 指令将根据表达式 seen 的值的真假来移除/插入 </p><p> 元素。</p>\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h4><p>一些指令能接受一个“参数”，在指令后以冒x号指明。例如， v-bind 指令被用来响应地更新 HTML 属性：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在这里 href 是参数，告知 v-bind 指令将该元素的 href 属性与表达式 url 的值绑定。<br>另一个例子是 v-on 指令，它用于监听 DOM 事件：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h4><p>修饰符（Modifiers）是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">\"onSubmit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>之后当我们更深入地了解 v-on 与 v-model时，会看到更多修饰符的使用。</p>\n<h3 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h3><p>Vue.js 允许你自定义过滤器，可被用作一些常见的文本格式化。过滤器可以用在两个地方：mustache 插值和 v-bind 表达式。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- in mustaches --&gt;</span></div><div class=\"line\">&#123;&#123; message | capitalize &#125;&#125;</div><div class=\"line\"><span class=\"comment\">&lt;!-- in v-bind --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"rawId | formatId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Vue 2.x 中，过滤器只能在 mustache 绑定和 v-bind 表达式（从 2.1.0 开始支持）中使用，因为过滤器设计目的就是用于文本转换。为了在其他指令中实现更复杂的数据变换，你应该使用计算属性。</p>\n</blockquote>\n<p>过滤器函数总接受表达式的值作为第一个参数。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    filters: &#123;</div><div class=\"line\">        <span class=\"attr\">capitalize</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!value) <span class=\"keyword\">return</span> <span class=\"string\">''</span></div><div class=\"line\">        value = value.toString()</div><div class=\"line\">        <span class=\"keyword\">return</span> value.charAt(<span class=\"number\">0</span>).toUpperCase() + value.slice(<span class=\"number\">1</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>过滤器可以串联：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; message | filterA | filterB &#125;&#125;</div></pre></td></tr></table></figure></p>\n<p>过滤器是 JavaScript 函数，因此可以接受参数：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; message | filterA('arg1', arg2) &#125;&#125;</div></pre></td></tr></table></figure></p>\n<p>这里，字符串 ‘arg1’ 将传给过滤器作为第二个参数， arg2 表达式的值将被求值然后传给过滤器作为第三个参数。</p>\n<h3 id=\"缩写\"><a href=\"#缩写\" class=\"headerlink\" title=\"缩写\"></a>缩写</h3><p>v- 前缀在模板中是作为一个标示 Vue 特殊属性的明显标识。当你使用 Vue.js 为现有的标记添加动态行为时，它会很有用，但对于一些经常使用的指令来说有点繁琐。同时，当搭建 Vue.js 管理所有模板的 SPA 时，v- 前缀也变得没那么重要了。因此，Vue.js 为两个最为常用的指令提供了特别的缩写：</p>\n<h4 id=\"v-bind缩写\"><a href=\"#v-bind缩写\" class=\"headerlink\" title=\"v-bind缩写\"></a>v-bind缩写</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 完整语法 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 缩写 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"v-on缩写\"><a href=\"#v-on缩写\" class=\"headerlink\" title=\"v-on缩写\"></a>v-on缩写</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 完整语法 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 缩写 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>它们看起来可能与普通的 HTML 略有不同，但 : 与 @ 对于属性名来说都是合法字符，在所有支持 Vue.js 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记。缩写语法是完全可选的，但随着你更深入地了解它们的作用，你会庆幸拥有它们。</p>"},{"title":"css div居中","date":"2017-04-14T08:31:56.000Z","toc":true,"_content":"\n使用css3将一个div水平和垂直居中显示\n使用css3将一个div水平和垂直居中显示\n\n方案一：\n\ndiv绝对定位水平垂直居中【margin:auto实现绝对定位元素的居中】，\n<!--more-->\n代码两个关键点：1.上下左右均0位置定位；\n\n　　　　　　　　2.margin: auto; 其width、height如何更改都是居中显示的，兼容性可以,IE7及之前版本不支持\n\n复制代码\n .div1{\n     width: 100px;\n     height: 100px;\n     border: 4px solid red;\n     position: absolute;\n     left:0;\n     right:0;\n     top: 0;\n     bottom: 0;\n     margin: auto;\n     /*50%为自身尺寸的一半*/\n }\n代码\n\n优点：\n\n1.支持跨浏览器，包括IE8-IE10.\n\n2.无需其他特殊标记，CSS代码量少\n\n3.支持百分比%属性值和min-/max-属性\n\n4.只用这一个类可实现任何内容块居中\n\n5.不论是否设置padding都可居中（在不使用box-sizing属性的前提下）\n\n6.内容块可以被重绘。\n\n7.完美支持图片居中。\n\n缺点：\n\n1.必须声明高度（查看可变高度Variable Height）。\n\n2.建议设置overflow:auto来防止内容越界溢出。（查看溢出Overflow）。\n\n3.在Windows Phone设备上不起作用。\n\n浏览器兼容性：\n\nChrome,Firefox, Safari, Mobile Safari, IE8-10.\n\n绝对定位方法在最新版的Chrome,Firefox, Safari, Mobile Safari, IE8-10.上均测试通过。\n\n方案二：\n\ndiv绝对定位水平垂直居中【margin 负间距】\n\n此方案代码关键点：\n1.必需知道该div的宽度和高度，\n2.然后设置位置为绝对位置，\n3.距离页面窗口左边框和上边框的距离设置为50%，这个50%就是指页面窗口的宽度和高度的50%，\n4.最后将该div分别左移和上移，左移和上移的大小就是该DIV宽度和高度的一半。\n\n复制代码\n.div1{\n\n    width: 100px;\n    height: 100px;\n    border: 4px solid red;\n    position: absolute;\n    text-align: center;\n    left:50%;\n    top: 50%;\n    margin: -50px 0 0 -50px;\n    /*50%为自身尺寸的一半*/\n}\n亦可写成：\n\n.div1{\n  \n    width: 100px;\n    height: 100px;\n    background-color: green;\n    position: absolute;\n\n    text-align: center;\n\n    left:50%;\n    top: 50%;\n    margin-left: -50px; /*  width/2  */\n    margin-top: -50px; /*  height /2 */  \n\n}\n\n这或许是当前最流行的使用方法。\n\n测试表明，这是唯一在IE6-IE7上也表现良好的方法。\n\n优点：\n\n1. 良好的跨浏览器特性，兼容IE6-IE7。\n\n2. 代码量少。\n\n缺点：\n\n1. 不能自适应。不支持百分比尺寸和min-/max-属性设置。\n\n2. 内容可能溢出容器。\n\n3. 边距大小与padding,和是否定义box-sizing: border-box有关，计算需要根据不同情况。\n\n方案三：\n\ndiv绝对定位水平垂直居中【Transforms 变形】\n\n这是最简单的方法，不仅能实现绝对居中同样的效果，也支持联合可变高度方式使用。内容块定义transform: translate(-50%,-50%)  必须加上\ntop: 50%; left: 50%;\n\n.div1{\n   \n    width: 200px;\n    height: 200px;\n    background-color: pink;\n    position: absolute;\n    text-align: center;\n    left:50%;\n    top: 50%;\n    /*-webkit-transform: translate(-50%,-50%);*/\n    /*-ms-transform: translate(-50%,-50%);*/\n    transform: translate(-50%,-50%);\n}\n\n优点：\n\n1.  内容可变高度\n\n2.  代码量少\n缺点：\n1.  IE8不支持\n2.  属性需要写浏览器厂商前缀\n3.  可能干扰其他transform效果\n4.  某些情形下会出现文本或元素边界渲染模糊的现象\n\n若只是水平（方向）居中：\n\n复制代码\n.div1{\n    width: 100px;\n    height: 100px;\n    border: 4px solid red;\n    text-align: center;\n    margin: 0  auto;\n    /*50%为自身尺寸的一半*/\n}\n\ncss3不定宽高水平垂直居中\n\n只要三句话就可以实现不定宽高水平垂直居中。\n\n1 justify-content:center;//子元素水平居中\n2 align-items:center;//子元素垂直居中\n3 display:-webkit-flex;\n在父级元素上面加上上面3句话，就可以实现子元素水平垂直居中。\n","source":"_posts/css-div居中.md","raw":"---\ntitle: css div居中\ndate: 2017-04-14 16:31:56\ntags: css\ntoc: true\n---\n\n使用css3将一个div水平和垂直居中显示\n使用css3将一个div水平和垂直居中显示\n\n方案一：\n\ndiv绝对定位水平垂直居中【margin:auto实现绝对定位元素的居中】，\n<!--more-->\n代码两个关键点：1.上下左右均0位置定位；\n\n　　　　　　　　2.margin: auto; 其width、height如何更改都是居中显示的，兼容性可以,IE7及之前版本不支持\n\n复制代码\n .div1{\n     width: 100px;\n     height: 100px;\n     border: 4px solid red;\n     position: absolute;\n     left:0;\n     right:0;\n     top: 0;\n     bottom: 0;\n     margin: auto;\n     /*50%为自身尺寸的一半*/\n }\n代码\n\n优点：\n\n1.支持跨浏览器，包括IE8-IE10.\n\n2.无需其他特殊标记，CSS代码量少\n\n3.支持百分比%属性值和min-/max-属性\n\n4.只用这一个类可实现任何内容块居中\n\n5.不论是否设置padding都可居中（在不使用box-sizing属性的前提下）\n\n6.内容块可以被重绘。\n\n7.完美支持图片居中。\n\n缺点：\n\n1.必须声明高度（查看可变高度Variable Height）。\n\n2.建议设置overflow:auto来防止内容越界溢出。（查看溢出Overflow）。\n\n3.在Windows Phone设备上不起作用。\n\n浏览器兼容性：\n\nChrome,Firefox, Safari, Mobile Safari, IE8-10.\n\n绝对定位方法在最新版的Chrome,Firefox, Safari, Mobile Safari, IE8-10.上均测试通过。\n\n方案二：\n\ndiv绝对定位水平垂直居中【margin 负间距】\n\n此方案代码关键点：\n1.必需知道该div的宽度和高度，\n2.然后设置位置为绝对位置，\n3.距离页面窗口左边框和上边框的距离设置为50%，这个50%就是指页面窗口的宽度和高度的50%，\n4.最后将该div分别左移和上移，左移和上移的大小就是该DIV宽度和高度的一半。\n\n复制代码\n.div1{\n\n    width: 100px;\n    height: 100px;\n    border: 4px solid red;\n    position: absolute;\n    text-align: center;\n    left:50%;\n    top: 50%;\n    margin: -50px 0 0 -50px;\n    /*50%为自身尺寸的一半*/\n}\n亦可写成：\n\n.div1{\n  \n    width: 100px;\n    height: 100px;\n    background-color: green;\n    position: absolute;\n\n    text-align: center;\n\n    left:50%;\n    top: 50%;\n    margin-left: -50px; /*  width/2  */\n    margin-top: -50px; /*  height /2 */  \n\n}\n\n这或许是当前最流行的使用方法。\n\n测试表明，这是唯一在IE6-IE7上也表现良好的方法。\n\n优点：\n\n1. 良好的跨浏览器特性，兼容IE6-IE7。\n\n2. 代码量少。\n\n缺点：\n\n1. 不能自适应。不支持百分比尺寸和min-/max-属性设置。\n\n2. 内容可能溢出容器。\n\n3. 边距大小与padding,和是否定义box-sizing: border-box有关，计算需要根据不同情况。\n\n方案三：\n\ndiv绝对定位水平垂直居中【Transforms 变形】\n\n这是最简单的方法，不仅能实现绝对居中同样的效果，也支持联合可变高度方式使用。内容块定义transform: translate(-50%,-50%)  必须加上\ntop: 50%; left: 50%;\n\n.div1{\n   \n    width: 200px;\n    height: 200px;\n    background-color: pink;\n    position: absolute;\n    text-align: center;\n    left:50%;\n    top: 50%;\n    /*-webkit-transform: translate(-50%,-50%);*/\n    /*-ms-transform: translate(-50%,-50%);*/\n    transform: translate(-50%,-50%);\n}\n\n优点：\n\n1.  内容可变高度\n\n2.  代码量少\n缺点：\n1.  IE8不支持\n2.  属性需要写浏览器厂商前缀\n3.  可能干扰其他transform效果\n4.  某些情形下会出现文本或元素边界渲染模糊的现象\n\n若只是水平（方向）居中：\n\n复制代码\n.div1{\n    width: 100px;\n    height: 100px;\n    border: 4px solid red;\n    text-align: center;\n    margin: 0  auto;\n    /*50%为自身尺寸的一半*/\n}\n\ncss3不定宽高水平垂直居中\n\n只要三句话就可以实现不定宽高水平垂直居中。\n\n1 justify-content:center;//子元素水平居中\n2 align-items:center;//子元素垂直居中\n3 display:-webkit-flex;\n在父级元素上面加上上面3句话，就可以实现子元素水平垂直居中。\n","slug":"css-div居中","published":1,"updated":"2017-06-28T06:59:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfnkq6m000ulyfyhdxm7xyg","content":"<p>使用css3将一个div水平和垂直居中显示<br>使用css3将一个div水平和垂直居中显示</p>\n<p>方案一：</p>\n<p>div绝对定位水平垂直居中【margin:auto实现绝对定位元素的居中】，<br><a id=\"more\"></a><br>代码两个关键点：1.上下左右均0位置定位；</p>\n<p>　　　　　　　　2.margin: auto; 其width、height如何更改都是居中显示的，兼容性可以,IE7及之前版本不支持</p>\n<p>复制代码<br> .div1{<br>     width: 100px;<br>     height: 100px;<br>     border: 4px solid red;<br>     position: absolute;<br>     left:0;<br>     right:0;<br>     top: 0;<br>     bottom: 0;<br>     margin: auto;<br>     /<em>50%为自身尺寸的一半</em>/<br> }<br>代码</p>\n<p>优点：</p>\n<p>1.支持跨浏览器，包括IE8-IE10.</p>\n<p>2.无需其他特殊标记，CSS代码量少</p>\n<p>3.支持百分比%属性值和min-/max-属性</p>\n<p>4.只用这一个类可实现任何内容块居中</p>\n<p>5.不论是否设置padding都可居中（在不使用box-sizing属性的前提下）</p>\n<p>6.内容块可以被重绘。</p>\n<p>7.完美支持图片居中。</p>\n<p>缺点：</p>\n<p>1.必须声明高度（查看可变高度Variable Height）。</p>\n<p>2.建议设置overflow:auto来防止内容越界溢出。（查看溢出Overflow）。</p>\n<p>3.在Windows Phone设备上不起作用。</p>\n<p>浏览器兼容性：</p>\n<p>Chrome,Firefox, Safari, Mobile Safari, IE8-10.</p>\n<p>绝对定位方法在最新版的Chrome,Firefox, Safari, Mobile Safari, IE8-10.上均测试通过。</p>\n<p>方案二：</p>\n<p>div绝对定位水平垂直居中【margin 负间距】</p>\n<p>此方案代码关键点：<br>1.必需知道该div的宽度和高度，<br>2.然后设置位置为绝对位置，<br>3.距离页面窗口左边框和上边框的距离设置为50%，这个50%就是指页面窗口的宽度和高度的50%，<br>4.最后将该div分别左移和上移，左移和上移的大小就是该DIV宽度和高度的一半。</p>\n<p>复制代码<br>.div1{</p>\n<pre><code>width: 100px;\nheight: 100px;\nborder: 4px solid red;\nposition: absolute;\ntext-align: center;\nleft:50%;\ntop: 50%;\nmargin: -50px 0 0 -50px;\n/*50%为自身尺寸的一半*/\n</code></pre><p>}<br>亦可写成：</p>\n<p>.div1{</p>\n<pre><code>width: 100px;\nheight: 100px;\nbackground-color: green;\nposition: absolute;\n\ntext-align: center;\n\nleft:50%;\ntop: 50%;\nmargin-left: -50px; /*  width/2  */\nmargin-top: -50px; /*  height /2 */  \n</code></pre><p>}</p>\n<p>这或许是当前最流行的使用方法。</p>\n<p>测试表明，这是唯一在IE6-IE7上也表现良好的方法。</p>\n<p>优点：</p>\n<ol>\n<li><p>良好的跨浏览器特性，兼容IE6-IE7。</p>\n</li>\n<li><p>代码量少。</p>\n</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li><p>不能自适应。不支持百分比尺寸和min-/max-属性设置。</p>\n</li>\n<li><p>内容可能溢出容器。</p>\n</li>\n<li><p>边距大小与padding,和是否定义box-sizing: border-box有关，计算需要根据不同情况。</p>\n</li>\n</ol>\n<p>方案三：</p>\n<p>div绝对定位水平垂直居中【Transforms 变形】</p>\n<p>这是最简单的方法，不仅能实现绝对居中同样的效果，也支持联合可变高度方式使用。内容块定义transform: translate(-50%,-50%)  必须加上<br>top: 50%; left: 50%;</p>\n<p>.div1{</p>\n<pre><code>width: 200px;\nheight: 200px;\nbackground-color: pink;\nposition: absolute;\ntext-align: center;\nleft:50%;\ntop: 50%;\n/*-webkit-transform: translate(-50%,-50%);*/\n/*-ms-transform: translate(-50%,-50%);*/\ntransform: translate(-50%,-50%);\n</code></pre><p>}</p>\n<p>优点：</p>\n<ol>\n<li><p>内容可变高度</p>\n</li>\n<li><p>代码量少<br>缺点：</p>\n</li>\n<li>IE8不支持</li>\n<li>属性需要写浏览器厂商前缀</li>\n<li>可能干扰其他transform效果</li>\n<li>某些情形下会出现文本或元素边界渲染模糊的现象</li>\n</ol>\n<p>若只是水平（方向）居中：</p>\n<p>复制代码<br>.div1{<br>    width: 100px;<br>    height: 100px;<br>    border: 4px solid red;<br>    text-align: center;<br>    margin: 0  auto;<br>    /<em>50%为自身尺寸的一半</em>/<br>}</p>\n<p>css3不定宽高水平垂直居中</p>\n<p>只要三句话就可以实现不定宽高水平垂直居中。</p>\n<p>1 justify-content:center;//子元素水平居中<br>2 align-items:center;//子元素垂直居中<br>3 display:-webkit-flex;<br>在父级元素上面加上上面3句话，就可以实现子元素水平垂直居中。</p>\n","site":{"data":{}},"excerpt":"<p>使用css3将一个div水平和垂直居中显示<br>使用css3将一个div水平和垂直居中显示</p>\n<p>方案一：</p>\n<p>div绝对定位水平垂直居中【margin:auto实现绝对定位元素的居中】，<br>","more":"<br>代码两个关键点：1.上下左右均0位置定位；</p>\n<p>　　　　　　　　2.margin: auto; 其width、height如何更改都是居中显示的，兼容性可以,IE7及之前版本不支持</p>\n<p>复制代码<br> .div1{<br>     width: 100px;<br>     height: 100px;<br>     border: 4px solid red;<br>     position: absolute;<br>     left:0;<br>     right:0;<br>     top: 0;<br>     bottom: 0;<br>     margin: auto;<br>     /<em>50%为自身尺寸的一半</em>/<br> }<br>代码</p>\n<p>优点：</p>\n<p>1.支持跨浏览器，包括IE8-IE10.</p>\n<p>2.无需其他特殊标记，CSS代码量少</p>\n<p>3.支持百分比%属性值和min-/max-属性</p>\n<p>4.只用这一个类可实现任何内容块居中</p>\n<p>5.不论是否设置padding都可居中（在不使用box-sizing属性的前提下）</p>\n<p>6.内容块可以被重绘。</p>\n<p>7.完美支持图片居中。</p>\n<p>缺点：</p>\n<p>1.必须声明高度（查看可变高度Variable Height）。</p>\n<p>2.建议设置overflow:auto来防止内容越界溢出。（查看溢出Overflow）。</p>\n<p>3.在Windows Phone设备上不起作用。</p>\n<p>浏览器兼容性：</p>\n<p>Chrome,Firefox, Safari, Mobile Safari, IE8-10.</p>\n<p>绝对定位方法在最新版的Chrome,Firefox, Safari, Mobile Safari, IE8-10.上均测试通过。</p>\n<p>方案二：</p>\n<p>div绝对定位水平垂直居中【margin 负间距】</p>\n<p>此方案代码关键点：<br>1.必需知道该div的宽度和高度，<br>2.然后设置位置为绝对位置，<br>3.距离页面窗口左边框和上边框的距离设置为50%，这个50%就是指页面窗口的宽度和高度的50%，<br>4.最后将该div分别左移和上移，左移和上移的大小就是该DIV宽度和高度的一半。</p>\n<p>复制代码<br>.div1{</p>\n<pre><code>width: 100px;\nheight: 100px;\nborder: 4px solid red;\nposition: absolute;\ntext-align: center;\nleft:50%;\ntop: 50%;\nmargin: -50px 0 0 -50px;\n/*50%为自身尺寸的一半*/\n</code></pre><p>}<br>亦可写成：</p>\n<p>.div1{</p>\n<pre><code>width: 100px;\nheight: 100px;\nbackground-color: green;\nposition: absolute;\n\ntext-align: center;\n\nleft:50%;\ntop: 50%;\nmargin-left: -50px; /*  width/2  */\nmargin-top: -50px; /*  height /2 */  \n</code></pre><p>}</p>\n<p>这或许是当前最流行的使用方法。</p>\n<p>测试表明，这是唯一在IE6-IE7上也表现良好的方法。</p>\n<p>优点：</p>\n<ol>\n<li><p>良好的跨浏览器特性，兼容IE6-IE7。</p>\n</li>\n<li><p>代码量少。</p>\n</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li><p>不能自适应。不支持百分比尺寸和min-/max-属性设置。</p>\n</li>\n<li><p>内容可能溢出容器。</p>\n</li>\n<li><p>边距大小与padding,和是否定义box-sizing: border-box有关，计算需要根据不同情况。</p>\n</li>\n</ol>\n<p>方案三：</p>\n<p>div绝对定位水平垂直居中【Transforms 变形】</p>\n<p>这是最简单的方法，不仅能实现绝对居中同样的效果，也支持联合可变高度方式使用。内容块定义transform: translate(-50%,-50%)  必须加上<br>top: 50%; left: 50%;</p>\n<p>.div1{</p>\n<pre><code>width: 200px;\nheight: 200px;\nbackground-color: pink;\nposition: absolute;\ntext-align: center;\nleft:50%;\ntop: 50%;\n/*-webkit-transform: translate(-50%,-50%);*/\n/*-ms-transform: translate(-50%,-50%);*/\ntransform: translate(-50%,-50%);\n</code></pre><p>}</p>\n<p>优点：</p>\n<ol>\n<li><p>内容可变高度</p>\n</li>\n<li><p>代码量少<br>缺点：</p>\n</li>\n<li>IE8不支持</li>\n<li>属性需要写浏览器厂商前缀</li>\n<li>可能干扰其他transform效果</li>\n<li>某些情形下会出现文本或元素边界渲染模糊的现象</li>\n</ol>\n<p>若只是水平（方向）居中：</p>\n<p>复制代码<br>.div1{<br>    width: 100px;<br>    height: 100px;<br>    border: 4px solid red;<br>    text-align: center;<br>    margin: 0  auto;<br>    /<em>50%为自身尺寸的一半</em>/<br>}</p>\n<p>css3不定宽高水平垂直居中</p>\n<p>只要三句话就可以实现不定宽高水平垂直居中。</p>\n<p>1 justify-content:center;//子元素水平居中<br>2 align-items:center;//子元素垂直居中<br>3 display:-webkit-flex;<br>在父级元素上面加上上面3句话，就可以实现子元素水平垂直居中。</p>"},{"title":"es6新特性概览","date":"2017-04-13T14:49:58.000Z","toc":true,"_content":"\nES6新特性概览（转）\n原文地址：http://www.cnblogs.com/Wayou/p/es6_new_features.html\n本文基于lukehoban/es6features ，同时参考了大量博客资料，具体见文末引用。\n\nES6（ECMAScript 6）是即将到来的新版本JavaScript语言的标准，代号harmony(和谐之意，显然没有跟上我国的步伐，我们已经进入中国梦版本了)。上一次标准的制订还是2009年出台的ES5。目前ES6的标准化工作正在进行中，预计会在14年12月份放出正式敲定的版本。但大部分标准已经就绪，且各浏览器对ES6的支持也正在实现中。要查看ES6的支持情况请点此。\n<!--more-->\n目前想要运行ES6代码的话，可以用google/traceur-compiler将代码转译。点此访问traceur-compiler 在线版本时实编辑ES6代码并查看转换后的结果，代码运行结果会在console显示。\n\n另外，关于Google Traceur，业界大神Addy Osmani利用前者写了个Chrome插件ES6 Tepl，安装后也可以进行ES6的测试。\n\n当然，并不是所有ES6新特性都被实现了，所以上面的方法可以测试大部分，有一些还是无法测试的。\n\n虽然ES6都还没真正发布，但已经有用ES6重写的程序了，各种关于ES789的提议已经开始了，这你敢信。潮流不是我等大众所能追赶的。\n\n潮流虽然太快，但我们不停下学习的步伐，就不会被潮流丢下的，下面来领略下ES6中新特性，一堵新生代JS的风采。\n\n箭头操作符\n\n如果你会C#或者Java，你肯定知道lambda表达式，ES6中新增的箭头操作符=>便有异曲同工之妙。它简化了函数的书写。操作符左边为输入的参数，而右边则是进行的操作以及返回的值Inputs=>outputs。\n\n我们知道在JS中回调是经常的事，而一般回调又以匿名函数的形式出现，每次都需要写一个function，甚是繁琐。当引入箭头操作符后可以方便地写回调了。请看下面的例子。\n\nvar array = [1, 2, 3];\n//传统写法\narray.forEach(function(v, i, a) {\n    console.log(v);\n});\n//ES6\narray.forEach(v = > console.log(v));\n大家可以打开文章开头提到的traceur在线代码转译页面输入代码来查看效果。\n\n类的支持\n\nES6中添加了对类的支持，引入了class关键字（其实class在JavaScript中一直是保留字，目的就是考虑到可能在以后的新版本中会用到，现在终于派上用场了）。JS本身就是面向对象的，ES6中提供的类实际上只是JS原型模式的包装。现在提供原生的class支持后，对象的创建，继承更加直观了，并且父类方法的调用，实例化，静态方法和构造函数等概念都更加形象化。\n\n下面代码展示了类在ES6中的使用。再次啰嗦一句，你可以将代码贴到traceur自己查看运行结果。\n\n//类的定义\nclass Animal {\n  //ES6中新型构造器\n    constructor(name) {\n        this.name = name;\n    }\n    //实例方法\n    sayName() {\n        console.log('My name is '+this.name);\n    }\n}\n//类的继承\nclass Programmer extends Animal {\n    constructor(name) {\n      //直接调用父类构造器进行初始化\n        super(name);\n    }\n    program() {\n        console.log(\"I'm coding...\");\n    }\n}\n//测试我们的类\nvar animal=new Animal('dummy'),\nwayou=new Programmer('wayou');\nanimal.sayName();//输出 ‘My name is dummy’\nwayou.sayName();//输出 ‘My name is wayou’\nwayou.program();//输出 ‘I'm coding...’\n \n\n增强的对象字面量\n\n对象字面量被增强了，写法更加简洁与灵活，同时在定义对象的时候能够做的事情更多了。具体表现在：\n\n可以在对象字面量里面定义原型\n定义方法可以不用function关键字\n直接调用父类方法\n这样一来，对象字面量与前面提到的类概念更加吻合，在编写面向对象的JavaScript时更加轻松方便了。\n\n//通过对象字面量创建对象\nvar human = {\n    breathe() {\n        console.log('breathing...');\n    }\n};\nvar worker = {\n    __proto__: human, //设置此对象的原型为human,相当于继承human\n    company: 'freelancer',\n    work() {\n        console.log('working...');\n    }\n};\nhuman.breathe();//输出 ‘breathing...’\n//调用继承来的breathe方法\nworker.breathe();//输出 ‘breathing...’\n \n\n字符串模板\n\n字符串模板相对简单易懂些。ES6中允许使用反引号 ` 来创建字符串，此种方法创建的字符串里面可以包含由美元符号加花括号包裹的变量${vraible}。如果你使用过像C#等后端强类型语言的话，对此功能应该不会陌生。\n\n//产生一个随机数\nvar num=Math.random();\n//将这个数字输出到console\nconsole.log(`your num is ${num}`);\n解构\n\n自动解析数组或对象中的值。比如若一个函数要返回多个值，常规的做法是返回一个对象，将每个值做为这个对象的属性返回。但在ES6中，利用解构这一特性，可以直接返回一个数组，然后数组中的值会自动被解析到对应接收该值的变量中。\n\nvar [x,y]=getVal(),//函数返回值的解构\n    [name,,age]=['wayou','male','secrect'];//数组解构\n\nfunction getVal() {\n    return [ 1, 2 ];\n}\n\nconsole.log('x:'+x+', y:'+y);//输出：x:1, y:2 \nconsole.log('name:'+name+', age:'+age);//输出： name:wayou, age:secrect \n参数默认值，不定参数，拓展参数\n\n默认参数值\n\n现在可以在定义函数的时候指定参数的默认值了，而不用像以前那样通过逻辑或操作符来达到目的了。\n\nfunction sayHello(name){\n  //传统的指定默认参数的方式\n  var name=name||'dude';\n  console.log('Hello '+name);\n}\n//运用ES6的默认参数\nfunction sayHello2(name='dude'){\n  console.log(`Hello ${name}`);\n}\nsayHello();//输出：Hello dude\nsayHello('Wayou');//输出：Hello Wayou\nsayHello2();//输出：Hello dude\nsayHello2('Wayou');//输出：Hello Wayou\n \n\n不定参数\n\n不定参数是在函数中使用命名参数同时接收不定数量的未命名参数。这只是一种语法糖，在以前的JavaScript代码中我们可以通过arguments变量来达到这一目的。不定参数的格式是三个句点后跟代表所有不定参数的变量名。比如下面这个例子中，…x代表了所有传入add函数的参数。\n\n//将所有参数相加的函数\nfunction add(...x){\n  return x.reduce((m,n)=>m+n);\n}\n//传递任意个数的参数\nconsole.log(add(1,2,3));//输出：6\nconsole.log(add(1,2,3,4,5));//输出：15\n \n\n拓展参数\n\n拓展参数则是另一种形式的语法糖，它允许传递数组或者类数组直接做为函数的参数而不用通过apply。\n\nvar people=['Wayou','John','Sherlock'];\n//sayHello函数本来接收三个单独的参数人妖，人二和人三\nfunction sayHello(people1,people2,people3){\n  console.log(`Hello ${people1},${people2},${people3}`);\n}\n//但是我们将一个数组以拓展参数的形式传递，它能很好地映射到每个单独的参数\nsayHello(...people);//输出：Hello Wayou,John,Sherlock \n\n//而在以前，如果需要传递数组当参数，我们需要使用函数的apply方法\nsayHello.apply(null,people);//输出：Hello Wayou,John,Sherlock \nlet与const 关键字\n\n可以把let看成var，只是它定义的变量被限定在了特定范围内才能使用，而离开这个范围则无效。const则很直观，用来定义常量，即无法被更改值的变量。\n\nfor (let i=0;i<2;i++)console.log(i);//输出: 0,1\nconsole.log(i);//输出：undefined,严格模式下会报错\nfor of 值遍历\n\n我们都知道for in 循环用于遍历数组，类数组或对象，ES6中新引入的for of循环功能相似，不同的是每次循环它提供的不是序号而是值。\n\nvar someArray = [ \"a\", \"b\", \"c\" ];\n \nfor (v of someArray) {\n    console.log(v);//输出 a,b,c\n}\n注意，此功能google traceur并未实现，所以无法模拟调试,下面有些功能也是如此\n\niterator, generator\n\n这一部分的内容有点生涩，详情可以参见这里。以下是些基本概念。\n\niterator:它是这么一个对象，拥有一个next方法，这个方法返回一个对象{done,value}，这个对象包含两个属性，一个布尔类型的done和包含任意值的value\niterable: 这是这么一个对象，拥有一个obj[@@iterator]方法，这个方法返回一个iterator\ngenerator: 它是一种特殊的iterator。反的next方法可以接收一个参数并且返回值取决与它的构造函数（generator function）。generator同时拥有一个throw方法\ngenerator 函数: 即generator的构造函数。此函数内可以使用yield关键字。在yield出现的地方可以通过generator的next或throw方法向外界传递值。generator 函数是通过function*来声明的\nyield 关键字：它可以暂停函数的执行，随后可以再进进入函数继续执行\n模块\n\n在ES6标准中，JavaScript原生支持module了。这种将JS代码分割成不同功能的小块进行模块化的概念是在一些三方规范中流行起来的，比如CommonJS和AMD模式。\n\n将不同功能的代码分别写在不同文件中，各模块只需导出公共接口部分，然后通过模块的导入的方式可以在其他地方使用。下面的例子来自tutsplus:\n\n// point.js\nmodule \"point\" {\n    export class Point {\n        constructor (x, y) {\n            public x = x;\n            public y = y;\n        }\n    }\n}\n \n// myapp.js\n//声明引用的模块\nmodule point from \"/point.js\";\n//这里可以看出，尽管声明了引用的模块，还是可以通过指定需要的部分进行导入\nimport Point from \"point\";\n \nvar origin = new Point(0, 0);\nconsole.log(origin);\nMap，Set 和 WeakMap，WeakSet\n\n这些是新加的集合类型，提供了更加方便的获取属性值的方法，不用像以前一样用hasOwnProperty来检查某个属性是属于原型链上的呢还是当前对象的。同时，在进行属性值添加与获取时有专门的get，set 方法。\n\n下方代码来自es6feature\n\n// Sets\nvar s = new Set();\ns.add(\"hello\").add(\"goodbye\").add(\"hello\");\ns.size === 2;\ns.has(\"hello\") === true;\n\n// Maps\nvar m = new Map();\nm.set(\"hello\", 42);\nm.set(s, 34);\nm.get(s) == 34;\n有时候我们会把对象作为一个对象的键用来存放属性值，普通集合类型比如简单对象会阻止垃圾回收器对这些作为属性键存在的对象的回收，有造成内存泄漏的危险。而WeakMap,WeakSet则更加安全些，这些作为属性键的对象如果没有别的变量在引用它们，则会被回收释放掉，具体还看下面的例子。\n\n正文代码来自es6feature\n\n// Weak Maps\nvar wm = new WeakMap();\nwm.set(s, { extra: 42 });\nwm.size === undefined\n\n// Weak Sets\nvar ws = new WeakSet();\nws.add({ data: 42 });//因为添加到ws的这个临时对象没有其他变量引用它，所以ws不会保存它的值，也就是说这次添加其实没有意思\n \n\nProxies\n\nProxy可以监听对象身上发生了什么事情，并在这些事情发生后执行一些相应的操作。一下子让我们对一个对象有了很强的追踪能力，同时在数据绑定方面也很有用处。\n\n以下例子借用自这里。\n\n//定义被侦听的目标对象\nvar engineer = { name: 'Joe Sixpack', salary: 50 };\n//定义处理程序\nvar interceptor = {\n  set: function (receiver, property, value) {\n    console.log(property, 'is changed to', value);\n    receiver[property] = value;\n  }\n};\n//创建代理以进行侦听\nengineer = Proxy(engineer, interceptor);\n//做一些改动来触发代理\nengineer.salary = 60;//控制台输出：salary is changed to 60\n上面代码我已加了注释，这里进一步解释。对于处理程序，是在被侦听的对象身上发生了相应事件之后，处理程序里面的方法就会被调用，上面例子中我们设置了set的处理函数，表明，如果我们侦听的对象的属性被更改，也就是被set了，那这个处理程序就会被调用，同时通过参数能够得知是哪个属性被更改，更改为了什么值。\n\nSymbols\n\n我们知道对象其实是键值对的集合，而键通常来说是字符串。而现在除了字符串外，我们还可以用symbol这种值来做为对象的键。Symbol是一种基本类型，像数字，字符串还有布尔一样，它不是一个对象。Symbol 通过调用symbol函数产生，它接收一个可选的名字参数，该函数返回的symbol是唯一的。之后就可以用这个返回值做为对象的键了。Symbol还可以用来创建私有属性，外部无法直接访问由symbol做为键的属性值。\n\n以下例子来自es6features\n\n(function() {\n\n  // 创建symbol\n  var key = Symbol(\"key\");\n\n  function MyClass(privateData) {\n    this[key] = privateData;\n  }\n\n  MyClass.prototype = {\n    doStuff: function() {\n      ... this[key] ...\n    }\n  };\n\n})();\n\nvar c = new MyClass(\"hello\")\nc[\"key\"] === undefined//无法访问该属性，因为是私有的\n \n\nMath，Number，String，Object 的新API\n\n对Math,Number,String还有Object等添加了许多新的API。下面代码同样来自es6features，对这些新API进行了简单展示。\n\nNumber.EPSILON\nNumber.isInteger(Infinity) // false\nNumber.isNaN(\"NaN\") // false\n\nMath.acosh(3) // 1.762747174039086\nMath.hypot(3, 4) // 5\nMath.imul(Math.pow(2, 32) - 1, Math.pow(2, 32) - 2) // 2\n\n\"abcde\".contains(\"cd\") // true\n\"abc\".repeat(3) // \"abcabcabc\"\n\nArray.from(document.querySelectorAll('*')) // Returns a real Array\nArray.of(1, 2, 3) // Similar to new Array(...), but without special one-arg behavior\n[0, 0, 0].fill(7, 1) // [0,7,7]\n[1,2,3].findIndex(x => x == 2) // 1\n[\"a\", \"b\", \"c\"].entries() // iterator [0, \"a\"], [1,\"b\"], [2,\"c\"]\n[\"a\", \"b\", \"c\"].keys() // iterator 0, 1, 2\n[\"a\", \"b\", \"c\"].values() // iterator \"a\", \"b\", \"c\"\n\nObject.assign(Point, { origin: new Point(0,0) })\n \n\nPromises\n\nPromises是处理异步操作的一种模式，之前在很多三方库中有实现，比如jQuery的deferred 对象。当你发起一个异步请求，并绑定了.when(), .done()等事件处理程序时，其实就是在应用promise模式。\n\n//创建promise\nvar promise = new Promise(function(resolve, reject) {\n    // 进行一些异步或耗时操作\n    if ( /*如果成功 */ ) {\n        resolve(\"Stuff worked!\");\n    } else {\n        reject(Error(\"It broke\"));\n    }\n});\n//绑定处理程序\npromise.then(function(result) {\n  //promise成功的话会执行这里\n    console.log(result); // \"Stuff worked!\"\n}, function(err) {\n  //promise失败会执行这里\n    console.log(err); // Error: \"It broke\"\n});\n总结\n\n总结就是一句话，前后端差异越来越小了。\n","source":"_posts/es6新特性概览.md","raw":"---\ntitle: es6新特性概览\ndate: 2017-04-13 22:49:58\ntags: JavaScript\ntoc: true\n---\n\nES6新特性概览（转）\n原文地址：http://www.cnblogs.com/Wayou/p/es6_new_features.html\n本文基于lukehoban/es6features ，同时参考了大量博客资料，具体见文末引用。\n\nES6（ECMAScript 6）是即将到来的新版本JavaScript语言的标准，代号harmony(和谐之意，显然没有跟上我国的步伐，我们已经进入中国梦版本了)。上一次标准的制订还是2009年出台的ES5。目前ES6的标准化工作正在进行中，预计会在14年12月份放出正式敲定的版本。但大部分标准已经就绪，且各浏览器对ES6的支持也正在实现中。要查看ES6的支持情况请点此。\n<!--more-->\n目前想要运行ES6代码的话，可以用google/traceur-compiler将代码转译。点此访问traceur-compiler 在线版本时实编辑ES6代码并查看转换后的结果，代码运行结果会在console显示。\n\n另外，关于Google Traceur，业界大神Addy Osmani利用前者写了个Chrome插件ES6 Tepl，安装后也可以进行ES6的测试。\n\n当然，并不是所有ES6新特性都被实现了，所以上面的方法可以测试大部分，有一些还是无法测试的。\n\n虽然ES6都还没真正发布，但已经有用ES6重写的程序了，各种关于ES789的提议已经开始了，这你敢信。潮流不是我等大众所能追赶的。\n\n潮流虽然太快，但我们不停下学习的步伐，就不会被潮流丢下的，下面来领略下ES6中新特性，一堵新生代JS的风采。\n\n箭头操作符\n\n如果你会C#或者Java，你肯定知道lambda表达式，ES6中新增的箭头操作符=>便有异曲同工之妙。它简化了函数的书写。操作符左边为输入的参数，而右边则是进行的操作以及返回的值Inputs=>outputs。\n\n我们知道在JS中回调是经常的事，而一般回调又以匿名函数的形式出现，每次都需要写一个function，甚是繁琐。当引入箭头操作符后可以方便地写回调了。请看下面的例子。\n\nvar array = [1, 2, 3];\n//传统写法\narray.forEach(function(v, i, a) {\n    console.log(v);\n});\n//ES6\narray.forEach(v = > console.log(v));\n大家可以打开文章开头提到的traceur在线代码转译页面输入代码来查看效果。\n\n类的支持\n\nES6中添加了对类的支持，引入了class关键字（其实class在JavaScript中一直是保留字，目的就是考虑到可能在以后的新版本中会用到，现在终于派上用场了）。JS本身就是面向对象的，ES6中提供的类实际上只是JS原型模式的包装。现在提供原生的class支持后，对象的创建，继承更加直观了，并且父类方法的调用，实例化，静态方法和构造函数等概念都更加形象化。\n\n下面代码展示了类在ES6中的使用。再次啰嗦一句，你可以将代码贴到traceur自己查看运行结果。\n\n//类的定义\nclass Animal {\n  //ES6中新型构造器\n    constructor(name) {\n        this.name = name;\n    }\n    //实例方法\n    sayName() {\n        console.log('My name is '+this.name);\n    }\n}\n//类的继承\nclass Programmer extends Animal {\n    constructor(name) {\n      //直接调用父类构造器进行初始化\n        super(name);\n    }\n    program() {\n        console.log(\"I'm coding...\");\n    }\n}\n//测试我们的类\nvar animal=new Animal('dummy'),\nwayou=new Programmer('wayou');\nanimal.sayName();//输出 ‘My name is dummy’\nwayou.sayName();//输出 ‘My name is wayou’\nwayou.program();//输出 ‘I'm coding...’\n \n\n增强的对象字面量\n\n对象字面量被增强了，写法更加简洁与灵活，同时在定义对象的时候能够做的事情更多了。具体表现在：\n\n可以在对象字面量里面定义原型\n定义方法可以不用function关键字\n直接调用父类方法\n这样一来，对象字面量与前面提到的类概念更加吻合，在编写面向对象的JavaScript时更加轻松方便了。\n\n//通过对象字面量创建对象\nvar human = {\n    breathe() {\n        console.log('breathing...');\n    }\n};\nvar worker = {\n    __proto__: human, //设置此对象的原型为human,相当于继承human\n    company: 'freelancer',\n    work() {\n        console.log('working...');\n    }\n};\nhuman.breathe();//输出 ‘breathing...’\n//调用继承来的breathe方法\nworker.breathe();//输出 ‘breathing...’\n \n\n字符串模板\n\n字符串模板相对简单易懂些。ES6中允许使用反引号 ` 来创建字符串，此种方法创建的字符串里面可以包含由美元符号加花括号包裹的变量${vraible}。如果你使用过像C#等后端强类型语言的话，对此功能应该不会陌生。\n\n//产生一个随机数\nvar num=Math.random();\n//将这个数字输出到console\nconsole.log(`your num is ${num}`);\n解构\n\n自动解析数组或对象中的值。比如若一个函数要返回多个值，常规的做法是返回一个对象，将每个值做为这个对象的属性返回。但在ES6中，利用解构这一特性，可以直接返回一个数组，然后数组中的值会自动被解析到对应接收该值的变量中。\n\nvar [x,y]=getVal(),//函数返回值的解构\n    [name,,age]=['wayou','male','secrect'];//数组解构\n\nfunction getVal() {\n    return [ 1, 2 ];\n}\n\nconsole.log('x:'+x+', y:'+y);//输出：x:1, y:2 \nconsole.log('name:'+name+', age:'+age);//输出： name:wayou, age:secrect \n参数默认值，不定参数，拓展参数\n\n默认参数值\n\n现在可以在定义函数的时候指定参数的默认值了，而不用像以前那样通过逻辑或操作符来达到目的了。\n\nfunction sayHello(name){\n  //传统的指定默认参数的方式\n  var name=name||'dude';\n  console.log('Hello '+name);\n}\n//运用ES6的默认参数\nfunction sayHello2(name='dude'){\n  console.log(`Hello ${name}`);\n}\nsayHello();//输出：Hello dude\nsayHello('Wayou');//输出：Hello Wayou\nsayHello2();//输出：Hello dude\nsayHello2('Wayou');//输出：Hello Wayou\n \n\n不定参数\n\n不定参数是在函数中使用命名参数同时接收不定数量的未命名参数。这只是一种语法糖，在以前的JavaScript代码中我们可以通过arguments变量来达到这一目的。不定参数的格式是三个句点后跟代表所有不定参数的变量名。比如下面这个例子中，…x代表了所有传入add函数的参数。\n\n//将所有参数相加的函数\nfunction add(...x){\n  return x.reduce((m,n)=>m+n);\n}\n//传递任意个数的参数\nconsole.log(add(1,2,3));//输出：6\nconsole.log(add(1,2,3,4,5));//输出：15\n \n\n拓展参数\n\n拓展参数则是另一种形式的语法糖，它允许传递数组或者类数组直接做为函数的参数而不用通过apply。\n\nvar people=['Wayou','John','Sherlock'];\n//sayHello函数本来接收三个单独的参数人妖，人二和人三\nfunction sayHello(people1,people2,people3){\n  console.log(`Hello ${people1},${people2},${people3}`);\n}\n//但是我们将一个数组以拓展参数的形式传递，它能很好地映射到每个单独的参数\nsayHello(...people);//输出：Hello Wayou,John,Sherlock \n\n//而在以前，如果需要传递数组当参数，我们需要使用函数的apply方法\nsayHello.apply(null,people);//输出：Hello Wayou,John,Sherlock \nlet与const 关键字\n\n可以把let看成var，只是它定义的变量被限定在了特定范围内才能使用，而离开这个范围则无效。const则很直观，用来定义常量，即无法被更改值的变量。\n\nfor (let i=0;i<2;i++)console.log(i);//输出: 0,1\nconsole.log(i);//输出：undefined,严格模式下会报错\nfor of 值遍历\n\n我们都知道for in 循环用于遍历数组，类数组或对象，ES6中新引入的for of循环功能相似，不同的是每次循环它提供的不是序号而是值。\n\nvar someArray = [ \"a\", \"b\", \"c\" ];\n \nfor (v of someArray) {\n    console.log(v);//输出 a,b,c\n}\n注意，此功能google traceur并未实现，所以无法模拟调试,下面有些功能也是如此\n\niterator, generator\n\n这一部分的内容有点生涩，详情可以参见这里。以下是些基本概念。\n\niterator:它是这么一个对象，拥有一个next方法，这个方法返回一个对象{done,value}，这个对象包含两个属性，一个布尔类型的done和包含任意值的value\niterable: 这是这么一个对象，拥有一个obj[@@iterator]方法，这个方法返回一个iterator\ngenerator: 它是一种特殊的iterator。反的next方法可以接收一个参数并且返回值取决与它的构造函数（generator function）。generator同时拥有一个throw方法\ngenerator 函数: 即generator的构造函数。此函数内可以使用yield关键字。在yield出现的地方可以通过generator的next或throw方法向外界传递值。generator 函数是通过function*来声明的\nyield 关键字：它可以暂停函数的执行，随后可以再进进入函数继续执行\n模块\n\n在ES6标准中，JavaScript原生支持module了。这种将JS代码分割成不同功能的小块进行模块化的概念是在一些三方规范中流行起来的，比如CommonJS和AMD模式。\n\n将不同功能的代码分别写在不同文件中，各模块只需导出公共接口部分，然后通过模块的导入的方式可以在其他地方使用。下面的例子来自tutsplus:\n\n// point.js\nmodule \"point\" {\n    export class Point {\n        constructor (x, y) {\n            public x = x;\n            public y = y;\n        }\n    }\n}\n \n// myapp.js\n//声明引用的模块\nmodule point from \"/point.js\";\n//这里可以看出，尽管声明了引用的模块，还是可以通过指定需要的部分进行导入\nimport Point from \"point\";\n \nvar origin = new Point(0, 0);\nconsole.log(origin);\nMap，Set 和 WeakMap，WeakSet\n\n这些是新加的集合类型，提供了更加方便的获取属性值的方法，不用像以前一样用hasOwnProperty来检查某个属性是属于原型链上的呢还是当前对象的。同时，在进行属性值添加与获取时有专门的get，set 方法。\n\n下方代码来自es6feature\n\n// Sets\nvar s = new Set();\ns.add(\"hello\").add(\"goodbye\").add(\"hello\");\ns.size === 2;\ns.has(\"hello\") === true;\n\n// Maps\nvar m = new Map();\nm.set(\"hello\", 42);\nm.set(s, 34);\nm.get(s) == 34;\n有时候我们会把对象作为一个对象的键用来存放属性值，普通集合类型比如简单对象会阻止垃圾回收器对这些作为属性键存在的对象的回收，有造成内存泄漏的危险。而WeakMap,WeakSet则更加安全些，这些作为属性键的对象如果没有别的变量在引用它们，则会被回收释放掉，具体还看下面的例子。\n\n正文代码来自es6feature\n\n// Weak Maps\nvar wm = new WeakMap();\nwm.set(s, { extra: 42 });\nwm.size === undefined\n\n// Weak Sets\nvar ws = new WeakSet();\nws.add({ data: 42 });//因为添加到ws的这个临时对象没有其他变量引用它，所以ws不会保存它的值，也就是说这次添加其实没有意思\n \n\nProxies\n\nProxy可以监听对象身上发生了什么事情，并在这些事情发生后执行一些相应的操作。一下子让我们对一个对象有了很强的追踪能力，同时在数据绑定方面也很有用处。\n\n以下例子借用自这里。\n\n//定义被侦听的目标对象\nvar engineer = { name: 'Joe Sixpack', salary: 50 };\n//定义处理程序\nvar interceptor = {\n  set: function (receiver, property, value) {\n    console.log(property, 'is changed to', value);\n    receiver[property] = value;\n  }\n};\n//创建代理以进行侦听\nengineer = Proxy(engineer, interceptor);\n//做一些改动来触发代理\nengineer.salary = 60;//控制台输出：salary is changed to 60\n上面代码我已加了注释，这里进一步解释。对于处理程序，是在被侦听的对象身上发生了相应事件之后，处理程序里面的方法就会被调用，上面例子中我们设置了set的处理函数，表明，如果我们侦听的对象的属性被更改，也就是被set了，那这个处理程序就会被调用，同时通过参数能够得知是哪个属性被更改，更改为了什么值。\n\nSymbols\n\n我们知道对象其实是键值对的集合，而键通常来说是字符串。而现在除了字符串外，我们还可以用symbol这种值来做为对象的键。Symbol是一种基本类型，像数字，字符串还有布尔一样，它不是一个对象。Symbol 通过调用symbol函数产生，它接收一个可选的名字参数，该函数返回的symbol是唯一的。之后就可以用这个返回值做为对象的键了。Symbol还可以用来创建私有属性，外部无法直接访问由symbol做为键的属性值。\n\n以下例子来自es6features\n\n(function() {\n\n  // 创建symbol\n  var key = Symbol(\"key\");\n\n  function MyClass(privateData) {\n    this[key] = privateData;\n  }\n\n  MyClass.prototype = {\n    doStuff: function() {\n      ... this[key] ...\n    }\n  };\n\n})();\n\nvar c = new MyClass(\"hello\")\nc[\"key\"] === undefined//无法访问该属性，因为是私有的\n \n\nMath，Number，String，Object 的新API\n\n对Math,Number,String还有Object等添加了许多新的API。下面代码同样来自es6features，对这些新API进行了简单展示。\n\nNumber.EPSILON\nNumber.isInteger(Infinity) // false\nNumber.isNaN(\"NaN\") // false\n\nMath.acosh(3) // 1.762747174039086\nMath.hypot(3, 4) // 5\nMath.imul(Math.pow(2, 32) - 1, Math.pow(2, 32) - 2) // 2\n\n\"abcde\".contains(\"cd\") // true\n\"abc\".repeat(3) // \"abcabcabc\"\n\nArray.from(document.querySelectorAll('*')) // Returns a real Array\nArray.of(1, 2, 3) // Similar to new Array(...), but without special one-arg behavior\n[0, 0, 0].fill(7, 1) // [0,7,7]\n[1,2,3].findIndex(x => x == 2) // 1\n[\"a\", \"b\", \"c\"].entries() // iterator [0, \"a\"], [1,\"b\"], [2,\"c\"]\n[\"a\", \"b\", \"c\"].keys() // iterator 0, 1, 2\n[\"a\", \"b\", \"c\"].values() // iterator \"a\", \"b\", \"c\"\n\nObject.assign(Point, { origin: new Point(0,0) })\n \n\nPromises\n\nPromises是处理异步操作的一种模式，之前在很多三方库中有实现，比如jQuery的deferred 对象。当你发起一个异步请求，并绑定了.when(), .done()等事件处理程序时，其实就是在应用promise模式。\n\n//创建promise\nvar promise = new Promise(function(resolve, reject) {\n    // 进行一些异步或耗时操作\n    if ( /*如果成功 */ ) {\n        resolve(\"Stuff worked!\");\n    } else {\n        reject(Error(\"It broke\"));\n    }\n});\n//绑定处理程序\npromise.then(function(result) {\n  //promise成功的话会执行这里\n    console.log(result); // \"Stuff worked!\"\n}, function(err) {\n  //promise失败会执行这里\n    console.log(err); // Error: \"It broke\"\n});\n总结\n\n总结就是一句话，前后端差异越来越小了。\n","slug":"es6新特性概览","published":1,"updated":"2017-06-28T06:59:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfnkq6n000wlyfydyoyp6mr","content":"<p>ES6新特性概览（转）<br>原文地址：<a href=\"http://www.cnblogs.com/Wayou/p/es6_new_features.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/Wayou/p/es6_new_features.html</a><br>本文基于lukehoban/es6features ，同时参考了大量博客资料，具体见文末引用。</p>\n<p>ES6（ECMAScript 6）是即将到来的新版本JavaScript语言的标准，代号harmony(和谐之意，显然没有跟上我国的步伐，我们已经进入中国梦版本了)。上一次标准的制订还是2009年出台的ES5。目前ES6的标准化工作正在进行中，预计会在14年12月份放出正式敲定的版本。但大部分标准已经就绪，且各浏览器对ES6的支持也正在实现中。要查看ES6的支持情况请点此。<br><a id=\"more\"></a><br>目前想要运行ES6代码的话，可以用google/traceur-compiler将代码转译。点此访问traceur-compiler 在线版本时实编辑ES6代码并查看转换后的结果，代码运行结果会在console显示。</p>\n<p>另外，关于Google Traceur，业界大神Addy Osmani利用前者写了个Chrome插件ES6 Tepl，安装后也可以进行ES6的测试。</p>\n<p>当然，并不是所有ES6新特性都被实现了，所以上面的方法可以测试大部分，有一些还是无法测试的。</p>\n<p>虽然ES6都还没真正发布，但已经有用ES6重写的程序了，各种关于ES789的提议已经开始了，这你敢信。潮流不是我等大众所能追赶的。</p>\n<p>潮流虽然太快，但我们不停下学习的步伐，就不会被潮流丢下的，下面来领略下ES6中新特性，一堵新生代JS的风采。</p>\n<p>箭头操作符</p>\n<p>如果你会C#或者Java，你肯定知道lambda表达式，ES6中新增的箭头操作符=&gt;便有异曲同工之妙。它简化了函数的书写。操作符左边为输入的参数，而右边则是进行的操作以及返回的值Inputs=&gt;outputs。</p>\n<p>我们知道在JS中回调是经常的事，而一般回调又以匿名函数的形式出现，每次都需要写一个function，甚是繁琐。当引入箭头操作符后可以方便地写回调了。请看下面的例子。</p>\n<p>var array = [1, 2, 3];<br>//传统写法<br>array.forEach(function(v, i, a) {<br>    console.log(v);<br>});<br>//ES6<br>array.forEach(v = &gt; console.log(v));<br>大家可以打开文章开头提到的traceur在线代码转译页面输入代码来查看效果。</p>\n<p>类的支持</p>\n<p>ES6中添加了对类的支持，引入了class关键字（其实class在JavaScript中一直是保留字，目的就是考虑到可能在以后的新版本中会用到，现在终于派上用场了）。JS本身就是面向对象的，ES6中提供的类实际上只是JS原型模式的包装。现在提供原生的class支持后，对象的创建，继承更加直观了，并且父类方法的调用，实例化，静态方法和构造函数等概念都更加形象化。</p>\n<p>下面代码展示了类在ES6中的使用。再次啰嗦一句，你可以将代码贴到traceur自己查看运行结果。</p>\n<p>//类的定义<br>class Animal {<br>  //ES6中新型构造器<br>    constructor(name) {<br>        this.name = name;<br>    }<br>    //实例方法<br>    sayName() {<br>        console.log(‘My name is ‘+this.name);<br>    }<br>}<br>//类的继承<br>class Programmer extends Animal {<br>    constructor(name) {<br>      //直接调用父类构造器进行初始化<br>        super(name);<br>    }<br>    program() {<br>        console.log(“I’m coding…”);<br>    }<br>}<br>//测试我们的类<br>var animal=new Animal(‘dummy’),<br>wayou=new Programmer(‘wayou’);<br>animal.sayName();//输出 ‘My name is dummy’<br>wayou.sayName();//输出 ‘My name is wayou’<br>wayou.program();//输出 ‘I’m coding…’</p>\n<p>增强的对象字面量</p>\n<p>对象字面量被增强了，写法更加简洁与灵活，同时在定义对象的时候能够做的事情更多了。具体表现在：</p>\n<p>可以在对象字面量里面定义原型<br>定义方法可以不用function关键字<br>直接调用父类方法<br>这样一来，对象字面量与前面提到的类概念更加吻合，在编写面向对象的JavaScript时更加轻松方便了。</p>\n<p>//通过对象字面量创建对象<br>var human = {<br>    breathe() {<br>        console.log(‘breathing…’);<br>    }<br>};<br>var worker = {<br>    <strong>proto</strong>: human, //设置此对象的原型为human,相当于继承human<br>    company: ‘freelancer’,<br>    work() {<br>        console.log(‘working…’);<br>    }<br>};<br>human.breathe();//输出 ‘breathing…’<br>//调用继承来的breathe方法<br>worker.breathe();//输出 ‘breathing…’</p>\n<p>字符串模板</p>\n<p>字符串模板相对简单易懂些。ES6中允许使用反引号 ` 来创建字符串，此种方法创建的字符串里面可以包含由美元符号加花括号包裹的变量${vraible}。如果你使用过像C#等后端强类型语言的话，对此功能应该不会陌生。</p>\n<p>//产生一个随机数<br>var num=Math.random();<br>//将这个数字输出到console<br>console.log(<code>your num is ${num}</code>);<br>解构</p>\n<p>自动解析数组或对象中的值。比如若一个函数要返回多个值，常规的做法是返回一个对象，将每个值做为这个对象的属性返回。但在ES6中，利用解构这一特性，可以直接返回一个数组，然后数组中的值会自动被解析到对应接收该值的变量中。</p>\n<p>var [x,y]=getVal(),//函数返回值的解构<br>    [name,,age]=[‘wayou’,’male’,’secrect’];//数组解构</p>\n<p>function getVal() {<br>    return [ 1, 2 ];<br>}</p>\n<p>console.log(‘x:’+x+’, y:’+y);//输出：x:1, y:2<br>console.log(‘name:’+name+’, age:’+age);//输出： name:wayou, age:secrect<br>参数默认值，不定参数，拓展参数</p>\n<p>默认参数值</p>\n<p>现在可以在定义函数的时候指定参数的默认值了，而不用像以前那样通过逻辑或操作符来达到目的了。</p>\n<p>function sayHello(name){<br>  //传统的指定默认参数的方式<br>  var name=name||’dude’;<br>  console.log(‘Hello ‘+name);<br>}<br>//运用ES6的默认参数<br>function sayHello2(name=’dude’){<br>  console.log(<code>Hello ${name}</code>);<br>}<br>sayHello();//输出：Hello dude<br>sayHello(‘Wayou’);//输出：Hello Wayou<br>sayHello2();//输出：Hello dude<br>sayHello2(‘Wayou’);//输出：Hello Wayou</p>\n<p>不定参数</p>\n<p>不定参数是在函数中使用命名参数同时接收不定数量的未命名参数。这只是一种语法糖，在以前的JavaScript代码中我们可以通过arguments变量来达到这一目的。不定参数的格式是三个句点后跟代表所有不定参数的变量名。比如下面这个例子中，…x代表了所有传入add函数的参数。</p>\n<p>//将所有参数相加的函数<br>function add(…x){<br>  return x.reduce((m,n)=&gt;m+n);<br>}<br>//传递任意个数的参数<br>console.log(add(1,2,3));//输出：6<br>console.log(add(1,2,3,4,5));//输出：15</p>\n<p>拓展参数</p>\n<p>拓展参数则是另一种形式的语法糖，它允许传递数组或者类数组直接做为函数的参数而不用通过apply。</p>\n<p>var people=[‘Wayou’,’John’,’Sherlock’];<br>//sayHello函数本来接收三个单独的参数人妖，人二和人三<br>function sayHello(people1,people2,people3){<br>  console.log(<code>Hello ${people1},${people2},${people3}</code>);<br>}<br>//但是我们将一个数组以拓展参数的形式传递，它能很好地映射到每个单独的参数<br>sayHello(…people);//输出：Hello Wayou,John,Sherlock </p>\n<p>//而在以前，如果需要传递数组当参数，我们需要使用函数的apply方法<br>sayHello.apply(null,people);//输出：Hello Wayou,John,Sherlock<br>let与const 关键字</p>\n<p>可以把let看成var，只是它定义的变量被限定在了特定范围内才能使用，而离开这个范围则无效。const则很直观，用来定义常量，即无法被更改值的变量。</p>\n<p>for (let i=0;i&lt;2;i++)console.log(i);//输出: 0,1<br>console.log(i);//输出：undefined,严格模式下会报错<br>for of 值遍历</p>\n<p>我们都知道for in 循环用于遍历数组，类数组或对象，ES6中新引入的for of循环功能相似，不同的是每次循环它提供的不是序号而是值。</p>\n<p>var someArray = [ “a”, “b”, “c” ];</p>\n<p>for (v of someArray) {<br>    console.log(v);//输出 a,b,c<br>}<br>注意，此功能google traceur并未实现，所以无法模拟调试,下面有些功能也是如此</p>\n<p>iterator, generator</p>\n<p>这一部分的内容有点生涩，详情可以参见这里。以下是些基本概念。</p>\n<p>iterator:它是这么一个对象，拥有一个next方法，这个方法返回一个对象{done,value}，这个对象包含两个属性，一个布尔类型的done和包含任意值的value<br>iterable: 这是这么一个对象，拥有一个obj[@@iterator]方法，这个方法返回一个iterator<br>generator: 它是一种特殊的iterator。反的next方法可以接收一个参数并且返回值取决与它的构造函数（generator function）。generator同时拥有一个throw方法<br>generator 函数: 即generator的构造函数。此函数内可以使用yield关键字。在yield出现的地方可以通过generator的next或throw方法向外界传递值。generator 函数是通过function*来声明的<br>yield 关键字：它可以暂停函数的执行，随后可以再进进入函数继续执行<br>模块</p>\n<p>在ES6标准中，JavaScript原生支持module了。这种将JS代码分割成不同功能的小块进行模块化的概念是在一些三方规范中流行起来的，比如CommonJS和AMD模式。</p>\n<p>将不同功能的代码分别写在不同文件中，各模块只需导出公共接口部分，然后通过模块的导入的方式可以在其他地方使用。下面的例子来自tutsplus:</p>\n<p>// point.js<br>module “point” {<br>    export class Point {<br>        constructor (x, y) {<br>            public x = x;<br>            public y = y;<br>        }<br>    }<br>}</p>\n<p>// myapp.js<br>//声明引用的模块<br>module point from “/point.js”;<br>//这里可以看出，尽管声明了引用的模块，还是可以通过指定需要的部分进行导入<br>import Point from “point”;</p>\n<p>var origin = new Point(0, 0);<br>console.log(origin);<br>Map，Set 和 WeakMap，WeakSet</p>\n<p>这些是新加的集合类型，提供了更加方便的获取属性值的方法，不用像以前一样用hasOwnProperty来检查某个属性是属于原型链上的呢还是当前对象的。同时，在进行属性值添加与获取时有专门的get，set 方法。</p>\n<p>下方代码来自es6feature</p>\n<p>// Sets<br>var s = new Set();<br>s.add(“hello”).add(“goodbye”).add(“hello”);<br>s.size === 2;<br>s.has(“hello”) === true;</p>\n<p>// Maps<br>var m = new Map();<br>m.set(“hello”, 42);<br>m.set(s, 34);<br>m.get(s) == 34;<br>有时候我们会把对象作为一个对象的键用来存放属性值，普通集合类型比如简单对象会阻止垃圾回收器对这些作为属性键存在的对象的回收，有造成内存泄漏的危险。而WeakMap,WeakSet则更加安全些，这些作为属性键的对象如果没有别的变量在引用它们，则会被回收释放掉，具体还看下面的例子。</p>\n<p>正文代码来自es6feature</p>\n<p>// Weak Maps<br>var wm = new WeakMap();<br>wm.set(s, { extra: 42 });<br>wm.size === undefined</p>\n<p>// Weak Sets<br>var ws = new WeakSet();<br>ws.add({ data: 42 });//因为添加到ws的这个临时对象没有其他变量引用它，所以ws不会保存它的值，也就是说这次添加其实没有意思</p>\n<p>Proxies</p>\n<p>Proxy可以监听对象身上发生了什么事情，并在这些事情发生后执行一些相应的操作。一下子让我们对一个对象有了很强的追踪能力，同时在数据绑定方面也很有用处。</p>\n<p>以下例子借用自这里。</p>\n<p>//定义被侦听的目标对象<br>var engineer = { name: ‘Joe Sixpack’, salary: 50 };<br>//定义处理程序<br>var interceptor = {<br>  set: function (receiver, property, value) {<br>    console.log(property, ‘is changed to’, value);<br>    receiver[property] = value;<br>  }<br>};<br>//创建代理以进行侦听<br>engineer = Proxy(engineer, interceptor);<br>//做一些改动来触发代理<br>engineer.salary = 60;//控制台输出：salary is changed to 60<br>上面代码我已加了注释，这里进一步解释。对于处理程序，是在被侦听的对象身上发生了相应事件之后，处理程序里面的方法就会被调用，上面例子中我们设置了set的处理函数，表明，如果我们侦听的对象的属性被更改，也就是被set了，那这个处理程序就会被调用，同时通过参数能够得知是哪个属性被更改，更改为了什么值。</p>\n<p>Symbols</p>\n<p>我们知道对象其实是键值对的集合，而键通常来说是字符串。而现在除了字符串外，我们还可以用symbol这种值来做为对象的键。Symbol是一种基本类型，像数字，字符串还有布尔一样，它不是一个对象。Symbol 通过调用symbol函数产生，它接收一个可选的名字参数，该函数返回的symbol是唯一的。之后就可以用这个返回值做为对象的键了。Symbol还可以用来创建私有属性，外部无法直接访问由symbol做为键的属性值。</p>\n<p>以下例子来自es6features</p>\n<p>(function() {</p>\n<p>  // 创建symbol<br>  var key = Symbol(“key”);</p>\n<p>  function MyClass(privateData) {<br>    this[key] = privateData;<br>  }</p>\n<p>  MyClass.prototype = {<br>    doStuff: function() {<br>      … this[key] …<br>    }<br>  };</p>\n<p>})();</p>\n<p>var c = new MyClass(“hello”)<br>c[“key”] === undefined//无法访问该属性，因为是私有的</p>\n<p>Math，Number，String，Object 的新API</p>\n<p>对Math,Number,String还有Object等添加了许多新的API。下面代码同样来自es6features，对这些新API进行了简单展示。</p>\n<p>Number.EPSILON<br>Number.isInteger(Infinity) // false<br>Number.isNaN(“NaN”) // false</p>\n<p>Math.acosh(3) // 1.762747174039086<br>Math.hypot(3, 4) // 5<br>Math.imul(Math.pow(2, 32) - 1, Math.pow(2, 32) - 2) // 2</p>\n<p>“abcde”.contains(“cd”) // true<br>“abc”.repeat(3) // “abcabcabc”</p>\n<p>Array.from(document.querySelectorAll(‘*’)) // Returns a real Array<br>Array.of(1, 2, 3) // Similar to new Array(…), but without special one-arg behavior<br>[0, 0, 0].fill(7, 1) // [0,7,7]<br>[1,2,3].findIndex(x =&gt; x == 2) // 1<br>[“a”, “b”, “c”].entries() // iterator [0, “a”], [1,”b”], [2,”c”]<br>[“a”, “b”, “c”].keys() // iterator 0, 1, 2<br>[“a”, “b”, “c”].values() // iterator “a”, “b”, “c”</p>\n<p>Object.assign(Point, { origin: new Point(0,0) })</p>\n<p>Promises</p>\n<p>Promises是处理异步操作的一种模式，之前在很多三方库中有实现，比如jQuery的deferred 对象。当你发起一个异步请求，并绑定了.when(), .done()等事件处理程序时，其实就是在应用promise模式。</p>\n<p>//创建promise<br>var promise = new Promise(function(resolve, reject) {<br>    // 进行一些异步或耗时操作<br>    if ( /<em>如果成功 </em>/ ) {<br>        resolve(“Stuff worked!”);<br>    } else {<br>        reject(Error(“It broke”));<br>    }<br>});<br>//绑定处理程序<br>promise.then(function(result) {<br>  //promise成功的话会执行这里<br>    console.log(result); // “Stuff worked!”<br>}, function(err) {<br>  //promise失败会执行这里<br>    console.log(err); // Error: “It broke”<br>});<br>总结</p>\n<p>总结就是一句话，前后端差异越来越小了。</p>\n","site":{"data":{}},"excerpt":"<p>ES6新特性概览（转）<br>原文地址：<a href=\"http://www.cnblogs.com/Wayou/p/es6_new_features.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/Wayou/p/es6_new_features.html</a><br>本文基于lukehoban/es6features ，同时参考了大量博客资料，具体见文末引用。</p>\n<p>ES6（ECMAScript 6）是即将到来的新版本JavaScript语言的标准，代号harmony(和谐之意，显然没有跟上我国的步伐，我们已经进入中国梦版本了)。上一次标准的制订还是2009年出台的ES5。目前ES6的标准化工作正在进行中，预计会在14年12月份放出正式敲定的版本。但大部分标准已经就绪，且各浏览器对ES6的支持也正在实现中。要查看ES6的支持情况请点此。<br>","more":"<br>目前想要运行ES6代码的话，可以用google/traceur-compiler将代码转译。点此访问traceur-compiler 在线版本时实编辑ES6代码并查看转换后的结果，代码运行结果会在console显示。</p>\n<p>另外，关于Google Traceur，业界大神Addy Osmani利用前者写了个Chrome插件ES6 Tepl，安装后也可以进行ES6的测试。</p>\n<p>当然，并不是所有ES6新特性都被实现了，所以上面的方法可以测试大部分，有一些还是无法测试的。</p>\n<p>虽然ES6都还没真正发布，但已经有用ES6重写的程序了，各种关于ES789的提议已经开始了，这你敢信。潮流不是我等大众所能追赶的。</p>\n<p>潮流虽然太快，但我们不停下学习的步伐，就不会被潮流丢下的，下面来领略下ES6中新特性，一堵新生代JS的风采。</p>\n<p>箭头操作符</p>\n<p>如果你会C#或者Java，你肯定知道lambda表达式，ES6中新增的箭头操作符=&gt;便有异曲同工之妙。它简化了函数的书写。操作符左边为输入的参数，而右边则是进行的操作以及返回的值Inputs=&gt;outputs。</p>\n<p>我们知道在JS中回调是经常的事，而一般回调又以匿名函数的形式出现，每次都需要写一个function，甚是繁琐。当引入箭头操作符后可以方便地写回调了。请看下面的例子。</p>\n<p>var array = [1, 2, 3];<br>//传统写法<br>array.forEach(function(v, i, a) {<br>    console.log(v);<br>});<br>//ES6<br>array.forEach(v = &gt; console.log(v));<br>大家可以打开文章开头提到的traceur在线代码转译页面输入代码来查看效果。</p>\n<p>类的支持</p>\n<p>ES6中添加了对类的支持，引入了class关键字（其实class在JavaScript中一直是保留字，目的就是考虑到可能在以后的新版本中会用到，现在终于派上用场了）。JS本身就是面向对象的，ES6中提供的类实际上只是JS原型模式的包装。现在提供原生的class支持后，对象的创建，继承更加直观了，并且父类方法的调用，实例化，静态方法和构造函数等概念都更加形象化。</p>\n<p>下面代码展示了类在ES6中的使用。再次啰嗦一句，你可以将代码贴到traceur自己查看运行结果。</p>\n<p>//类的定义<br>class Animal {<br>  //ES6中新型构造器<br>    constructor(name) {<br>        this.name = name;<br>    }<br>    //实例方法<br>    sayName() {<br>        console.log(‘My name is ‘+this.name);<br>    }<br>}<br>//类的继承<br>class Programmer extends Animal {<br>    constructor(name) {<br>      //直接调用父类构造器进行初始化<br>        super(name);<br>    }<br>    program() {<br>        console.log(“I’m coding…”);<br>    }<br>}<br>//测试我们的类<br>var animal=new Animal(‘dummy’),<br>wayou=new Programmer(‘wayou’);<br>animal.sayName();//输出 ‘My name is dummy’<br>wayou.sayName();//输出 ‘My name is wayou’<br>wayou.program();//输出 ‘I’m coding…’</p>\n<p>增强的对象字面量</p>\n<p>对象字面量被增强了，写法更加简洁与灵活，同时在定义对象的时候能够做的事情更多了。具体表现在：</p>\n<p>可以在对象字面量里面定义原型<br>定义方法可以不用function关键字<br>直接调用父类方法<br>这样一来，对象字面量与前面提到的类概念更加吻合，在编写面向对象的JavaScript时更加轻松方便了。</p>\n<p>//通过对象字面量创建对象<br>var human = {<br>    breathe() {<br>        console.log(‘breathing…’);<br>    }<br>};<br>var worker = {<br>    <strong>proto</strong>: human, //设置此对象的原型为human,相当于继承human<br>    company: ‘freelancer’,<br>    work() {<br>        console.log(‘working…’);<br>    }<br>};<br>human.breathe();//输出 ‘breathing…’<br>//调用继承来的breathe方法<br>worker.breathe();//输出 ‘breathing…’</p>\n<p>字符串模板</p>\n<p>字符串模板相对简单易懂些。ES6中允许使用反引号 ` 来创建字符串，此种方法创建的字符串里面可以包含由美元符号加花括号包裹的变量${vraible}。如果你使用过像C#等后端强类型语言的话，对此功能应该不会陌生。</p>\n<p>//产生一个随机数<br>var num=Math.random();<br>//将这个数字输出到console<br>console.log(<code>your num is ${num}</code>);<br>解构</p>\n<p>自动解析数组或对象中的值。比如若一个函数要返回多个值，常规的做法是返回一个对象，将每个值做为这个对象的属性返回。但在ES6中，利用解构这一特性，可以直接返回一个数组，然后数组中的值会自动被解析到对应接收该值的变量中。</p>\n<p>var [x,y]=getVal(),//函数返回值的解构<br>    [name,,age]=[‘wayou’,’male’,’secrect’];//数组解构</p>\n<p>function getVal() {<br>    return [ 1, 2 ];<br>}</p>\n<p>console.log(‘x:’+x+’, y:’+y);//输出：x:1, y:2<br>console.log(‘name:’+name+’, age:’+age);//输出： name:wayou, age:secrect<br>参数默认值，不定参数，拓展参数</p>\n<p>默认参数值</p>\n<p>现在可以在定义函数的时候指定参数的默认值了，而不用像以前那样通过逻辑或操作符来达到目的了。</p>\n<p>function sayHello(name){<br>  //传统的指定默认参数的方式<br>  var name=name||’dude’;<br>  console.log(‘Hello ‘+name);<br>}<br>//运用ES6的默认参数<br>function sayHello2(name=’dude’){<br>  console.log(<code>Hello ${name}</code>);<br>}<br>sayHello();//输出：Hello dude<br>sayHello(‘Wayou’);//输出：Hello Wayou<br>sayHello2();//输出：Hello dude<br>sayHello2(‘Wayou’);//输出：Hello Wayou</p>\n<p>不定参数</p>\n<p>不定参数是在函数中使用命名参数同时接收不定数量的未命名参数。这只是一种语法糖，在以前的JavaScript代码中我们可以通过arguments变量来达到这一目的。不定参数的格式是三个句点后跟代表所有不定参数的变量名。比如下面这个例子中，…x代表了所有传入add函数的参数。</p>\n<p>//将所有参数相加的函数<br>function add(…x){<br>  return x.reduce((m,n)=&gt;m+n);<br>}<br>//传递任意个数的参数<br>console.log(add(1,2,3));//输出：6<br>console.log(add(1,2,3,4,5));//输出：15</p>\n<p>拓展参数</p>\n<p>拓展参数则是另一种形式的语法糖，它允许传递数组或者类数组直接做为函数的参数而不用通过apply。</p>\n<p>var people=[‘Wayou’,’John’,’Sherlock’];<br>//sayHello函数本来接收三个单独的参数人妖，人二和人三<br>function sayHello(people1,people2,people3){<br>  console.log(<code>Hello ${people1},${people2},${people3}</code>);<br>}<br>//但是我们将一个数组以拓展参数的形式传递，它能很好地映射到每个单独的参数<br>sayHello(…people);//输出：Hello Wayou,John,Sherlock </p>\n<p>//而在以前，如果需要传递数组当参数，我们需要使用函数的apply方法<br>sayHello.apply(null,people);//输出：Hello Wayou,John,Sherlock<br>let与const 关键字</p>\n<p>可以把let看成var，只是它定义的变量被限定在了特定范围内才能使用，而离开这个范围则无效。const则很直观，用来定义常量，即无法被更改值的变量。</p>\n<p>for (let i=0;i&lt;2;i++)console.log(i);//输出: 0,1<br>console.log(i);//输出：undefined,严格模式下会报错<br>for of 值遍历</p>\n<p>我们都知道for in 循环用于遍历数组，类数组或对象，ES6中新引入的for of循环功能相似，不同的是每次循环它提供的不是序号而是值。</p>\n<p>var someArray = [ “a”, “b”, “c” ];</p>\n<p>for (v of someArray) {<br>    console.log(v);//输出 a,b,c<br>}<br>注意，此功能google traceur并未实现，所以无法模拟调试,下面有些功能也是如此</p>\n<p>iterator, generator</p>\n<p>这一部分的内容有点生涩，详情可以参见这里。以下是些基本概念。</p>\n<p>iterator:它是这么一个对象，拥有一个next方法，这个方法返回一个对象{done,value}，这个对象包含两个属性，一个布尔类型的done和包含任意值的value<br>iterable: 这是这么一个对象，拥有一个obj[@@iterator]方法，这个方法返回一个iterator<br>generator: 它是一种特殊的iterator。反的next方法可以接收一个参数并且返回值取决与它的构造函数（generator function）。generator同时拥有一个throw方法<br>generator 函数: 即generator的构造函数。此函数内可以使用yield关键字。在yield出现的地方可以通过generator的next或throw方法向外界传递值。generator 函数是通过function*来声明的<br>yield 关键字：它可以暂停函数的执行，随后可以再进进入函数继续执行<br>模块</p>\n<p>在ES6标准中，JavaScript原生支持module了。这种将JS代码分割成不同功能的小块进行模块化的概念是在一些三方规范中流行起来的，比如CommonJS和AMD模式。</p>\n<p>将不同功能的代码分别写在不同文件中，各模块只需导出公共接口部分，然后通过模块的导入的方式可以在其他地方使用。下面的例子来自tutsplus:</p>\n<p>// point.js<br>module “point” {<br>    export class Point {<br>        constructor (x, y) {<br>            public x = x;<br>            public y = y;<br>        }<br>    }<br>}</p>\n<p>// myapp.js<br>//声明引用的模块<br>module point from “/point.js”;<br>//这里可以看出，尽管声明了引用的模块，还是可以通过指定需要的部分进行导入<br>import Point from “point”;</p>\n<p>var origin = new Point(0, 0);<br>console.log(origin);<br>Map，Set 和 WeakMap，WeakSet</p>\n<p>这些是新加的集合类型，提供了更加方便的获取属性值的方法，不用像以前一样用hasOwnProperty来检查某个属性是属于原型链上的呢还是当前对象的。同时，在进行属性值添加与获取时有专门的get，set 方法。</p>\n<p>下方代码来自es6feature</p>\n<p>// Sets<br>var s = new Set();<br>s.add(“hello”).add(“goodbye”).add(“hello”);<br>s.size === 2;<br>s.has(“hello”) === true;</p>\n<p>// Maps<br>var m = new Map();<br>m.set(“hello”, 42);<br>m.set(s, 34);<br>m.get(s) == 34;<br>有时候我们会把对象作为一个对象的键用来存放属性值，普通集合类型比如简单对象会阻止垃圾回收器对这些作为属性键存在的对象的回收，有造成内存泄漏的危险。而WeakMap,WeakSet则更加安全些，这些作为属性键的对象如果没有别的变量在引用它们，则会被回收释放掉，具体还看下面的例子。</p>\n<p>正文代码来自es6feature</p>\n<p>// Weak Maps<br>var wm = new WeakMap();<br>wm.set(s, { extra: 42 });<br>wm.size === undefined</p>\n<p>// Weak Sets<br>var ws = new WeakSet();<br>ws.add({ data: 42 });//因为添加到ws的这个临时对象没有其他变量引用它，所以ws不会保存它的值，也就是说这次添加其实没有意思</p>\n<p>Proxies</p>\n<p>Proxy可以监听对象身上发生了什么事情，并在这些事情发生后执行一些相应的操作。一下子让我们对一个对象有了很强的追踪能力，同时在数据绑定方面也很有用处。</p>\n<p>以下例子借用自这里。</p>\n<p>//定义被侦听的目标对象<br>var engineer = { name: ‘Joe Sixpack’, salary: 50 };<br>//定义处理程序<br>var interceptor = {<br>  set: function (receiver, property, value) {<br>    console.log(property, ‘is changed to’, value);<br>    receiver[property] = value;<br>  }<br>};<br>//创建代理以进行侦听<br>engineer = Proxy(engineer, interceptor);<br>//做一些改动来触发代理<br>engineer.salary = 60;//控制台输出：salary is changed to 60<br>上面代码我已加了注释，这里进一步解释。对于处理程序，是在被侦听的对象身上发生了相应事件之后，处理程序里面的方法就会被调用，上面例子中我们设置了set的处理函数，表明，如果我们侦听的对象的属性被更改，也就是被set了，那这个处理程序就会被调用，同时通过参数能够得知是哪个属性被更改，更改为了什么值。</p>\n<p>Symbols</p>\n<p>我们知道对象其实是键值对的集合，而键通常来说是字符串。而现在除了字符串外，我们还可以用symbol这种值来做为对象的键。Symbol是一种基本类型，像数字，字符串还有布尔一样，它不是一个对象。Symbol 通过调用symbol函数产生，它接收一个可选的名字参数，该函数返回的symbol是唯一的。之后就可以用这个返回值做为对象的键了。Symbol还可以用来创建私有属性，外部无法直接访问由symbol做为键的属性值。</p>\n<p>以下例子来自es6features</p>\n<p>(function() {</p>\n<p>  // 创建symbol<br>  var key = Symbol(“key”);</p>\n<p>  function MyClass(privateData) {<br>    this[key] = privateData;<br>  }</p>\n<p>  MyClass.prototype = {<br>    doStuff: function() {<br>      … this[key] …<br>    }<br>  };</p>\n<p>})();</p>\n<p>var c = new MyClass(“hello”)<br>c[“key”] === undefined//无法访问该属性，因为是私有的</p>\n<p>Math，Number，String，Object 的新API</p>\n<p>对Math,Number,String还有Object等添加了许多新的API。下面代码同样来自es6features，对这些新API进行了简单展示。</p>\n<p>Number.EPSILON<br>Number.isInteger(Infinity) // false<br>Number.isNaN(“NaN”) // false</p>\n<p>Math.acosh(3) // 1.762747174039086<br>Math.hypot(3, 4) // 5<br>Math.imul(Math.pow(2, 32) - 1, Math.pow(2, 32) - 2) // 2</p>\n<p>“abcde”.contains(“cd”) // true<br>“abc”.repeat(3) // “abcabcabc”</p>\n<p>Array.from(document.querySelectorAll(‘*’)) // Returns a real Array<br>Array.of(1, 2, 3) // Similar to new Array(…), but without special one-arg behavior<br>[0, 0, 0].fill(7, 1) // [0,7,7]<br>[1,2,3].findIndex(x =&gt; x == 2) // 1<br>[“a”, “b”, “c”].entries() // iterator [0, “a”], [1,”b”], [2,”c”]<br>[“a”, “b”, “c”].keys() // iterator 0, 1, 2<br>[“a”, “b”, “c”].values() // iterator “a”, “b”, “c”</p>\n<p>Object.assign(Point, { origin: new Point(0,0) })</p>\n<p>Promises</p>\n<p>Promises是处理异步操作的一种模式，之前在很多三方库中有实现，比如jQuery的deferred 对象。当你发起一个异步请求，并绑定了.when(), .done()等事件处理程序时，其实就是在应用promise模式。</p>\n<p>//创建promise<br>var promise = new Promise(function(resolve, reject) {<br>    // 进行一些异步或耗时操作<br>    if ( /<em>如果成功 </em>/ ) {<br>        resolve(“Stuff worked!”);<br>    } else {<br>        reject(Error(“It broke”));<br>    }<br>});<br>//绑定处理程序<br>promise.then(function(result) {<br>  //promise成功的话会执行这里<br>    console.log(result); // “Stuff worked!”<br>}, function(err) {<br>  //promise失败会执行这里<br>    console.log(err); // Error: “It broke”<br>});<br>总结</p>\n<p>总结就是一句话，前后端差异越来越小了。</p>"},{"title":"前端","date":"2017-05-24T06:34:36.000Z","toc":true,"_content":"\n这算是有感而发的。今天我老大告诉我们要离职。感觉很不舍。老大教了我们好多东西。也交了我们好多前端上的事情。\n人生何处不相逢！老大我们有缘再见！\n\n老大给我们说了前端之后的发展方向。\n前端发展到一定的地步可以称之为‘大前端’；\n\n<!--more-->\n大前端包括：\n    基础的HTML，CSS，jQuery，Bootstrap，JavaScript基本技术。\n    新鲜的HTML5，CSS3，ECMAScript 6，\n    最常用的框架：angular，react，Vue\n    必备知识：Nodejs\n    可能用得到的：网络运营\n    需要了解：UI，Java，PHP，GO语言\n    基本的计算机知识\n    前端代码的优化：JavaScript，CSS，HTML\n    SEO的优化\n    \n总结了之后突然感觉，人生有了方向。希望我这一生可以学完。那我就很满足了。\n需要了解的知识：百度统计，\n我的老大叫hjx","source":"_posts/前端.md","raw":"---\ntitle: 前端\ndate: 2017-05-24 14:34:36\ntags: 人生规划-人生计划\ntoc: true\n---\n\n这算是有感而发的。今天我老大告诉我们要离职。感觉很不舍。老大教了我们好多东西。也交了我们好多前端上的事情。\n人生何处不相逢！老大我们有缘再见！\n\n老大给我们说了前端之后的发展方向。\n前端发展到一定的地步可以称之为‘大前端’；\n\n<!--more-->\n大前端包括：\n    基础的HTML，CSS，jQuery，Bootstrap，JavaScript基本技术。\n    新鲜的HTML5，CSS3，ECMAScript 6，\n    最常用的框架：angular，react，Vue\n    必备知识：Nodejs\n    可能用得到的：网络运营\n    需要了解：UI，Java，PHP，GO语言\n    基本的计算机知识\n    前端代码的优化：JavaScript，CSS，HTML\n    SEO的优化\n    \n总结了之后突然感觉，人生有了方向。希望我这一生可以学完。那我就很满足了。\n需要了解的知识：百度统计，\n我的老大叫hjx","slug":"前端","published":1,"updated":"2017-06-28T06:59:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfnkq6p000ylyfyzqlg2ui0","content":"<p>这算是有感而发的。今天我老大告诉我们要离职。感觉很不舍。老大教了我们好多东西。也交了我们好多前端上的事情。<br>人生何处不相逢！老大我们有缘再见！</p>\n<p>老大给我们说了前端之后的发展方向。<br>前端发展到一定的地步可以称之为‘大前端’；</p>\n<a id=\"more\"></a>\n<p>大前端包括：<br>    基础的HTML，CSS，jQuery，Bootstrap，JavaScript基本技术。<br>    新鲜的HTML5，CSS3，ECMAScript 6，<br>    最常用的框架：angular，react，Vue<br>    必备知识：Nodejs<br>    可能用得到的：网络运营<br>    需要了解：UI，Java，PHP，GO语言<br>    基本的计算机知识<br>    前端代码的优化：JavaScript，CSS，HTML<br>    SEO的优化</p>\n<p>总结了之后突然感觉，人生有了方向。希望我这一生可以学完。那我就很满足了。<br>需要了解的知识：百度统计，<br>我的老大叫hjx</p>\n","site":{"data":{}},"excerpt":"<p>这算是有感而发的。今天我老大告诉我们要离职。感觉很不舍。老大教了我们好多东西。也交了我们好多前端上的事情。<br>人生何处不相逢！老大我们有缘再见！</p>\n<p>老大给我们说了前端之后的发展方向。<br>前端发展到一定的地步可以称之为‘大前端’；</p>","more":"<p>大前端包括：<br>    基础的HTML，CSS，jQuery，Bootstrap，JavaScript基本技术。<br>    新鲜的HTML5，CSS3，ECMAScript 6，<br>    最常用的框架：angular，react，Vue<br>    必备知识：Nodejs<br>    可能用得到的：网络运营<br>    需要了解：UI，Java，PHP，GO语言<br>    基本的计算机知识<br>    前端代码的优化：JavaScript，CSS，HTML<br>    SEO的优化</p>\n<p>总结了之后突然感觉，人生有了方向。希望我这一生可以学完。那我就很满足了。<br>需要了解的知识：百度统计，<br>我的老大叫hjx</p>"},{"title":"循环","date":"2017-07-04T06:02:56.000Z","_content":"# JS中循环嵌套常见的六大经典例题+六大图形题\n首先，了解一下循环嵌套的特点：外层循环转一次，内层循环转一圈。\n在上一篇随笔中详细介绍了JS中的分支结构和循环结构，我们来简单的回顾一下For循环结构：\n<!--more-->\n## for循环有三个表达式，分别为：\n>①定义循环变量\n② 判断循环条件\n③更新循环变量（三个表达式之间，用;分隔。）\nfor循环三个表达式可以省略，两个;缺一不可\n\n##2、for循环特点：先判断，再执行；\n##3、for循环三个表达式，均可以有多部分组成，之间用逗号分隔，但是第二部分判断条件需要用&&链接，最终结果需要为真/假。\n##【嵌套循环特点】\n外层循环控制行数，内层循环控制每行元素个数\n\n[做图形题思路]（图形题请看案例三）\n>1、确定图形一共几行，即为外层的循环的次数；\n2、确定每行有几种元素，代表有几个内层循环；\n3、确定没种元素的个数，即为每个内层循环的次数；\nTips：通常，找出每种元素个数，与行号的关系式，即为当前内层循环的最大值（从1开始循环）\n\n例题如下：\n## 案例一\n>求和，实现 1+（1+2）+（1+2+3）+（1+2+3+4）+（1+2+3+4+5）=35\n\n代码如下：\n~~~js\nvar sum = 0,\n    sumRow = 0;\nfor (var i = 1; i <= 5; i++) {\n    sumRow = 0;\n\n    if (i != 1) document.write(\"(\");\n\n    for (var j = 1; j <= i; j++) {\n        if (j != i) document.write(j + \"+\");\n        else document.write(j);\n        sumRow += j;\n    }\n    if (i == 1) document.write(\"+\");\n    else if (i == 5) document.write(\")=\");\n    else document.write(\")+\");\n\n    sum += sumRow;\n}\ndocument.write(sum);\n\n~~~\n## 案例二\n>求和：实现1!+2!+3!+4!+5!\n\n分析\n1+\n1*2+\n1*2*3+\n1*2*3*4+\n1*2*3*4*5=\n\n代码如下：\n~~~js\nvar sum = 0;\nfor (var i = 1; i <= 5; i++) {\n    var jie = 1;\n    for (var j = 1; j <= i; j++) {\n        jie *= j;\n    }\n    sum += jie;\n}\ndocument.write(\"1!+2!+3!+4!+5!=\" + sum);\n~~~\n##案例三：（六大图形题）\n\n###1、矩形\n\n代码如下：\n~~~js\nfor(var i=1;i<=5;i++){\n    for(var j=1;j<=5;j++){\n        document.write(\"*\");\n    }\n    document.write(\"<br />\");\n}\n\ndocument.write(\"<hr />\");\n~~~\n实现效果：\n![](https://anhaoran.github.io/ImageServer/juejin/WX20170704-150505@2x.png)\n\n### 2、直角三角形\n代码如下：\n\n~~~js\nfor(var i=1;i<=5;i++){\n    for(var j=1;j<=i;j++){\n        document.write(\"*\");\n    }\n    document.write(\"<br />\");\n}\n            \ndocument.write(\"<hr />\");\n~~~\n实现效果：\n![](https://anhaoran.github.io/ImageServer/juejin/WX20170704-150543@2x.png)\n\n### 3、平行三角形\n代码如下：\n~~~js\nfor(var i=1;i<=5;i++){\n   for(var j=1;j<=i+4;j++){\n       if(j<i)document.write(\"&nbsp;\");\n       else{document.write(\"*\");}\n   }\n   document.write(\"<br />\");\n}\n\ndocument.write(\"<hr />\");\n~~~\n效果如下：\n![](https://anhaoran.github.io/ImageServer/juejin/WX20170704-150952@2x.png)\n\n### 4、数字等边三角形\n代码如下：\n~~~js\nfor(var i=1;i<=4;i++){\n   // 空格\n   for(var k=1;k<=4-i;k++){\n       document.write(\"<span style='display: inline-block;width: 8px;'></span>\");\n   }\n   var n = 1;\n   // 递增\n   for(var j=1;j<=i;j++){\n       document.write(n);\n       n++;\n   }\n   n-=2;\n   // 递减\n   for(var m=1;m<=i-1;m++){\n       document.write(n);\n       n--;\n   }\n   // 回车\n   document.write(\"<br/>\");\n}\n\ndocument.write(\"<hr />\");\n~~~\n效果如下：\n![](https://anhaoran.github.io/ImageServer/juejin/WX20170704-151346@2x.png)\n\n### 九九乘法表（以table表格的形式打印）\n代码如下:\n~~~js\ndocument.write(\"<table width='700'>\")\nfor(var i=1;i<=9;i++){\n   document.write(\"<tr>\")\n   for(var j=1;j<=i;j++){\n       document.write(\"<td>\"+i+\"*\"+j+\"=\"+i*j+\"</td>\");\n   }\n   document.write(\"</tr>\")\n}\ndocument.write(\"</table>\")\n\ndocument.write(\"<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />\");\n~~~\n效果如下:\n![](https://anhaoran.github.io/ImageServer/juejin/WX20170704-151357@2x.png)\n\n## 案例四\n\n输入一个数字，然后判断是否为正整数，如果不是，提示重新输入；\n如果是，将该数字左右反转，然后输出（例如：12345，翻转之后为54321）\n代码如下：\n~~~js\nvar sum=1;\nfor(var i=1;i<=2;){\n    var num = prompt(\"请输入一个数字~\");\n    if(Number(num)>0&&parseInt(num)==parseFloat(num)){\n        break;\n    }\n}\n/*\n    num = 12345\n    5 num%10;\n    4 num/10%10;\n    3 num/10/10%10;\n    ……\n*/\ndocument.write(\"您输入的数字为：\"+num+\"<br />\");            \nfor(j=1;;j++){\n    sum *= 10;\n    var fz = parseInt(num%sum/(sum/10));\n    document.write(fz);\n    if(num-sum<=0){\n        break;\n    }\n}\n~~~\n实现效果:\n![](https://anhaoran.github.io/ImageServer/juejin/QQ20170704-152855@2x.jpg)\n\n## 案例五\n>编写一个程序，最多接受10个数字，并求出其中所有正数的和。用户可通过输入999终止程序，统计出用户输入的正数个数，并显示这些正数的和。\n\n分析\n>①输入非数值，不占用10次机会之一，但要求重新输入；\n②输入的是数值，只累加整数；\n判断是否为一个数字：Number（num）不为NaN，说明为数字\n判断一个数字为正数：Number(num)>0\n判断一个数字为整数：parseInt(num)==parseFloat(num);\n\n代码如下：\n~~~js\nvar i=1,sum=0,n=0;\nwhile(i<=3){\n    var num = prompt(\"请您输入一个数，我会为您计算出所有正数的和~\");\n    if(Number(num)){\n        if(num==999){\n        break;\n       }\n        else if(num>=0){\n            sum = sum + parseFloat(num);\n             i++;\n             n++;\n         }\n         else if(num<0){\n             i++;\n         }\n     }\n }\ndocument.write(\"您一共输入\"+n+\"个正整数\"+\"<br />它们的和为：\"+sum);\n~~~\n## 案例六\n>输入某年某月某日，判断这一天是这一年的第几天？\n代码如下：\n方法一：\n~~~js\nfor(var i=1;i<month;i++){\n    if(i==1||i==3||i==5||i==7||i==8||i==10||i==12){\n        sum += 31;\n    }else if(i==4||i==6||i==9||i==11){\n        sum += 30;\n    }else if(i==28){\n        sum += 28;\n    }\n}\n if((year%4==0&&year%100!=0||year%400==0)&&month>2){\n     sum += (day+1);\n }else{\n     sum += day;\n }\n document.write(\"您输入的日期为\"+year+\"-\"+month+\"-\"+day+\"<br />为该年的第\"+sum+\"天\");\n ~~~\n 方法二：\n ~~~js\n var year = parseInt(prompt(\"请输入年份：\"));\nvar month = parseInt(prompt(\"请输入月份：\"));\nvar day = parseInt(prompt(\"请输入日期：\"));\n\n/*假设都是平年，2月28天*/\nvar sum = 0;\nswitch(month-1){\n    case 12:\n       sum += 31;\n     case 11:\n         sum += 30;\n     case 10:\n        sum += 31;\n     case 9:\n        sum += 30;\n     case 8:\n        sum += 31;\n     case 7:\n        sum += 31;\n     case 6:\n        sum += 30;\n     case 5:\n        sum += 31;\n     case 4:\n        sum += 30;\n     case 3:\n        sum += 31;\n     case 2:\n        sum += 28;\n     case 1:\n        sum += 31;\n }\n if((year%4==0&&year%100!=0||year%400==0)&&month>2){\n     sum += (day+1);\n }else{\n     sum += day;\n }\n document.write(\"您输入的日期为\"+year+\"-\"+month+\"-\"+day+\"<br />为该年的第\"+sum+\"天\");\n ~~~\n \n ## 案例七\n> 假设一个简单的ATM机的取款过程是这样的：首先提示用户输入密码（password），\n最多只能输入三次，超过3次则提示用户“密码错误，请取卡”结束交易。\n如果用户密码正确，再提示用户输入取款金额（amount），ATM机只能输出100元的纸币，一次取钱数要求最低\n100元，最高1000元。若用户输入的金额符合上述要求，则打印输出用户取得钱数，\n最后提示用户“交易完成，请取卡”，否则提示用户重新输入金额。\n假设用户密码是111111，请编程实现。 \n\n代码如下：\n~~~js\nvar isTrue = false,\n    n = 1;\n\nwhile(n <= 3) {\n    var pwd = prompt(\"请输入用户密码~\");\n    if(pwd == 111111) {\n        isTrue = true;\n        break;\n    } else {\n         n++;\n         if(n > 3) {\n             document.write(\"密码错误，请取卡!\");\n         }\n     }\n }\n\n if(isTrue) {\n     while(1) {\n         var num = prompt(\"请输入取款金额：(100~1000元)\")\n         if(num % 100 == 0 && num >= 0 && num <= 1000) {\n             document.write(\"您的取款金额为\" + num + \"元~<br />交易完成，请取卡！\");\n             break;\n         } else {\n             alert(\"你输入不合法！请重新输入！\")\n         }\n     }\n     //循环输入金额操作\n }\n ~~~","source":"_posts/循环.md","raw":"---\ntitle: 循环\ndate: 2017-07-04 14:02:56\ntags: JavaScript\n---\n# JS中循环嵌套常见的六大经典例题+六大图形题\n首先，了解一下循环嵌套的特点：外层循环转一次，内层循环转一圈。\n在上一篇随笔中详细介绍了JS中的分支结构和循环结构，我们来简单的回顾一下For循环结构：\n<!--more-->\n## for循环有三个表达式，分别为：\n>①定义循环变量\n② 判断循环条件\n③更新循环变量（三个表达式之间，用;分隔。）\nfor循环三个表达式可以省略，两个;缺一不可\n\n##2、for循环特点：先判断，再执行；\n##3、for循环三个表达式，均可以有多部分组成，之间用逗号分隔，但是第二部分判断条件需要用&&链接，最终结果需要为真/假。\n##【嵌套循环特点】\n外层循环控制行数，内层循环控制每行元素个数\n\n[做图形题思路]（图形题请看案例三）\n>1、确定图形一共几行，即为外层的循环的次数；\n2、确定每行有几种元素，代表有几个内层循环；\n3、确定没种元素的个数，即为每个内层循环的次数；\nTips：通常，找出每种元素个数，与行号的关系式，即为当前内层循环的最大值（从1开始循环）\n\n例题如下：\n## 案例一\n>求和，实现 1+（1+2）+（1+2+3）+（1+2+3+4）+（1+2+3+4+5）=35\n\n代码如下：\n~~~js\nvar sum = 0,\n    sumRow = 0;\nfor (var i = 1; i <= 5; i++) {\n    sumRow = 0;\n\n    if (i != 1) document.write(\"(\");\n\n    for (var j = 1; j <= i; j++) {\n        if (j != i) document.write(j + \"+\");\n        else document.write(j);\n        sumRow += j;\n    }\n    if (i == 1) document.write(\"+\");\n    else if (i == 5) document.write(\")=\");\n    else document.write(\")+\");\n\n    sum += sumRow;\n}\ndocument.write(sum);\n\n~~~\n## 案例二\n>求和：实现1!+2!+3!+4!+5!\n\n分析\n1+\n1*2+\n1*2*3+\n1*2*3*4+\n1*2*3*4*5=\n\n代码如下：\n~~~js\nvar sum = 0;\nfor (var i = 1; i <= 5; i++) {\n    var jie = 1;\n    for (var j = 1; j <= i; j++) {\n        jie *= j;\n    }\n    sum += jie;\n}\ndocument.write(\"1!+2!+3!+4!+5!=\" + sum);\n~~~\n##案例三：（六大图形题）\n\n###1、矩形\n\n代码如下：\n~~~js\nfor(var i=1;i<=5;i++){\n    for(var j=1;j<=5;j++){\n        document.write(\"*\");\n    }\n    document.write(\"<br />\");\n}\n\ndocument.write(\"<hr />\");\n~~~\n实现效果：\n![](https://anhaoran.github.io/ImageServer/juejin/WX20170704-150505@2x.png)\n\n### 2、直角三角形\n代码如下：\n\n~~~js\nfor(var i=1;i<=5;i++){\n    for(var j=1;j<=i;j++){\n        document.write(\"*\");\n    }\n    document.write(\"<br />\");\n}\n            \ndocument.write(\"<hr />\");\n~~~\n实现效果：\n![](https://anhaoran.github.io/ImageServer/juejin/WX20170704-150543@2x.png)\n\n### 3、平行三角形\n代码如下：\n~~~js\nfor(var i=1;i<=5;i++){\n   for(var j=1;j<=i+4;j++){\n       if(j<i)document.write(\"&nbsp;\");\n       else{document.write(\"*\");}\n   }\n   document.write(\"<br />\");\n}\n\ndocument.write(\"<hr />\");\n~~~\n效果如下：\n![](https://anhaoran.github.io/ImageServer/juejin/WX20170704-150952@2x.png)\n\n### 4、数字等边三角形\n代码如下：\n~~~js\nfor(var i=1;i<=4;i++){\n   // 空格\n   for(var k=1;k<=4-i;k++){\n       document.write(\"<span style='display: inline-block;width: 8px;'></span>\");\n   }\n   var n = 1;\n   // 递增\n   for(var j=1;j<=i;j++){\n       document.write(n);\n       n++;\n   }\n   n-=2;\n   // 递减\n   for(var m=1;m<=i-1;m++){\n       document.write(n);\n       n--;\n   }\n   // 回车\n   document.write(\"<br/>\");\n}\n\ndocument.write(\"<hr />\");\n~~~\n效果如下：\n![](https://anhaoran.github.io/ImageServer/juejin/WX20170704-151346@2x.png)\n\n### 九九乘法表（以table表格的形式打印）\n代码如下:\n~~~js\ndocument.write(\"<table width='700'>\")\nfor(var i=1;i<=9;i++){\n   document.write(\"<tr>\")\n   for(var j=1;j<=i;j++){\n       document.write(\"<td>\"+i+\"*\"+j+\"=\"+i*j+\"</td>\");\n   }\n   document.write(\"</tr>\")\n}\ndocument.write(\"</table>\")\n\ndocument.write(\"<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />\");\n~~~\n效果如下:\n![](https://anhaoran.github.io/ImageServer/juejin/WX20170704-151357@2x.png)\n\n## 案例四\n\n输入一个数字，然后判断是否为正整数，如果不是，提示重新输入；\n如果是，将该数字左右反转，然后输出（例如：12345，翻转之后为54321）\n代码如下：\n~~~js\nvar sum=1;\nfor(var i=1;i<=2;){\n    var num = prompt(\"请输入一个数字~\");\n    if(Number(num)>0&&parseInt(num)==parseFloat(num)){\n        break;\n    }\n}\n/*\n    num = 12345\n    5 num%10;\n    4 num/10%10;\n    3 num/10/10%10;\n    ……\n*/\ndocument.write(\"您输入的数字为：\"+num+\"<br />\");            \nfor(j=1;;j++){\n    sum *= 10;\n    var fz = parseInt(num%sum/(sum/10));\n    document.write(fz);\n    if(num-sum<=0){\n        break;\n    }\n}\n~~~\n实现效果:\n![](https://anhaoran.github.io/ImageServer/juejin/QQ20170704-152855@2x.jpg)\n\n## 案例五\n>编写一个程序，最多接受10个数字，并求出其中所有正数的和。用户可通过输入999终止程序，统计出用户输入的正数个数，并显示这些正数的和。\n\n分析\n>①输入非数值，不占用10次机会之一，但要求重新输入；\n②输入的是数值，只累加整数；\n判断是否为一个数字：Number（num）不为NaN，说明为数字\n判断一个数字为正数：Number(num)>0\n判断一个数字为整数：parseInt(num)==parseFloat(num);\n\n代码如下：\n~~~js\nvar i=1,sum=0,n=0;\nwhile(i<=3){\n    var num = prompt(\"请您输入一个数，我会为您计算出所有正数的和~\");\n    if(Number(num)){\n        if(num==999){\n        break;\n       }\n        else if(num>=0){\n            sum = sum + parseFloat(num);\n             i++;\n             n++;\n         }\n         else if(num<0){\n             i++;\n         }\n     }\n }\ndocument.write(\"您一共输入\"+n+\"个正整数\"+\"<br />它们的和为：\"+sum);\n~~~\n## 案例六\n>输入某年某月某日，判断这一天是这一年的第几天？\n代码如下：\n方法一：\n~~~js\nfor(var i=1;i<month;i++){\n    if(i==1||i==3||i==5||i==7||i==8||i==10||i==12){\n        sum += 31;\n    }else if(i==4||i==6||i==9||i==11){\n        sum += 30;\n    }else if(i==28){\n        sum += 28;\n    }\n}\n if((year%4==0&&year%100!=0||year%400==0)&&month>2){\n     sum += (day+1);\n }else{\n     sum += day;\n }\n document.write(\"您输入的日期为\"+year+\"-\"+month+\"-\"+day+\"<br />为该年的第\"+sum+\"天\");\n ~~~\n 方法二：\n ~~~js\n var year = parseInt(prompt(\"请输入年份：\"));\nvar month = parseInt(prompt(\"请输入月份：\"));\nvar day = parseInt(prompt(\"请输入日期：\"));\n\n/*假设都是平年，2月28天*/\nvar sum = 0;\nswitch(month-1){\n    case 12:\n       sum += 31;\n     case 11:\n         sum += 30;\n     case 10:\n        sum += 31;\n     case 9:\n        sum += 30;\n     case 8:\n        sum += 31;\n     case 7:\n        sum += 31;\n     case 6:\n        sum += 30;\n     case 5:\n        sum += 31;\n     case 4:\n        sum += 30;\n     case 3:\n        sum += 31;\n     case 2:\n        sum += 28;\n     case 1:\n        sum += 31;\n }\n if((year%4==0&&year%100!=0||year%400==0)&&month>2){\n     sum += (day+1);\n }else{\n     sum += day;\n }\n document.write(\"您输入的日期为\"+year+\"-\"+month+\"-\"+day+\"<br />为该年的第\"+sum+\"天\");\n ~~~\n \n ## 案例七\n> 假设一个简单的ATM机的取款过程是这样的：首先提示用户输入密码（password），\n最多只能输入三次，超过3次则提示用户“密码错误，请取卡”结束交易。\n如果用户密码正确，再提示用户输入取款金额（amount），ATM机只能输出100元的纸币，一次取钱数要求最低\n100元，最高1000元。若用户输入的金额符合上述要求，则打印输出用户取得钱数，\n最后提示用户“交易完成，请取卡”，否则提示用户重新输入金额。\n假设用户密码是111111，请编程实现。 \n\n代码如下：\n~~~js\nvar isTrue = false,\n    n = 1;\n\nwhile(n <= 3) {\n    var pwd = prompt(\"请输入用户密码~\");\n    if(pwd == 111111) {\n        isTrue = true;\n        break;\n    } else {\n         n++;\n         if(n > 3) {\n             document.write(\"密码错误，请取卡!\");\n         }\n     }\n }\n\n if(isTrue) {\n     while(1) {\n         var num = prompt(\"请输入取款金额：(100~1000元)\")\n         if(num % 100 == 0 && num >= 0 && num <= 1000) {\n             document.write(\"您的取款金额为\" + num + \"元~<br />交易完成，请取卡！\");\n             break;\n         } else {\n             alert(\"你输入不合法！请重新输入！\")\n         }\n     }\n     //循环输入金额操作\n }\n ~~~","slug":"循环","published":1,"updated":"2017-07-04T08:14:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfnkq6q0010lyfyw75fyass","content":"<h1 id=\"JS中循环嵌套常见的六大经典例题-六大图形题\"><a href=\"#JS中循环嵌套常见的六大经典例题-六大图形题\" class=\"headerlink\" title=\"JS中循环嵌套常见的六大经典例题+六大图形题\"></a>JS中循环嵌套常见的六大经典例题+六大图形题</h1><p>首先，了解一下循环嵌套的特点：外层循环转一次，内层循环转一圈。<br>在上一篇随笔中详细介绍了JS中的分支结构和循环结构，我们来简单的回顾一下For循环结构：<br><a id=\"more\"></a></p>\n<h2 id=\"for循环有三个表达式，分别为：\"><a href=\"#for循环有三个表达式，分别为：\" class=\"headerlink\" title=\"for循环有三个表达式，分别为：\"></a>for循环有三个表达式，分别为：</h2><blockquote>\n<p>①定义循环变量<br>② 判断循环条件<br>③更新循环变量（三个表达式之间，用;分隔。）<br>for循环三个表达式可以省略，两个;缺一不可</p>\n</blockquote>\n<p>##2、for循环特点：先判断，再执行；</p>\n<p>##3、for循环三个表达式，均可以有多部分组成，之间用逗号分隔，但是第二部分判断条件需要用&amp;&amp;链接，最终结果需要为真/假。</p>\n<p>##【嵌套循环特点】<br>外层循环控制行数，内层循环控制每行元素个数</p>\n<p>[做图形题思路]（图形题请看案例三）</p>\n<blockquote>\n<p>1、确定图形一共几行，即为外层的循环的次数；<br>2、确定每行有几种元素，代表有几个内层循环；<br>3、确定没种元素的个数，即为每个内层循环的次数；<br>Tips：通常，找出每种元素个数，与行号的关系式，即为当前内层循环的最大值（从1开始循环）</p>\n</blockquote>\n<p>例题如下：</p>\n<h2 id=\"案例一\"><a href=\"#案例一\" class=\"headerlink\" title=\"案例一\"></a>案例一</h2><blockquote>\n<p>求和，实现 1+（1+2）+（1+2+3）+（1+2+3+4）+（1+2+3+4+5）=35</p>\n</blockquote>\n<p>代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>,</div><div class=\"line\">    sumRow = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">    sumRow = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (i != <span class=\"number\">1</span>) <span class=\"built_in\">document</span>.write(<span class=\"string\">\"(\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt;= i; j++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (j != i) <span class=\"built_in\">document</span>.write(j + <span class=\"string\">\"+\"</span>);</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">document</span>.write(j);</div><div class=\"line\">        sumRow += j;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) <span class=\"built_in\">document</span>.write(<span class=\"string\">\"+\"</span>);</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i == <span class=\"number\">5</span>) <span class=\"built_in\">document</span>.write(<span class=\"string\">\")=\"</span>);</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">document</span>.write(<span class=\"string\">\")+\"</span>);</div><div class=\"line\"></div><div class=\"line\">    sum += sumRow;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">document</span>.write(sum);</div></pre></td></tr></table></figure></p>\n<h2 id=\"案例二\"><a href=\"#案例二\" class=\"headerlink\" title=\"案例二\"></a>案例二</h2><blockquote>\n<p>求和：实现1!+2!+3!+4!+5!</p>\n</blockquote>\n<p>分析<br>1+<br>1<em>2+<br>1</em>2<em>3+<br>1</em>2<em>3</em>4+<br>1<em>2</em>3<em>4</em>5=</p>\n<p>代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> jie = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt;= i; j++) &#123;</div><div class=\"line\">        jie *= j;</div><div class=\"line\">    &#125;</div><div class=\"line\">    sum += jie;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"1!+2!+3!+4!+5!=\"</span> + sum);</div></pre></td></tr></table></figure></p>\n<p>##案例三：（六大图形题）</p>\n<p>###1、矩形</p>\n<p>代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">5</span>;i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=<span class=\"number\">1</span>;j&lt;=<span class=\"number\">5</span>;j++)&#123;</div><div class=\"line\">        <span class=\"built_in\">document</span>.write(<span class=\"string\">\"*\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;br /&gt;\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;hr /&gt;\"</span>);</div></pre></td></tr></table></figure></p>\n<p>实现效果：<br><img src=\"https://anhaoran.github.io/ImageServer/juejin/WX20170704-150505@2x.png\" alt=\"\"></p>\n<h3 id=\"2、直角三角形\"><a href=\"#2、直角三角形\" class=\"headerlink\" title=\"2、直角三角形\"></a>2、直角三角形</h3><p>代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">5</span>;i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=<span class=\"number\">1</span>;j&lt;=i;j++)&#123;</div><div class=\"line\">        <span class=\"built_in\">document</span>.write(<span class=\"string\">\"*\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;br /&gt;\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">            </div><div class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;hr /&gt;\"</span>);</div></pre></td></tr></table></figure>\n<p>实现效果：<br><img src=\"https://anhaoran.github.io/ImageServer/juejin/WX20170704-150543@2x.png\" alt=\"\"></p>\n<h3 id=\"3、平行三角形\"><a href=\"#3、平行三角形\" class=\"headerlink\" title=\"3、平行三角形\"></a>3、平行三角形</h3><p>代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">5</span>;i++)&#123;</div><div class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=<span class=\"number\">1</span>;j&lt;=i+<span class=\"number\">4</span>;j++)&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span>(j&lt;i)<span class=\"built_in\">document</span>.write(<span class=\"string\">\"&amp;nbsp;\"</span>);</div><div class=\"line\">       <span class=\"keyword\">else</span>&#123;<span class=\"built_in\">document</span>.write(<span class=\"string\">\"*\"</span>);&#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;br /&gt;\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;hr /&gt;\"</span>);</div></pre></td></tr></table></figure></p>\n<p>效果如下：<br><img src=\"https://anhaoran.github.io/ImageServer/juejin/WX20170704-150952@2x.png\" alt=\"\"></p>\n<h3 id=\"4、数字等边三角形\"><a href=\"#4、数字等边三角形\" class=\"headerlink\" title=\"4、数字等边三角形\"></a>4、数字等边三角形</h3><p>代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">4</span>;i++)&#123;</div><div class=\"line\">   <span class=\"comment\">// 空格</span></div><div class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k=<span class=\"number\">1</span>;k&lt;=<span class=\"number\">4</span>-i;k++)&#123;</div><div class=\"line\">       <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;span style='display: inline-block;width: 8px;'&gt;&lt;/span&gt;\"</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">var</span> n = <span class=\"number\">1</span>;</div><div class=\"line\">   <span class=\"comment\">// 递增</span></div><div class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=<span class=\"number\">1</span>;j&lt;=i;j++)&#123;</div><div class=\"line\">       <span class=\"built_in\">document</span>.write(n);</div><div class=\"line\">       n++;</div><div class=\"line\">   &#125;</div><div class=\"line\">   n-=<span class=\"number\">2</span>;</div><div class=\"line\">   <span class=\"comment\">// 递减</span></div><div class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> m=<span class=\"number\">1</span>;m&lt;=i<span class=\"number\">-1</span>;m++)&#123;</div><div class=\"line\">       <span class=\"built_in\">document</span>.write(n);</div><div class=\"line\">       n--;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"comment\">// 回车</span></div><div class=\"line\">   <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;br/&gt;\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;hr /&gt;\"</span>);</div></pre></td></tr></table></figure></p>\n<p>效果如下：<br><img src=\"https://anhaoran.github.io/ImageServer/juejin/WX20170704-151346@2x.png\" alt=\"\"></p>\n<h3 id=\"九九乘法表（以table表格的形式打印）\"><a href=\"#九九乘法表（以table表格的形式打印）\" class=\"headerlink\" title=\"九九乘法表（以table表格的形式打印）\"></a>九九乘法表（以table表格的形式打印）</h3><p>代码如下:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;table width='700'&gt;\"</span>)</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">9</span>;i++)&#123;</div><div class=\"line\">   <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;tr&gt;\"</span>)</div><div class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=<span class=\"number\">1</span>;j&lt;=i;j++)&#123;</div><div class=\"line\">       <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;td&gt;\"</span>+i+<span class=\"string\">\"*\"</span>+j+<span class=\"string\">\"=\"</span>+i*j+<span class=\"string\">\"&lt;/td&gt;\"</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;/tr&gt;\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;/table&gt;\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;\"</span>);</div></pre></td></tr></table></figure></p>\n<p>效果如下:<br><img src=\"https://anhaoran.github.io/ImageServer/juejin/WX20170704-151357@2x.png\" alt=\"\"></p>\n<h2 id=\"案例四\"><a href=\"#案例四\" class=\"headerlink\" title=\"案例四\"></a>案例四</h2><p>输入一个数字，然后判断是否为正整数，如果不是，提示重新输入；<br>如果是，将该数字左右反转，然后输出（例如：12345，翻转之后为54321）<br>代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sum=<span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">2</span>;)&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> num = prompt(<span class=\"string\">\"请输入一个数字~\"</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">Number</span>(num)&gt;<span class=\"number\">0</span>&amp;&amp;<span class=\"built_in\">parseInt</span>(num)==<span class=\"built_in\">parseFloat</span>(num))&#123;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">    num = 12345</div><div class=\"line\">    5 num%10;</div><div class=\"line\">    4 num/10%10;</div><div class=\"line\">    3 num/10/10%10;</div><div class=\"line\">    ……</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"您输入的数字为：\"</span>+num+<span class=\"string\">\"&lt;br /&gt;\"</span>);            </div><div class=\"line\"><span class=\"keyword\">for</span>(j=<span class=\"number\">1</span>;;j++)&#123;</div><div class=\"line\">    sum *= <span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> fz = <span class=\"built_in\">parseInt</span>(num%sum/(sum/<span class=\"number\">10</span>));</div><div class=\"line\">    <span class=\"built_in\">document</span>.write(fz);</div><div class=\"line\">    <span class=\"keyword\">if</span>(num-sum&lt;=<span class=\"number\">0</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>实现效果:<br><img src=\"https://anhaoran.github.io/ImageServer/juejin/QQ20170704-152855@2x.jpg\" alt=\"\"></p>\n<h2 id=\"案例五\"><a href=\"#案例五\" class=\"headerlink\" title=\"案例五\"></a>案例五</h2><blockquote>\n<p>编写一个程序，最多接受10个数字，并求出其中所有正数的和。用户可通过输入999终止程序，统计出用户输入的正数个数，并显示这些正数的和。</p>\n</blockquote>\n<p>分析</p>\n<blockquote>\n<p>①输入非数值，不占用10次机会之一，但要求重新输入；<br>②输入的是数值，只累加整数；<br>判断是否为一个数字：Number（num）不为NaN，说明为数字<br>判断一个数字为正数：Number(num)&gt;0<br>判断一个数字为整数：parseInt(num)==parseFloat(num);</p>\n</blockquote>\n<p>代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> i=<span class=\"number\">1</span>,sum=<span class=\"number\">0</span>,n=<span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">while</span>(i&lt;=<span class=\"number\">3</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> num = prompt(<span class=\"string\">\"请您输入一个数，我会为您计算出所有正数的和~\"</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">Number</span>(num))&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(num==<span class=\"number\">999</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num&gt;=<span class=\"number\">0</span>)&#123;</div><div class=\"line\">            sum = sum + <span class=\"built_in\">parseFloat</span>(num);</div><div class=\"line\">             i++;</div><div class=\"line\">             n++;</div><div class=\"line\">         &#125;</div><div class=\"line\">         <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num&lt;<span class=\"number\">0</span>)&#123;</div><div class=\"line\">             i++;</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"您一共输入\"</span>+n+<span class=\"string\">\"个正整数\"</span>+<span class=\"string\">\"&lt;br /&gt;它们的和为：\"</span>+sum);</div></pre></td></tr></table></figure></p>\n<h2 id=\"案例六\"><a href=\"#案例六\" class=\"headerlink\" title=\"案例六\"></a>案例六</h2><blockquote>\n<p>输入某年某月某日，判断这一天是这一年的第几天？<br>代码如下：<br>方法一：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;month;i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(i==<span class=\"number\">1</span>||i==<span class=\"number\">3</span>||i==<span class=\"number\">5</span>||i==<span class=\"number\">7</span>||i==<span class=\"number\">8</span>||i==<span class=\"number\">10</span>||i==<span class=\"number\">12</span>)&#123;</div><div class=\"line\">        sum += <span class=\"number\">31</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i==<span class=\"number\">4</span>||i==<span class=\"number\">6</span>||i==<span class=\"number\">9</span>||i==<span class=\"number\">11</span>)&#123;</div><div class=\"line\">        sum += <span class=\"number\">30</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i==<span class=\"number\">28</span>)&#123;</div><div class=\"line\">        sum += <span class=\"number\">28</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> <span class=\"keyword\">if</span>((year%<span class=\"number\">4</span>==<span class=\"number\">0</span>&amp;&amp;year%<span class=\"number\">100</span>!=<span class=\"number\">0</span>||year%<span class=\"number\">400</span>==<span class=\"number\">0</span>)&amp;&amp;month&gt;<span class=\"number\">2</span>)&#123;</div><div class=\"line\">     sum += (day+<span class=\"number\">1</span>);</div><div class=\"line\"> &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">     sum += day;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"built_in\">document</span>.write(<span class=\"string\">\"您输入的日期为\"</span>+year+<span class=\"string\">\"-\"</span>+month+<span class=\"string\">\"-\"</span>+day+<span class=\"string\">\"&lt;br /&gt;为该年的第\"</span>+sum+<span class=\"string\">\"天\"</span>);</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p> 方法二：<br> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">var</span> year = <span class=\"built_in\">parseInt</span>(prompt(<span class=\"string\">\"请输入年份：\"</span>));</div><div class=\"line\"><span class=\"keyword\">var</span> month = <span class=\"built_in\">parseInt</span>(prompt(<span class=\"string\">\"请输入月份：\"</span>));</div><div class=\"line\"><span class=\"keyword\">var</span> day = <span class=\"built_in\">parseInt</span>(prompt(<span class=\"string\">\"请输入日期：\"</span>));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*假设都是平年，2月28天*/</span></div><div class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">switch</span>(month<span class=\"number\">-1</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">12</span>:</div><div class=\"line\">       sum += <span class=\"number\">31</span>;</div><div class=\"line\">     <span class=\"keyword\">case</span> <span class=\"number\">11</span>:</div><div class=\"line\">         sum += <span class=\"number\">30</span>;</div><div class=\"line\">     <span class=\"keyword\">case</span> <span class=\"number\">10</span>:</div><div class=\"line\">        sum += <span class=\"number\">31</span>;</div><div class=\"line\">     <span class=\"keyword\">case</span> <span class=\"number\">9</span>:</div><div class=\"line\">        sum += <span class=\"number\">30</span>;</div><div class=\"line\">     <span class=\"keyword\">case</span> <span class=\"number\">8</span>:</div><div class=\"line\">        sum += <span class=\"number\">31</span>;</div><div class=\"line\">     <span class=\"keyword\">case</span> <span class=\"number\">7</span>:</div><div class=\"line\">        sum += <span class=\"number\">31</span>;</div><div class=\"line\">     <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</div><div class=\"line\">        sum += <span class=\"number\">30</span>;</div><div class=\"line\">     <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</div><div class=\"line\">        sum += <span class=\"number\">31</span>;</div><div class=\"line\">     <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</div><div class=\"line\">        sum += <span class=\"number\">30</span>;</div><div class=\"line\">     <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">        sum += <span class=\"number\">31</span>;</div><div class=\"line\">     <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">        sum += <span class=\"number\">28</span>;</div><div class=\"line\">     <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">        sum += <span class=\"number\">31</span>;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">if</span>((year%<span class=\"number\">4</span>==<span class=\"number\">0</span>&amp;&amp;year%<span class=\"number\">100</span>!=<span class=\"number\">0</span>||year%<span class=\"number\">400</span>==<span class=\"number\">0</span>)&amp;&amp;month&gt;<span class=\"number\">2</span>)&#123;</div><div class=\"line\">     sum += (day+<span class=\"number\">1</span>);</div><div class=\"line\"> &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">     sum += day;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"built_in\">document</span>.write(<span class=\"string\">\"您输入的日期为\"</span>+year+<span class=\"string\">\"-\"</span>+month+<span class=\"string\">\"-\"</span>+day+<span class=\"string\">\"&lt;br /&gt;为该年的第\"</span>+sum+<span class=\"string\">\"天\"</span>);</div></pre></td></tr></table></figure></p>\n<h2 id=\"案例七\"><a href=\"#案例七\" class=\"headerlink\" title=\"案例七\"></a>案例七</h2><blockquote>\n<p>假设一个简单的ATM机的取款过程是这样的：首先提示用户输入密码（password），<br>最多只能输入三次，超过3次则提示用户“密码错误，请取卡”结束交易。<br>如果用户密码正确，再提示用户输入取款金额（amount），ATM机只能输出100元的纸币，一次取钱数要求最低<br>100元，最高1000元。若用户输入的金额符合上述要求，则打印输出用户取得钱数，<br>最后提示用户“交易完成，请取卡”，否则提示用户重新输入金额。<br>假设用户密码是111111，请编程实现。 </p>\n</blockquote>\n<p>代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> isTrue = <span class=\"literal\">false</span>,</div><div class=\"line\">    n = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span>(n &lt;= <span class=\"number\">3</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pwd = prompt(<span class=\"string\">\"请输入用户密码~\"</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>(pwd == <span class=\"number\">111111</span>) &#123;</div><div class=\"line\">        isTrue = <span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">         n++;</div><div class=\"line\">         <span class=\"keyword\">if</span>(n &gt; <span class=\"number\">3</span>) &#123;</div><div class=\"line\">             <span class=\"built_in\">document</span>.write(<span class=\"string\">\"密码错误，请取卡!\"</span>);</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">if</span>(isTrue) &#123;</div><div class=\"line\">     <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</div><div class=\"line\">         <span class=\"keyword\">var</span> num = prompt(<span class=\"string\">\"请输入取款金额：(100~1000元)\"</span>)</div><div class=\"line\">         <span class=\"keyword\">if</span>(num % <span class=\"number\">100</span> == <span class=\"number\">0</span> &amp;&amp; num &gt;= <span class=\"number\">0</span> &amp;&amp; num &lt;= <span class=\"number\">1000</span>) &#123;</div><div class=\"line\">             <span class=\"built_in\">document</span>.write(<span class=\"string\">\"您的取款金额为\"</span> + num + <span class=\"string\">\"元~&lt;br /&gt;交易完成，请取卡！\"</span>);</div><div class=\"line\">             <span class=\"keyword\">break</span>;</div><div class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">             alert(<span class=\"string\">\"你输入不合法！请重新输入！\"</span>)</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"comment\">//循环输入金额操作</span></div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"JS中循环嵌套常见的六大经典例题-六大图形题\"><a href=\"#JS中循环嵌套常见的六大经典例题-六大图形题\" class=\"headerlink\" title=\"JS中循环嵌套常见的六大经典例题+六大图形题\"></a>JS中循环嵌套常见的六大经典例题+六大图形题</h1><p>首先，了解一下循环嵌套的特点：外层循环转一次，内层循环转一圈。<br>在上一篇随笔中详细介绍了JS中的分支结构和循环结构，我们来简单的回顾一下For循环结构：<br>","more":"</p>\n<h2 id=\"for循环有三个表达式，分别为：\"><a href=\"#for循环有三个表达式，分别为：\" class=\"headerlink\" title=\"for循环有三个表达式，分别为：\"></a>for循环有三个表达式，分别为：</h2><blockquote>\n<p>①定义循环变量<br>② 判断循环条件<br>③更新循环变量（三个表达式之间，用;分隔。）<br>for循环三个表达式可以省略，两个;缺一不可</p>\n</blockquote>\n<p>##2、for循环特点：先判断，再执行；</p>\n<p>##3、for循环三个表达式，均可以有多部分组成，之间用逗号分隔，但是第二部分判断条件需要用&amp;&amp;链接，最终结果需要为真/假。</p>\n<p>##【嵌套循环特点】<br>外层循环控制行数，内层循环控制每行元素个数</p>\n<p>[做图形题思路]（图形题请看案例三）</p>\n<blockquote>\n<p>1、确定图形一共几行，即为外层的循环的次数；<br>2、确定每行有几种元素，代表有几个内层循环；<br>3、确定没种元素的个数，即为每个内层循环的次数；<br>Tips：通常，找出每种元素个数，与行号的关系式，即为当前内层循环的最大值（从1开始循环）</p>\n</blockquote>\n<p>例题如下：</p>\n<h2 id=\"案例一\"><a href=\"#案例一\" class=\"headerlink\" title=\"案例一\"></a>案例一</h2><blockquote>\n<p>求和，实现 1+（1+2）+（1+2+3）+（1+2+3+4）+（1+2+3+4+5）=35</p>\n</blockquote>\n<p>代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>,</div><div class=\"line\">    sumRow = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">    sumRow = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (i != <span class=\"number\">1</span>) <span class=\"built_in\">document</span>.write(<span class=\"string\">\"(\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt;= i; j++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (j != i) <span class=\"built_in\">document</span>.write(j + <span class=\"string\">\"+\"</span>);</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">document</span>.write(j);</div><div class=\"line\">        sumRow += j;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) <span class=\"built_in\">document</span>.write(<span class=\"string\">\"+\"</span>);</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i == <span class=\"number\">5</span>) <span class=\"built_in\">document</span>.write(<span class=\"string\">\")=\"</span>);</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">document</span>.write(<span class=\"string\">\")+\"</span>);</div><div class=\"line\"></div><div class=\"line\">    sum += sumRow;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">document</span>.write(sum);</div></pre></td></tr></table></figure></p>\n<h2 id=\"案例二\"><a href=\"#案例二\" class=\"headerlink\" title=\"案例二\"></a>案例二</h2><blockquote>\n<p>求和：实现1!+2!+3!+4!+5!</p>\n</blockquote>\n<p>分析<br>1+<br>1<em>2+<br>1</em>2<em>3+<br>1</em>2<em>3</em>4+<br>1<em>2</em>3<em>4</em>5=</p>\n<p>代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> jie = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt;= i; j++) &#123;</div><div class=\"line\">        jie *= j;</div><div class=\"line\">    &#125;</div><div class=\"line\">    sum += jie;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"1!+2!+3!+4!+5!=\"</span> + sum);</div></pre></td></tr></table></figure></p>\n<p>##案例三：（六大图形题）</p>\n<p>###1、矩形</p>\n<p>代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">5</span>;i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=<span class=\"number\">1</span>;j&lt;=<span class=\"number\">5</span>;j++)&#123;</div><div class=\"line\">        <span class=\"built_in\">document</span>.write(<span class=\"string\">\"*\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;br /&gt;\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;hr /&gt;\"</span>);</div></pre></td></tr></table></figure></p>\n<p>实现效果：<br><img src=\"https://anhaoran.github.io/ImageServer/juejin/WX20170704-150505@2x.png\" alt=\"\"></p>\n<h3 id=\"2、直角三角形\"><a href=\"#2、直角三角形\" class=\"headerlink\" title=\"2、直角三角形\"></a>2、直角三角形</h3><p>代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">5</span>;i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=<span class=\"number\">1</span>;j&lt;=i;j++)&#123;</div><div class=\"line\">        <span class=\"built_in\">document</span>.write(<span class=\"string\">\"*\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;br /&gt;\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">            </div><div class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;hr /&gt;\"</span>);</div></pre></td></tr></table></figure>\n<p>实现效果：<br><img src=\"https://anhaoran.github.io/ImageServer/juejin/WX20170704-150543@2x.png\" alt=\"\"></p>\n<h3 id=\"3、平行三角形\"><a href=\"#3、平行三角形\" class=\"headerlink\" title=\"3、平行三角形\"></a>3、平行三角形</h3><p>代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">5</span>;i++)&#123;</div><div class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=<span class=\"number\">1</span>;j&lt;=i+<span class=\"number\">4</span>;j++)&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span>(j&lt;i)<span class=\"built_in\">document</span>.write(<span class=\"string\">\"&amp;nbsp;\"</span>);</div><div class=\"line\">       <span class=\"keyword\">else</span>&#123;<span class=\"built_in\">document</span>.write(<span class=\"string\">\"*\"</span>);&#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;br /&gt;\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;hr /&gt;\"</span>);</div></pre></td></tr></table></figure></p>\n<p>效果如下：<br><img src=\"https://anhaoran.github.io/ImageServer/juejin/WX20170704-150952@2x.png\" alt=\"\"></p>\n<h3 id=\"4、数字等边三角形\"><a href=\"#4、数字等边三角形\" class=\"headerlink\" title=\"4、数字等边三角形\"></a>4、数字等边三角形</h3><p>代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">4</span>;i++)&#123;</div><div class=\"line\">   <span class=\"comment\">// 空格</span></div><div class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k=<span class=\"number\">1</span>;k&lt;=<span class=\"number\">4</span>-i;k++)&#123;</div><div class=\"line\">       <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;span style='display: inline-block;width: 8px;'&gt;&lt;/span&gt;\"</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">var</span> n = <span class=\"number\">1</span>;</div><div class=\"line\">   <span class=\"comment\">// 递增</span></div><div class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=<span class=\"number\">1</span>;j&lt;=i;j++)&#123;</div><div class=\"line\">       <span class=\"built_in\">document</span>.write(n);</div><div class=\"line\">       n++;</div><div class=\"line\">   &#125;</div><div class=\"line\">   n-=<span class=\"number\">2</span>;</div><div class=\"line\">   <span class=\"comment\">// 递减</span></div><div class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> m=<span class=\"number\">1</span>;m&lt;=i<span class=\"number\">-1</span>;m++)&#123;</div><div class=\"line\">       <span class=\"built_in\">document</span>.write(n);</div><div class=\"line\">       n--;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"comment\">// 回车</span></div><div class=\"line\">   <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;br/&gt;\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;hr /&gt;\"</span>);</div></pre></td></tr></table></figure></p>\n<p>效果如下：<br><img src=\"https://anhaoran.github.io/ImageServer/juejin/WX20170704-151346@2x.png\" alt=\"\"></p>\n<h3 id=\"九九乘法表（以table表格的形式打印）\"><a href=\"#九九乘法表（以table表格的形式打印）\" class=\"headerlink\" title=\"九九乘法表（以table表格的形式打印）\"></a>九九乘法表（以table表格的形式打印）</h3><p>代码如下:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;table width='700'&gt;\"</span>)</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">9</span>;i++)&#123;</div><div class=\"line\">   <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;tr&gt;\"</span>)</div><div class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=<span class=\"number\">1</span>;j&lt;=i;j++)&#123;</div><div class=\"line\">       <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;td&gt;\"</span>+i+<span class=\"string\">\"*\"</span>+j+<span class=\"string\">\"=\"</span>+i*j+<span class=\"string\">\"&lt;/td&gt;\"</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;/tr&gt;\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;/table&gt;\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;\"</span>);</div></pre></td></tr></table></figure></p>\n<p>效果如下:<br><img src=\"https://anhaoran.github.io/ImageServer/juejin/WX20170704-151357@2x.png\" alt=\"\"></p>\n<h2 id=\"案例四\"><a href=\"#案例四\" class=\"headerlink\" title=\"案例四\"></a>案例四</h2><p>输入一个数字，然后判断是否为正整数，如果不是，提示重新输入；<br>如果是，将该数字左右反转，然后输出（例如：12345，翻转之后为54321）<br>代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sum=<span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">2</span>;)&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> num = prompt(<span class=\"string\">\"请输入一个数字~\"</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">Number</span>(num)&gt;<span class=\"number\">0</span>&amp;&amp;<span class=\"built_in\">parseInt</span>(num)==<span class=\"built_in\">parseFloat</span>(num))&#123;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">    num = 12345</div><div class=\"line\">    5 num%10;</div><div class=\"line\">    4 num/10%10;</div><div class=\"line\">    3 num/10/10%10;</div><div class=\"line\">    ……</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"您输入的数字为：\"</span>+num+<span class=\"string\">\"&lt;br /&gt;\"</span>);            </div><div class=\"line\"><span class=\"keyword\">for</span>(j=<span class=\"number\">1</span>;;j++)&#123;</div><div class=\"line\">    sum *= <span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> fz = <span class=\"built_in\">parseInt</span>(num%sum/(sum/<span class=\"number\">10</span>));</div><div class=\"line\">    <span class=\"built_in\">document</span>.write(fz);</div><div class=\"line\">    <span class=\"keyword\">if</span>(num-sum&lt;=<span class=\"number\">0</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>实现效果:<br><img src=\"https://anhaoran.github.io/ImageServer/juejin/QQ20170704-152855@2x.jpg\" alt=\"\"></p>\n<h2 id=\"案例五\"><a href=\"#案例五\" class=\"headerlink\" title=\"案例五\"></a>案例五</h2><blockquote>\n<p>编写一个程序，最多接受10个数字，并求出其中所有正数的和。用户可通过输入999终止程序，统计出用户输入的正数个数，并显示这些正数的和。</p>\n</blockquote>\n<p>分析</p>\n<blockquote>\n<p>①输入非数值，不占用10次机会之一，但要求重新输入；<br>②输入的是数值，只累加整数；<br>判断是否为一个数字：Number（num）不为NaN，说明为数字<br>判断一个数字为正数：Number(num)&gt;0<br>判断一个数字为整数：parseInt(num)==parseFloat(num);</p>\n</blockquote>\n<p>代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> i=<span class=\"number\">1</span>,sum=<span class=\"number\">0</span>,n=<span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">while</span>(i&lt;=<span class=\"number\">3</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> num = prompt(<span class=\"string\">\"请您输入一个数，我会为您计算出所有正数的和~\"</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">Number</span>(num))&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(num==<span class=\"number\">999</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num&gt;=<span class=\"number\">0</span>)&#123;</div><div class=\"line\">            sum = sum + <span class=\"built_in\">parseFloat</span>(num);</div><div class=\"line\">             i++;</div><div class=\"line\">             n++;</div><div class=\"line\">         &#125;</div><div class=\"line\">         <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num&lt;<span class=\"number\">0</span>)&#123;</div><div class=\"line\">             i++;</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"您一共输入\"</span>+n+<span class=\"string\">\"个正整数\"</span>+<span class=\"string\">\"&lt;br /&gt;它们的和为：\"</span>+sum);</div></pre></td></tr></table></figure></p>\n<h2 id=\"案例六\"><a href=\"#案例六\" class=\"headerlink\" title=\"案例六\"></a>案例六</h2><blockquote>\n<p>输入某年某月某日，判断这一天是这一年的第几天？<br>代码如下：<br>方法一：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;month;i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(i==<span class=\"number\">1</span>||i==<span class=\"number\">3</span>||i==<span class=\"number\">5</span>||i==<span class=\"number\">7</span>||i==<span class=\"number\">8</span>||i==<span class=\"number\">10</span>||i==<span class=\"number\">12</span>)&#123;</div><div class=\"line\">        sum += <span class=\"number\">31</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i==<span class=\"number\">4</span>||i==<span class=\"number\">6</span>||i==<span class=\"number\">9</span>||i==<span class=\"number\">11</span>)&#123;</div><div class=\"line\">        sum += <span class=\"number\">30</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i==<span class=\"number\">28</span>)&#123;</div><div class=\"line\">        sum += <span class=\"number\">28</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> <span class=\"keyword\">if</span>((year%<span class=\"number\">4</span>==<span class=\"number\">0</span>&amp;&amp;year%<span class=\"number\">100</span>!=<span class=\"number\">0</span>||year%<span class=\"number\">400</span>==<span class=\"number\">0</span>)&amp;&amp;month&gt;<span class=\"number\">2</span>)&#123;</div><div class=\"line\">     sum += (day+<span class=\"number\">1</span>);</div><div class=\"line\"> &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">     sum += day;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"built_in\">document</span>.write(<span class=\"string\">\"您输入的日期为\"</span>+year+<span class=\"string\">\"-\"</span>+month+<span class=\"string\">\"-\"</span>+day+<span class=\"string\">\"&lt;br /&gt;为该年的第\"</span>+sum+<span class=\"string\">\"天\"</span>);</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p> 方法二：<br> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">var</span> year = <span class=\"built_in\">parseInt</span>(prompt(<span class=\"string\">\"请输入年份：\"</span>));</div><div class=\"line\"><span class=\"keyword\">var</span> month = <span class=\"built_in\">parseInt</span>(prompt(<span class=\"string\">\"请输入月份：\"</span>));</div><div class=\"line\"><span class=\"keyword\">var</span> day = <span class=\"built_in\">parseInt</span>(prompt(<span class=\"string\">\"请输入日期：\"</span>));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*假设都是平年，2月28天*/</span></div><div class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">switch</span>(month<span class=\"number\">-1</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">12</span>:</div><div class=\"line\">       sum += <span class=\"number\">31</span>;</div><div class=\"line\">     <span class=\"keyword\">case</span> <span class=\"number\">11</span>:</div><div class=\"line\">         sum += <span class=\"number\">30</span>;</div><div class=\"line\">     <span class=\"keyword\">case</span> <span class=\"number\">10</span>:</div><div class=\"line\">        sum += <span class=\"number\">31</span>;</div><div class=\"line\">     <span class=\"keyword\">case</span> <span class=\"number\">9</span>:</div><div class=\"line\">        sum += <span class=\"number\">30</span>;</div><div class=\"line\">     <span class=\"keyword\">case</span> <span class=\"number\">8</span>:</div><div class=\"line\">        sum += <span class=\"number\">31</span>;</div><div class=\"line\">     <span class=\"keyword\">case</span> <span class=\"number\">7</span>:</div><div class=\"line\">        sum += <span class=\"number\">31</span>;</div><div class=\"line\">     <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</div><div class=\"line\">        sum += <span class=\"number\">30</span>;</div><div class=\"line\">     <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</div><div class=\"line\">        sum += <span class=\"number\">31</span>;</div><div class=\"line\">     <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</div><div class=\"line\">        sum += <span class=\"number\">30</span>;</div><div class=\"line\">     <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">        sum += <span class=\"number\">31</span>;</div><div class=\"line\">     <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">        sum += <span class=\"number\">28</span>;</div><div class=\"line\">     <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">        sum += <span class=\"number\">31</span>;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">if</span>((year%<span class=\"number\">4</span>==<span class=\"number\">0</span>&amp;&amp;year%<span class=\"number\">100</span>!=<span class=\"number\">0</span>||year%<span class=\"number\">400</span>==<span class=\"number\">0</span>)&amp;&amp;month&gt;<span class=\"number\">2</span>)&#123;</div><div class=\"line\">     sum += (day+<span class=\"number\">1</span>);</div><div class=\"line\"> &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">     sum += day;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"built_in\">document</span>.write(<span class=\"string\">\"您输入的日期为\"</span>+year+<span class=\"string\">\"-\"</span>+month+<span class=\"string\">\"-\"</span>+day+<span class=\"string\">\"&lt;br /&gt;为该年的第\"</span>+sum+<span class=\"string\">\"天\"</span>);</div></pre></td></tr></table></figure></p>\n<h2 id=\"案例七\"><a href=\"#案例七\" class=\"headerlink\" title=\"案例七\"></a>案例七</h2><blockquote>\n<p>假设一个简单的ATM机的取款过程是这样的：首先提示用户输入密码（password），<br>最多只能输入三次，超过3次则提示用户“密码错误，请取卡”结束交易。<br>如果用户密码正确，再提示用户输入取款金额（amount），ATM机只能输出100元的纸币，一次取钱数要求最低<br>100元，最高1000元。若用户输入的金额符合上述要求，则打印输出用户取得钱数，<br>最后提示用户“交易完成，请取卡”，否则提示用户重新输入金额。<br>假设用户密码是111111，请编程实现。 </p>\n</blockquote>\n<p>代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> isTrue = <span class=\"literal\">false</span>,</div><div class=\"line\">    n = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span>(n &lt;= <span class=\"number\">3</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pwd = prompt(<span class=\"string\">\"请输入用户密码~\"</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>(pwd == <span class=\"number\">111111</span>) &#123;</div><div class=\"line\">        isTrue = <span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">         n++;</div><div class=\"line\">         <span class=\"keyword\">if</span>(n &gt; <span class=\"number\">3</span>) &#123;</div><div class=\"line\">             <span class=\"built_in\">document</span>.write(<span class=\"string\">\"密码错误，请取卡!\"</span>);</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">if</span>(isTrue) &#123;</div><div class=\"line\">     <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</div><div class=\"line\">         <span class=\"keyword\">var</span> num = prompt(<span class=\"string\">\"请输入取款金额：(100~1000元)\"</span>)</div><div class=\"line\">         <span class=\"keyword\">if</span>(num % <span class=\"number\">100</span> == <span class=\"number\">0</span> &amp;&amp; num &gt;= <span class=\"number\">0</span> &amp;&amp; num &lt;= <span class=\"number\">1000</span>) &#123;</div><div class=\"line\">             <span class=\"built_in\">document</span>.write(<span class=\"string\">\"您的取款金额为\"</span> + num + <span class=\"string\">\"元~&lt;br /&gt;交易完成，请取卡！\"</span>);</div><div class=\"line\">             <span class=\"keyword\">break</span>;</div><div class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">             alert(<span class=\"string\">\"你输入不合法！请重新输入！\"</span>)</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"comment\">//循环输入金额操作</span></div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>"},{"title":"掘金","date":"2017-07-03T03:34:44.000Z","toc":true,"_content":"# 前端数据结构与算法\n## 1.递归\n>递归就是自己调自己，递归在前端里面算是一种比较常用的算法。假设现在有一堆数据要处理，要实现上一次请求完成了，才能去调下一个请求。一个是可以用Promise，就像《前端与SQL》这篇文章里面提到的。但是有时候并不想引入Promise，能简单处理先简单处理。这个时候就可以用递归，如下代码所示：\n\n~~~js\nvar ids = [34112, 98325, 68125];\n(function sendRequest(){\n    var id = ids.shift();\n    if(id){\n\t\tconsole.log(id);\n\t\tsendRequest();\n    } else {\n        console.log(\"finished\");\n    }\n})(); \n\n//34112\n//98325\n//68125\n//finished\n~~~\n<!--more-->\n>上面代码定义了一个sendRequest的函数，在请求完成之后再调一下自己。每次调之前先取一个数据，如果数组已经为空，则说明处理完了。这样就用简单的方式实现了串行请求不堵塞的功能。厉害\n\n再来讲另外一个场景：DOM树。\n\n由于DOM是一棵树，而树的定义本身就是用的递归定义，所以用递归的方法处理树，会非常地简单自然。例如用递归实现一个查DOM的功能document.getElementById。\n~~~js\nfunction getElementById(node, id){\n    if(!node) return null;\n    if(node.id === id) return node;\n    for(var i = 0; i < node.childNodes.length; i++){\n        var found = getElementById(node.childNodes[i], id);\n        if(found) return found;\n    }\n    return null;\n}\ngetElementById(document, \"d-cal\");\n~~~\n\ndocument是DOM树的根结点，一般从document开始往下找。在for循环里面先找document的所有子结点，对所有子结点递归查找他们的子结点，一层一层地往下查找。如果已经到了叶子结点了还没有找到，则在第二行代码的判断里面返回null，返回之后for循环的i加1，继续下一个子结点。如果当前结点的id符合查找条件，则一层层地返回。所以这是一个深度优先的遍历，每次都先从根结点一直往下直到叶子结点，再从下往上返回。\n最后在控制台验证一下，执行结果如下图所示：\n![](https://anhaoran.github.io/ImageServer/juejin/5120ddb64940520f1b2f12d0503b2ef7)\n使用递归的优点是代码简单易懂，缺点是效率比不上非递归的实现。Chrome浏览器的查DOM是使用非递归实现。非递归要怎么实现呢？\n如下代码：\n~~~js\nfunction getByElementId(node, id){\n    //遍历所有的Node\n    while(node){\n        if(node.id === id) return node;\n        node = nextElement(node);\n    }\n    return null;\n}\n~~~\n还是依次遍历所有的DOM结点，只是这一次改成一个while循环，函数nextElement负责找到下一个结点。所以关键在于这个nextElement如何非递归实现，如下代码所示：\n~~~js\nfunction nextElement(node){\n    if(node.children.length) {\n        return node.children[0];\n    }\n    if(node.nextElementSibling){\n        return node.nextElementSibling;\n    }\n    while(node.parentNode){\n        if(node.parentNode.nextElementSibling) {\n            return node.parentNode.nextElementSibling;\n        }\n        node = node.parentNode;\n    }\n    return null;\n}\n~~~\n还是用深度遍历，先找当前结点的子结点，如果它有子结点，则下一个元素就是它的第一个子结点，否则判断它是否有相邻元素，如果有则返回它的下一个相邻元素。如果它既没有子结点，也没有下一个相邻元素，则要往上返回它的父结点的下一个相邻元素，相当于上面递归实现里面的for循环的i加1.\n\n在控制台里面运行这段代码，同样也可以正确地输出结果。不管是非递归还是递归，它们都是深度优先遍历，这个过程如下图所示。\n![](https://anhaoran.github.io/ImageServer/juejin/6529742bce74e88f183dbf8c756580fe)\n实际上getElementById浏览器是用的一个哈希map存储的，根据id直接映射到DOM结点，而getElementsByClassName就是用的这样的非递归查找。\n\n上面是单个选择器的查找，按id，按class等，多个选择器应该如何查找呢？\n## 2. 复杂选择器的查DOM\n\n如实现一个document.querySelector：\n~~~js\ndocument.querySelector(\".mls-info > div .copyright-content\")\n~~~\n首先把复杂选择器做一个解析，序列为以下格式：\n~~~js\n//把selector解析为\nvar selectors = [\n{relation: \"descendant\",  matchType: \"class\", value: \"copyright-content\"},\n{relation: \"child\",       matchType: \"tag\",   value: \"div\"},\n{relation: \"subSelector\", matchType: \"class\", value: \"mls-info\"}];\n~~~\n从右往左，第一个selector是.copyright-content，它是一个类选择器，所以它的matchType是class，它和第二个选择器是祖先和子孙关系，因此它的relation是descendant；同理第二个选择器的matchType是tag，而relation是child，表示是第三个选择器的直接子结点；第三个选择器也是class，但是它没有下一个选择器了，relation用subSelector表示。\n\nmatchType的作用就在于用来比较当前选择器是否match，如下代码所示：\n~~~js\nfunction match(node, selector){\n    if(node === document) return false;\n    switch(selector.matchType){\n        //如果是类选择器\n        case \"class\":\n            return node.className.trim().split(/ +/).indexOf(selector.value) >= 0;\n\n        //如果是标签选择器\n        case \"tag\":\n            return node.tagName.toLowerCase() === selector.value. toLowerCase();\n\n        default:\n            throw \"unknown selector match type\";\n    }\n}\n~~~\n根据不同的matchType做不同的匹配。\n\n在匹配的时候，从右往左，依次比较每个选择器是否match. 在比较下一个选择器的时候，需要找到相应的DOM结点，如果当前选择器是下一个选择器的子孙时，则需要比较当前选择器所有的祖先结点，一直往上直到document；而如果是直接子元素的关系，则比较它的父结点即可。所以需要有一个找到下一个目标结点的函数：\n~~~js\nfunction nextTarget(node, selector){\n    if(!node || node === document) return null;\n    switch(selector.relation){\n        case \"descendant\":\n            return {node: node.parentNode, hasNext: true};\n        case \"child\":\n            return {node: node.parentNode, hasNext: false};\n        case \"sibling\":\n            return {node: node.previousSibling, hasNext: true};\n        default:\n            throw \"unknown selector relation type\";\n          //hasNext表示当前选择器relation是否允许继续找下一个节点\n    }\n}\n~~~\n有了nextTarge和match这两个函数就可以开始遍历DOM，如下代码所示：\n\n![](https://anhaoran.github.io/ImageServer/juejin/2e17e8041a10554a3aa164e996406206)\n最外层的while循环和简单选择器一样，都是要遍历所有DOM结点。对于每个结点，先判断第一个选择器是否match，如果不match的话，则继续下一个结点，如果不是标签选择器，对于绝大多数结点将会在这里判断不通过。如果第一个选择器match了，则根据第一个选择器的relation，找到下一个target，判断下一个targe是否match下一个selector，只要有一个target匹配上了，则退出里层的while循环，继续下一个选择器，如果所有的selector都能匹配上说明匹配成功。如果有一个selecotr的所有target都没有match，则说明匹配失败，退出selector的for循环，直接从头开始对下一个DOM结点进行匹配。\n\n这样就实现了一个复杂选择器的查DOM。写这个的目的并不是要你自己写一个查DOM的函数拿去用，而是要明白查DOM的过程是怎么样的，可以怎么实现，浏览器又是怎么实现的。还有可以怎么遍历DOM树，当明白这个过程的时候，遇到类似的问题，就可以举一反三。\n\n最后在浏览器上运行一下，如下图所示：\n![](https://anhaoran.github.io/ImageServer/juejin/337c5d78734bf049015e3789f1c13ea4)\n### 重复值处理\n现在有个问题，如下图所示：\n\n![](https://anhaoran.github.io/ImageServer/juejin/fd1b1dacd701276302a42a5f5dcbeedc)\n当地图往下拖的时候要更新地图上的房源标签数据，上图绿框表示不变的标签，而黄框表示新加的房源。\n\n后端每次都会把当前地图可见区域的房源返回给我，当用户拖动的时候需要知道哪些是原先已经有的房源，哪些是新加的。把新加的房源画上，而把超出区域的房源删掉，已有的房源保持不动。因此需要对比当前房源和新的结果哪些是重复的。因为如果不这样做的话，改成每次都是全部删掉再重新画，已有的房源标签就会闪一下。因此为了避免闪动做一个增量更新。\n\n把这个问题抽象一下就变成：给两个数组，需要找出第一个数组里面的重复值和非重复值。即有一个数组保存上一次状态的房源，而另一个数组是当前状态的新房源数据。找到的重复值是需要保留，找到非重复值是要删掉的。\n\n最直观的方法是使用双重循环。\n\n#### （1）双重循环\n如下代码所示：\n~~~js\nvar lastHouses = [];\nfilterHouse: function(houses){\n    if(lastHouses === null){\n        lastHouses = houses;\n        return {\n            remainsHouses: [], \n            newHouses: houses\n        };  \n    }   \n    var remainsHouses = [], \n        newHouses = []; \n\n    for(var i = 0; i < houses.length; i++){\n        var isNewHouse = true;\n        for(var j = 0; j < lastHouses.length; j++){\n            if(houses[i].id === lastHouses[j].id){\n                isNewHouse = false;\n                remainsHouses.push(lastHouses[j]);\n                break;\n            }   \n        }   \n        if(isNewHouse){\n            newHouses.push(houses[i]);\n        }   \n    }   \n    lastHouses = remainsHouses.concat(newHouses);\n    return {\n        remainsHouses: remainsHouses,\n        newHouses: newHouses\n    };  \n}var lastHouses = [];\nfilterHouse: function(houses){\n    if(lastHouses === null){\n        lastHouses = houses;\n        return {\n            remainsHouses: [], \n            newHouses: houses\n        };  \n    }   \n    var remainsHouses = [], \n        newHouses = []; \n\n    for(var i = 0; i < houses.length; i++){\n        var isNewHouse = true;\n        for(var j = 0; j < lastHouses.length; j++){\n            if(houses[i].id === lastHouses[j].id){\n                isNewHouse = false;\n                remainsHouses.push(lastHouses[j]);\n                break;\n            }   \n        }   \n        if(isNewHouse){\n            newHouses.push(houses[i]);\n        }   \n    }   \n    lastHouses = remainsHouses.concat(newHouses);\n    return {\n        remainsHouses: remainsHouses,\n        newHouses: newHouses\n    };  \n}\n~~~\n上面代码有一个双重for循环，对新数据的每个元素，判断老数据里面是否已经有了，如果有的话则说明是重复值，如果老数据循环了一遍都没找到，则说明是新数据。由于用到了双重循环，所以这个算法的时间复杂度为O(N2)，对于百级的数据还好，对于千级的数据可能会有压力，因为最坏情况下要比较1000000次。\n\n#### （2）使用set\n\n如下代码所示：\n~~~js\nvar lastHouses = new Set();\nfunction filterHouse(houses){\n    var remainsHouses = [],\n        newHouses = [];\n    for(var i = houses.length - 1; i >= 0; i--){\n        if(lastHouses.has(houses[i].id)){\n            remainsHouses.push(houses[i]);\n        } else {\n            newHouses.push(houses[i]);\n        }\n    }\n    for(var i = 0; i < newHouses.length; i++){\n        lastHouses.add(newHouses[i].id);\n    }\n    return {remainsHouses: remainsHouses, \n            newHouses: newHouses};\n}\n~~~\n\n老数据的存储lastHouses从数组改成set，但如果一开始就是数组呢，就像问题抽象里面说的给两个数组？那就用这个数组的数据初始化一个Set.\n\n使用Set和使用Array的区别在于可以减少一重循环，调用Set.prototype.has的函数。Set一般是使用红黑树实现的，红黑树是一种平衡查找二叉树，它的查找时间复杂度为O(logN)。所以时间上进行了改进，从O(N)变成O(logN)，而总体时间从O(N2)变成O(NlogN)。实际上，Chrome V8的Set是用哈希实现的，它是一个哈希Set，查找时间复杂度为O(1)，所以总体的时间复杂度是O(N).\n\n不管是O(NlogN)还是O(N)，表面上看它们的时间要比O(N2)的少。但实际上需要注意的是它们前面还有一个系数。使用Set在后面更新lastHouses的时候也是需要时间的：\n~~~js\nfor(var i = 0; i < newHouses.length; i++){\n    lastHouses.add(newHouses[i].id);\n}\n~~~\n如果Set是用树的实现，这段代码是时间复杂度为O(NlogN)，所以总的时间为O(2NlogN)，但是由于大O是不考虑系数的，O(2NlogN) 还是等于O(NlogN)，当数据量比较小的时侯，这个系数会起到很大的作用，而数据量比较大的时候，指数级增长的O(N2)将会远远超过这个系数，哈希的实现也是同样道理。所以当数据量比较小时，如只有一两百可直接使用双重循环处理即可。\n上面的代码有点冗长，我们可以用ES6的新特性改写一下，变得更加的简洁：\n\n~~~js\nfunction filterHouse(houses){\n    var remainsHouses = [],\n        newHouses = []; \n    houses.map(house => lastHouses.has(house.id) ? remainsHouses.push(house) \n                        : newHouses.push(house));\n    newHouses.map(house => lastHouses.add(house.id));\n    return {remainsHouses, newHouses};\n}\n~~~","source":"_posts/掘金.md","raw":"---\ntitle: 掘金\ndate: 2017-07-03 11:34:44\ntags: 掘金\ntoc: true\n---\n# 前端数据结构与算法\n## 1.递归\n>递归就是自己调自己，递归在前端里面算是一种比较常用的算法。假设现在有一堆数据要处理，要实现上一次请求完成了，才能去调下一个请求。一个是可以用Promise，就像《前端与SQL》这篇文章里面提到的。但是有时候并不想引入Promise，能简单处理先简单处理。这个时候就可以用递归，如下代码所示：\n\n~~~js\nvar ids = [34112, 98325, 68125];\n(function sendRequest(){\n    var id = ids.shift();\n    if(id){\n\t\tconsole.log(id);\n\t\tsendRequest();\n    } else {\n        console.log(\"finished\");\n    }\n})(); \n\n//34112\n//98325\n//68125\n//finished\n~~~\n<!--more-->\n>上面代码定义了一个sendRequest的函数，在请求完成之后再调一下自己。每次调之前先取一个数据，如果数组已经为空，则说明处理完了。这样就用简单的方式实现了串行请求不堵塞的功能。厉害\n\n再来讲另外一个场景：DOM树。\n\n由于DOM是一棵树，而树的定义本身就是用的递归定义，所以用递归的方法处理树，会非常地简单自然。例如用递归实现一个查DOM的功能document.getElementById。\n~~~js\nfunction getElementById(node, id){\n    if(!node) return null;\n    if(node.id === id) return node;\n    for(var i = 0; i < node.childNodes.length; i++){\n        var found = getElementById(node.childNodes[i], id);\n        if(found) return found;\n    }\n    return null;\n}\ngetElementById(document, \"d-cal\");\n~~~\n\ndocument是DOM树的根结点，一般从document开始往下找。在for循环里面先找document的所有子结点，对所有子结点递归查找他们的子结点，一层一层地往下查找。如果已经到了叶子结点了还没有找到，则在第二行代码的判断里面返回null，返回之后for循环的i加1，继续下一个子结点。如果当前结点的id符合查找条件，则一层层地返回。所以这是一个深度优先的遍历，每次都先从根结点一直往下直到叶子结点，再从下往上返回。\n最后在控制台验证一下，执行结果如下图所示：\n![](https://anhaoran.github.io/ImageServer/juejin/5120ddb64940520f1b2f12d0503b2ef7)\n使用递归的优点是代码简单易懂，缺点是效率比不上非递归的实现。Chrome浏览器的查DOM是使用非递归实现。非递归要怎么实现呢？\n如下代码：\n~~~js\nfunction getByElementId(node, id){\n    //遍历所有的Node\n    while(node){\n        if(node.id === id) return node;\n        node = nextElement(node);\n    }\n    return null;\n}\n~~~\n还是依次遍历所有的DOM结点，只是这一次改成一个while循环，函数nextElement负责找到下一个结点。所以关键在于这个nextElement如何非递归实现，如下代码所示：\n~~~js\nfunction nextElement(node){\n    if(node.children.length) {\n        return node.children[0];\n    }\n    if(node.nextElementSibling){\n        return node.nextElementSibling;\n    }\n    while(node.parentNode){\n        if(node.parentNode.nextElementSibling) {\n            return node.parentNode.nextElementSibling;\n        }\n        node = node.parentNode;\n    }\n    return null;\n}\n~~~\n还是用深度遍历，先找当前结点的子结点，如果它有子结点，则下一个元素就是它的第一个子结点，否则判断它是否有相邻元素，如果有则返回它的下一个相邻元素。如果它既没有子结点，也没有下一个相邻元素，则要往上返回它的父结点的下一个相邻元素，相当于上面递归实现里面的for循环的i加1.\n\n在控制台里面运行这段代码，同样也可以正确地输出结果。不管是非递归还是递归，它们都是深度优先遍历，这个过程如下图所示。\n![](https://anhaoran.github.io/ImageServer/juejin/6529742bce74e88f183dbf8c756580fe)\n实际上getElementById浏览器是用的一个哈希map存储的，根据id直接映射到DOM结点，而getElementsByClassName就是用的这样的非递归查找。\n\n上面是单个选择器的查找，按id，按class等，多个选择器应该如何查找呢？\n## 2. 复杂选择器的查DOM\n\n如实现一个document.querySelector：\n~~~js\ndocument.querySelector(\".mls-info > div .copyright-content\")\n~~~\n首先把复杂选择器做一个解析，序列为以下格式：\n~~~js\n//把selector解析为\nvar selectors = [\n{relation: \"descendant\",  matchType: \"class\", value: \"copyright-content\"},\n{relation: \"child\",       matchType: \"tag\",   value: \"div\"},\n{relation: \"subSelector\", matchType: \"class\", value: \"mls-info\"}];\n~~~\n从右往左，第一个selector是.copyright-content，它是一个类选择器，所以它的matchType是class，它和第二个选择器是祖先和子孙关系，因此它的relation是descendant；同理第二个选择器的matchType是tag，而relation是child，表示是第三个选择器的直接子结点；第三个选择器也是class，但是它没有下一个选择器了，relation用subSelector表示。\n\nmatchType的作用就在于用来比较当前选择器是否match，如下代码所示：\n~~~js\nfunction match(node, selector){\n    if(node === document) return false;\n    switch(selector.matchType){\n        //如果是类选择器\n        case \"class\":\n            return node.className.trim().split(/ +/).indexOf(selector.value) >= 0;\n\n        //如果是标签选择器\n        case \"tag\":\n            return node.tagName.toLowerCase() === selector.value. toLowerCase();\n\n        default:\n            throw \"unknown selector match type\";\n    }\n}\n~~~\n根据不同的matchType做不同的匹配。\n\n在匹配的时候，从右往左，依次比较每个选择器是否match. 在比较下一个选择器的时候，需要找到相应的DOM结点，如果当前选择器是下一个选择器的子孙时，则需要比较当前选择器所有的祖先结点，一直往上直到document；而如果是直接子元素的关系，则比较它的父结点即可。所以需要有一个找到下一个目标结点的函数：\n~~~js\nfunction nextTarget(node, selector){\n    if(!node || node === document) return null;\n    switch(selector.relation){\n        case \"descendant\":\n            return {node: node.parentNode, hasNext: true};\n        case \"child\":\n            return {node: node.parentNode, hasNext: false};\n        case \"sibling\":\n            return {node: node.previousSibling, hasNext: true};\n        default:\n            throw \"unknown selector relation type\";\n          //hasNext表示当前选择器relation是否允许继续找下一个节点\n    }\n}\n~~~\n有了nextTarge和match这两个函数就可以开始遍历DOM，如下代码所示：\n\n![](https://anhaoran.github.io/ImageServer/juejin/2e17e8041a10554a3aa164e996406206)\n最外层的while循环和简单选择器一样，都是要遍历所有DOM结点。对于每个结点，先判断第一个选择器是否match，如果不match的话，则继续下一个结点，如果不是标签选择器，对于绝大多数结点将会在这里判断不通过。如果第一个选择器match了，则根据第一个选择器的relation，找到下一个target，判断下一个targe是否match下一个selector，只要有一个target匹配上了，则退出里层的while循环，继续下一个选择器，如果所有的selector都能匹配上说明匹配成功。如果有一个selecotr的所有target都没有match，则说明匹配失败，退出selector的for循环，直接从头开始对下一个DOM结点进行匹配。\n\n这样就实现了一个复杂选择器的查DOM。写这个的目的并不是要你自己写一个查DOM的函数拿去用，而是要明白查DOM的过程是怎么样的，可以怎么实现，浏览器又是怎么实现的。还有可以怎么遍历DOM树，当明白这个过程的时候，遇到类似的问题，就可以举一反三。\n\n最后在浏览器上运行一下，如下图所示：\n![](https://anhaoran.github.io/ImageServer/juejin/337c5d78734bf049015e3789f1c13ea4)\n### 重复值处理\n现在有个问题，如下图所示：\n\n![](https://anhaoran.github.io/ImageServer/juejin/fd1b1dacd701276302a42a5f5dcbeedc)\n当地图往下拖的时候要更新地图上的房源标签数据，上图绿框表示不变的标签，而黄框表示新加的房源。\n\n后端每次都会把当前地图可见区域的房源返回给我，当用户拖动的时候需要知道哪些是原先已经有的房源，哪些是新加的。把新加的房源画上，而把超出区域的房源删掉，已有的房源保持不动。因此需要对比当前房源和新的结果哪些是重复的。因为如果不这样做的话，改成每次都是全部删掉再重新画，已有的房源标签就会闪一下。因此为了避免闪动做一个增量更新。\n\n把这个问题抽象一下就变成：给两个数组，需要找出第一个数组里面的重复值和非重复值。即有一个数组保存上一次状态的房源，而另一个数组是当前状态的新房源数据。找到的重复值是需要保留，找到非重复值是要删掉的。\n\n最直观的方法是使用双重循环。\n\n#### （1）双重循环\n如下代码所示：\n~~~js\nvar lastHouses = [];\nfilterHouse: function(houses){\n    if(lastHouses === null){\n        lastHouses = houses;\n        return {\n            remainsHouses: [], \n            newHouses: houses\n        };  \n    }   \n    var remainsHouses = [], \n        newHouses = []; \n\n    for(var i = 0; i < houses.length; i++){\n        var isNewHouse = true;\n        for(var j = 0; j < lastHouses.length; j++){\n            if(houses[i].id === lastHouses[j].id){\n                isNewHouse = false;\n                remainsHouses.push(lastHouses[j]);\n                break;\n            }   \n        }   \n        if(isNewHouse){\n            newHouses.push(houses[i]);\n        }   \n    }   \n    lastHouses = remainsHouses.concat(newHouses);\n    return {\n        remainsHouses: remainsHouses,\n        newHouses: newHouses\n    };  \n}var lastHouses = [];\nfilterHouse: function(houses){\n    if(lastHouses === null){\n        lastHouses = houses;\n        return {\n            remainsHouses: [], \n            newHouses: houses\n        };  \n    }   \n    var remainsHouses = [], \n        newHouses = []; \n\n    for(var i = 0; i < houses.length; i++){\n        var isNewHouse = true;\n        for(var j = 0; j < lastHouses.length; j++){\n            if(houses[i].id === lastHouses[j].id){\n                isNewHouse = false;\n                remainsHouses.push(lastHouses[j]);\n                break;\n            }   \n        }   \n        if(isNewHouse){\n            newHouses.push(houses[i]);\n        }   \n    }   \n    lastHouses = remainsHouses.concat(newHouses);\n    return {\n        remainsHouses: remainsHouses,\n        newHouses: newHouses\n    };  \n}\n~~~\n上面代码有一个双重for循环，对新数据的每个元素，判断老数据里面是否已经有了，如果有的话则说明是重复值，如果老数据循环了一遍都没找到，则说明是新数据。由于用到了双重循环，所以这个算法的时间复杂度为O(N2)，对于百级的数据还好，对于千级的数据可能会有压力，因为最坏情况下要比较1000000次。\n\n#### （2）使用set\n\n如下代码所示：\n~~~js\nvar lastHouses = new Set();\nfunction filterHouse(houses){\n    var remainsHouses = [],\n        newHouses = [];\n    for(var i = houses.length - 1; i >= 0; i--){\n        if(lastHouses.has(houses[i].id)){\n            remainsHouses.push(houses[i]);\n        } else {\n            newHouses.push(houses[i]);\n        }\n    }\n    for(var i = 0; i < newHouses.length; i++){\n        lastHouses.add(newHouses[i].id);\n    }\n    return {remainsHouses: remainsHouses, \n            newHouses: newHouses};\n}\n~~~\n\n老数据的存储lastHouses从数组改成set，但如果一开始就是数组呢，就像问题抽象里面说的给两个数组？那就用这个数组的数据初始化一个Set.\n\n使用Set和使用Array的区别在于可以减少一重循环，调用Set.prototype.has的函数。Set一般是使用红黑树实现的，红黑树是一种平衡查找二叉树，它的查找时间复杂度为O(logN)。所以时间上进行了改进，从O(N)变成O(logN)，而总体时间从O(N2)变成O(NlogN)。实际上，Chrome V8的Set是用哈希实现的，它是一个哈希Set，查找时间复杂度为O(1)，所以总体的时间复杂度是O(N).\n\n不管是O(NlogN)还是O(N)，表面上看它们的时间要比O(N2)的少。但实际上需要注意的是它们前面还有一个系数。使用Set在后面更新lastHouses的时候也是需要时间的：\n~~~js\nfor(var i = 0; i < newHouses.length; i++){\n    lastHouses.add(newHouses[i].id);\n}\n~~~\n如果Set是用树的实现，这段代码是时间复杂度为O(NlogN)，所以总的时间为O(2NlogN)，但是由于大O是不考虑系数的，O(2NlogN) 还是等于O(NlogN)，当数据量比较小的时侯，这个系数会起到很大的作用，而数据量比较大的时候，指数级增长的O(N2)将会远远超过这个系数，哈希的实现也是同样道理。所以当数据量比较小时，如只有一两百可直接使用双重循环处理即可。\n上面的代码有点冗长，我们可以用ES6的新特性改写一下，变得更加的简洁：\n\n~~~js\nfunction filterHouse(houses){\n    var remainsHouses = [],\n        newHouses = []; \n    houses.map(house => lastHouses.has(house.id) ? remainsHouses.push(house) \n                        : newHouses.push(house));\n    newHouses.map(house => lastHouses.add(house.id));\n    return {remainsHouses, newHouses};\n}\n~~~","slug":"掘金","published":1,"updated":"2017-07-04T03:53:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfnkq6r0012lyfy5hjc9js4","content":"<h1 id=\"前端数据结构与算法\"><a href=\"#前端数据结构与算法\" class=\"headerlink\" title=\"前端数据结构与算法\"></a>前端数据结构与算法</h1><h2 id=\"1-递归\"><a href=\"#1-递归\" class=\"headerlink\" title=\"1.递归\"></a>1.递归</h2><blockquote>\n<p>递归就是自己调自己，递归在前端里面算是一种比较常用的算法。假设现在有一堆数据要处理，要实现上一次请求完成了，才能去调下一个请求。一个是可以用Promise，就像《前端与SQL》这篇文章里面提到的。但是有时候并不想引入Promise，能简单处理先简单处理。这个时候就可以用递归，如下代码所示：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ids = [<span class=\"number\">34112</span>, <span class=\"number\">98325</span>, <span class=\"number\">68125</span>];</div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendRequest</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> id = ids.shift();</div><div class=\"line\">    <span class=\"keyword\">if</span>(id)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(id);</div><div class=\"line\">\t\tsendRequest();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"finished\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)(); </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//34112</span></div><div class=\"line\"><span class=\"comment\">//98325</span></div><div class=\"line\"><span class=\"comment\">//68125</span></div><div class=\"line\"><span class=\"comment\">//finished</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<blockquote>\n<p>上面代码定义了一个sendRequest的函数，在请求完成之后再调一下自己。每次调之前先取一个数据，如果数组已经为空，则说明处理完了。这样就用简单的方式实现了串行请求不堵塞的功能。厉害</p>\n</blockquote>\n<p>再来讲另外一个场景：DOM树。</p>\n<p>由于DOM是一棵树，而树的定义本身就是用的递归定义，所以用递归的方法处理树，会非常地简单自然。例如用递归实现一个查DOM的功能document.getElementById。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getElementById</span>(<span class=\"params\">node, id</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!node) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(node.id === id) <span class=\"keyword\">return</span> node;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; node.childNodes.length; i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> found = getElementById(node.childNodes[i], id);</div><div class=\"line\">        <span class=\"keyword\">if</span>(found) <span class=\"keyword\">return</span> found;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">getElementById(<span class=\"built_in\">document</span>, <span class=\"string\">\"d-cal\"</span>);</div></pre></td></tr></table></figure></p>\n<p>document是DOM树的根结点，一般从document开始往下找。在for循环里面先找document的所有子结点，对所有子结点递归查找他们的子结点，一层一层地往下查找。如果已经到了叶子结点了还没有找到，则在第二行代码的判断里面返回null，返回之后for循环的i加1，继续下一个子结点。如果当前结点的id符合查找条件，则一层层地返回。所以这是一个深度优先的遍历，每次都先从根结点一直往下直到叶子结点，再从下往上返回。<br>最后在控制台验证一下，执行结果如下图所示：<br><img src=\"https://anhaoran.github.io/ImageServer/juejin/5120ddb64940520f1b2f12d0503b2ef7\" alt=\"\"><br>使用递归的优点是代码简单易懂，缺点是效率比不上非递归的实现。Chrome浏览器的查DOM是使用非递归实现。非递归要怎么实现呢？<br>如下代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getByElementId</span>(<span class=\"params\">node, id</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//遍历所有的Node</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(node)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(node.id === id) <span class=\"keyword\">return</span> node;</div><div class=\"line\">        node = nextElement(node);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>还是依次遍历所有的DOM结点，只是这一次改成一个while循环，函数nextElement负责找到下一个结点。所以关键在于这个nextElement如何非递归实现，如下代码所示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nextElement</span>(<span class=\"params\">node</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(node.children.length) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> node.children[<span class=\"number\">0</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(node.nextElementSibling)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> node.nextElementSibling;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">while</span>(node.parentNode)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(node.parentNode.nextElementSibling) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> node.parentNode.nextElementSibling;</div><div class=\"line\">        &#125;</div><div class=\"line\">        node = node.parentNode;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>还是用深度遍历，先找当前结点的子结点，如果它有子结点，则下一个元素就是它的第一个子结点，否则判断它是否有相邻元素，如果有则返回它的下一个相邻元素。如果它既没有子结点，也没有下一个相邻元素，则要往上返回它的父结点的下一个相邻元素，相当于上面递归实现里面的for循环的i加1.</p>\n<p>在控制台里面运行这段代码，同样也可以正确地输出结果。不管是非递归还是递归，它们都是深度优先遍历，这个过程如下图所示。<br><img src=\"https://anhaoran.github.io/ImageServer/juejin/6529742bce74e88f183dbf8c756580fe\" alt=\"\"><br>实际上getElementById浏览器是用的一个哈希map存储的，根据id直接映射到DOM结点，而getElementsByClassName就是用的这样的非递归查找。</p>\n<p>上面是单个选择器的查找，按id，按class等，多个选择器应该如何查找呢？</p>\n<h2 id=\"2-复杂选择器的查DOM\"><a href=\"#2-复杂选择器的查DOM\" class=\"headerlink\" title=\"2. 复杂选择器的查DOM\"></a>2. 复杂选择器的查DOM</h2><p>如实现一个document.querySelector：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\".mls-info &gt; div .copyright-content\"</span>)</div></pre></td></tr></table></figure></p>\n<p>首先把复杂选择器做一个解析，序列为以下格式：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//把selector解析为</span></div><div class=\"line\"><span class=\"keyword\">var</span> selectors = [</div><div class=\"line\">&#123;<span class=\"attr\">relation</span>: <span class=\"string\">\"descendant\"</span>,  <span class=\"attr\">matchType</span>: <span class=\"string\">\"class\"</span>, <span class=\"attr\">value</span>: <span class=\"string\">\"copyright-content\"</span>&#125;,</div><div class=\"line\">&#123;<span class=\"attr\">relation</span>: <span class=\"string\">\"child\"</span>,       <span class=\"attr\">matchType</span>: <span class=\"string\">\"tag\"</span>,   <span class=\"attr\">value</span>: <span class=\"string\">\"div\"</span>&#125;,</div><div class=\"line\">&#123;<span class=\"attr\">relation</span>: <span class=\"string\">\"subSelector\"</span>, <span class=\"attr\">matchType</span>: <span class=\"string\">\"class\"</span>, <span class=\"attr\">value</span>: <span class=\"string\">\"mls-info\"</span>&#125;];</div></pre></td></tr></table></figure></p>\n<p>从右往左，第一个selector是.copyright-content，它是一个类选择器，所以它的matchType是class，它和第二个选择器是祖先和子孙关系，因此它的relation是descendant；同理第二个选择器的matchType是tag，而relation是child，表示是第三个选择器的直接子结点；第三个选择器也是class，但是它没有下一个选择器了，relation用subSelector表示。</p>\n<p>matchType的作用就在于用来比较当前选择器是否match，如下代码所示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">match</span>(<span class=\"params\">node, selector</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(node === <span class=\"built_in\">document</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">switch</span>(selector.matchType)&#123;</div><div class=\"line\">        <span class=\"comment\">//如果是类选择器</span></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"class\"</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> node.className.trim().split(<span class=\"regexp\">/ +/</span>).indexOf(selector.value) &gt;= <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//如果是标签选择器</span></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"tag\"</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> node.tagName.toLowerCase() === selector.value. toLowerCase();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"string\">\"unknown selector match type\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>根据不同的matchType做不同的匹配。</p>\n<p>在匹配的时候，从右往左，依次比较每个选择器是否match. 在比较下一个选择器的时候，需要找到相应的DOM结点，如果当前选择器是下一个选择器的子孙时，则需要比较当前选择器所有的祖先结点，一直往上直到document；而如果是直接子元素的关系，则比较它的父结点即可。所以需要有一个找到下一个目标结点的函数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nextTarget</span>(<span class=\"params\">node, selector</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!node || node === <span class=\"built_in\">document</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">switch</span>(selector.relation)&#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"descendant\"</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> &#123;<span class=\"attr\">node</span>: node.parentNode, <span class=\"attr\">hasNext</span>: <span class=\"literal\">true</span>&#125;;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"child\"</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> &#123;<span class=\"attr\">node</span>: node.parentNode, <span class=\"attr\">hasNext</span>: <span class=\"literal\">false</span>&#125;;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"sibling\"</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> &#123;<span class=\"attr\">node</span>: node.previousSibling, <span class=\"attr\">hasNext</span>: <span class=\"literal\">true</span>&#125;;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"string\">\"unknown selector relation type\"</span>;</div><div class=\"line\">          <span class=\"comment\">//hasNext表示当前选择器relation是否允许继续找下一个节点</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>有了nextTarge和match这两个函数就可以开始遍历DOM，如下代码所示：</p>\n<p><img src=\"https://anhaoran.github.io/ImageServer/juejin/2e17e8041a10554a3aa164e996406206\" alt=\"\"><br>最外层的while循环和简单选择器一样，都是要遍历所有DOM结点。对于每个结点，先判断第一个选择器是否match，如果不match的话，则继续下一个结点，如果不是标签选择器，对于绝大多数结点将会在这里判断不通过。如果第一个选择器match了，则根据第一个选择器的relation，找到下一个target，判断下一个targe是否match下一个selector，只要有一个target匹配上了，则退出里层的while循环，继续下一个选择器，如果所有的selector都能匹配上说明匹配成功。如果有一个selecotr的所有target都没有match，则说明匹配失败，退出selector的for循环，直接从头开始对下一个DOM结点进行匹配。</p>\n<p>这样就实现了一个复杂选择器的查DOM。写这个的目的并不是要你自己写一个查DOM的函数拿去用，而是要明白查DOM的过程是怎么样的，可以怎么实现，浏览器又是怎么实现的。还有可以怎么遍历DOM树，当明白这个过程的时候，遇到类似的问题，就可以举一反三。</p>\n<p>最后在浏览器上运行一下，如下图所示：<br><img src=\"https://anhaoran.github.io/ImageServer/juejin/337c5d78734bf049015e3789f1c13ea4\" alt=\"\"></p>\n<h3 id=\"重复值处理\"><a href=\"#重复值处理\" class=\"headerlink\" title=\"重复值处理\"></a>重复值处理</h3><p>现在有个问题，如下图所示：</p>\n<p><img src=\"https://anhaoran.github.io/ImageServer/juejin/fd1b1dacd701276302a42a5f5dcbeedc\" alt=\"\"><br>当地图往下拖的时候要更新地图上的房源标签数据，上图绿框表示不变的标签，而黄框表示新加的房源。</p>\n<p>后端每次都会把当前地图可见区域的房源返回给我，当用户拖动的时候需要知道哪些是原先已经有的房源，哪些是新加的。把新加的房源画上，而把超出区域的房源删掉，已有的房源保持不动。因此需要对比当前房源和新的结果哪些是重复的。因为如果不这样做的话，改成每次都是全部删掉再重新画，已有的房源标签就会闪一下。因此为了避免闪动做一个增量更新。</p>\n<p>把这个问题抽象一下就变成：给两个数组，需要找出第一个数组里面的重复值和非重复值。即有一个数组保存上一次状态的房源，而另一个数组是当前状态的新房源数据。找到的重复值是需要保留，找到非重复值是要删掉的。</p>\n<p>最直观的方法是使用双重循环。</p>\n<h4 id=\"（1）双重循环\"><a href=\"#（1）双重循环\" class=\"headerlink\" title=\"（1）双重循环\"></a>（1）双重循环</h4><p>如下代码所示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> lastHouses = [];</div><div class=\"line\">filterHouse: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">houses</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(lastHouses === <span class=\"literal\">null</span>)&#123;</div><div class=\"line\">        lastHouses = houses;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            <span class=\"attr\">remainsHouses</span>: [], </div><div class=\"line\">            <span class=\"attr\">newHouses</span>: houses</div><div class=\"line\">        &#125;;  </div><div class=\"line\">    &#125;   </div><div class=\"line\">    <span class=\"keyword\">var</span> remainsHouses = [], </div><div class=\"line\">        newHouses = []; </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; houses.length; i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> isNewHouse = <span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; lastHouses.length; j++)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(houses[i].id === lastHouses[j].id)&#123;</div><div class=\"line\">                isNewHouse = <span class=\"literal\">false</span>;</div><div class=\"line\">                remainsHouses.push(lastHouses[j]);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;   </div><div class=\"line\">        &#125;   </div><div class=\"line\">        <span class=\"keyword\">if</span>(isNewHouse)&#123;</div><div class=\"line\">            newHouses.push(houses[i]);</div><div class=\"line\">        &#125;   </div><div class=\"line\">    &#125;   </div><div class=\"line\">    lastHouses = remainsHouses.concat(newHouses);</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">remainsHouses</span>: remainsHouses,</div><div class=\"line\">        <span class=\"attr\">newHouses</span>: newHouses</div><div class=\"line\">    &#125;;  </div><div class=\"line\">&#125;<span class=\"keyword\">var</span> lastHouses = [];</div><div class=\"line\">filterHouse: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">houses</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(lastHouses === <span class=\"literal\">null</span>)&#123;</div><div class=\"line\">        lastHouses = houses;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            <span class=\"attr\">remainsHouses</span>: [], </div><div class=\"line\">            <span class=\"attr\">newHouses</span>: houses</div><div class=\"line\">        &#125;;  </div><div class=\"line\">    &#125;   </div><div class=\"line\">    <span class=\"keyword\">var</span> remainsHouses = [], </div><div class=\"line\">        newHouses = []; </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; houses.length; i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> isNewHouse = <span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; lastHouses.length; j++)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(houses[i].id === lastHouses[j].id)&#123;</div><div class=\"line\">                isNewHouse = <span class=\"literal\">false</span>;</div><div class=\"line\">                remainsHouses.push(lastHouses[j]);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;   </div><div class=\"line\">        &#125;   </div><div class=\"line\">        <span class=\"keyword\">if</span>(isNewHouse)&#123;</div><div class=\"line\">            newHouses.push(houses[i]);</div><div class=\"line\">        &#125;   </div><div class=\"line\">    &#125;   </div><div class=\"line\">    lastHouses = remainsHouses.concat(newHouses);</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">remainsHouses</span>: remainsHouses,</div><div class=\"line\">        <span class=\"attr\">newHouses</span>: newHouses</div><div class=\"line\">    &#125;;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面代码有一个双重for循环，对新数据的每个元素，判断老数据里面是否已经有了，如果有的话则说明是重复值，如果老数据循环了一遍都没找到，则说明是新数据。由于用到了双重循环，所以这个算法的时间复杂度为O(N2)，对于百级的数据还好，对于千级的数据可能会有压力，因为最坏情况下要比较1000000次。</p>\n<h4 id=\"（2）使用set\"><a href=\"#（2）使用set\" class=\"headerlink\" title=\"（2）使用set\"></a>（2）使用set</h4><p>如下代码所示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> lastHouses = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filterHouse</span>(<span class=\"params\">houses</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> remainsHouses = [],</div><div class=\"line\">        newHouses = [];</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = houses.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(lastHouses.has(houses[i].id))&#123;</div><div class=\"line\">            remainsHouses.push(houses[i]);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            newHouses.push(houses[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; newHouses.length; i++)&#123;</div><div class=\"line\">        lastHouses.add(newHouses[i].id);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">remainsHouses</span>: remainsHouses, </div><div class=\"line\">            <span class=\"attr\">newHouses</span>: newHouses&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>老数据的存储lastHouses从数组改成set，但如果一开始就是数组呢，就像问题抽象里面说的给两个数组？那就用这个数组的数据初始化一个Set.</p>\n<p>使用Set和使用Array的区别在于可以减少一重循环，调用Set.prototype.has的函数。Set一般是使用红黑树实现的，红黑树是一种平衡查找二叉树，它的查找时间复杂度为O(logN)。所以时间上进行了改进，从O(N)变成O(logN)，而总体时间从O(N2)变成O(NlogN)。实际上，Chrome V8的Set是用哈希实现的，它是一个哈希Set，查找时间复杂度为O(1)，所以总体的时间复杂度是O(N).</p>\n<p>不管是O(NlogN)还是O(N)，表面上看它们的时间要比O(N2)的少。但实际上需要注意的是它们前面还有一个系数。使用Set在后面更新lastHouses的时候也是需要时间的：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; newHouses.length; i++)&#123;</div><div class=\"line\">    lastHouses.add(newHouses[i].id);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果Set是用树的实现，这段代码是时间复杂度为O(NlogN)，所以总的时间为O(2NlogN)，但是由于大O是不考虑系数的，O(2NlogN) 还是等于O(NlogN)，当数据量比较小的时侯，这个系数会起到很大的作用，而数据量比较大的时候，指数级增长的O(N2)将会远远超过这个系数，哈希的实现也是同样道理。所以当数据量比较小时，如只有一两百可直接使用双重循环处理即可。<br>上面的代码有点冗长，我们可以用ES6的新特性改写一下，变得更加的简洁：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filterHouse</span>(<span class=\"params\">houses</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> remainsHouses = [],</div><div class=\"line\">        newHouses = []; </div><div class=\"line\">    houses.map(<span class=\"function\"><span class=\"params\">house</span> =&gt;</span> lastHouses.has(house.id) ? remainsHouses.push(house) </div><div class=\"line\">                        : newHouses.push(house));</div><div class=\"line\">    newHouses.map(<span class=\"function\"><span class=\"params\">house</span> =&gt;</span> lastHouses.add(house.id));</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;remainsHouses, newHouses&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"前端数据结构与算法\"><a href=\"#前端数据结构与算法\" class=\"headerlink\" title=\"前端数据结构与算法\"></a>前端数据结构与算法</h1><h2 id=\"1-递归\"><a href=\"#1-递归\" class=\"headerlink\" title=\"1.递归\"></a>1.递归</h2><blockquote>\n<p>递归就是自己调自己，递归在前端里面算是一种比较常用的算法。假设现在有一堆数据要处理，要实现上一次请求完成了，才能去调下一个请求。一个是可以用Promise，就像《前端与SQL》这篇文章里面提到的。但是有时候并不想引入Promise，能简单处理先简单处理。这个时候就可以用递归，如下代码所示：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ids = [<span class=\"number\">34112</span>, <span class=\"number\">98325</span>, <span class=\"number\">68125</span>];</div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendRequest</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> id = ids.shift();</div><div class=\"line\">    <span class=\"keyword\">if</span>(id)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(id);</div><div class=\"line\">\t\tsendRequest();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"finished\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)(); </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//34112</span></div><div class=\"line\"><span class=\"comment\">//98325</span></div><div class=\"line\"><span class=\"comment\">//68125</span></div><div class=\"line\"><span class=\"comment\">//finished</span></div></pre></td></tr></table></figure>","more":"<blockquote>\n<p>上面代码定义了一个sendRequest的函数，在请求完成之后再调一下自己。每次调之前先取一个数据，如果数组已经为空，则说明处理完了。这样就用简单的方式实现了串行请求不堵塞的功能。厉害</p>\n</blockquote>\n<p>再来讲另外一个场景：DOM树。</p>\n<p>由于DOM是一棵树，而树的定义本身就是用的递归定义，所以用递归的方法处理树，会非常地简单自然。例如用递归实现一个查DOM的功能document.getElementById。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getElementById</span>(<span class=\"params\">node, id</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!node) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(node.id === id) <span class=\"keyword\">return</span> node;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; node.childNodes.length; i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> found = getElementById(node.childNodes[i], id);</div><div class=\"line\">        <span class=\"keyword\">if</span>(found) <span class=\"keyword\">return</span> found;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">getElementById(<span class=\"built_in\">document</span>, <span class=\"string\">\"d-cal\"</span>);</div></pre></td></tr></table></figure></p>\n<p>document是DOM树的根结点，一般从document开始往下找。在for循环里面先找document的所有子结点，对所有子结点递归查找他们的子结点，一层一层地往下查找。如果已经到了叶子结点了还没有找到，则在第二行代码的判断里面返回null，返回之后for循环的i加1，继续下一个子结点。如果当前结点的id符合查找条件，则一层层地返回。所以这是一个深度优先的遍历，每次都先从根结点一直往下直到叶子结点，再从下往上返回。<br>最后在控制台验证一下，执行结果如下图所示：<br><img src=\"https://anhaoran.github.io/ImageServer/juejin/5120ddb64940520f1b2f12d0503b2ef7\" alt=\"\"><br>使用递归的优点是代码简单易懂，缺点是效率比不上非递归的实现。Chrome浏览器的查DOM是使用非递归实现。非递归要怎么实现呢？<br>如下代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getByElementId</span>(<span class=\"params\">node, id</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//遍历所有的Node</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(node)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(node.id === id) <span class=\"keyword\">return</span> node;</div><div class=\"line\">        node = nextElement(node);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>还是依次遍历所有的DOM结点，只是这一次改成一个while循环，函数nextElement负责找到下一个结点。所以关键在于这个nextElement如何非递归实现，如下代码所示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nextElement</span>(<span class=\"params\">node</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(node.children.length) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> node.children[<span class=\"number\">0</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(node.nextElementSibling)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> node.nextElementSibling;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">while</span>(node.parentNode)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(node.parentNode.nextElementSibling) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> node.parentNode.nextElementSibling;</div><div class=\"line\">        &#125;</div><div class=\"line\">        node = node.parentNode;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>还是用深度遍历，先找当前结点的子结点，如果它有子结点，则下一个元素就是它的第一个子结点，否则判断它是否有相邻元素，如果有则返回它的下一个相邻元素。如果它既没有子结点，也没有下一个相邻元素，则要往上返回它的父结点的下一个相邻元素，相当于上面递归实现里面的for循环的i加1.</p>\n<p>在控制台里面运行这段代码，同样也可以正确地输出结果。不管是非递归还是递归，它们都是深度优先遍历，这个过程如下图所示。<br><img src=\"https://anhaoran.github.io/ImageServer/juejin/6529742bce74e88f183dbf8c756580fe\" alt=\"\"><br>实际上getElementById浏览器是用的一个哈希map存储的，根据id直接映射到DOM结点，而getElementsByClassName就是用的这样的非递归查找。</p>\n<p>上面是单个选择器的查找，按id，按class等，多个选择器应该如何查找呢？</p>\n<h2 id=\"2-复杂选择器的查DOM\"><a href=\"#2-复杂选择器的查DOM\" class=\"headerlink\" title=\"2. 复杂选择器的查DOM\"></a>2. 复杂选择器的查DOM</h2><p>如实现一个document.querySelector：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\".mls-info &gt; div .copyright-content\"</span>)</div></pre></td></tr></table></figure></p>\n<p>首先把复杂选择器做一个解析，序列为以下格式：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//把selector解析为</span></div><div class=\"line\"><span class=\"keyword\">var</span> selectors = [</div><div class=\"line\">&#123;<span class=\"attr\">relation</span>: <span class=\"string\">\"descendant\"</span>,  <span class=\"attr\">matchType</span>: <span class=\"string\">\"class\"</span>, <span class=\"attr\">value</span>: <span class=\"string\">\"copyright-content\"</span>&#125;,</div><div class=\"line\">&#123;<span class=\"attr\">relation</span>: <span class=\"string\">\"child\"</span>,       <span class=\"attr\">matchType</span>: <span class=\"string\">\"tag\"</span>,   <span class=\"attr\">value</span>: <span class=\"string\">\"div\"</span>&#125;,</div><div class=\"line\">&#123;<span class=\"attr\">relation</span>: <span class=\"string\">\"subSelector\"</span>, <span class=\"attr\">matchType</span>: <span class=\"string\">\"class\"</span>, <span class=\"attr\">value</span>: <span class=\"string\">\"mls-info\"</span>&#125;];</div></pre></td></tr></table></figure></p>\n<p>从右往左，第一个selector是.copyright-content，它是一个类选择器，所以它的matchType是class，它和第二个选择器是祖先和子孙关系，因此它的relation是descendant；同理第二个选择器的matchType是tag，而relation是child，表示是第三个选择器的直接子结点；第三个选择器也是class，但是它没有下一个选择器了，relation用subSelector表示。</p>\n<p>matchType的作用就在于用来比较当前选择器是否match，如下代码所示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">match</span>(<span class=\"params\">node, selector</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(node === <span class=\"built_in\">document</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">switch</span>(selector.matchType)&#123;</div><div class=\"line\">        <span class=\"comment\">//如果是类选择器</span></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"class\"</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> node.className.trim().split(<span class=\"regexp\">/ +/</span>).indexOf(selector.value) &gt;= <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//如果是标签选择器</span></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"tag\"</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> node.tagName.toLowerCase() === selector.value. toLowerCase();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"string\">\"unknown selector match type\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>根据不同的matchType做不同的匹配。</p>\n<p>在匹配的时候，从右往左，依次比较每个选择器是否match. 在比较下一个选择器的时候，需要找到相应的DOM结点，如果当前选择器是下一个选择器的子孙时，则需要比较当前选择器所有的祖先结点，一直往上直到document；而如果是直接子元素的关系，则比较它的父结点即可。所以需要有一个找到下一个目标结点的函数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nextTarget</span>(<span class=\"params\">node, selector</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!node || node === <span class=\"built_in\">document</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">switch</span>(selector.relation)&#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"descendant\"</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> &#123;<span class=\"attr\">node</span>: node.parentNode, <span class=\"attr\">hasNext</span>: <span class=\"literal\">true</span>&#125;;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"child\"</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> &#123;<span class=\"attr\">node</span>: node.parentNode, <span class=\"attr\">hasNext</span>: <span class=\"literal\">false</span>&#125;;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"sibling\"</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> &#123;<span class=\"attr\">node</span>: node.previousSibling, <span class=\"attr\">hasNext</span>: <span class=\"literal\">true</span>&#125;;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"string\">\"unknown selector relation type\"</span>;</div><div class=\"line\">          <span class=\"comment\">//hasNext表示当前选择器relation是否允许继续找下一个节点</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>有了nextTarge和match这两个函数就可以开始遍历DOM，如下代码所示：</p>\n<p><img src=\"https://anhaoran.github.io/ImageServer/juejin/2e17e8041a10554a3aa164e996406206\" alt=\"\"><br>最外层的while循环和简单选择器一样，都是要遍历所有DOM结点。对于每个结点，先判断第一个选择器是否match，如果不match的话，则继续下一个结点，如果不是标签选择器，对于绝大多数结点将会在这里判断不通过。如果第一个选择器match了，则根据第一个选择器的relation，找到下一个target，判断下一个targe是否match下一个selector，只要有一个target匹配上了，则退出里层的while循环，继续下一个选择器，如果所有的selector都能匹配上说明匹配成功。如果有一个selecotr的所有target都没有match，则说明匹配失败，退出selector的for循环，直接从头开始对下一个DOM结点进行匹配。</p>\n<p>这样就实现了一个复杂选择器的查DOM。写这个的目的并不是要你自己写一个查DOM的函数拿去用，而是要明白查DOM的过程是怎么样的，可以怎么实现，浏览器又是怎么实现的。还有可以怎么遍历DOM树，当明白这个过程的时候，遇到类似的问题，就可以举一反三。</p>\n<p>最后在浏览器上运行一下，如下图所示：<br><img src=\"https://anhaoran.github.io/ImageServer/juejin/337c5d78734bf049015e3789f1c13ea4\" alt=\"\"></p>\n<h3 id=\"重复值处理\"><a href=\"#重复值处理\" class=\"headerlink\" title=\"重复值处理\"></a>重复值处理</h3><p>现在有个问题，如下图所示：</p>\n<p><img src=\"https://anhaoran.github.io/ImageServer/juejin/fd1b1dacd701276302a42a5f5dcbeedc\" alt=\"\"><br>当地图往下拖的时候要更新地图上的房源标签数据，上图绿框表示不变的标签，而黄框表示新加的房源。</p>\n<p>后端每次都会把当前地图可见区域的房源返回给我，当用户拖动的时候需要知道哪些是原先已经有的房源，哪些是新加的。把新加的房源画上，而把超出区域的房源删掉，已有的房源保持不动。因此需要对比当前房源和新的结果哪些是重复的。因为如果不这样做的话，改成每次都是全部删掉再重新画，已有的房源标签就会闪一下。因此为了避免闪动做一个增量更新。</p>\n<p>把这个问题抽象一下就变成：给两个数组，需要找出第一个数组里面的重复值和非重复值。即有一个数组保存上一次状态的房源，而另一个数组是当前状态的新房源数据。找到的重复值是需要保留，找到非重复值是要删掉的。</p>\n<p>最直观的方法是使用双重循环。</p>\n<h4 id=\"（1）双重循环\"><a href=\"#（1）双重循环\" class=\"headerlink\" title=\"（1）双重循环\"></a>（1）双重循环</h4><p>如下代码所示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> lastHouses = [];</div><div class=\"line\">filterHouse: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">houses</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(lastHouses === <span class=\"literal\">null</span>)&#123;</div><div class=\"line\">        lastHouses = houses;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            <span class=\"attr\">remainsHouses</span>: [], </div><div class=\"line\">            <span class=\"attr\">newHouses</span>: houses</div><div class=\"line\">        &#125;;  </div><div class=\"line\">    &#125;   </div><div class=\"line\">    <span class=\"keyword\">var</span> remainsHouses = [], </div><div class=\"line\">        newHouses = []; </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; houses.length; i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> isNewHouse = <span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; lastHouses.length; j++)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(houses[i].id === lastHouses[j].id)&#123;</div><div class=\"line\">                isNewHouse = <span class=\"literal\">false</span>;</div><div class=\"line\">                remainsHouses.push(lastHouses[j]);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;   </div><div class=\"line\">        &#125;   </div><div class=\"line\">        <span class=\"keyword\">if</span>(isNewHouse)&#123;</div><div class=\"line\">            newHouses.push(houses[i]);</div><div class=\"line\">        &#125;   </div><div class=\"line\">    &#125;   </div><div class=\"line\">    lastHouses = remainsHouses.concat(newHouses);</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">remainsHouses</span>: remainsHouses,</div><div class=\"line\">        <span class=\"attr\">newHouses</span>: newHouses</div><div class=\"line\">    &#125;;  </div><div class=\"line\">&#125;<span class=\"keyword\">var</span> lastHouses = [];</div><div class=\"line\">filterHouse: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">houses</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(lastHouses === <span class=\"literal\">null</span>)&#123;</div><div class=\"line\">        lastHouses = houses;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            <span class=\"attr\">remainsHouses</span>: [], </div><div class=\"line\">            <span class=\"attr\">newHouses</span>: houses</div><div class=\"line\">        &#125;;  </div><div class=\"line\">    &#125;   </div><div class=\"line\">    <span class=\"keyword\">var</span> remainsHouses = [], </div><div class=\"line\">        newHouses = []; </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; houses.length; i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> isNewHouse = <span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; lastHouses.length; j++)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(houses[i].id === lastHouses[j].id)&#123;</div><div class=\"line\">                isNewHouse = <span class=\"literal\">false</span>;</div><div class=\"line\">                remainsHouses.push(lastHouses[j]);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;   </div><div class=\"line\">        &#125;   </div><div class=\"line\">        <span class=\"keyword\">if</span>(isNewHouse)&#123;</div><div class=\"line\">            newHouses.push(houses[i]);</div><div class=\"line\">        &#125;   </div><div class=\"line\">    &#125;   </div><div class=\"line\">    lastHouses = remainsHouses.concat(newHouses);</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">remainsHouses</span>: remainsHouses,</div><div class=\"line\">        <span class=\"attr\">newHouses</span>: newHouses</div><div class=\"line\">    &#125;;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面代码有一个双重for循环，对新数据的每个元素，判断老数据里面是否已经有了，如果有的话则说明是重复值，如果老数据循环了一遍都没找到，则说明是新数据。由于用到了双重循环，所以这个算法的时间复杂度为O(N2)，对于百级的数据还好，对于千级的数据可能会有压力，因为最坏情况下要比较1000000次。</p>\n<h4 id=\"（2）使用set\"><a href=\"#（2）使用set\" class=\"headerlink\" title=\"（2）使用set\"></a>（2）使用set</h4><p>如下代码所示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> lastHouses = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filterHouse</span>(<span class=\"params\">houses</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> remainsHouses = [],</div><div class=\"line\">        newHouses = [];</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = houses.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(lastHouses.has(houses[i].id))&#123;</div><div class=\"line\">            remainsHouses.push(houses[i]);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            newHouses.push(houses[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; newHouses.length; i++)&#123;</div><div class=\"line\">        lastHouses.add(newHouses[i].id);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">remainsHouses</span>: remainsHouses, </div><div class=\"line\">            <span class=\"attr\">newHouses</span>: newHouses&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>老数据的存储lastHouses从数组改成set，但如果一开始就是数组呢，就像问题抽象里面说的给两个数组？那就用这个数组的数据初始化一个Set.</p>\n<p>使用Set和使用Array的区别在于可以减少一重循环，调用Set.prototype.has的函数。Set一般是使用红黑树实现的，红黑树是一种平衡查找二叉树，它的查找时间复杂度为O(logN)。所以时间上进行了改进，从O(N)变成O(logN)，而总体时间从O(N2)变成O(NlogN)。实际上，Chrome V8的Set是用哈希实现的，它是一个哈希Set，查找时间复杂度为O(1)，所以总体的时间复杂度是O(N).</p>\n<p>不管是O(NlogN)还是O(N)，表面上看它们的时间要比O(N2)的少。但实际上需要注意的是它们前面还有一个系数。使用Set在后面更新lastHouses的时候也是需要时间的：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; newHouses.length; i++)&#123;</div><div class=\"line\">    lastHouses.add(newHouses[i].id);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果Set是用树的实现，这段代码是时间复杂度为O(NlogN)，所以总的时间为O(2NlogN)，但是由于大O是不考虑系数的，O(2NlogN) 还是等于O(NlogN)，当数据量比较小的时侯，这个系数会起到很大的作用，而数据量比较大的时候，指数级增长的O(N2)将会远远超过这个系数，哈希的实现也是同样道理。所以当数据量比较小时，如只有一两百可直接使用双重循环处理即可。<br>上面的代码有点冗长，我们可以用ES6的新特性改写一下，变得更加的简洁：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filterHouse</span>(<span class=\"params\">houses</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> remainsHouses = [],</div><div class=\"line\">        newHouses = []; </div><div class=\"line\">    houses.map(<span class=\"function\"><span class=\"params\">house</span> =&gt;</span> lastHouses.has(house.id) ? remainsHouses.push(house) </div><div class=\"line\">                        : newHouses.push(house));</div><div class=\"line\">    newHouses.map(<span class=\"function\"><span class=\"params\">house</span> =&gt;</span> lastHouses.add(house.id));</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;remainsHouses, newHouses&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"简单方法","date":"2017-06-28T09:25:26.000Z","toc":true,"_content":"# 数组方法\n## 数组排序\n### 从小到大\n~~~js\n    var arr = [1,2,3,4,5,11,4,5,6,7,8];\n    arr.sort((a,b)=> a-b);\n    //[1, 2, 3, 4, 4, 5, 5, 6, 7, 8, 11]\n~~~\n### 从大到小\n~~~js\n    var arr = [1,2,3,4,5,11,4,5,6,7,8];\n    arr.sort((a,b)=> b-a);\n    //[11, 8, 7, 6, 5, 5, 4, 4, 3, 2, 1]\n~~~\n<!--more-->\n# 时间函数\n## 时间格式\n### Date参数\n~~~js\n    //实例   Wed Jun 28 2017 17:33:36 GMT+0800 (CST)\n    //星期一 MON //星期二 TUE //星期三 WED //星期四 THU //星期五 FRI //星期六 SAT //星期天 SUN\n    //一月 Jan//二月 Feb//三月 Mar//四月 Apr//五月 May\n    //六月 June//七月 July//八月 Aug//九月 Sept//十月 Oct//十一月 Nov//十二月 Dec\n    //第一个参数代表星期几，是英语星期几的简写\n    //第二个参数代表几月份，是英语几月份的简写\n    //也就是说上面的案例代表着：星期三，六月，28日，2017年，17点，33分，36秒，\n    //GMT+0800代表着格林尼治所在地的标准时间。这个+0800指的是北京时间距离标准时间差8个小时\n    //CST CST可视为美国，澳大利亚，古巴或中国的标准时间。\n~~~\n### new Date\n>   不接收任何参数：返回当前时间；\n\n~~~js\n    var time = new Date()\n    console.log(time)\n    //Wed Jun 28 2017 17:33:36 GMT+0800 (CST)\n~~~\n### new Date(x)\n>   接收一个参数x: 返回1970年1月1日 + x毫秒的值。\n\n~~~js\n    var time = new Date(1);\n    console.log(time);\n    //Thu Jan 01 1970 08:00:00 GMT+0800 (CST)\n~~~\n### new Date().getFullYear()\n>   获取当前年份；\n\n~~~js\n    var time = new Date().getFullYear();\n    console.log(time);\n    //2017\n~~~\n### new Date().getMonth()\n> 获取当前月份,从0开始\n\n~~~js\n    var time = new Date().getMonth();\n    console.log(time);\n    //5\n~~~\n### new Date().getDate()\n> 获取当前日期\n\n~~~js\n    var time = new Date().getDate();\n    console.log(time)\n    //28\n~~~\n### new Date().getDay()\n>返回当前是星期几\n\n~~~js\n    var time = new Date().getDay();\n    console.log(time)\n    //3\n~~~\n### new Date().getTime()\n>获取从1970.1.1开始的毫秒数（时间戳）\n\n~~~js\n    var time = new Date().getTime();\n    console.log(time);\n    //1498645675319\n~~~\n### new Date().getHours()\n>获取当前小时数（24小时制）\n\n~~~js\n    var time = new Date().getHours();\n    console.log(time);\n    //18\n~~~\n### new Date().getMinutes()\n>获取当前分钟数\n\n~~~js\n    var time = new Date().getMinutes();\n    console.log(time);\n    //29\n~~~\n### new Date().getSeconds()\n>获取当前秒数\n\n~~~js\n    var time = new Date().getSeconds();\n    console.log(time);\n    //16\n~~~\n### new Date().getMilliseconds()\n>获取当前毫秒数\n\n~~~js\n    var time = new Date().getMilliseconds();\n    console.log(time);\n    //168\n~~~\n### new Date().toLocaleDateString()\n>获取当前日期年月日-----格式0000-0-00\n\n~~~js\n    var time = new Date().toLocaleDateString();\n    console.log(time);\n    //2017-6-28\n~~~\n### new Date().toLocaleTimeString()\n>获取当前时间---00：00：00\n\n~~~js\n    var time = new Date().toLocaleTimeString();\n    console.log(time);\n    //\"10:02:12\"\n~~~\n### new Date().toLocaleString()\n>获取当前日期年月日时分秒-----格式0000-0-00 00：00：00\n\n~~~js\n    var time = new Date().toLocaleString();\n    console.log(time);\n    //2017-6-28 18:32:51\n~~~\n### 获取时间戳\n~~~js\n    var time = new Date();\n    //第一种方法\n    time.valueOf();\n    //1498646194237\n    //第二种方法\n    time.getTime();\n    //1498646194237\n~~~\n### 字符串转日期对象\n~~~js\n    var str = '2017-06-28';\n    new Date(Date.parse(str.replace(/-/g,  \"/\")));\n    //Mon Jun 26 2017 00:00:00 GMT+0800 (CST)\n    new Date(2009,1,1);\n    //Sun Feb 01 2009 00:00:00 GMT+0800 (CST)\n    //星期天，二月，一日，2009\n    new Date(\"2009/1/1\");\n    //Thu Jan 01 2009 00:00:00 GMT+0800 (CST)\n    //星期四，一月\n~~~\n## 时间demo\n### 当前系统区域设置格式(toLocaleDateString和toLocaleTimeString)\n~~~js\n    //例如\n    (new Date()).toLocaleDateString() + \" \" + (new Date()).toLocaleTimeString();\n    //\"2017-6-29 10:05:56\"\n~~~\n### 普通字符串(toDateString和toTimeString)\n~~~js\n    //例如\n     (new Date()).toDateString() + \" \" + (new Date()).toTimeString();\n    //\"Thu Jun 29 2017 10:06:49 GMT+0800 (CST)\"\n~~~\n### 格林威治标准时间(toGMTString)\n~~~js\n    (new Date()).toGMTString();\n    //\"Thu, 29 Jun 2017 02:07:41 GMT\"\n~~~\n### 全球标准时间(toUTCString)\n~~~js\n    (new Date()).toUTCString();\n    //\"Thu, 29 Jun 2017 02:08:57 GMT\"\n~~~\n### Date对象字符串(toString)\n~~~js\n     (new Date()).toString();\n     //\"Thu Jun 29 2017 10:09:40 GMT+0800 (CST)\"\n~~~\n## 好用的方法\n### 时间戳转换时间格式\n>时间格式2017-6-29 10:16\n\n~~~js\n    var time = new Date().valueOf();\n    //1498702568422\n    function getLocalTime(nS) {\n    console.log(parseInt(nS) * 1000,'parseInt(nS) * 1000');\n    console.log((parseInt(nS) * 1000).toLocaleString(),'parseInt(nS) * 1000.toLocaleString()')\n    return new Date(parseInt(nS) * 1000).toLocaleString().replace(/:\\d{1,2}$/,' ');  \n    }\n    getLocalTime(time/1000);\n    //\"2017-6-29 10:16 \"\n~~~\n### 时间方法\n\n","source":"_posts/数组方法.md","raw":"---\ntitle: 简单方法\ndate: 2017-06-28 17:25:26\ntags: Function\ntoc: true\n---\n# 数组方法\n## 数组排序\n### 从小到大\n~~~js\n    var arr = [1,2,3,4,5,11,4,5,6,7,8];\n    arr.sort((a,b)=> a-b);\n    //[1, 2, 3, 4, 4, 5, 5, 6, 7, 8, 11]\n~~~\n### 从大到小\n~~~js\n    var arr = [1,2,3,4,5,11,4,5,6,7,8];\n    arr.sort((a,b)=> b-a);\n    //[11, 8, 7, 6, 5, 5, 4, 4, 3, 2, 1]\n~~~\n<!--more-->\n# 时间函数\n## 时间格式\n### Date参数\n~~~js\n    //实例   Wed Jun 28 2017 17:33:36 GMT+0800 (CST)\n    //星期一 MON //星期二 TUE //星期三 WED //星期四 THU //星期五 FRI //星期六 SAT //星期天 SUN\n    //一月 Jan//二月 Feb//三月 Mar//四月 Apr//五月 May\n    //六月 June//七月 July//八月 Aug//九月 Sept//十月 Oct//十一月 Nov//十二月 Dec\n    //第一个参数代表星期几，是英语星期几的简写\n    //第二个参数代表几月份，是英语几月份的简写\n    //也就是说上面的案例代表着：星期三，六月，28日，2017年，17点，33分，36秒，\n    //GMT+0800代表着格林尼治所在地的标准时间。这个+0800指的是北京时间距离标准时间差8个小时\n    //CST CST可视为美国，澳大利亚，古巴或中国的标准时间。\n~~~\n### new Date\n>   不接收任何参数：返回当前时间；\n\n~~~js\n    var time = new Date()\n    console.log(time)\n    //Wed Jun 28 2017 17:33:36 GMT+0800 (CST)\n~~~\n### new Date(x)\n>   接收一个参数x: 返回1970年1月1日 + x毫秒的值。\n\n~~~js\n    var time = new Date(1);\n    console.log(time);\n    //Thu Jan 01 1970 08:00:00 GMT+0800 (CST)\n~~~\n### new Date().getFullYear()\n>   获取当前年份；\n\n~~~js\n    var time = new Date().getFullYear();\n    console.log(time);\n    //2017\n~~~\n### new Date().getMonth()\n> 获取当前月份,从0开始\n\n~~~js\n    var time = new Date().getMonth();\n    console.log(time);\n    //5\n~~~\n### new Date().getDate()\n> 获取当前日期\n\n~~~js\n    var time = new Date().getDate();\n    console.log(time)\n    //28\n~~~\n### new Date().getDay()\n>返回当前是星期几\n\n~~~js\n    var time = new Date().getDay();\n    console.log(time)\n    //3\n~~~\n### new Date().getTime()\n>获取从1970.1.1开始的毫秒数（时间戳）\n\n~~~js\n    var time = new Date().getTime();\n    console.log(time);\n    //1498645675319\n~~~\n### new Date().getHours()\n>获取当前小时数（24小时制）\n\n~~~js\n    var time = new Date().getHours();\n    console.log(time);\n    //18\n~~~\n### new Date().getMinutes()\n>获取当前分钟数\n\n~~~js\n    var time = new Date().getMinutes();\n    console.log(time);\n    //29\n~~~\n### new Date().getSeconds()\n>获取当前秒数\n\n~~~js\n    var time = new Date().getSeconds();\n    console.log(time);\n    //16\n~~~\n### new Date().getMilliseconds()\n>获取当前毫秒数\n\n~~~js\n    var time = new Date().getMilliseconds();\n    console.log(time);\n    //168\n~~~\n### new Date().toLocaleDateString()\n>获取当前日期年月日-----格式0000-0-00\n\n~~~js\n    var time = new Date().toLocaleDateString();\n    console.log(time);\n    //2017-6-28\n~~~\n### new Date().toLocaleTimeString()\n>获取当前时间---00：00：00\n\n~~~js\n    var time = new Date().toLocaleTimeString();\n    console.log(time);\n    //\"10:02:12\"\n~~~\n### new Date().toLocaleString()\n>获取当前日期年月日时分秒-----格式0000-0-00 00：00：00\n\n~~~js\n    var time = new Date().toLocaleString();\n    console.log(time);\n    //2017-6-28 18:32:51\n~~~\n### 获取时间戳\n~~~js\n    var time = new Date();\n    //第一种方法\n    time.valueOf();\n    //1498646194237\n    //第二种方法\n    time.getTime();\n    //1498646194237\n~~~\n### 字符串转日期对象\n~~~js\n    var str = '2017-06-28';\n    new Date(Date.parse(str.replace(/-/g,  \"/\")));\n    //Mon Jun 26 2017 00:00:00 GMT+0800 (CST)\n    new Date(2009,1,1);\n    //Sun Feb 01 2009 00:00:00 GMT+0800 (CST)\n    //星期天，二月，一日，2009\n    new Date(\"2009/1/1\");\n    //Thu Jan 01 2009 00:00:00 GMT+0800 (CST)\n    //星期四，一月\n~~~\n## 时间demo\n### 当前系统区域设置格式(toLocaleDateString和toLocaleTimeString)\n~~~js\n    //例如\n    (new Date()).toLocaleDateString() + \" \" + (new Date()).toLocaleTimeString();\n    //\"2017-6-29 10:05:56\"\n~~~\n### 普通字符串(toDateString和toTimeString)\n~~~js\n    //例如\n     (new Date()).toDateString() + \" \" + (new Date()).toTimeString();\n    //\"Thu Jun 29 2017 10:06:49 GMT+0800 (CST)\"\n~~~\n### 格林威治标准时间(toGMTString)\n~~~js\n    (new Date()).toGMTString();\n    //\"Thu, 29 Jun 2017 02:07:41 GMT\"\n~~~\n### 全球标准时间(toUTCString)\n~~~js\n    (new Date()).toUTCString();\n    //\"Thu, 29 Jun 2017 02:08:57 GMT\"\n~~~\n### Date对象字符串(toString)\n~~~js\n     (new Date()).toString();\n     //\"Thu Jun 29 2017 10:09:40 GMT+0800 (CST)\"\n~~~\n## 好用的方法\n### 时间戳转换时间格式\n>时间格式2017-6-29 10:16\n\n~~~js\n    var time = new Date().valueOf();\n    //1498702568422\n    function getLocalTime(nS) {\n    console.log(parseInt(nS) * 1000,'parseInt(nS) * 1000');\n    console.log((parseInt(nS) * 1000).toLocaleString(),'parseInt(nS) * 1000.toLocaleString()')\n    return new Date(parseInt(nS) * 1000).toLocaleString().replace(/:\\d{1,2}$/,' ');  \n    }\n    getLocalTime(time/1000);\n    //\"2017-6-29 10:16 \"\n~~~\n### 时间方法\n\n","slug":"数组方法","published":1,"updated":"2017-06-29T03:48:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfnkq6t0014lyfy84jw23f3","content":"<h1 id=\"数组方法\"><a href=\"#数组方法\" class=\"headerlink\" title=\"数组方法\"></a>数组方法</h1><h2 id=\"数组排序\"><a href=\"#数组排序\" class=\"headerlink\" title=\"数组排序\"></a>数组排序</h2><h3 id=\"从小到大\"><a href=\"#从小到大\" class=\"headerlink\" title=\"从小到大\"></a>从小到大</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">11</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</div><div class=\"line\">arr.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span> a-b);</div><div class=\"line\"><span class=\"comment\">//[1, 2, 3, 4, 4, 5, 5, 6, 7, 8, 11]</span></div></pre></td></tr></table></figure>\n<h3 id=\"从大到小\"><a href=\"#从大到小\" class=\"headerlink\" title=\"从大到小\"></a>从大到小</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">11</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</div><div class=\"line\">arr.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span> b-a);</div><div class=\"line\"><span class=\"comment\">//[11, 8, 7, 6, 5, 5, 4, 4, 3, 2, 1]</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h1 id=\"时间函数\"><a href=\"#时间函数\" class=\"headerlink\" title=\"时间函数\"></a>时间函数</h1><h2 id=\"时间格式\"><a href=\"#时间格式\" class=\"headerlink\" title=\"时间格式\"></a>时间格式</h2><h3 id=\"Date参数\"><a href=\"#Date参数\" class=\"headerlink\" title=\"Date参数\"></a>Date参数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//实例   Wed Jun 28 2017 17:33:36 GMT+0800 (CST)</span></div><div class=\"line\"><span class=\"comment\">//星期一 MON //星期二 TUE //星期三 WED //星期四 THU //星期五 FRI //星期六 SAT //星期天 SUN</span></div><div class=\"line\"><span class=\"comment\">//一月 Jan//二月 Feb//三月 Mar//四月 Apr//五月 May</span></div><div class=\"line\"><span class=\"comment\">//六月 June//七月 July//八月 Aug//九月 Sept//十月 Oct//十一月 Nov//十二月 Dec</span></div><div class=\"line\"><span class=\"comment\">//第一个参数代表星期几，是英语星期几的简写</span></div><div class=\"line\"><span class=\"comment\">//第二个参数代表几月份，是英语几月份的简写</span></div><div class=\"line\"><span class=\"comment\">//也就是说上面的案例代表着：星期三，六月，28日，2017年，17点，33分，36秒，</span></div><div class=\"line\"><span class=\"comment\">//GMT+0800代表着格林尼治所在地的标准时间。这个+0800指的是北京时间距离标准时间差8个小时</span></div><div class=\"line\"><span class=\"comment\">//CST CST可视为美国，澳大利亚，古巴或中国的标准时间。</span></div></pre></td></tr></table></figure>\n<h3 id=\"new-Date\"><a href=\"#new-Date\" class=\"headerlink\" title=\"new Date\"></a>new Date</h3><blockquote>\n<p>  不接收任何参数：返回当前时间；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time)</div><div class=\"line\"><span class=\"comment\">//Wed Jun 28 2017 17:33:36 GMT+0800 (CST)</span></div></pre></td></tr></table></figure>\n<h3 id=\"new-Date-x\"><a href=\"#new-Date-x\" class=\"headerlink\" title=\"new Date(x)\"></a>new Date(x)</h3><blockquote>\n<p>  接收一个参数x: 返回1970年1月1日 + x毫秒的值。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time);</div><div class=\"line\"><span class=\"comment\">//Thu Jan 01 1970 08:00:00 GMT+0800 (CST)</span></div></pre></td></tr></table></figure>\n<h3 id=\"new-Date-getFullYear\"><a href=\"#new-Date-getFullYear\" class=\"headerlink\" title=\"new Date().getFullYear()\"></a>new Date().getFullYear()</h3><blockquote>\n<p>  获取当前年份；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time);</div><div class=\"line\"><span class=\"comment\">//2017</span></div></pre></td></tr></table></figure>\n<h3 id=\"new-Date-getMonth\"><a href=\"#new-Date-getMonth\" class=\"headerlink\" title=\"new Date().getMonth()\"></a>new Date().getMonth()</h3><blockquote>\n<p>获取当前月份,从0开始</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getMonth();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time);</div><div class=\"line\"><span class=\"comment\">//5</span></div></pre></td></tr></table></figure>\n<h3 id=\"new-Date-getDate\"><a href=\"#new-Date-getDate\" class=\"headerlink\" title=\"new Date().getDate()\"></a>new Date().getDate()</h3><blockquote>\n<p>获取当前日期</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getDate();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time)</div><div class=\"line\"><span class=\"comment\">//28</span></div></pre></td></tr></table></figure>\n<h3 id=\"new-Date-getDay\"><a href=\"#new-Date-getDay\" class=\"headerlink\" title=\"new Date().getDay()\"></a>new Date().getDay()</h3><blockquote>\n<p>返回当前是星期几</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getDay();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time)</div><div class=\"line\"><span class=\"comment\">//3</span></div></pre></td></tr></table></figure>\n<h3 id=\"new-Date-getTime\"><a href=\"#new-Date-getTime\" class=\"headerlink\" title=\"new Date().getTime()\"></a>new Date().getTime()</h3><blockquote>\n<p>获取从1970.1.1开始的毫秒数（时间戳）</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time);</div><div class=\"line\"><span class=\"comment\">//1498645675319</span></div></pre></td></tr></table></figure>\n<h3 id=\"new-Date-getHours\"><a href=\"#new-Date-getHours\" class=\"headerlink\" title=\"new Date().getHours()\"></a>new Date().getHours()</h3><blockquote>\n<p>获取当前小时数（24小时制）</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getHours();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time);</div><div class=\"line\"><span class=\"comment\">//18</span></div></pre></td></tr></table></figure>\n<h3 id=\"new-Date-getMinutes\"><a href=\"#new-Date-getMinutes\" class=\"headerlink\" title=\"new Date().getMinutes()\"></a>new Date().getMinutes()</h3><blockquote>\n<p>获取当前分钟数</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getMinutes();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time);</div><div class=\"line\"><span class=\"comment\">//29</span></div></pre></td></tr></table></figure>\n<h3 id=\"new-Date-getSeconds\"><a href=\"#new-Date-getSeconds\" class=\"headerlink\" title=\"new Date().getSeconds()\"></a>new Date().getSeconds()</h3><blockquote>\n<p>获取当前秒数</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getSeconds();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time);</div><div class=\"line\"><span class=\"comment\">//16</span></div></pre></td></tr></table></figure>\n<h3 id=\"new-Date-getMilliseconds\"><a href=\"#new-Date-getMilliseconds\" class=\"headerlink\" title=\"new Date().getMilliseconds()\"></a>new Date().getMilliseconds()</h3><blockquote>\n<p>获取当前毫秒数</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getMilliseconds();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time);</div><div class=\"line\"><span class=\"comment\">//168</span></div></pre></td></tr></table></figure>\n<h3 id=\"new-Date-toLocaleDateString\"><a href=\"#new-Date-toLocaleDateString\" class=\"headerlink\" title=\"new Date().toLocaleDateString()\"></a>new Date().toLocaleDateString()</h3><blockquote>\n<p>获取当前日期年月日—–格式0000-0-00</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toLocaleDateString();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time);</div><div class=\"line\"><span class=\"comment\">//2017-6-28</span></div></pre></td></tr></table></figure>\n<h3 id=\"new-Date-toLocaleTimeString\"><a href=\"#new-Date-toLocaleTimeString\" class=\"headerlink\" title=\"new Date().toLocaleTimeString()\"></a>new Date().toLocaleTimeString()</h3><blockquote>\n<p>获取当前时间—00：00：00</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toLocaleTimeString();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time);</div><div class=\"line\"><span class=\"comment\">//\"10:02:12\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"new-Date-toLocaleString\"><a href=\"#new-Date-toLocaleString\" class=\"headerlink\" title=\"new Date().toLocaleString()\"></a>new Date().toLocaleString()</h3><blockquote>\n<p>获取当前日期年月日时分秒—–格式0000-0-00 00：00：00</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toLocaleString();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time);</div><div class=\"line\"><span class=\"comment\">//2017-6-28 18:32:51</span></div></pre></td></tr></table></figure>\n<h3 id=\"获取时间戳\"><a href=\"#获取时间戳\" class=\"headerlink\" title=\"获取时间戳\"></a>获取时间戳</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\"><span class=\"comment\">//第一种方法</span></div><div class=\"line\">time.valueOf();</div><div class=\"line\"><span class=\"comment\">//1498646194237</span></div><div class=\"line\"><span class=\"comment\">//第二种方法</span></div><div class=\"line\">time.getTime();</div><div class=\"line\"><span class=\"comment\">//1498646194237</span></div></pre></td></tr></table></figure>\n<h3 id=\"字符串转日期对象\"><a href=\"#字符串转日期对象\" class=\"headerlink\" title=\"字符串转日期对象\"></a>字符串转日期对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'2017-06-28'</span>;</div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.parse(str.replace(<span class=\"regexp\">/-/g</span>,  <span class=\"string\">\"/\"</span>)));</div><div class=\"line\"><span class=\"comment\">//Mon Jun 26 2017 00:00:00 GMT+0800 (CST)</span></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2009</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"comment\">//Sun Feb 01 2009 00:00:00 GMT+0800 (CST)</span></div><div class=\"line\"><span class=\"comment\">//星期天，二月，一日，2009</span></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">\"2009/1/1\"</span>);</div><div class=\"line\"><span class=\"comment\">//Thu Jan 01 2009 00:00:00 GMT+0800 (CST)</span></div><div class=\"line\"><span class=\"comment\">//星期四，一月</span></div></pre></td></tr></table></figure>\n<h2 id=\"时间demo\"><a href=\"#时间demo\" class=\"headerlink\" title=\"时间demo\"></a>时间demo</h2><h3 id=\"当前系统区域设置格式-toLocaleDateString和toLocaleTimeString\"><a href=\"#当前系统区域设置格式-toLocaleDateString和toLocaleTimeString\" class=\"headerlink\" title=\"当前系统区域设置格式(toLocaleDateString和toLocaleTimeString)\"></a>当前系统区域设置格式(toLocaleDateString和toLocaleTimeString)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//例如</span></div><div class=\"line\">(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).toLocaleDateString() + <span class=\"string\">\" \"</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).toLocaleTimeString();</div><div class=\"line\"><span class=\"comment\">//\"2017-6-29 10:05:56\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"普通字符串-toDateString和toTimeString\"><a href=\"#普通字符串-toDateString和toTimeString\" class=\"headerlink\" title=\"普通字符串(toDateString和toTimeString)\"></a>普通字符串(toDateString和toTimeString)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//例如</span></div><div class=\"line\"> (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).toDateString() + <span class=\"string\">\" \"</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).toTimeString();</div><div class=\"line\"><span class=\"comment\">//\"Thu Jun 29 2017 10:06:49 GMT+0800 (CST)\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"格林威治标准时间-toGMTString\"><a href=\"#格林威治标准时间-toGMTString\" class=\"headerlink\" title=\"格林威治标准时间(toGMTString)\"></a>格林威治标准时间(toGMTString)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).toGMTString();</div><div class=\"line\"><span class=\"comment\">//\"Thu, 29 Jun 2017 02:07:41 GMT\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"全球标准时间-toUTCString\"><a href=\"#全球标准时间-toUTCString\" class=\"headerlink\" title=\"全球标准时间(toUTCString)\"></a>全球标准时间(toUTCString)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).toUTCString();</div><div class=\"line\"><span class=\"comment\">//\"Thu, 29 Jun 2017 02:08:57 GMT\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"Date对象字符串-toString\"><a href=\"#Date对象字符串-toString\" class=\"headerlink\" title=\"Date对象字符串(toString)\"></a>Date对象字符串(toString)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).toString();</div><div class=\"line\"><span class=\"comment\">//\"Thu Jun 29 2017 10:09:40 GMT+0800 (CST)\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"好用的方法\"><a href=\"#好用的方法\" class=\"headerlink\" title=\"好用的方法\"></a>好用的方法</h2><h3 id=\"时间戳转换时间格式\"><a href=\"#时间戳转换时间格式\" class=\"headerlink\" title=\"时间戳转换时间格式\"></a>时间戳转换时间格式</h3><blockquote>\n<p>时间格式2017-6-29 10:16</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().valueOf();</div><div class=\"line\"><span class=\"comment\">//1498702568422</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLocalTime</span>(<span class=\"params\">nS</span>) </span>&#123;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(nS) * <span class=\"number\">1000</span>,<span class=\"string\">'parseInt(nS) * 1000'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log((<span class=\"built_in\">parseInt</span>(nS) * <span class=\"number\">1000</span>).toLocaleString(),<span class=\"string\">'parseInt(nS) * 1000.toLocaleString()'</span>)</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">parseInt</span>(nS) * <span class=\"number\">1000</span>).toLocaleString().replace(<span class=\"regexp\">/:\\d&#123;1,2&#125;$/</span>,<span class=\"string\">' '</span>);  </div><div class=\"line\">&#125;</div><div class=\"line\">getLocalTime(time/<span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"comment\">//\"2017-6-29 10:16 \"</span></div></pre></td></tr></table></figure>\n<h3 id=\"时间方法\"><a href=\"#时间方法\" class=\"headerlink\" title=\"时间方法\"></a>时间方法</h3>","site":{"data":{}},"excerpt":"<h1 id=\"数组方法\"><a href=\"#数组方法\" class=\"headerlink\" title=\"数组方法\"></a>数组方法</h1><h2 id=\"数组排序\"><a href=\"#数组排序\" class=\"headerlink\" title=\"数组排序\"></a>数组排序</h2><h3 id=\"从小到大\"><a href=\"#从小到大\" class=\"headerlink\" title=\"从小到大\"></a>从小到大</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">11</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</div><div class=\"line\">arr.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span> a-b);</div><div class=\"line\"><span class=\"comment\">//[1, 2, 3, 4, 4, 5, 5, 6, 7, 8, 11]</span></div></pre></td></tr></table></figure>\n<h3 id=\"从大到小\"><a href=\"#从大到小\" class=\"headerlink\" title=\"从大到小\"></a>从大到小</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">11</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</div><div class=\"line\">arr.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span> b-a);</div><div class=\"line\"><span class=\"comment\">//[11, 8, 7, 6, 5, 5, 4, 4, 3, 2, 1]</span></div></pre></td></tr></table></figure>","more":"<h1 id=\"时间函数\"><a href=\"#时间函数\" class=\"headerlink\" title=\"时间函数\"></a>时间函数</h1><h2 id=\"时间格式\"><a href=\"#时间格式\" class=\"headerlink\" title=\"时间格式\"></a>时间格式</h2><h3 id=\"Date参数\"><a href=\"#Date参数\" class=\"headerlink\" title=\"Date参数\"></a>Date参数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//实例   Wed Jun 28 2017 17:33:36 GMT+0800 (CST)</span></div><div class=\"line\"><span class=\"comment\">//星期一 MON //星期二 TUE //星期三 WED //星期四 THU //星期五 FRI //星期六 SAT //星期天 SUN</span></div><div class=\"line\"><span class=\"comment\">//一月 Jan//二月 Feb//三月 Mar//四月 Apr//五月 May</span></div><div class=\"line\"><span class=\"comment\">//六月 June//七月 July//八月 Aug//九月 Sept//十月 Oct//十一月 Nov//十二月 Dec</span></div><div class=\"line\"><span class=\"comment\">//第一个参数代表星期几，是英语星期几的简写</span></div><div class=\"line\"><span class=\"comment\">//第二个参数代表几月份，是英语几月份的简写</span></div><div class=\"line\"><span class=\"comment\">//也就是说上面的案例代表着：星期三，六月，28日，2017年，17点，33分，36秒，</span></div><div class=\"line\"><span class=\"comment\">//GMT+0800代表着格林尼治所在地的标准时间。这个+0800指的是北京时间距离标准时间差8个小时</span></div><div class=\"line\"><span class=\"comment\">//CST CST可视为美国，澳大利亚，古巴或中国的标准时间。</span></div></pre></td></tr></table></figure>\n<h3 id=\"new-Date\"><a href=\"#new-Date\" class=\"headerlink\" title=\"new Date\"></a>new Date</h3><blockquote>\n<p>  不接收任何参数：返回当前时间；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time)</div><div class=\"line\"><span class=\"comment\">//Wed Jun 28 2017 17:33:36 GMT+0800 (CST)</span></div></pre></td></tr></table></figure>\n<h3 id=\"new-Date-x\"><a href=\"#new-Date-x\" class=\"headerlink\" title=\"new Date(x)\"></a>new Date(x)</h3><blockquote>\n<p>  接收一个参数x: 返回1970年1月1日 + x毫秒的值。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time);</div><div class=\"line\"><span class=\"comment\">//Thu Jan 01 1970 08:00:00 GMT+0800 (CST)</span></div></pre></td></tr></table></figure>\n<h3 id=\"new-Date-getFullYear\"><a href=\"#new-Date-getFullYear\" class=\"headerlink\" title=\"new Date().getFullYear()\"></a>new Date().getFullYear()</h3><blockquote>\n<p>  获取当前年份；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time);</div><div class=\"line\"><span class=\"comment\">//2017</span></div></pre></td></tr></table></figure>\n<h3 id=\"new-Date-getMonth\"><a href=\"#new-Date-getMonth\" class=\"headerlink\" title=\"new Date().getMonth()\"></a>new Date().getMonth()</h3><blockquote>\n<p>获取当前月份,从0开始</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getMonth();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time);</div><div class=\"line\"><span class=\"comment\">//5</span></div></pre></td></tr></table></figure>\n<h3 id=\"new-Date-getDate\"><a href=\"#new-Date-getDate\" class=\"headerlink\" title=\"new Date().getDate()\"></a>new Date().getDate()</h3><blockquote>\n<p>获取当前日期</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getDate();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time)</div><div class=\"line\"><span class=\"comment\">//28</span></div></pre></td></tr></table></figure>\n<h3 id=\"new-Date-getDay\"><a href=\"#new-Date-getDay\" class=\"headerlink\" title=\"new Date().getDay()\"></a>new Date().getDay()</h3><blockquote>\n<p>返回当前是星期几</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getDay();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time)</div><div class=\"line\"><span class=\"comment\">//3</span></div></pre></td></tr></table></figure>\n<h3 id=\"new-Date-getTime\"><a href=\"#new-Date-getTime\" class=\"headerlink\" title=\"new Date().getTime()\"></a>new Date().getTime()</h3><blockquote>\n<p>获取从1970.1.1开始的毫秒数（时间戳）</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time);</div><div class=\"line\"><span class=\"comment\">//1498645675319</span></div></pre></td></tr></table></figure>\n<h3 id=\"new-Date-getHours\"><a href=\"#new-Date-getHours\" class=\"headerlink\" title=\"new Date().getHours()\"></a>new Date().getHours()</h3><blockquote>\n<p>获取当前小时数（24小时制）</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getHours();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time);</div><div class=\"line\"><span class=\"comment\">//18</span></div></pre></td></tr></table></figure>\n<h3 id=\"new-Date-getMinutes\"><a href=\"#new-Date-getMinutes\" class=\"headerlink\" title=\"new Date().getMinutes()\"></a>new Date().getMinutes()</h3><blockquote>\n<p>获取当前分钟数</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getMinutes();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time);</div><div class=\"line\"><span class=\"comment\">//29</span></div></pre></td></tr></table></figure>\n<h3 id=\"new-Date-getSeconds\"><a href=\"#new-Date-getSeconds\" class=\"headerlink\" title=\"new Date().getSeconds()\"></a>new Date().getSeconds()</h3><blockquote>\n<p>获取当前秒数</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getSeconds();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time);</div><div class=\"line\"><span class=\"comment\">//16</span></div></pre></td></tr></table></figure>\n<h3 id=\"new-Date-getMilliseconds\"><a href=\"#new-Date-getMilliseconds\" class=\"headerlink\" title=\"new Date().getMilliseconds()\"></a>new Date().getMilliseconds()</h3><blockquote>\n<p>获取当前毫秒数</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getMilliseconds();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time);</div><div class=\"line\"><span class=\"comment\">//168</span></div></pre></td></tr></table></figure>\n<h3 id=\"new-Date-toLocaleDateString\"><a href=\"#new-Date-toLocaleDateString\" class=\"headerlink\" title=\"new Date().toLocaleDateString()\"></a>new Date().toLocaleDateString()</h3><blockquote>\n<p>获取当前日期年月日—–格式0000-0-00</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toLocaleDateString();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time);</div><div class=\"line\"><span class=\"comment\">//2017-6-28</span></div></pre></td></tr></table></figure>\n<h3 id=\"new-Date-toLocaleTimeString\"><a href=\"#new-Date-toLocaleTimeString\" class=\"headerlink\" title=\"new Date().toLocaleTimeString()\"></a>new Date().toLocaleTimeString()</h3><blockquote>\n<p>获取当前时间—00：00：00</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toLocaleTimeString();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time);</div><div class=\"line\"><span class=\"comment\">//\"10:02:12\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"new-Date-toLocaleString\"><a href=\"#new-Date-toLocaleString\" class=\"headerlink\" title=\"new Date().toLocaleString()\"></a>new Date().toLocaleString()</h3><blockquote>\n<p>获取当前日期年月日时分秒—–格式0000-0-00 00：00：00</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toLocaleString();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(time);</div><div class=\"line\"><span class=\"comment\">//2017-6-28 18:32:51</span></div></pre></td></tr></table></figure>\n<h3 id=\"获取时间戳\"><a href=\"#获取时间戳\" class=\"headerlink\" title=\"获取时间戳\"></a>获取时间戳</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\"><span class=\"comment\">//第一种方法</span></div><div class=\"line\">time.valueOf();</div><div class=\"line\"><span class=\"comment\">//1498646194237</span></div><div class=\"line\"><span class=\"comment\">//第二种方法</span></div><div class=\"line\">time.getTime();</div><div class=\"line\"><span class=\"comment\">//1498646194237</span></div></pre></td></tr></table></figure>\n<h3 id=\"字符串转日期对象\"><a href=\"#字符串转日期对象\" class=\"headerlink\" title=\"字符串转日期对象\"></a>字符串转日期对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'2017-06-28'</span>;</div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.parse(str.replace(<span class=\"regexp\">/-/g</span>,  <span class=\"string\">\"/\"</span>)));</div><div class=\"line\"><span class=\"comment\">//Mon Jun 26 2017 00:00:00 GMT+0800 (CST)</span></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2009</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"comment\">//Sun Feb 01 2009 00:00:00 GMT+0800 (CST)</span></div><div class=\"line\"><span class=\"comment\">//星期天，二月，一日，2009</span></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">\"2009/1/1\"</span>);</div><div class=\"line\"><span class=\"comment\">//Thu Jan 01 2009 00:00:00 GMT+0800 (CST)</span></div><div class=\"line\"><span class=\"comment\">//星期四，一月</span></div></pre></td></tr></table></figure>\n<h2 id=\"时间demo\"><a href=\"#时间demo\" class=\"headerlink\" title=\"时间demo\"></a>时间demo</h2><h3 id=\"当前系统区域设置格式-toLocaleDateString和toLocaleTimeString\"><a href=\"#当前系统区域设置格式-toLocaleDateString和toLocaleTimeString\" class=\"headerlink\" title=\"当前系统区域设置格式(toLocaleDateString和toLocaleTimeString)\"></a>当前系统区域设置格式(toLocaleDateString和toLocaleTimeString)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//例如</span></div><div class=\"line\">(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).toLocaleDateString() + <span class=\"string\">\" \"</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).toLocaleTimeString();</div><div class=\"line\"><span class=\"comment\">//\"2017-6-29 10:05:56\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"普通字符串-toDateString和toTimeString\"><a href=\"#普通字符串-toDateString和toTimeString\" class=\"headerlink\" title=\"普通字符串(toDateString和toTimeString)\"></a>普通字符串(toDateString和toTimeString)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//例如</span></div><div class=\"line\"> (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).toDateString() + <span class=\"string\">\" \"</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).toTimeString();</div><div class=\"line\"><span class=\"comment\">//\"Thu Jun 29 2017 10:06:49 GMT+0800 (CST)\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"格林威治标准时间-toGMTString\"><a href=\"#格林威治标准时间-toGMTString\" class=\"headerlink\" title=\"格林威治标准时间(toGMTString)\"></a>格林威治标准时间(toGMTString)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).toGMTString();</div><div class=\"line\"><span class=\"comment\">//\"Thu, 29 Jun 2017 02:07:41 GMT\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"全球标准时间-toUTCString\"><a href=\"#全球标准时间-toUTCString\" class=\"headerlink\" title=\"全球标准时间(toUTCString)\"></a>全球标准时间(toUTCString)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).toUTCString();</div><div class=\"line\"><span class=\"comment\">//\"Thu, 29 Jun 2017 02:08:57 GMT\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"Date对象字符串-toString\"><a href=\"#Date对象字符串-toString\" class=\"headerlink\" title=\"Date对象字符串(toString)\"></a>Date对象字符串(toString)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).toString();</div><div class=\"line\"><span class=\"comment\">//\"Thu Jun 29 2017 10:09:40 GMT+0800 (CST)\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"好用的方法\"><a href=\"#好用的方法\" class=\"headerlink\" title=\"好用的方法\"></a>好用的方法</h2><h3 id=\"时间戳转换时间格式\"><a href=\"#时间戳转换时间格式\" class=\"headerlink\" title=\"时间戳转换时间格式\"></a>时间戳转换时间格式</h3><blockquote>\n<p>时间格式2017-6-29 10:16</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().valueOf();</div><div class=\"line\"><span class=\"comment\">//1498702568422</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLocalTime</span>(<span class=\"params\">nS</span>) </span>&#123;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(nS) * <span class=\"number\">1000</span>,<span class=\"string\">'parseInt(nS) * 1000'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log((<span class=\"built_in\">parseInt</span>(nS) * <span class=\"number\">1000</span>).toLocaleString(),<span class=\"string\">'parseInt(nS) * 1000.toLocaleString()'</span>)</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">parseInt</span>(nS) * <span class=\"number\">1000</span>).toLocaleString().replace(<span class=\"regexp\">/:\\d&#123;1,2&#125;$/</span>,<span class=\"string\">' '</span>);  </div><div class=\"line\">&#125;</div><div class=\"line\">getLocalTime(time/<span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"comment\">//\"2017-6-29 10:16 \"</span></div></pre></td></tr></table></figure>\n<h3 id=\"时间方法\"><a href=\"#时间方法\" class=\"headerlink\" title=\"时间方法\"></a>时间方法</h3>"},{"title":"有意思的js循环","date":"2017-07-04T03:54:09.000Z","_content":"# 循环菱形***\n有意思的各种log圣兽\n<!--more-->\n~~~js\nfunction Printfile() {\n    var num = prompt(\"请输入菱形的边长(单击确定之后会看到以*为单位长度组成的菱形)\");\n    for (var i = 1; i <= num; i++) //决定输出的行数\n    {\n        for (var j = 1; j <= num - i; j++) //决定每一行开头的空格数\n        {\n            document.write(\"&nbsp\");\n        }\n        for (var k = 1; k <= 2 * i - 1; k++) //决定每一行的*数\n        {\n            document.write(\"*\");\n        }\n        document.write(\"</br>\");\n    }\n    \n    for (var i = 1; i <= num - 1; i++) //决定输出的行数\n    {\n        for (var j = 1; j <= i; j++) //决定每一行开头的空格数\n        {\n            document.write(\"&nbsp\");\n        }\n        for (var k = 1; k <= 2 * num - 1 - 2 * i; k++) //决定每一行的*数\n        {\n            document.write(\"*\");\n        }\n        document.write(\"</br>\");\n    }\n}\nPrintfile();\n    *\n   ***\n  *****\n *******\n*********\n *******\n  *****\n   ***\n    *\n~~~\n# 佛祖保佑，代码无BUG\n~~~js\n*\n *----------Dragon be here!----------/\n * 　　 ┏┓　    ┏┓\n * 　　┏┛┻━━━━━━┛┻┓\n * 　　┃ 　　　　  ┃\n * 　　┃　　 ━     ┃\n * 　　┃　┳┛　┗┳　 ┃\n * 　　┃　　　　　 ┃\n * 　　┃　　┻     ┃\n * 　　┃         ┃\n * 　　┗━┓　　　┏━┛\n * 　　　　┃　　　┃神兽保佑\n * 　　　　┃　　　┃代码无BUG！\n * 　　　　┃　　　┗━━━┓\n * 　　　　┃　　　　　 ┣┓\n * 　　　　┃　　　　　┏┛\n * 　　　　┗┓┓┏━┳┓┏┛\n * 　　　　　┃┫┫　┃┫┫\n * 　　　　　┗┻┛　┗┻┛\n * ━━━━━━神兽出没━━━━━━\n \n\n\n\n                   _ooOoo_\n                  o8888888o\n                  88\" . \"88\n                  (| -_- |)\n                  O\\  =  /O\n               ____/`---'\\____\n             .'  \\\\|     |//  `.\n            /  \\\\|||  :  |||//  \\\n           /  _||||| -:- |||||-  \\\n           |   | \\\\\\  -  /// |   |\n           | \\_|  ''\\---/''  |   |\n           \\  .-\\__  `-`  ___/-. /\n         ___`. .'  /--.--\\  `. . __\n      .\"\" '<  `.___\\_<|>_/___.'  >'\"\".\n     | | :  ` - `.;`\\ _ /`;.`/ - ` : | |\n     \\  \\ `-.   \\_ __\\ /__ _/   .-` /  /\n======`-.____`-.___\\_____/___.-`____.-'======\n                   `=---='\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            佛祖保佑       永无BUG\n~~~\n# 空菱形\n~~~js\nvar blank = 4;\nfor (i = 1; i <= 17; i++) {\n    if (i % 2 != 0) {\n        for (j = 1; j <= Math.abs(blank); j++) {\n            document.write(\"_\");\n        }\n        blank--;\n        document.write(\"*\");\n        if (i != 1 && i != 17) {\n            if (i <= 9) {\n                for (k = 1; k <= i - 2; k++) {\n                    document.write(\"_\");\n                }\n            } else {\n                for (k = 1; k <= 16 - i; k++) {\n                    document.write(\"_\");\n                }\n            }\n            document.write(\"*\")\n        }\n    } else {\n        document.write(\"<br />\");\n    }\n}\n\n\n    *\n   * *\n  *   *\n *     *\n*       *\n *     *\n  *   *\n   * *\n    *\n~~~\n","source":"_posts/有意思的js循环.md","raw":"---\ntitle: 有意思的js循环\ndate: 2017-07-04 11:54:09\ntags: javascript\n---\n# 循环菱形***\n有意思的各种log圣兽\n<!--more-->\n~~~js\nfunction Printfile() {\n    var num = prompt(\"请输入菱形的边长(单击确定之后会看到以*为单位长度组成的菱形)\");\n    for (var i = 1; i <= num; i++) //决定输出的行数\n    {\n        for (var j = 1; j <= num - i; j++) //决定每一行开头的空格数\n        {\n            document.write(\"&nbsp\");\n        }\n        for (var k = 1; k <= 2 * i - 1; k++) //决定每一行的*数\n        {\n            document.write(\"*\");\n        }\n        document.write(\"</br>\");\n    }\n    \n    for (var i = 1; i <= num - 1; i++) //决定输出的行数\n    {\n        for (var j = 1; j <= i; j++) //决定每一行开头的空格数\n        {\n            document.write(\"&nbsp\");\n        }\n        for (var k = 1; k <= 2 * num - 1 - 2 * i; k++) //决定每一行的*数\n        {\n            document.write(\"*\");\n        }\n        document.write(\"</br>\");\n    }\n}\nPrintfile();\n    *\n   ***\n  *****\n *******\n*********\n *******\n  *****\n   ***\n    *\n~~~\n# 佛祖保佑，代码无BUG\n~~~js\n*\n *----------Dragon be here!----------/\n * 　　 ┏┓　    ┏┓\n * 　　┏┛┻━━━━━━┛┻┓\n * 　　┃ 　　　　  ┃\n * 　　┃　　 ━     ┃\n * 　　┃　┳┛　┗┳　 ┃\n * 　　┃　　　　　 ┃\n * 　　┃　　┻     ┃\n * 　　┃         ┃\n * 　　┗━┓　　　┏━┛\n * 　　　　┃　　　┃神兽保佑\n * 　　　　┃　　　┃代码无BUG！\n * 　　　　┃　　　┗━━━┓\n * 　　　　┃　　　　　 ┣┓\n * 　　　　┃　　　　　┏┛\n * 　　　　┗┓┓┏━┳┓┏┛\n * 　　　　　┃┫┫　┃┫┫\n * 　　　　　┗┻┛　┗┻┛\n * ━━━━━━神兽出没━━━━━━\n \n\n\n\n                   _ooOoo_\n                  o8888888o\n                  88\" . \"88\n                  (| -_- |)\n                  O\\  =  /O\n               ____/`---'\\____\n             .'  \\\\|     |//  `.\n            /  \\\\|||  :  |||//  \\\n           /  _||||| -:- |||||-  \\\n           |   | \\\\\\  -  /// |   |\n           | \\_|  ''\\---/''  |   |\n           \\  .-\\__  `-`  ___/-. /\n         ___`. .'  /--.--\\  `. . __\n      .\"\" '<  `.___\\_<|>_/___.'  >'\"\".\n     | | :  ` - `.;`\\ _ /`;.`/ - ` : | |\n     \\  \\ `-.   \\_ __\\ /__ _/   .-` /  /\n======`-.____`-.___\\_____/___.-`____.-'======\n                   `=---='\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            佛祖保佑       永无BUG\n~~~\n# 空菱形\n~~~js\nvar blank = 4;\nfor (i = 1; i <= 17; i++) {\n    if (i % 2 != 0) {\n        for (j = 1; j <= Math.abs(blank); j++) {\n            document.write(\"_\");\n        }\n        blank--;\n        document.write(\"*\");\n        if (i != 1 && i != 17) {\n            if (i <= 9) {\n                for (k = 1; k <= i - 2; k++) {\n                    document.write(\"_\");\n                }\n            } else {\n                for (k = 1; k <= 16 - i; k++) {\n                    document.write(\"_\");\n                }\n            }\n            document.write(\"*\")\n        }\n    } else {\n        document.write(\"<br />\");\n    }\n}\n\n\n    *\n   * *\n  *   *\n *     *\n*       *\n *     *\n  *   *\n   * *\n    *\n~~~\n","slug":"有意思的js循环","published":1,"updated":"2017-07-04T06:02:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfnkq6v0016lyfyu5z94w8e","content":"<h1 id=\"循环菱形\"><a href=\"#循环菱形\" class=\"headerlink\" title=\"循环菱形*\"></a>循环菱形<em>*</em></h1><p>有意思的各种log圣兽<br><a id=\"more\"></a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Printfile</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> num = prompt(<span class=\"string\">\"请输入菱形的边长(单击确定之后会看到以*为单位长度组成的菱形)\"</span>);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= num; i++) <span class=\"comment\">//决定输出的行数</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt;= num - i; j++) <span class=\"comment\">//决定每一行开头的空格数</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&amp;nbsp\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = <span class=\"number\">1</span>; k &lt;= <span class=\"number\">2</span> * i - <span class=\"number\">1</span>; k++) <span class=\"comment\">//决定每一行的*数</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">document</span>.write(<span class=\"string\">\"*\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;/br&gt;\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= num - <span class=\"number\">1</span>; i++) <span class=\"comment\">//决定输出的行数</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt;= i; j++) <span class=\"comment\">//决定每一行开头的空格数</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&amp;nbsp\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = <span class=\"number\">1</span>; k &lt;= <span class=\"number\">2</span> * num - <span class=\"number\">1</span> - <span class=\"number\">2</span> * i; k++) <span class=\"comment\">//决定每一行的*数</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">document</span>.write(<span class=\"string\">\"*\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;/br&gt;\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Printfile();</div><div class=\"line\">    *</div><div class=\"line\">   ***</div><div class=\"line\">  *****</div><div class=\"line\"> *******</div><div class=\"line\">*********</div><div class=\"line\"> *******</div><div class=\"line\">  *****</div><div class=\"line\">   ***</div><div class=\"line\">    *</div></pre></td></tr></table></figure></p>\n<h1 id=\"佛祖保佑，代码无BUG\"><a href=\"#佛祖保佑，代码无BUG\" class=\"headerlink\" title=\"佛祖保佑，代码无BUG\"></a>佛祖保佑，代码无BUG</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">*</div><div class=\"line\"> *----------Dragon be here!----------/</div><div class=\"line\"> * 　　 ┏┓　    ┏┓</div><div class=\"line\"> * 　　┏┛┻━━━━━━┛┻┓</div><div class=\"line\"> * 　　┃ 　　　　  ┃</div><div class=\"line\"> * 　　┃　　 ━     ┃</div><div class=\"line\"> * 　　┃　┳┛　┗┳　 ┃</div><div class=\"line\"> * 　　┃　　　　　 ┃</div><div class=\"line\"> * 　　┃　　┻     ┃</div><div class=\"line\"> * 　　┃         ┃</div><div class=\"line\"> * 　　┗━┓　　　┏━┛</div><div class=\"line\"> * 　　　　┃　　　┃神兽保佑</div><div class=\"line\"> * 　　　　┃　　　┃代码无BUG！</div><div class=\"line\"> * 　　　　┃　　　┗━━━┓</div><div class=\"line\"> * 　　　　┃　　　　　 ┣┓</div><div class=\"line\"> * 　　　　┃　　　　　┏┛</div><div class=\"line\"> * 　　　　┗┓┓┏━┳┓┏┛</div><div class=\"line\"> * 　　　　　┃┫┫　┃┫┫</div><div class=\"line\"> * 　　　　　┗┻┛　┗┻┛</div><div class=\"line\"> * ━━━━━━神兽出没━━━━━━</div><div class=\"line\"> </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">                   _ooOoo_</div><div class=\"line\">                  o8888888o</div><div class=\"line\">                  88\" . \"88</div><div class=\"line\">                  (| -_- |)</div><div class=\"line\">                  O\\  =  /O</div><div class=\"line\">               ____/`---'\\____</div><div class=\"line\">             .'  \\\\|     |//  `.</div><div class=\"line\">            /  \\\\|||  :  |||//  \\</div><div class=\"line\">           /  _||||| -:- |||||-  \\</div><div class=\"line\">           |   | \\\\\\  -  /// |   |</div><div class=\"line\">           | \\_|  ''\\---/''  |   |</div><div class=\"line\">           \\  .-\\__  `-`  ___/-. /</div><div class=\"line\">         ___`. .'  /--.--\\  `. . __</div><div class=\"line\">      .\"\" '&lt;  `.___\\_&lt;|&gt;_/___.'  &gt;'\"\".</div><div class=\"line\">     | | :  ` - `.;`\\ _ /`;.`/ - ` : | |</div><div class=\"line\">     \\  \\ `-.   \\_ __\\ /__ _/   .-` /  /</div><div class=\"line\">======`-.____`-.___\\_____/___.-`____.-'======</div><div class=\"line\">                   `=---='</div><div class=\"line\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</div><div class=\"line\">            佛祖保佑       永无BUG</div></pre></td></tr></table></figure>\n<h1 id=\"空菱形\"><a href=\"#空菱形\" class=\"headerlink\" title=\"空菱形\"></a>空菱形</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> blank = <span class=\"number\">4</span>;</div><div class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">17</span>; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">1</span>; j &lt;= <span class=\"built_in\">Math</span>.abs(blank); j++) &#123;</div><div class=\"line\">            <span class=\"built_in\">document</span>.write(<span class=\"string\">\"_\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        blank--;</div><div class=\"line\">        <span class=\"built_in\">document</span>.write(<span class=\"string\">\"*\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (i != <span class=\"number\">1</span> &amp;&amp; i != <span class=\"number\">17</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (i &lt;= <span class=\"number\">9</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">for</span> (k = <span class=\"number\">1</span>; k &lt;= i - <span class=\"number\">2</span>; k++) &#123;</div><div class=\"line\">                    <span class=\"built_in\">document</span>.write(<span class=\"string\">\"_\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">for</span> (k = <span class=\"number\">1</span>; k &lt;= <span class=\"number\">16</span> - i; k++) &#123;</div><div class=\"line\">                    <span class=\"built_in\">document</span>.write(<span class=\"string\">\"_\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"built_in\">document</span>.write(<span class=\"string\">\"*\"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;br /&gt;\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    *</div><div class=\"line\">   * *</div><div class=\"line\">  *   *</div><div class=\"line\"> *     *</div><div class=\"line\">*       *</div><div class=\"line\"> *     *</div><div class=\"line\">  *   *</div><div class=\"line\">   * *</div><div class=\"line\">    *</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"循环菱形\"><a href=\"#循环菱形\" class=\"headerlink\" title=\"循环菱形*\"></a>循环菱形<em>*</em></h1><p>有意思的各种log圣兽<br>","more":"<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Printfile</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> num = prompt(<span class=\"string\">\"请输入菱形的边长(单击确定之后会看到以*为单位长度组成的菱形)\"</span>);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= num; i++) <span class=\"comment\">//决定输出的行数</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt;= num - i; j++) <span class=\"comment\">//决定每一行开头的空格数</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&amp;nbsp\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = <span class=\"number\">1</span>; k &lt;= <span class=\"number\">2</span> * i - <span class=\"number\">1</span>; k++) <span class=\"comment\">//决定每一行的*数</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">document</span>.write(<span class=\"string\">\"*\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;/br&gt;\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= num - <span class=\"number\">1</span>; i++) <span class=\"comment\">//决定输出的行数</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt;= i; j++) <span class=\"comment\">//决定每一行开头的空格数</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&amp;nbsp\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = <span class=\"number\">1</span>; k &lt;= <span class=\"number\">2</span> * num - <span class=\"number\">1</span> - <span class=\"number\">2</span> * i; k++) <span class=\"comment\">//决定每一行的*数</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">document</span>.write(<span class=\"string\">\"*\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;/br&gt;\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Printfile();</div><div class=\"line\">    *</div><div class=\"line\">   ***</div><div class=\"line\">  *****</div><div class=\"line\"> *******</div><div class=\"line\">*********</div><div class=\"line\"> *******</div><div class=\"line\">  *****</div><div class=\"line\">   ***</div><div class=\"line\">    *</div></pre></td></tr></table></figure></p>\n<h1 id=\"佛祖保佑，代码无BUG\"><a href=\"#佛祖保佑，代码无BUG\" class=\"headerlink\" title=\"佛祖保佑，代码无BUG\"></a>佛祖保佑，代码无BUG</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">*</div><div class=\"line\"> *----------Dragon be here!----------/</div><div class=\"line\"> * 　　 ┏┓　    ┏┓</div><div class=\"line\"> * 　　┏┛┻━━━━━━┛┻┓</div><div class=\"line\"> * 　　┃ 　　　　  ┃</div><div class=\"line\"> * 　　┃　　 ━     ┃</div><div class=\"line\"> * 　　┃　┳┛　┗┳　 ┃</div><div class=\"line\"> * 　　┃　　　　　 ┃</div><div class=\"line\"> * 　　┃　　┻     ┃</div><div class=\"line\"> * 　　┃         ┃</div><div class=\"line\"> * 　　┗━┓　　　┏━┛</div><div class=\"line\"> * 　　　　┃　　　┃神兽保佑</div><div class=\"line\"> * 　　　　┃　　　┃代码无BUG！</div><div class=\"line\"> * 　　　　┃　　　┗━━━┓</div><div class=\"line\"> * 　　　　┃　　　　　 ┣┓</div><div class=\"line\"> * 　　　　┃　　　　　┏┛</div><div class=\"line\"> * 　　　　┗┓┓┏━┳┓┏┛</div><div class=\"line\"> * 　　　　　┃┫┫　┃┫┫</div><div class=\"line\"> * 　　　　　┗┻┛　┗┻┛</div><div class=\"line\"> * ━━━━━━神兽出没━━━━━━</div><div class=\"line\"> </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">                   _ooOoo_</div><div class=\"line\">                  o8888888o</div><div class=\"line\">                  88\" . \"88</div><div class=\"line\">                  (| -_- |)</div><div class=\"line\">                  O\\  =  /O</div><div class=\"line\">               ____/`---'\\____</div><div class=\"line\">             .'  \\\\|     |//  `.</div><div class=\"line\">            /  \\\\|||  :  |||//  \\</div><div class=\"line\">           /  _||||| -:- |||||-  \\</div><div class=\"line\">           |   | \\\\\\  -  /// |   |</div><div class=\"line\">           | \\_|  ''\\---/''  |   |</div><div class=\"line\">           \\  .-\\__  `-`  ___/-. /</div><div class=\"line\">         ___`. .'  /--.--\\  `. . __</div><div class=\"line\">      .\"\" '&lt;  `.___\\_&lt;|&gt;_/___.'  &gt;'\"\".</div><div class=\"line\">     | | :  ` - `.;`\\ _ /`;.`/ - ` : | |</div><div class=\"line\">     \\  \\ `-.   \\_ __\\ /__ _/   .-` /  /</div><div class=\"line\">======`-.____`-.___\\_____/___.-`____.-'======</div><div class=\"line\">                   `=---='</div><div class=\"line\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</div><div class=\"line\">            佛祖保佑       永无BUG</div></pre></td></tr></table></figure>\n<h1 id=\"空菱形\"><a href=\"#空菱形\" class=\"headerlink\" title=\"空菱形\"></a>空菱形</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> blank = <span class=\"number\">4</span>;</div><div class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">17</span>; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">1</span>; j &lt;= <span class=\"built_in\">Math</span>.abs(blank); j++) &#123;</div><div class=\"line\">            <span class=\"built_in\">document</span>.write(<span class=\"string\">\"_\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        blank--;</div><div class=\"line\">        <span class=\"built_in\">document</span>.write(<span class=\"string\">\"*\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (i != <span class=\"number\">1</span> &amp;&amp; i != <span class=\"number\">17</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (i &lt;= <span class=\"number\">9</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">for</span> (k = <span class=\"number\">1</span>; k &lt;= i - <span class=\"number\">2</span>; k++) &#123;</div><div class=\"line\">                    <span class=\"built_in\">document</span>.write(<span class=\"string\">\"_\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">for</span> (k = <span class=\"number\">1</span>; k &lt;= <span class=\"number\">16</span> - i; k++) &#123;</div><div class=\"line\">                    <span class=\"built_in\">document</span>.write(<span class=\"string\">\"_\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"built_in\">document</span>.write(<span class=\"string\">\"*\"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;br /&gt;\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    *</div><div class=\"line\">   * *</div><div class=\"line\">  *   *</div><div class=\"line\"> *     *</div><div class=\"line\">*       *</div><div class=\"line\"> *     *</div><div class=\"line\">  *   *</div><div class=\"line\">   * *</div><div class=\"line\">    *</div></pre></td></tr></table></figure>"},{"title":"文本滚动","date":"2017-07-25T05:57:30.000Z","_content":"文本滚动包括从上到下／从左到右／等\n<!--more-->\n~~~html\n<!DOCTYPE>\n<html>\n\n<head>\n    <title>向上下左右不间断无缝滚动效果(兼容火狐和IE)</title>\n    <meta charset=\"utf-8\">\n</head>\n\n<body>\n    <div id=\"colee\" style=\"overflow:hidden;height:253px;width:410px;\">\n        <div id=\"colee1\">\n            <p>此处放文字。。。。。。。。。1</p>\n            <p>此处放文字。。。。。。。。。2</p>\n            <p>此处放文字。。。。。。。。。3</p>\n            <p>此处放文字。。。。。。。。。4</p>\n            <p>此处放文字。。。。。。。。。5</p>\n            <p>此处放文字。。。。。。。。。6</p>\n            <p>此处放文字。。。。。。。。。7</p>\n            <p>此处放文字。。。。。。。。。8</p>\n            <p>此处放文字。。。。。。。。。9</p>\n            <p>此处放文字。。。。。。。。。0</p>\n            <p>此处放文字。。。。。。。。。11</p>\n            <p>此处放文字。。。。。。。。。12</p>\n        </div>\n        <div id=\"colee2\"></div>\n    </div>\n\n    <script>\n    var speed = 30;\n    var colee2 = document.getElementById(\"colee2\");\n    var colee1 = document.getElementById(\"colee1\");\n    var colee = document.getElementById(\"colee\");\n    colee2.innerHTML = colee1.innerHTML; //克隆colee1为colee2\n    function Marquee1() {\n        //当滚动至colee1与colee2交界时\n        if (colee2.offsetTop - colee.scrollTop <= 0) {\n            colee.scrollTop -= colee1.offsetHeight; //colee跳到最顶端\n        } else {\n            colee.scrollTop++\n        }\n    }\n    var MyMar1 = setInterval(Marquee1, speed) //设置定时器\n    //鼠标移上时清除定时器达到滚动停止的目的\n    colee.onmouseover = function() { clearInterval(MyMar1) }\n    //鼠标移开时重设定时器\n    colee.onmouseout = function() { MyMar1 = setInterval(Marquee1, speed) }\n    </script>\n    <!--向上滚动代码结束-->\n    <!--下面是向下滚动代码-->\n    <div id=\"colee_bottom\" style=\"overflow:hidden;height:253px;width:410px;\">\n        <div id=\"colee_bottom1\">\n            <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n            <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n            <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n            <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n            <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n            <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n            <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n            <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n            <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n        </div>\n        <div id=\"colee_bottom2\"></div>\n    </div>\n    <script>\n    var speed = 30\n    var colee_bottom2 = document.getElementById(\"colee_bottom2\");\n    var colee_bottom1 = document.getElementById(\"colee_bottom1\");\n    var colee_bottom = document.getElementById(\"colee_bottom\");\n    colee_bottom2.innerHTML = colee_bottom1.innerHTML\n    colee_bottom.scrollTop = colee_bottom.scrollHeight\n\n    function Marquee2() {\n        if (colee_bottom1.offsetTop - colee_bottom.scrollTop >= 0)\n            colee_bottom.scrollTop += colee_bottom2.offsetHeight\n        else {\n            colee_bottom.scrollTop--\n        }\n    }\n    var MyMar2 = setInterval(Marquee2, speed)\n    colee_bottom.onmouseover = function() { clearInterval(MyMar2) }\n    colee_bottom.onmouseout = function() { MyMar2 = setInterval(Marquee2, speed) }\n    </script>\n    <!--向下滚动代码结束-->\n    <!--下面是向左滚动代码-->\n    <div id=\"colee_left\" style=\"overflow:hidden;width:500px;\">\n        <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n            <tr>\n                <td id=\"colee_left1\" valign=\"top\" align=\"center\">\n                    <table cellpadding=\"2\" cellspacing=\"0\" border=\"0\">\n                        <tr align=\"center\">\n                            <td>\n                                <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n                            </td>\n                            <td>\n                                <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n                            </td>\n                            <td>\n                                <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n                            </td>\n                            <td>\n                                <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n                            </td>\n                            <td>\n                                <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n                            </td>\n                            <td>\n                                <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n                            </td>\n                            <td>\n                                <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n                            </td>\n                        </tr>\n                    </table>\n                </td>\n                <td id=\"colee_left2\" valign=\"top\"></td>\n            </tr>\n        </table>\n    </div>\n    <script>\n    //使用div时，请保证colee_left2与colee_left1是在同一行上.\n    var speed = 30 //速度数值越大速度越慢\n    var colee_left2 = document.getElementById(\"colee_left2\");\n    var colee_left1 = document.getElementById(\"colee_left1\");\n    var colee_left = document.getElementById(\"colee_left\");\n    colee_left2.innerHTML = colee_left1.innerHTML\n\n    function Marquee3() {\n        if (colee_left2.offsetWidth - colee_left.scrollLeft <= 0) //offsetWidth 是对象的可见宽度\n            colee_left.scrollLeft -= colee_left1.offsetWidth //scrollWidth 是对象的实际内容的宽，不包边线宽度\n        else {\n            colee_left.scrollLeft++\n        }\n    }\n    var MyMar3 = setInterval(Marquee3, speed)\n    colee_left.onmouseover = function() { clearInterval(MyMar3) }\n    colee_left.onmouseout = function() { MyMar3 = setInterval(Marquee3, speed) }\n    </script>\n    <!--向左滚动代码结束-->\n    <!--下面是向右滚动代码-->\n    <div id=\"colee_right\" style=\"overflow:hidden;width:500px;\">\n        <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n            <tr>\n                <td id=\"colee_right1\" valign=\"top\" align=\"center\">\n                    <table cellpadding=\"2\" cellspacing=\"0\" border=\"0\">\n                        <tr align=\"center\">\n                            <td>\n                                <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n                            </td>\n                            <td>\n                                <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n                            </td>\n                            <td>\n                                <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n                            </td>\n                            <td>\n                                <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n                            </td>\n                            <td>\n                                <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n                            </td>\n                        </tr>\n                    </table>\n                </td>\n                <td id=\"colee_right2\" valign=\"top\"></td>\n            </tr>\n        </table>\n    </div>\n    <script>\n    var speed = 30 //速度数值越大速度越慢\n    var colee_right2 = document.getElementById(\"colee_right2\");\n    var colee_right1 = document.getElementById(\"colee_right1\");\n    var colee_right = document.getElementById(\"colee_right\");\n    colee_right2.innerHTML = colee_right1.innerHTML\n\n    function Marquee4() {\n        if (colee_right.scrollLeft <= 0)\n            colee_right.scrollLeft += colee_right2.offsetWidth\n        else {\n            colee_right.scrollLeft--\n        }\n    }\n    var MyMar4 = setInterval(Marquee4, speed)\n    colee_right.onmouseover = function() { clearInterval(MyMar4) }\n    colee_right.onmouseout = function() { MyMar4 = setInterval(Marquee4, speed) }\n    </script>\n    <!--向右滚动代码结束-->\n</body>\n\n</html>\n~~~","source":"_posts/文本滚动-20170725.md","raw":"---\ntitle: 文本滚动\ndate: 2017-07-25 13:57:30\ntags: demo\n---\n文本滚动包括从上到下／从左到右／等\n<!--more-->\n~~~html\n<!DOCTYPE>\n<html>\n\n<head>\n    <title>向上下左右不间断无缝滚动效果(兼容火狐和IE)</title>\n    <meta charset=\"utf-8\">\n</head>\n\n<body>\n    <div id=\"colee\" style=\"overflow:hidden;height:253px;width:410px;\">\n        <div id=\"colee1\">\n            <p>此处放文字。。。。。。。。。1</p>\n            <p>此处放文字。。。。。。。。。2</p>\n            <p>此处放文字。。。。。。。。。3</p>\n            <p>此处放文字。。。。。。。。。4</p>\n            <p>此处放文字。。。。。。。。。5</p>\n            <p>此处放文字。。。。。。。。。6</p>\n            <p>此处放文字。。。。。。。。。7</p>\n            <p>此处放文字。。。。。。。。。8</p>\n            <p>此处放文字。。。。。。。。。9</p>\n            <p>此处放文字。。。。。。。。。0</p>\n            <p>此处放文字。。。。。。。。。11</p>\n            <p>此处放文字。。。。。。。。。12</p>\n        </div>\n        <div id=\"colee2\"></div>\n    </div>\n\n    <script>\n    var speed = 30;\n    var colee2 = document.getElementById(\"colee2\");\n    var colee1 = document.getElementById(\"colee1\");\n    var colee = document.getElementById(\"colee\");\n    colee2.innerHTML = colee1.innerHTML; //克隆colee1为colee2\n    function Marquee1() {\n        //当滚动至colee1与colee2交界时\n        if (colee2.offsetTop - colee.scrollTop <= 0) {\n            colee.scrollTop -= colee1.offsetHeight; //colee跳到最顶端\n        } else {\n            colee.scrollTop++\n        }\n    }\n    var MyMar1 = setInterval(Marquee1, speed) //设置定时器\n    //鼠标移上时清除定时器达到滚动停止的目的\n    colee.onmouseover = function() { clearInterval(MyMar1) }\n    //鼠标移开时重设定时器\n    colee.onmouseout = function() { MyMar1 = setInterval(Marquee1, speed) }\n    </script>\n    <!--向上滚动代码结束-->\n    <!--下面是向下滚动代码-->\n    <div id=\"colee_bottom\" style=\"overflow:hidden;height:253px;width:410px;\">\n        <div id=\"colee_bottom1\">\n            <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n            <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n            <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n            <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n            <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n            <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n            <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n            <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n            <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n        </div>\n        <div id=\"colee_bottom2\"></div>\n    </div>\n    <script>\n    var speed = 30\n    var colee_bottom2 = document.getElementById(\"colee_bottom2\");\n    var colee_bottom1 = document.getElementById(\"colee_bottom1\");\n    var colee_bottom = document.getElementById(\"colee_bottom\");\n    colee_bottom2.innerHTML = colee_bottom1.innerHTML\n    colee_bottom.scrollTop = colee_bottom.scrollHeight\n\n    function Marquee2() {\n        if (colee_bottom1.offsetTop - colee_bottom.scrollTop >= 0)\n            colee_bottom.scrollTop += colee_bottom2.offsetHeight\n        else {\n            colee_bottom.scrollTop--\n        }\n    }\n    var MyMar2 = setInterval(Marquee2, speed)\n    colee_bottom.onmouseover = function() { clearInterval(MyMar2) }\n    colee_bottom.onmouseout = function() { MyMar2 = setInterval(Marquee2, speed) }\n    </script>\n    <!--向下滚动代码结束-->\n    <!--下面是向左滚动代码-->\n    <div id=\"colee_left\" style=\"overflow:hidden;width:500px;\">\n        <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n            <tr>\n                <td id=\"colee_left1\" valign=\"top\" align=\"center\">\n                    <table cellpadding=\"2\" cellspacing=\"0\" border=\"0\">\n                        <tr align=\"center\">\n                            <td>\n                                <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n                            </td>\n                            <td>\n                                <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n                            </td>\n                            <td>\n                                <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n                            </td>\n                            <td>\n                                <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n                            </td>\n                            <td>\n                                <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n                            </td>\n                            <td>\n                                <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n                            </td>\n                            <td>\n                                <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n                            </td>\n                        </tr>\n                    </table>\n                </td>\n                <td id=\"colee_left2\" valign=\"top\"></td>\n            </tr>\n        </table>\n    </div>\n    <script>\n    //使用div时，请保证colee_left2与colee_left1是在同一行上.\n    var speed = 30 //速度数值越大速度越慢\n    var colee_left2 = document.getElementById(\"colee_left2\");\n    var colee_left1 = document.getElementById(\"colee_left1\");\n    var colee_left = document.getElementById(\"colee_left\");\n    colee_left2.innerHTML = colee_left1.innerHTML\n\n    function Marquee3() {\n        if (colee_left2.offsetWidth - colee_left.scrollLeft <= 0) //offsetWidth 是对象的可见宽度\n            colee_left.scrollLeft -= colee_left1.offsetWidth //scrollWidth 是对象的实际内容的宽，不包边线宽度\n        else {\n            colee_left.scrollLeft++\n        }\n    }\n    var MyMar3 = setInterval(Marquee3, speed)\n    colee_left.onmouseover = function() { clearInterval(MyMar3) }\n    colee_left.onmouseout = function() { MyMar3 = setInterval(Marquee3, speed) }\n    </script>\n    <!--向左滚动代码结束-->\n    <!--下面是向右滚动代码-->\n    <div id=\"colee_right\" style=\"overflow:hidden;width:500px;\">\n        <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n            <tr>\n                <td id=\"colee_right1\" valign=\"top\" align=\"center\">\n                    <table cellpadding=\"2\" cellspacing=\"0\" border=\"0\">\n                        <tr align=\"center\">\n                            <td>\n                                <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n                            </td>\n                            <td>\n                                <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n                            </td>\n                            <td>\n                                <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n                            </td>\n                            <td>\n                                <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n                            </td>\n                            <td>\n                                <p><img src=\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=12ae79a24d842721d9a2e3969a24c1f8\"></p>\n                            </td>\n                        </tr>\n                    </table>\n                </td>\n                <td id=\"colee_right2\" valign=\"top\"></td>\n            </tr>\n        </table>\n    </div>\n    <script>\n    var speed = 30 //速度数值越大速度越慢\n    var colee_right2 = document.getElementById(\"colee_right2\");\n    var colee_right1 = document.getElementById(\"colee_right1\");\n    var colee_right = document.getElementById(\"colee_right\");\n    colee_right2.innerHTML = colee_right1.innerHTML\n\n    function Marquee4() {\n        if (colee_right.scrollLeft <= 0)\n            colee_right.scrollLeft += colee_right2.offsetWidth\n        else {\n            colee_right.scrollLeft--\n        }\n    }\n    var MyMar4 = setInterval(Marquee4, speed)\n    colee_right.onmouseover = function() { clearInterval(MyMar4) }\n    colee_right.onmouseout = function() { MyMar4 = setInterval(Marquee4, speed) }\n    </script>\n    <!--向右滚动代码结束-->\n</body>\n\n</html>\n~~~","slug":"文本滚动-20170725","published":1,"updated":"2017-07-25T06:00:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfnkq6x0017lyfysefw2zqa","content":"<p>文本滚动包括从上到下／从左到右／等<br><a id=\"more\"></a><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>向上下左右不间断无缝滚动效果(兼容火狐和IE)<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colee\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"overflow:hidden;height:253px;width:410px;\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colee1\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>此处放文字。。。。。。。。。1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>此处放文字。。。。。。。。。2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>此处放文字。。。。。。。。。3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>此处放文字。。。。。。。。。4<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>此处放文字。。。。。。。。。5<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>此处放文字。。。。。。。。。6<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>此处放文字。。。。。。。。。7<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>此处放文字。。。。。。。。。8<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>此处放文字。。。。。。。。。9<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>此处放文字。。。。。。。。。0<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>此处放文字。。。。。。。。。11<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>此处放文字。。。。。。。。。12<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colee2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"keyword\">var</span> speed = <span class=\"number\">30</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> colee2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"colee2\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> colee1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"colee1\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> colee = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"colee\"</span>);</div><div class=\"line\">    colee2.innerHTML = colee1.innerHTML; <span class=\"comment\">//克隆colee1为colee2</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Marquee1</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//当滚动至colee1与colee2交界时</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (colee2.offsetTop - colee.scrollTop &lt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            colee.scrollTop -= colee1.offsetHeight; <span class=\"comment\">//colee跳到最顶端</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            colee.scrollTop++</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> MyMar1 = setInterval(Marquee1, speed) <span class=\"comment\">//设置定时器</span></div><div class=\"line\">    <span class=\"comment\">//鼠标移上时清除定时器达到滚动停止的目的</span></div><div class=\"line\">    colee.onmouseover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; clearInterval(MyMar1) &#125;</div><div class=\"line\">    <span class=\"comment\">//鼠标移开时重设定时器</span></div><div class=\"line\">    colee.onmouseout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; MyMar1 = setInterval(Marquee1, speed) &#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--向上滚动代码结束--&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--下面是向下滚动代码--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colee_bottom\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"overflow:hidden;height:253px;width:410px;\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colee_bottom1\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colee_bottom2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"keyword\">var</span> speed = <span class=\"number\">30</span></div><div class=\"line\">    <span class=\"keyword\">var</span> colee_bottom2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"colee_bottom2\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> colee_bottom1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"colee_bottom1\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> colee_bottom = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"colee_bottom\"</span>);</div><div class=\"line\">    colee_bottom2.innerHTML = colee_bottom1.innerHTML</div><div class=\"line\">    colee_bottom.scrollTop = colee_bottom.scrollHeight</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Marquee2</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (colee_bottom1.offsetTop - colee_bottom.scrollTop &gt;= <span class=\"number\">0</span>)</div><div class=\"line\">            colee_bottom.scrollTop += colee_bottom2.offsetHeight</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            colee_bottom.scrollTop--</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> MyMar2 = setInterval(Marquee2, speed)</div><div class=\"line\">    colee_bottom.onmouseover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; clearInterval(MyMar2) &#125;</div><div class=\"line\">    colee_bottom.onmouseout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; MyMar2 = setInterval(Marquee2, speed) &#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--向下滚动代码结束--&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--下面是向左滚动代码--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colee_left\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"overflow:hidden;width:500px;\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">cellpadding</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">cellspacing</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colee_left1\"</span> <span class=\"attr\">valign</span>=<span class=\"string\">\"top\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"center\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">cellpadding</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">cellspacing</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">align</span>=<span class=\"string\">\"center\"</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colee_left2\"</span> <span class=\"attr\">valign</span>=<span class=\"string\">\"top\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"comment\">//使用div时，请保证colee_left2与colee_left1是在同一行上.</span></div><div class=\"line\">    <span class=\"keyword\">var</span> speed = <span class=\"number\">30</span> <span class=\"comment\">//速度数值越大速度越慢</span></div><div class=\"line\">    <span class=\"keyword\">var</span> colee_left2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"colee_left2\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> colee_left1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"colee_left1\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> colee_left = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"colee_left\"</span>);</div><div class=\"line\">    colee_left2.innerHTML = colee_left1.innerHTML</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Marquee3</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (colee_left2.offsetWidth - colee_left.scrollLeft &lt;= <span class=\"number\">0</span>) <span class=\"comment\">//offsetWidth 是对象的可见宽度</span></div><div class=\"line\">            colee_left.scrollLeft -= colee_left1.offsetWidth <span class=\"comment\">//scrollWidth 是对象的实际内容的宽，不包边线宽度</span></div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            colee_left.scrollLeft++</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> MyMar3 = setInterval(Marquee3, speed)</div><div class=\"line\">    colee_left.onmouseover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; clearInterval(MyMar3) &#125;</div><div class=\"line\">    colee_left.onmouseout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; MyMar3 = setInterval(Marquee3, speed) &#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--向左滚动代码结束--&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--下面是向右滚动代码--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colee_right\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"overflow:hidden;width:500px;\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">cellpadding</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">cellspacing</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colee_right1\"</span> <span class=\"attr\">valign</span>=<span class=\"string\">\"top\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"center\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">cellpadding</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">cellspacing</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">align</span>=<span class=\"string\">\"center\"</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colee_right2\"</span> <span class=\"attr\">valign</span>=<span class=\"string\">\"top\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"keyword\">var</span> speed = <span class=\"number\">30</span> <span class=\"comment\">//速度数值越大速度越慢</span></div><div class=\"line\">    <span class=\"keyword\">var</span> colee_right2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"colee_right2\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> colee_right1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"colee_right1\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> colee_right = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"colee_right\"</span>);</div><div class=\"line\">    colee_right2.innerHTML = colee_right1.innerHTML</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Marquee4</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (colee_right.scrollLeft &lt;= <span class=\"number\">0</span>)</div><div class=\"line\">            colee_right.scrollLeft += colee_right2.offsetWidth</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            colee_right.scrollLeft--</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> MyMar4 = setInterval(Marquee4, speed)</div><div class=\"line\">    colee_right.onmouseover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; clearInterval(MyMar4) &#125;</div><div class=\"line\">    colee_right.onmouseout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; MyMar4 = setInterval(Marquee4, speed) &#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--向右滚动代码结束--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>文本滚动包括从上到下／从左到右／等<br>","more":"<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>向上下左右不间断无缝滚动效果(兼容火狐和IE)<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colee\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"overflow:hidden;height:253px;width:410px;\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colee1\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>此处放文字。。。。。。。。。1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>此处放文字。。。。。。。。。2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>此处放文字。。。。。。。。。3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>此处放文字。。。。。。。。。4<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>此处放文字。。。。。。。。。5<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>此处放文字。。。。。。。。。6<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>此处放文字。。。。。。。。。7<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>此处放文字。。。。。。。。。8<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>此处放文字。。。。。。。。。9<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>此处放文字。。。。。。。。。0<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>此处放文字。。。。。。。。。11<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>此处放文字。。。。。。。。。12<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colee2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"keyword\">var</span> speed = <span class=\"number\">30</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> colee2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"colee2\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> colee1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"colee1\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> colee = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"colee\"</span>);</div><div class=\"line\">    colee2.innerHTML = colee1.innerHTML; <span class=\"comment\">//克隆colee1为colee2</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Marquee1</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//当滚动至colee1与colee2交界时</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (colee2.offsetTop - colee.scrollTop &lt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            colee.scrollTop -= colee1.offsetHeight; <span class=\"comment\">//colee跳到最顶端</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            colee.scrollTop++</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> MyMar1 = setInterval(Marquee1, speed) <span class=\"comment\">//设置定时器</span></div><div class=\"line\">    <span class=\"comment\">//鼠标移上时清除定时器达到滚动停止的目的</span></div><div class=\"line\">    colee.onmouseover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; clearInterval(MyMar1) &#125;</div><div class=\"line\">    <span class=\"comment\">//鼠标移开时重设定时器</span></div><div class=\"line\">    colee.onmouseout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; MyMar1 = setInterval(Marquee1, speed) &#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--向上滚动代码结束--&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--下面是向下滚动代码--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colee_bottom\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"overflow:hidden;height:253px;width:410px;\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colee_bottom1\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colee_bottom2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"keyword\">var</span> speed = <span class=\"number\">30</span></div><div class=\"line\">    <span class=\"keyword\">var</span> colee_bottom2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"colee_bottom2\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> colee_bottom1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"colee_bottom1\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> colee_bottom = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"colee_bottom\"</span>);</div><div class=\"line\">    colee_bottom2.innerHTML = colee_bottom1.innerHTML</div><div class=\"line\">    colee_bottom.scrollTop = colee_bottom.scrollHeight</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Marquee2</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (colee_bottom1.offsetTop - colee_bottom.scrollTop &gt;= <span class=\"number\">0</span>)</div><div class=\"line\">            colee_bottom.scrollTop += colee_bottom2.offsetHeight</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            colee_bottom.scrollTop--</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> MyMar2 = setInterval(Marquee2, speed)</div><div class=\"line\">    colee_bottom.onmouseover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; clearInterval(MyMar2) &#125;</div><div class=\"line\">    colee_bottom.onmouseout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; MyMar2 = setInterval(Marquee2, speed) &#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--向下滚动代码结束--&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--下面是向左滚动代码--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colee_left\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"overflow:hidden;width:500px;\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">cellpadding</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">cellspacing</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colee_left1\"</span> <span class=\"attr\">valign</span>=<span class=\"string\">\"top\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"center\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">cellpadding</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">cellspacing</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">align</span>=<span class=\"string\">\"center\"</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colee_left2\"</span> <span class=\"attr\">valign</span>=<span class=\"string\">\"top\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"comment\">//使用div时，请保证colee_left2与colee_left1是在同一行上.</span></div><div class=\"line\">    <span class=\"keyword\">var</span> speed = <span class=\"number\">30</span> <span class=\"comment\">//速度数值越大速度越慢</span></div><div class=\"line\">    <span class=\"keyword\">var</span> colee_left2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"colee_left2\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> colee_left1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"colee_left1\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> colee_left = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"colee_left\"</span>);</div><div class=\"line\">    colee_left2.innerHTML = colee_left1.innerHTML</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Marquee3</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (colee_left2.offsetWidth - colee_left.scrollLeft &lt;= <span class=\"number\">0</span>) <span class=\"comment\">//offsetWidth 是对象的可见宽度</span></div><div class=\"line\">            colee_left.scrollLeft -= colee_left1.offsetWidth <span class=\"comment\">//scrollWidth 是对象的实际内容的宽，不包边线宽度</span></div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            colee_left.scrollLeft++</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> MyMar3 = setInterval(Marquee3, speed)</div><div class=\"line\">    colee_left.onmouseover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; clearInterval(MyMar3) &#125;</div><div class=\"line\">    colee_left.onmouseout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; MyMar3 = setInterval(Marquee3, speed) &#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--向左滚动代码结束--&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--下面是向右滚动代码--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colee_right\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"overflow:hidden;width:500px;\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">cellpadding</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">cellspacing</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colee_right1\"</span> <span class=\"attr\">valign</span>=<span class=\"string\">\"top\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"center\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">cellpadding</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">cellspacing</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">align</span>=<span class=\"string\">\"center\"</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/profile-1495388545592-e4e376925c59?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;fit=crop&amp;h=64&amp;w=64&amp;s=12ae79a24d842721d9a2e3969a24c1f8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colee_right2\"</span> <span class=\"attr\">valign</span>=<span class=\"string\">\"top\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"keyword\">var</span> speed = <span class=\"number\">30</span> <span class=\"comment\">//速度数值越大速度越慢</span></div><div class=\"line\">    <span class=\"keyword\">var</span> colee_right2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"colee_right2\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> colee_right1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"colee_right1\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> colee_right = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"colee_right\"</span>);</div><div class=\"line\">    colee_right2.innerHTML = colee_right1.innerHTML</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Marquee4</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (colee_right.scrollLeft &lt;= <span class=\"number\">0</span>)</div><div class=\"line\">            colee_right.scrollLeft += colee_right2.offsetWidth</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            colee_right.scrollLeft--</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> MyMar4 = setInterval(Marquee4, speed)</div><div class=\"line\">    colee_right.onmouseover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; clearInterval(MyMar4) &#125;</div><div class=\"line\">    colee_right.onmouseout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; MyMar4 = setInterval(Marquee4, speed) &#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--向右滚动代码结束--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>"},{"layout":"post","title":"AngularJs - $digest vs $apply","tip-number":1,"tip-username":"loverajoel","tip-username-profile":"https://github.com/loverajoel","tip-tldr":"JavaScript模块和构建步骤越来越复杂和多样化，但是新框架里的样板是什么样子的呢？","tip-writer-support":"https://www.coinbase.com/loverajoel","redirect_from":["/zh_cn/angularjs-digest-vs-apply/"],"_content":"\nAngularJs最令人欣赏的特性之一就是双向数据绑定。AngularJs通过循环(`$digest`)检查model和view的变化实现此功能。想要理解框架底层的运行机制你需要理解这个概念。\n\n当一个事件被触发时，Angular触发每个watcher. 这是我们已知的`$digest`循环。有时你需要强制手动运行一个新的循环，而且因为这是最影响性能的一方面，你必须选择一个正确的选项。\n\n### `$apply`\n这个核心方法可以让你显式启动`digest`循环。这意味着所有的watcher将会被检测；整个应用启动`$digest loop`。在内部在会执行一个可选的方法之后，会调用`$rootScope.$digest();`.\n\n### `$digest`\n这种情况下`$digest`方法在当前作用域和它的子作用域启动`$digest`循环。你需要注意他的父作用域将不会被检测也不会被影响。\n\n### 推荐\n- 仅当浏览器DOM事件在AngularJS之外被触发时使用`$apply`或`$digest`。\n- 给`$apply`传递方法，它将包含错误处理机制而且允许整合在`digest`循环里的变化。\n\n```javascript\n$scope.$apply(() => {\n\t$scope.tip = 'Javascript Tip';\n});\n```\n\n- 如果你只需要更新当前的作用域或者它的子作用域的话，使用`$digest`，而且要防止在整个应用里运行新的`digest`循环。这在性能上的好处是显而易见的。\n- `$apply()`对机器来说是一个困难的处理过程，在绑定过多的时候可能会引发性能问题。\n- 如果你正使用`>AngularJS 1.2.X`版本，使用`$evalAsync`, 这个方法将在当前循环或下一个循环执行表达式，这能提高你的应用的性能。\n","source":"_posts/angular/2016-01-01-angularjs-digest-vs-apply.md","raw":"---\nlayout: post\n\ntitle: AngularJs - $digest vs $apply\ntip-number: 01\ntip-username: loverajoel \ntip-username-profile: https://github.com/loverajoel\ntip-tldr: JavaScript模块和构建步骤越来越复杂和多样化，但是新框架里的样板是什么样子的呢？\ntip-writer-support: https://www.coinbase.com/loverajoel\n\nredirect_from:\n  - /zh_cn/angularjs-digest-vs-apply/\n\ncategories:\n    - zh_CN\n    - angular\n---\n\nAngularJs最令人欣赏的特性之一就是双向数据绑定。AngularJs通过循环(`$digest`)检查model和view的变化实现此功能。想要理解框架底层的运行机制你需要理解这个概念。\n\n当一个事件被触发时，Angular触发每个watcher. 这是我们已知的`$digest`循环。有时你需要强制手动运行一个新的循环，而且因为这是最影响性能的一方面，你必须选择一个正确的选项。\n\n### `$apply`\n这个核心方法可以让你显式启动`digest`循环。这意味着所有的watcher将会被检测；整个应用启动`$digest loop`。在内部在会执行一个可选的方法之后，会调用`$rootScope.$digest();`.\n\n### `$digest`\n这种情况下`$digest`方法在当前作用域和它的子作用域启动`$digest`循环。你需要注意他的父作用域将不会被检测也不会被影响。\n\n### 推荐\n- 仅当浏览器DOM事件在AngularJS之外被触发时使用`$apply`或`$digest`。\n- 给`$apply`传递方法，它将包含错误处理机制而且允许整合在`digest`循环里的变化。\n\n```javascript\n$scope.$apply(() => {\n\t$scope.tip = 'Javascript Tip';\n});\n```\n\n- 如果你只需要更新当前的作用域或者它的子作用域的话，使用`$digest`，而且要防止在整个应用里运行新的`digest`循环。这在性能上的好处是显而易见的。\n- `$apply()`对机器来说是一个困难的处理过程，在绑定过多的时候可能会引发性能问题。\n- 如果你正使用`>AngularJS 1.2.X`版本，使用`$evalAsync`, 这个方法将在当前循环或下一个循环执行表达式，这能提高你的应用的性能。\n","slug":"angular/2016-01-01-angularjs-digest-vs-apply","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqc00021lyfy3vzyo035","content":"<p>AngularJs最令人欣赏的特性之一就是双向数据绑定。AngularJs通过循环(<code>$digest</code>)检查model和view的变化实现此功能。想要理解框架底层的运行机制你需要理解这个概念。</p>\n<p>当一个事件被触发时，Angular触发每个watcher. 这是我们已知的<code>$digest</code>循环。有时你需要强制手动运行一个新的循环，而且因为这是最影响性能的一方面，你必须选择一个正确的选项。</p>\n<h3 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"$apply\"></a><code>$apply</code></h3><p>这个核心方法可以让你显式启动<code>digest</code>循环。这意味着所有的watcher将会被检测；整个应用启动<code>$digest loop</code>。在内部在会执行一个可选的方法之后，会调用<code>$rootScope.$digest();</code>.</p>\n<h3 id=\"digest\"><a href=\"#digest\" class=\"headerlink\" title=\"$digest\"></a><code>$digest</code></h3><p>这种情况下<code>$digest</code>方法在当前作用域和它的子作用域启动<code>$digest</code>循环。你需要注意他的父作用域将不会被检测也不会被影响。</p>\n<h3 id=\"推荐\"><a href=\"#推荐\" class=\"headerlink\" title=\"推荐\"></a>推荐</h3><ul>\n<li>仅当浏览器DOM事件在AngularJS之外被触发时使用<code>$apply</code>或<code>$digest</code>。</li>\n<li>给<code>$apply</code>传递方法，它将包含错误处理机制而且允许整合在<code>digest</code>循环里的变化。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$scope.$apply(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">\t$scope.tip = <span class=\"string\">'Javascript Tip'</span>;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ul>\n<li>如果你只需要更新当前的作用域或者它的子作用域的话，使用<code>$digest</code>，而且要防止在整个应用里运行新的<code>digest</code>循环。这在性能上的好处是显而易见的。</li>\n<li><code>$apply()</code>对机器来说是一个困难的处理过程，在绑定过多的时候可能会引发性能问题。</li>\n<li>如果你正使用<code>&gt;AngularJS 1.2.X</code>版本，使用<code>$evalAsync</code>, 这个方法将在当前循环或下一个循环执行表达式，这能提高你的应用的性能。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>AngularJs最令人欣赏的特性之一就是双向数据绑定。AngularJs通过循环(<code>$digest</code>)检查model和view的变化实现此功能。想要理解框架底层的运行机制你需要理解这个概念。</p>\n<p>当一个事件被触发时，Angular触发每个watcher. 这是我们已知的<code>$digest</code>循环。有时你需要强制手动运行一个新的循环，而且因为这是最影响性能的一方面，你必须选择一个正确的选项。</p>\n<h3 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"$apply\"></a><code>$apply</code></h3><p>这个核心方法可以让你显式启动<code>digest</code>循环。这意味着所有的watcher将会被检测；整个应用启动<code>$digest loop</code>。在内部在会执行一个可选的方法之后，会调用<code>$rootScope.$digest();</code>.</p>\n<h3 id=\"digest\"><a href=\"#digest\" class=\"headerlink\" title=\"$digest\"></a><code>$digest</code></h3><p>这种情况下<code>$digest</code>方法在当前作用域和它的子作用域启动<code>$digest</code>循环。你需要注意他的父作用域将不会被检测也不会被影响。</p>\n<h3 id=\"推荐\"><a href=\"#推荐\" class=\"headerlink\" title=\"推荐\"></a>推荐</h3><ul>\n<li>仅当浏览器DOM事件在AngularJS之外被触发时使用<code>$apply</code>或<code>$digest</code>。</li>\n<li>给<code>$apply</code>传递方法，它将包含错误处理机制而且允许整合在<code>digest</code>循环里的变化。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$scope.$apply(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">\t$scope.tip = <span class=\"string\">'Javascript Tip'</span>;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ul>\n<li>如果你只需要更新当前的作用域或者它的子作用域的话，使用<code>$digest</code>，而且要防止在整个应用里运行新的<code>digest</code>循环。这在性能上的好处是显而易见的。</li>\n<li><code>$apply()</code>对机器来说是一个困难的处理过程，在绑定过多的时候可能会引发性能问题。</li>\n<li>如果你正使用<code>&gt;AngularJS 1.2.X</code>版本，使用<code>$evalAsync</code>, 这个方法将在当前循环或下一个循环执行表达式，这能提高你的应用的性能。</li>\n</ul>\n"},{"layout":"post","title":"子容器的Key是很重要的","tip-number":2,"tip-username":"loverajoel","tip-username-profile":"https://github.com/loverajoel","tip-tldr":"key是必须传递给从数组中动态创建的所有组件的一个值。它是一个唯一且固定的id，用来识别DOM中的每个组件，也可以让我们区别它是否是同一个组件。使用key可以确保子容器是可保存而且不需要重复创建的，还可以防止奇怪的事情发生。","tip-writer-support":"https://www.coinbase.com/loverajoel","redirect_from":["/zh_cn/keys-in-children-components-are-important/"],"_content":"\n[key](https://facebook.github.io/react/docs/multiple-components.html#dynamic-children)必须传递给从数组中动态创建的所有组件的一个值。它是一个唯一且固定的id，用来识别DOM中的每个组件，也可以让我们区别它是否是同一个组件。使用key可以确保子容器是可保存而且不需要重复创建的，还可以防止奇怪的事情发生。\n\n> key跟效率不是很相关，它更与身份有关系（这间接的使效率更好）。随机的赋值或改变值将不能识别身份[Paul O’Shannessy](https://github.com/facebook/react/issues/1342#issuecomment-39230939)\n\n- 使用对象存在的的唯一值。\n- 在父组件定义key,而不是子组件。\n\n```javascript\n//bad\n...\nrender() {\n\t<div key={% raw %}{{item.key}}{% endraw %}>{% raw %}{{item.name}}{% endraw %}</div>\n}\n...\n\n//good\n<MyComponent key={% raw %}{{item.key}}{% endraw %}/>\n```\n\n- [使用数组索引是一个坏习惯](https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318#.76co046o9)\n- `random()` 不会起作用\n\n```javascript\n//bad\n<MyComponent key={% raw %}{{Math.random()}}{% endraw %}/>\n```\n\n- 你可以创建以自己的唯一id。确定这个方法运行速度够快，把它附着到你的对象上。\n- 当子组件的数量很大或者包含重量级的组件时，使用key来提高性能。\n- [你必须提供key值给ReactCSSTransitionGroup的每个子组件](http://docs.reactjs-china.com/react/docs/animation.html)","source":"_posts/react/2016-01-02-keys-in-children-components-are-important.md","raw":"---\nlayout: post\n\ntitle: 子容器的Key是很重要的\ntip-number: 02\ntip-username: loverajoel \ntip-username-profile: https://github.com/loverajoel\ntip-tldr: key是必须传递给从数组中动态创建的所有组件的一个值。它是一个唯一且固定的id，用来识别DOM中的每个组件，也可以让我们区别它是否是同一个组件。使用key可以确保子容器是可保存而且不需要重复创建的，还可以防止奇怪的事情发生。\ntip-writer-support: https://www.coinbase.com/loverajoel\n\nredirect_from:\n  - /zh_cn/keys-in-children-components-are-important/\n\ncategories:\n    - zh_CN\n    - react\n---\n\n[key](https://facebook.github.io/react/docs/multiple-components.html#dynamic-children)必须传递给从数组中动态创建的所有组件的一个值。它是一个唯一且固定的id，用来识别DOM中的每个组件，也可以让我们区别它是否是同一个组件。使用key可以确保子容器是可保存而且不需要重复创建的，还可以防止奇怪的事情发生。\n\n> key跟效率不是很相关，它更与身份有关系（这间接的使效率更好）。随机的赋值或改变值将不能识别身份[Paul O’Shannessy](https://github.com/facebook/react/issues/1342#issuecomment-39230939)\n\n- 使用对象存在的的唯一值。\n- 在父组件定义key,而不是子组件。\n\n```javascript\n//bad\n...\nrender() {\n\t<div key={% raw %}{{item.key}}{% endraw %}>{% raw %}{{item.name}}{% endraw %}</div>\n}\n...\n\n//good\n<MyComponent key={% raw %}{{item.key}}{% endraw %}/>\n```\n\n- [使用数组索引是一个坏习惯](https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318#.76co046o9)\n- `random()` 不会起作用\n\n```javascript\n//bad\n<MyComponent key={% raw %}{{Math.random()}}{% endraw %}/>\n```\n\n- 你可以创建以自己的唯一id。确定这个方法运行速度够快，把它附着到你的对象上。\n- 当子组件的数量很大或者包含重量级的组件时，使用key来提高性能。\n- [你必须提供key值给ReactCSSTransitionGroup的每个子组件](http://docs.reactjs-china.com/react/docs/animation.html)","slug":"react/2016-01-02-keys-in-children-components-are-important","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqc20022lyfy7zk1n7j3","content":"<p><a href=\"https://facebook.github.io/react/docs/multiple-components.html#dynamic-children\" target=\"_blank\" rel=\"external\">key</a>必须传递给从数组中动态创建的所有组件的一个值。它是一个唯一且固定的id，用来识别DOM中的每个组件，也可以让我们区别它是否是同一个组件。使用key可以确保子容器是可保存而且不需要重复创建的，还可以防止奇怪的事情发生。</p>\n<blockquote>\n<p>key跟效率不是很相关，它更与身份有关系（这间接的使效率更好）。随机的赋值或改变值将不能识别身份<a href=\"https://github.com/facebook/react/issues/1342#issuecomment-39230939\" target=\"_blank\" rel=\"external\">Paul O’Shannessy</a></p>\n</blockquote>\n<ul>\n<li>使用对象存在的的唯一值。</li>\n<li>在父组件定义key,而不是子组件。</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//bad</div><div class=\"line\">...</div><div class=\"line\">render() &#123;</div><div class=\"line\">\t&lt;div key=&#123;% raw %&#125;&#123;&#123;item.key&#125;&#125;&#123;% endraw %&#125;&gt;&#123;% raw %&#125;&#123;&#123;item.name&#125;&#125;&#123;% endraw %&#125;&lt;/div&gt;</div><div class=\"line\">&#125;</div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">//good</div><div class=\"line\">&lt;MyComponent key=&#123;% raw %&#125;&#123;&#123;item.key&#125;&#125;&#123;% endraw %&#125;/&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318#.76co046o9\" target=\"_blank\" rel=\"external\">使用数组索引是一个坏习惯</a></li>\n<li><code>random()</code> 不会起作用</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//bad</span></div><div class=\"line\">&lt;MyComponent key=&#123;% raw %&#125;&#123;&#123;<span class=\"built_in\">Math</span>.random()&#125;&#125;&#123;% endraw %&#125;/&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>你可以创建以自己的唯一id。确定这个方法运行速度够快，把它附着到你的对象上。</li>\n<li>当子组件的数量很大或者包含重量级的组件时，使用key来提高性能。</li>\n<li><a href=\"http://docs.reactjs-china.com/react/docs/animation.html\" target=\"_blank\" rel=\"external\">你必须提供key值给ReactCSSTransitionGroup的每个子组件</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://facebook.github.io/react/docs/multiple-components.html#dynamic-children\" target=\"_blank\" rel=\"external\">key</a>必须传递给从数组中动态创建的所有组件的一个值。它是一个唯一且固定的id，用来识别DOM中的每个组件，也可以让我们区别它是否是同一个组件。使用key可以确保子容器是可保存而且不需要重复创建的，还可以防止奇怪的事情发生。</p>\n<blockquote>\n<p>key跟效率不是很相关，它更与身份有关系（这间接的使效率更好）。随机的赋值或改变值将不能识别身份<a href=\"https://github.com/facebook/react/issues/1342#issuecomment-39230939\" target=\"_blank\" rel=\"external\">Paul O’Shannessy</a></p>\n</blockquote>\n<ul>\n<li>使用对象存在的的唯一值。</li>\n<li>在父组件定义key,而不是子组件。</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//bad</div><div class=\"line\">...</div><div class=\"line\">render() &#123;</div><div class=\"line\">\t&lt;div key=&#123;% raw %&#125;&#123;&#123;item.key&#125;&#125;&#123;% endraw %&#125;&gt;&#123;% raw %&#125;&#123;&#123;item.name&#125;&#125;&#123;% endraw %&#125;&lt;/div&gt;</div><div class=\"line\">&#125;</div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">//good</div><div class=\"line\">&lt;MyComponent key=&#123;% raw %&#125;&#123;&#123;item.key&#125;&#125;&#123;% endraw %&#125;/&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318#.76co046o9\" target=\"_blank\" rel=\"external\">使用数组索引是一个坏习惯</a></li>\n<li><code>random()</code> 不会起作用</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//bad</span></div><div class=\"line\">&lt;MyComponent key=&#123;% raw %&#125;&#123;&#123;<span class=\"built_in\">Math</span>.random()&#125;&#125;&#123;% endraw %&#125;/&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>你可以创建以自己的唯一id。确定这个方法运行速度够快，把它附着到你的对象上。</li>\n<li>当子组件的数量很大或者包含重量级的组件时，使用key来提高性能。</li>\n<li><a href=\"http://docs.reactjs-china.com/react/docs/animation.html\" target=\"_blank\" rel=\"external\">你必须提供key值给ReactCSSTransitionGroup的每个子组件</a></li>\n</ul>\n"},{"layout":"post","title":"Vuejs在資料綁定時會複製更新並替換目標元素","tip-number":71,"tip-username":"pansila","tip-username-profile":"https://github.com/pansila","tip-tldr":"在這個提示中，我會通過一個例子向您展示Vue會如何與其它軟體衝突如果你不知道這一點。","_content":"\n### 概述\n\nVuejs是一款簡單而強大的軟體傑作，類似其它流行的UI框架，Angularjs和Reactjs，但不像這兩者令人生畏的複雜性，Vue非常簡單，在從入門到放棄之前，你能很快掌握它的全部知識並投入生產。\n\n但是如果你不知道它怎麼工作的，有時候它也會難為你。這裡是一個和其它UI框架(Framework7)衝突的例子。\n\n```html\n<!-- index.html -->\n<div class=\"pages\">\n  <div class=\"page\" date-page=\"index\">\n    <!-- load a new page -->\n    <a href=\"test.html\">new page</a>\n  </div>\n</div>\n\n<!-- test.html -->\n<div class=\"pages\">\n  <div class=\"page\" date-page=\"test\" id=\"test\">\n    <div class=\"page-content\" id=\"test1\">\n    <p>{% raw %}{{content}}{% endraw %}</p>\n    </div>\n  </div>\n</div>\n```\n\n```js\nvar myApp = new Framework7();\nmyApp.onPageInit('test', function (page) {\n  new Vue({\n    el: '#test',\n    data: {\n      content: 'hello world'\n    }\n  });\n});\n```\n\n你可能會驚訝它竟然無法工作，新的page點擊後並沒有顯示出來。事實上，Vue內部會複製目標HTML元素，然後根據綁定的資料更新並替換原來的元素。當Framework7載入新的頁面時，它會調用`PageInit`回呼函數，這裡我們又調用了Vue在`<page>`元素上資料綁定，這之後DOM樹裡面包含的已經是新的`<page>`元素，但Framework7對此並不知情又接著在舊的`<page>`元素上完成剩下的初始化工作，比如最終顯示這個新的頁面，這就是根本原因。\n\n為了繞過這個問題，不要讓Vue的元素選擇器錨定在`<page>`元素上，而是定在它的子元素，這樣Vue做資料綁定時就不會影響到整個頁面顯示。\n\n```js\nvar myApp = new Framework7();\nmyApp.onPageInit('test', function (page) {\n  new Vue({\n    el: '#test1',\n    data: {\n      content: 'hello world'\n    }\n  });\n});\n```\n\n### 更多資訊\n\n- [Vue](https://github.com/Vuejs/Vue)\n- [Vue教程] (https://cn.vuejs.org/)\n- [Framework7](https://framework7.io/)","source":"_posts/more/2017-04-06-vuejs-how-vuejs-makes-a-copy-update-replace-inside-the-data-binding.md","raw":"---\nlayout: post\n\ntitle: Vuejs在資料綁定時會複製更新並替換目標元素\ntip-number: 71\ntip-username: pansila\ntip-username-profile: https://github.com/pansila\ntip-tldr: 在這個提示中，我會通過一個例子向您展示Vue會如何與其它軟體衝突如果你不知道這一點。\n\ncategories:\n    - zh_CN\n---\n\n### 概述\n\nVuejs是一款簡單而強大的軟體傑作，類似其它流行的UI框架，Angularjs和Reactjs，但不像這兩者令人生畏的複雜性，Vue非常簡單，在從入門到放棄之前，你能很快掌握它的全部知識並投入生產。\n\n但是如果你不知道它怎麼工作的，有時候它也會難為你。這裡是一個和其它UI框架(Framework7)衝突的例子。\n\n```html\n<!-- index.html -->\n<div class=\"pages\">\n  <div class=\"page\" date-page=\"index\">\n    <!-- load a new page -->\n    <a href=\"test.html\">new page</a>\n  </div>\n</div>\n\n<!-- test.html -->\n<div class=\"pages\">\n  <div class=\"page\" date-page=\"test\" id=\"test\">\n    <div class=\"page-content\" id=\"test1\">\n    <p>{% raw %}{{content}}{% endraw %}</p>\n    </div>\n  </div>\n</div>\n```\n\n```js\nvar myApp = new Framework7();\nmyApp.onPageInit('test', function (page) {\n  new Vue({\n    el: '#test',\n    data: {\n      content: 'hello world'\n    }\n  });\n});\n```\n\n你可能會驚訝它竟然無法工作，新的page點擊後並沒有顯示出來。事實上，Vue內部會複製目標HTML元素，然後根據綁定的資料更新並替換原來的元素。當Framework7載入新的頁面時，它會調用`PageInit`回呼函數，這裡我們又調用了Vue在`<page>`元素上資料綁定，這之後DOM樹裡面包含的已經是新的`<page>`元素，但Framework7對此並不知情又接著在舊的`<page>`元素上完成剩下的初始化工作，比如最終顯示這個新的頁面，這就是根本原因。\n\n為了繞過這個問題，不要讓Vue的元素選擇器錨定在`<page>`元素上，而是定在它的子元素，這樣Vue做資料綁定時就不會影響到整個頁面顯示。\n\n```js\nvar myApp = new Framework7();\nmyApp.onPageInit('test', function (page) {\n  new Vue({\n    el: '#test1',\n    data: {\n      content: 'hello world'\n    }\n  });\n});\n```\n\n### 更多資訊\n\n- [Vue](https://github.com/Vuejs/Vue)\n- [Vue教程] (https://cn.vuejs.org/)\n- [Framework7](https://framework7.io/)","slug":"more/2017-04-06-vuejs-how-vuejs-makes-a-copy-update-replace-inside-the-data-binding","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqc40024lyfyk6xg1qbq","content":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>Vuejs是一款簡單而強大的軟體傑作，類似其它流行的UI框架，Angularjs和Reactjs，但不像這兩者令人生畏的複雜性，Vue非常簡單，在從入門到放棄之前，你能很快掌握它的全部知識並投入生產。</p>\n<p>但是如果你不知道它怎麼工作的，有時候它也會難為你。這裡是一個和其它UI框架(Framework7)衝突的例子。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pages\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page\"</span> <span class=\"attr\">date-page</span>=<span class=\"string\">\"index\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- load a new page --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"test.html\"</span>&gt;</span>new page<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- test.html --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pages\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page\"</span> <span class=\"attr\">date-page</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page-content\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test1\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;% raw %&#125;&#123;&#123;content&#125;&#125;&#123;% endraw %&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myApp = <span class=\"keyword\">new</span> Framework7();</div><div class=\"line\">myApp.onPageInit(<span class=\"string\">'test'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">page</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    <span class=\"attr\">el</span>: <span class=\"string\">'#test'</span>,</div><div class=\"line\">    <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">content</span>: <span class=\"string\">'hello world'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>你可能會驚訝它竟然無法工作，新的page點擊後並沒有顯示出來。事實上，Vue內部會複製目標HTML元素，然後根據綁定的資料更新並替換原來的元素。當Framework7載入新的頁面時，它會調用<code>PageInit</code>回呼函數，這裡我們又調用了Vue在<code>&lt;page&gt;</code>元素上資料綁定，這之後DOM樹裡面包含的已經是新的<code>&lt;page&gt;</code>元素，但Framework7對此並不知情又接著在舊的<code>&lt;page&gt;</code>元素上完成剩下的初始化工作，比如最終顯示這個新的頁面，這就是根本原因。</p>\n<p>為了繞過這個問題，不要讓Vue的元素選擇器錨定在<code>&lt;page&gt;</code>元素上，而是定在它的子元素，這樣Vue做資料綁定時就不會影響到整個頁面顯示。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myApp = <span class=\"keyword\">new</span> Framework7();</div><div class=\"line\">myApp.onPageInit(<span class=\"string\">'test'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">page</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    <span class=\"attr\">el</span>: <span class=\"string\">'#test1'</span>,</div><div class=\"line\">    <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">content</span>: <span class=\"string\">'hello world'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"更多資訊\"><a href=\"#更多資訊\" class=\"headerlink\" title=\"更多資訊\"></a>更多資訊</h3><ul>\n<li><a href=\"https://github.com/Vuejs/Vue\" target=\"_blank\" rel=\"external\">Vue</a></li>\n<li>[Vue教程] (<a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"external\">https://cn.vuejs.org/</a>)</li>\n<li><a href=\"https://framework7.io/\" target=\"_blank\" rel=\"external\">Framework7</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>Vuejs是一款簡單而強大的軟體傑作，類似其它流行的UI框架，Angularjs和Reactjs，但不像這兩者令人生畏的複雜性，Vue非常簡單，在從入門到放棄之前，你能很快掌握它的全部知識並投入生產。</p>\n<p>但是如果你不知道它怎麼工作的，有時候它也會難為你。這裡是一個和其它UI框架(Framework7)衝突的例子。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pages\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page\"</span> <span class=\"attr\">date-page</span>=<span class=\"string\">\"index\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- load a new page --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"test.html\"</span>&gt;</span>new page<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- test.html --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pages\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page\"</span> <span class=\"attr\">date-page</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page-content\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test1\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;% raw %&#125;&#123;&#123;content&#125;&#125;&#123;% endraw %&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myApp = <span class=\"keyword\">new</span> Framework7();</div><div class=\"line\">myApp.onPageInit(<span class=\"string\">'test'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">page</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    <span class=\"attr\">el</span>: <span class=\"string\">'#test'</span>,</div><div class=\"line\">    <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">content</span>: <span class=\"string\">'hello world'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>你可能會驚訝它竟然無法工作，新的page點擊後並沒有顯示出來。事實上，Vue內部會複製目標HTML元素，然後根據綁定的資料更新並替換原來的元素。當Framework7載入新的頁面時，它會調用<code>PageInit</code>回呼函數，這裡我們又調用了Vue在<code>&lt;page&gt;</code>元素上資料綁定，這之後DOM樹裡面包含的已經是新的<code>&lt;page&gt;</code>元素，但Framework7對此並不知情又接著在舊的<code>&lt;page&gt;</code>元素上完成剩下的初始化工作，比如最終顯示這個新的頁面，這就是根本原因。</p>\n<p>為了繞過這個問題，不要讓Vue的元素選擇器錨定在<code>&lt;page&gt;</code>元素上，而是定在它的子元素，這樣Vue做資料綁定時就不會影響到整個頁面顯示。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myApp = <span class=\"keyword\">new</span> Framework7();</div><div class=\"line\">myApp.onPageInit(<span class=\"string\">'test'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">page</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    <span class=\"attr\">el</span>: <span class=\"string\">'#test1'</span>,</div><div class=\"line\">    <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">content</span>: <span class=\"string\">'hello world'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"更多資訊\"><a href=\"#更多資訊\" class=\"headerlink\" title=\"更多資訊\"></a>更多資訊</h3><ul>\n<li><a href=\"https://github.com/Vuejs/Vue\" target=\"_blank\" rel=\"external\">Vue</a></li>\n<li>[Vue教程] (<a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"external\">https://cn.vuejs.org/</a>)</li>\n<li><a href=\"https://framework7.io/\" target=\"_blank\" rel=\"external\">Framework7</a></li>\n</ul>\n"},{"layout":"post","title":"向数组中插入元素","tip-number":0,"tip-username":"loverajoel","tip-username-profile":"https://github.com/loverajoel","tip-tldr":"向一个数组中插入元素是平时很常见的一件事情。你可以使用push在数组尾部插入元素,可以用unshift在数组头部插入元素,也可以用splice在数组中间插入元素。","tip-writer-support":"https://www.coinbase.com/loverajoel","redirect_from":["/zh_cn/insert-item-inside-an-array/"],"_content":"# 向一个数组中插入元素\n\n向一个数组中插入元素是平时很常见的一件事情。你可以使用push在数组尾部插入元素,可以用unshift在数组头部插入元素,也可以用splice在数组中间插入元素。\n\n但是这些已知的方法，并不意味着没有更加高效的方法。让我们接着往下看……\n\n## 向数组结尾添加元素\n\n向数组结尾添加元素用push()很简单，但下面有一个更高效的方法\n\n```javascript\nvar arr = [1,2,3,4,5];\nvar arr2 = [];\n\narr.push(6);\narr[arr.length] = 6;\narr2 = arr.concat([6]);\n```\n\n两种方法都是修改原始数组。不信？看看[jsperf](http://jsperf.com/push-item-inside-an-array)\n\n### 手机上的效率\n\n#### Android (v4.2.2)\n\n1. _arr.push(6);_ and _arr[arr.length] = 6;_ 性能相同 // 3 319 694 ops/sec\n3. _arr2 = arr.concat([6]);_ 比其他两个方法慢50.61%\n\n#### Chrome Mobile (v33.0.0)\n\n1. _arr[arr.length] = 6;_ // 6 125 975 ops/sec\n2. _arr.push(6);_ 慢66.74%\n3. _arr2 = arr.concat([6]);_ 慢87.63%\n\n#### Safari Mobile (v9)\n\n1. _arr[arr.length] = 6;_ // 7 452 898 ops/sec\n2. _arr.push(6);_ 慢40.19%\n3. _arr2 = arr.concat([6]);_ 慢49.78%\n\n```javascript\n最快的为\n\n1. arr[arr.length] = 6; // 平均 5 632 856 ops/sec\n2. arr.push(6); // 慢35.64%\n3. arr2 = arr.concat([6]); // 慢62.67%\n```\n\n### 桌面上的效率\n\n#### Chrome (v48.0.2564)\n\n1. _arr[arr.length] = 6;_ // 21 602 722 ops/sec\n2. _arr.push(6);_ 慢61.94%\n3. _arr2 = arr.concat([6]);_ 慢87.45%\n\n#### Firefox (v44)\n\n1. _arr.push(6);_ // 56 032 805 ops/sec\n2. _arr[arr.length] = 6;_ 慢0.52%\n3. _arr2 = arr.concat([6]);_ 慢87.36%\n\n#### IE (v11)\n\n1. _arr[arr.length] = 6;_ // 67 197 046 ops/sec\n2. _arr.push(6);_ 慢39.61%\n3. _arr2 = arr.concat([6]);_ 慢93.41%\n\n#### Opera (v35.0.2066.68)\n\n1. _arr[arr.length] = 6;_ // 30 775 071 ops/sec\n2. _arr.push(6);_ 慢71.60%\n3. _arr2 = arr.concat([6]);_ 慢83.70%\n\n#### Safari (v9.0.3)\n\n1. _arr.push(6);_ // 42 670 978 ops/sec\n2. _arr[arr.length] = 6;_ 慢0.80%\n3. _arr2 = arr.concat([6]);_ 慢76.07%\n\n```javascript\n最快的为\n\n1. arr[arr.length] = 6; // 平均42 345 449 ops/sec\n2. arr.push(6); // 慢34.66%\n3. arr2 = arr.concat([6]); // 慢85.79%\n```\n\n## 向数组的头部添加元素\n\n现在我们试着向数组的头部添加元素：\n\n```javascript\nvar arr = [1,2,3,4,5];\n\narr.unshift(0);\n\n[0].concat(arr);\n```\n\n这里有一些小区别，unshift操作的是原始数组，concat返回一个新数组，参考[jsperf](http://jsperf.com/unshift-item-inside-an-array)\n\n\n### 手机上的效率 :\n\n#### Android (v4.2.2)\n\n1. _[0].concat(arr);_ // 1 808 717 ops/sec\n2. _arr.unshift(0);_ 慢97.85%\n\n#### Chrome Mobile (v33.0.0)\n\n1. _[0].concat(arr);_ // 1 269 498 ops/sec\n2. _arr.unshift(0);_ 慢99.86%\n\n#### Safari Mobile (v9)\n\n1. _arr.unshift(0);_ // 3 250 184 ops/sec\n2. _[0].concat(arr);_ 慢33.67%\n\n```javascript\n最快的为\n\n1. [0].concat(arr); // 平均4 972 622 ops/sec\n2. arr.unshift(0); // 慢64.70%\n```\n\n### 桌面上的效率\n\n#### Chrome (v48.0.2564)\n\n1. _[0].concat(arr);_ // 2 656 685 ops/sec\n2. _arr.unshift(0);_ 慢96.77%\n\n#### Firefox (v44)\n\n1. _[0].concat(arr);_ // 8 039 759 ops/sec\n2. _arr.unshift(0);_ 慢99.72%\n\n#### IE (v11)\n\n1. _[0].concat(arr);_ // 3 604 226 ops/sec\n2. _arr.unshift(0);_ 慢98.31%\n\n#### Opera (v35.0.2066.68)\n\n1. _[0].concat(arr);_ // 4 102 128 ops/sec\n2. _arr.unshift(0);_ 慢97.44%\n\n#### Safari (v9.0.3)\n\n1. _arr.unshift(0);_ // 12 356 477 ops/sec\n2. _[0].concat(arr);_ 慢15.17%\n\n```javascript\n最快的为\n\n1. [0].concat(arr); // 平均6 032 573 ops/sec\n2. arr.unshift(0); // 慢78.65%\n```\n\n## 向数组中间添加元素\n\n使用splice可以简单的向数组中间添加元素，这也是最高效的方法。\n\n```javascript\nvar items = ['one', 'two', 'three', 'four'];\nitems.splice(items.length / 2, 0, 'hello');\n```\n\n\n我在许多浏览器和系统中进行了测试，结果都是相似的。希望这条小知识可以帮到你，也欢迎大家自行测试。\n","source":"_posts/javascript/2015-12-29-insert-item-inside-an-array.md","raw":"---\nlayout: post\n\ntitle: 向数组中插入元素\ntip-number: 00\ntip-username: loverajoel \ntip-username-profile: https://github.com/loverajoel\ntip-tldr: 向一个数组中插入元素是平时很常见的一件事情。你可以使用push在数组尾部插入元素,可以用unshift在数组头部插入元素,也可以用splice在数组中间插入元素。\ntip-writer-support: https://www.coinbase.com/loverajoel\n\nredirect_from:\n  - /zh_cn/insert-item-inside-an-array/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n# 向一个数组中插入元素\n\n向一个数组中插入元素是平时很常见的一件事情。你可以使用push在数组尾部插入元素,可以用unshift在数组头部插入元素,也可以用splice在数组中间插入元素。\n\n但是这些已知的方法，并不意味着没有更加高效的方法。让我们接着往下看……\n\n## 向数组结尾添加元素\n\n向数组结尾添加元素用push()很简单，但下面有一个更高效的方法\n\n```javascript\nvar arr = [1,2,3,4,5];\nvar arr2 = [];\n\narr.push(6);\narr[arr.length] = 6;\narr2 = arr.concat([6]);\n```\n\n两种方法都是修改原始数组。不信？看看[jsperf](http://jsperf.com/push-item-inside-an-array)\n\n### 手机上的效率\n\n#### Android (v4.2.2)\n\n1. _arr.push(6);_ and _arr[arr.length] = 6;_ 性能相同 // 3 319 694 ops/sec\n3. _arr2 = arr.concat([6]);_ 比其他两个方法慢50.61%\n\n#### Chrome Mobile (v33.0.0)\n\n1. _arr[arr.length] = 6;_ // 6 125 975 ops/sec\n2. _arr.push(6);_ 慢66.74%\n3. _arr2 = arr.concat([6]);_ 慢87.63%\n\n#### Safari Mobile (v9)\n\n1. _arr[arr.length] = 6;_ // 7 452 898 ops/sec\n2. _arr.push(6);_ 慢40.19%\n3. _arr2 = arr.concat([6]);_ 慢49.78%\n\n```javascript\n最快的为\n\n1. arr[arr.length] = 6; // 平均 5 632 856 ops/sec\n2. arr.push(6); // 慢35.64%\n3. arr2 = arr.concat([6]); // 慢62.67%\n```\n\n### 桌面上的效率\n\n#### Chrome (v48.0.2564)\n\n1. _arr[arr.length] = 6;_ // 21 602 722 ops/sec\n2. _arr.push(6);_ 慢61.94%\n3. _arr2 = arr.concat([6]);_ 慢87.45%\n\n#### Firefox (v44)\n\n1. _arr.push(6);_ // 56 032 805 ops/sec\n2. _arr[arr.length] = 6;_ 慢0.52%\n3. _arr2 = arr.concat([6]);_ 慢87.36%\n\n#### IE (v11)\n\n1. _arr[arr.length] = 6;_ // 67 197 046 ops/sec\n2. _arr.push(6);_ 慢39.61%\n3. _arr2 = arr.concat([6]);_ 慢93.41%\n\n#### Opera (v35.0.2066.68)\n\n1. _arr[arr.length] = 6;_ // 30 775 071 ops/sec\n2. _arr.push(6);_ 慢71.60%\n3. _arr2 = arr.concat([6]);_ 慢83.70%\n\n#### Safari (v9.0.3)\n\n1. _arr.push(6);_ // 42 670 978 ops/sec\n2. _arr[arr.length] = 6;_ 慢0.80%\n3. _arr2 = arr.concat([6]);_ 慢76.07%\n\n```javascript\n最快的为\n\n1. arr[arr.length] = 6; // 平均42 345 449 ops/sec\n2. arr.push(6); // 慢34.66%\n3. arr2 = arr.concat([6]); // 慢85.79%\n```\n\n## 向数组的头部添加元素\n\n现在我们试着向数组的头部添加元素：\n\n```javascript\nvar arr = [1,2,3,4,5];\n\narr.unshift(0);\n\n[0].concat(arr);\n```\n\n这里有一些小区别，unshift操作的是原始数组，concat返回一个新数组，参考[jsperf](http://jsperf.com/unshift-item-inside-an-array)\n\n\n### 手机上的效率 :\n\n#### Android (v4.2.2)\n\n1. _[0].concat(arr);_ // 1 808 717 ops/sec\n2. _arr.unshift(0);_ 慢97.85%\n\n#### Chrome Mobile (v33.0.0)\n\n1. _[0].concat(arr);_ // 1 269 498 ops/sec\n2. _arr.unshift(0);_ 慢99.86%\n\n#### Safari Mobile (v9)\n\n1. _arr.unshift(0);_ // 3 250 184 ops/sec\n2. _[0].concat(arr);_ 慢33.67%\n\n```javascript\n最快的为\n\n1. [0].concat(arr); // 平均4 972 622 ops/sec\n2. arr.unshift(0); // 慢64.70%\n```\n\n### 桌面上的效率\n\n#### Chrome (v48.0.2564)\n\n1. _[0].concat(arr);_ // 2 656 685 ops/sec\n2. _arr.unshift(0);_ 慢96.77%\n\n#### Firefox (v44)\n\n1. _[0].concat(arr);_ // 8 039 759 ops/sec\n2. _arr.unshift(0);_ 慢99.72%\n\n#### IE (v11)\n\n1. _[0].concat(arr);_ // 3 604 226 ops/sec\n2. _arr.unshift(0);_ 慢98.31%\n\n#### Opera (v35.0.2066.68)\n\n1. _[0].concat(arr);_ // 4 102 128 ops/sec\n2. _arr.unshift(0);_ 慢97.44%\n\n#### Safari (v9.0.3)\n\n1. _arr.unshift(0);_ // 12 356 477 ops/sec\n2. _[0].concat(arr);_ 慢15.17%\n\n```javascript\n最快的为\n\n1. [0].concat(arr); // 平均6 032 573 ops/sec\n2. arr.unshift(0); // 慢78.65%\n```\n\n## 向数组中间添加元素\n\n使用splice可以简单的向数组中间添加元素，这也是最高效的方法。\n\n```javascript\nvar items = ['one', 'two', 'three', 'four'];\nitems.splice(items.length / 2, 0, 'hello');\n```\n\n\n我在许多浏览器和系统中进行了测试，结果都是相似的。希望这条小知识可以帮到你，也欢迎大家自行测试。\n","slug":"javascript/2015-12-29-insert-item-inside-an-array","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqc70025lyfy1lyzdm20","content":"<h1 id=\"向一个数组中插入元素\"><a href=\"#向一个数组中插入元素\" class=\"headerlink\" title=\"向一个数组中插入元素\"></a>向一个数组中插入元素</h1><p>向一个数组中插入元素是平时很常见的一件事情。你可以使用push在数组尾部插入元素,可以用unshift在数组头部插入元素,也可以用splice在数组中间插入元素。</p>\n<p>但是这些已知的方法，并不意味着没有更加高效的方法。让我们接着往下看……</p>\n<h2 id=\"向数组结尾添加元素\"><a href=\"#向数组结尾添加元素\" class=\"headerlink\" title=\"向数组结尾添加元素\"></a>向数组结尾添加元素</h2><p>向数组结尾添加元素用push()很简单，但下面有一个更高效的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> arr2 = [];</div><div class=\"line\"></div><div class=\"line\">arr.push(<span class=\"number\">6</span>);</div><div class=\"line\">arr[arr.length] = <span class=\"number\">6</span>;</div><div class=\"line\">arr2 = arr.concat([<span class=\"number\">6</span>]);</div></pre></td></tr></table></figure>\n<p>两种方法都是修改原始数组。不信？看看<a href=\"http://jsperf.com/push-item-inside-an-array\" target=\"_blank\" rel=\"external\">jsperf</a></p>\n<h3 id=\"手机上的效率\"><a href=\"#手机上的效率\" class=\"headerlink\" title=\"手机上的效率\"></a>手机上的效率</h3><h4 id=\"Android-v4-2-2\"><a href=\"#Android-v4-2-2\" class=\"headerlink\" title=\"Android (v4.2.2)\"></a>Android (v4.2.2)</h4><ol>\n<li><em>arr.push(6);</em> and <em>arr[arr.length] = 6;</em> 性能相同 // 3 319 694 ops/sec</li>\n<li><em>arr2 = arr.concat([6]);</em> 比其他两个方法慢50.61%</li>\n</ol>\n<h4 id=\"Chrome-Mobile-v33-0-0\"><a href=\"#Chrome-Mobile-v33-0-0\" class=\"headerlink\" title=\"Chrome Mobile (v33.0.0)\"></a>Chrome Mobile (v33.0.0)</h4><ol>\n<li><em>arr[arr.length] = 6;</em> // 6 125 975 ops/sec</li>\n<li><em>arr.push(6);</em> 慢66.74%</li>\n<li><em>arr2 = arr.concat([6]);</em> 慢87.63%</li>\n</ol>\n<h4 id=\"Safari-Mobile-v9\"><a href=\"#Safari-Mobile-v9\" class=\"headerlink\" title=\"Safari Mobile (v9)\"></a>Safari Mobile (v9)</h4><ol>\n<li><em>arr[arr.length] = 6;</em> // 7 452 898 ops/sec</li>\n<li><em>arr.push(6);</em> 慢40.19%</li>\n<li><em>arr2 = arr.concat([6]);</em> 慢49.78%</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">最快的为</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">1.</span> arr[arr.length] = <span class=\"number\">6</span>; <span class=\"comment\">// 平均 5 632 856 ops/sec</span></div><div class=\"line\"><span class=\"number\">2.</span> arr.push(<span class=\"number\">6</span>); <span class=\"comment\">// 慢35.64%</span></div><div class=\"line\"><span class=\"number\">3.</span> arr2 = arr.concat([<span class=\"number\">6</span>]); <span class=\"comment\">// 慢62.67%</span></div></pre></td></tr></table></figure>\n<h3 id=\"桌面上的效率\"><a href=\"#桌面上的效率\" class=\"headerlink\" title=\"桌面上的效率\"></a>桌面上的效率</h3><h4 id=\"Chrome-v48-0-2564\"><a href=\"#Chrome-v48-0-2564\" class=\"headerlink\" title=\"Chrome (v48.0.2564)\"></a>Chrome (v48.0.2564)</h4><ol>\n<li><em>arr[arr.length] = 6;</em> // 21 602 722 ops/sec</li>\n<li><em>arr.push(6);</em> 慢61.94%</li>\n<li><em>arr2 = arr.concat([6]);</em> 慢87.45%</li>\n</ol>\n<h4 id=\"Firefox-v44\"><a href=\"#Firefox-v44\" class=\"headerlink\" title=\"Firefox (v44)\"></a>Firefox (v44)</h4><ol>\n<li><em>arr.push(6);</em> // 56 032 805 ops/sec</li>\n<li><em>arr[arr.length] = 6;</em> 慢0.52%</li>\n<li><em>arr2 = arr.concat([6]);</em> 慢87.36%</li>\n</ol>\n<h4 id=\"IE-v11\"><a href=\"#IE-v11\" class=\"headerlink\" title=\"IE (v11)\"></a>IE (v11)</h4><ol>\n<li><em>arr[arr.length] = 6;</em> // 67 197 046 ops/sec</li>\n<li><em>arr.push(6);</em> 慢39.61%</li>\n<li><em>arr2 = arr.concat([6]);</em> 慢93.41%</li>\n</ol>\n<h4 id=\"Opera-v35-0-2066-68\"><a href=\"#Opera-v35-0-2066-68\" class=\"headerlink\" title=\"Opera (v35.0.2066.68)\"></a>Opera (v35.0.2066.68)</h4><ol>\n<li><em>arr[arr.length] = 6;</em> // 30 775 071 ops/sec</li>\n<li><em>arr.push(6);</em> 慢71.60%</li>\n<li><em>arr2 = arr.concat([6]);</em> 慢83.70%</li>\n</ol>\n<h4 id=\"Safari-v9-0-3\"><a href=\"#Safari-v9-0-3\" class=\"headerlink\" title=\"Safari (v9.0.3)\"></a>Safari (v9.0.3)</h4><ol>\n<li><em>arr.push(6);</em> // 42 670 978 ops/sec</li>\n<li><em>arr[arr.length] = 6;</em> 慢0.80%</li>\n<li><em>arr2 = arr.concat([6]);</em> 慢76.07%</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">最快的为</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">1.</span> arr[arr.length] = <span class=\"number\">6</span>; <span class=\"comment\">// 平均42 345 449 ops/sec</span></div><div class=\"line\"><span class=\"number\">2.</span> arr.push(<span class=\"number\">6</span>); <span class=\"comment\">// 慢34.66%</span></div><div class=\"line\"><span class=\"number\">3.</span> arr2 = arr.concat([<span class=\"number\">6</span>]); <span class=\"comment\">// 慢85.79%</span></div></pre></td></tr></table></figure>\n<h2 id=\"向数组的头部添加元素\"><a href=\"#向数组的头部添加元素\" class=\"headerlink\" title=\"向数组的头部添加元素\"></a>向数组的头部添加元素</h2><p>现在我们试着向数组的头部添加元素：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"></div><div class=\"line\">arr.unshift(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">[<span class=\"number\">0</span>].concat(arr);</div></pre></td></tr></table></figure>\n<p>这里有一些小区别，unshift操作的是原始数组，concat返回一个新数组，参考<a href=\"http://jsperf.com/unshift-item-inside-an-array\" target=\"_blank\" rel=\"external\">jsperf</a></p>\n<h3 id=\"手机上的效率-1\"><a href=\"#手机上的效率-1\" class=\"headerlink\" title=\"手机上的效率 :\"></a>手机上的效率 :</h3><h4 id=\"Android-v4-2-2-1\"><a href=\"#Android-v4-2-2-1\" class=\"headerlink\" title=\"Android (v4.2.2)\"></a>Android (v4.2.2)</h4><ol>\n<li><em>[0].concat(arr);</em> // 1 808 717 ops/sec</li>\n<li><em>arr.unshift(0);</em> 慢97.85%</li>\n</ol>\n<h4 id=\"Chrome-Mobile-v33-0-0-1\"><a href=\"#Chrome-Mobile-v33-0-0-1\" class=\"headerlink\" title=\"Chrome Mobile (v33.0.0)\"></a>Chrome Mobile (v33.0.0)</h4><ol>\n<li><em>[0].concat(arr);</em> // 1 269 498 ops/sec</li>\n<li><em>arr.unshift(0);</em> 慢99.86%</li>\n</ol>\n<h4 id=\"Safari-Mobile-v9-1\"><a href=\"#Safari-Mobile-v9-1\" class=\"headerlink\" title=\"Safari Mobile (v9)\"></a>Safari Mobile (v9)</h4><ol>\n<li><em>arr.unshift(0);</em> // 3 250 184 ops/sec</li>\n<li><em>[0].concat(arr);</em> 慢33.67%</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">最快的为</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">1.</span> [<span class=\"number\">0</span>].concat(arr); <span class=\"comment\">// 平均4 972 622 ops/sec</span></div><div class=\"line\"><span class=\"number\">2.</span> arr.unshift(<span class=\"number\">0</span>); <span class=\"comment\">// 慢64.70%</span></div></pre></td></tr></table></figure>\n<h3 id=\"桌面上的效率-1\"><a href=\"#桌面上的效率-1\" class=\"headerlink\" title=\"桌面上的效率\"></a>桌面上的效率</h3><h4 id=\"Chrome-v48-0-2564-1\"><a href=\"#Chrome-v48-0-2564-1\" class=\"headerlink\" title=\"Chrome (v48.0.2564)\"></a>Chrome (v48.0.2564)</h4><ol>\n<li><em>[0].concat(arr);</em> // 2 656 685 ops/sec</li>\n<li><em>arr.unshift(0);</em> 慢96.77%</li>\n</ol>\n<h4 id=\"Firefox-v44-1\"><a href=\"#Firefox-v44-1\" class=\"headerlink\" title=\"Firefox (v44)\"></a>Firefox (v44)</h4><ol>\n<li><em>[0].concat(arr);</em> // 8 039 759 ops/sec</li>\n<li><em>arr.unshift(0);</em> 慢99.72%</li>\n</ol>\n<h4 id=\"IE-v11-1\"><a href=\"#IE-v11-1\" class=\"headerlink\" title=\"IE (v11)\"></a>IE (v11)</h4><ol>\n<li><em>[0].concat(arr);</em> // 3 604 226 ops/sec</li>\n<li><em>arr.unshift(0);</em> 慢98.31%</li>\n</ol>\n<h4 id=\"Opera-v35-0-2066-68-1\"><a href=\"#Opera-v35-0-2066-68-1\" class=\"headerlink\" title=\"Opera (v35.0.2066.68)\"></a>Opera (v35.0.2066.68)</h4><ol>\n<li><em>[0].concat(arr);</em> // 4 102 128 ops/sec</li>\n<li><em>arr.unshift(0);</em> 慢97.44%</li>\n</ol>\n<h4 id=\"Safari-v9-0-3-1\"><a href=\"#Safari-v9-0-3-1\" class=\"headerlink\" title=\"Safari (v9.0.3)\"></a>Safari (v9.0.3)</h4><ol>\n<li><em>arr.unshift(0);</em> // 12 356 477 ops/sec</li>\n<li><em>[0].concat(arr);</em> 慢15.17%</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">最快的为</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">1.</span> [<span class=\"number\">0</span>].concat(arr); <span class=\"comment\">// 平均6 032 573 ops/sec</span></div><div class=\"line\"><span class=\"number\">2.</span> arr.unshift(<span class=\"number\">0</span>); <span class=\"comment\">// 慢78.65%</span></div></pre></td></tr></table></figure>\n<h2 id=\"向数组中间添加元素\"><a href=\"#向数组中间添加元素\" class=\"headerlink\" title=\"向数组中间添加元素\"></a>向数组中间添加元素</h2><p>使用splice可以简单的向数组中间添加元素，这也是最高效的方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> items = [<span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>, <span class=\"string\">'four'</span>];</div><div class=\"line\">items.splice(items.length / <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"string\">'hello'</span>);</div></pre></td></tr></table></figure>\n<p>我在许多浏览器和系统中进行了测试，结果都是相似的。希望这条小知识可以帮到你，也欢迎大家自行测试。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"向一个数组中插入元素\"><a href=\"#向一个数组中插入元素\" class=\"headerlink\" title=\"向一个数组中插入元素\"></a>向一个数组中插入元素</h1><p>向一个数组中插入元素是平时很常见的一件事情。你可以使用push在数组尾部插入元素,可以用unshift在数组头部插入元素,也可以用splice在数组中间插入元素。</p>\n<p>但是这些已知的方法，并不意味着没有更加高效的方法。让我们接着往下看……</p>\n<h2 id=\"向数组结尾添加元素\"><a href=\"#向数组结尾添加元素\" class=\"headerlink\" title=\"向数组结尾添加元素\"></a>向数组结尾添加元素</h2><p>向数组结尾添加元素用push()很简单，但下面有一个更高效的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> arr2 = [];</div><div class=\"line\"></div><div class=\"line\">arr.push(<span class=\"number\">6</span>);</div><div class=\"line\">arr[arr.length] = <span class=\"number\">6</span>;</div><div class=\"line\">arr2 = arr.concat([<span class=\"number\">6</span>]);</div></pre></td></tr></table></figure>\n<p>两种方法都是修改原始数组。不信？看看<a href=\"http://jsperf.com/push-item-inside-an-array\" target=\"_blank\" rel=\"external\">jsperf</a></p>\n<h3 id=\"手机上的效率\"><a href=\"#手机上的效率\" class=\"headerlink\" title=\"手机上的效率\"></a>手机上的效率</h3><h4 id=\"Android-v4-2-2\"><a href=\"#Android-v4-2-2\" class=\"headerlink\" title=\"Android (v4.2.2)\"></a>Android (v4.2.2)</h4><ol>\n<li><em>arr.push(6);</em> and <em>arr[arr.length] = 6;</em> 性能相同 // 3 319 694 ops/sec</li>\n<li><em>arr2 = arr.concat([6]);</em> 比其他两个方法慢50.61%</li>\n</ol>\n<h4 id=\"Chrome-Mobile-v33-0-0\"><a href=\"#Chrome-Mobile-v33-0-0\" class=\"headerlink\" title=\"Chrome Mobile (v33.0.0)\"></a>Chrome Mobile (v33.0.0)</h4><ol>\n<li><em>arr[arr.length] = 6;</em> // 6 125 975 ops/sec</li>\n<li><em>arr.push(6);</em> 慢66.74%</li>\n<li><em>arr2 = arr.concat([6]);</em> 慢87.63%</li>\n</ol>\n<h4 id=\"Safari-Mobile-v9\"><a href=\"#Safari-Mobile-v9\" class=\"headerlink\" title=\"Safari Mobile (v9)\"></a>Safari Mobile (v9)</h4><ol>\n<li><em>arr[arr.length] = 6;</em> // 7 452 898 ops/sec</li>\n<li><em>arr.push(6);</em> 慢40.19%</li>\n<li><em>arr2 = arr.concat([6]);</em> 慢49.78%</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">最快的为</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">1.</span> arr[arr.length] = <span class=\"number\">6</span>; <span class=\"comment\">// 平均 5 632 856 ops/sec</span></div><div class=\"line\"><span class=\"number\">2.</span> arr.push(<span class=\"number\">6</span>); <span class=\"comment\">// 慢35.64%</span></div><div class=\"line\"><span class=\"number\">3.</span> arr2 = arr.concat([<span class=\"number\">6</span>]); <span class=\"comment\">// 慢62.67%</span></div></pre></td></tr></table></figure>\n<h3 id=\"桌面上的效率\"><a href=\"#桌面上的效率\" class=\"headerlink\" title=\"桌面上的效率\"></a>桌面上的效率</h3><h4 id=\"Chrome-v48-0-2564\"><a href=\"#Chrome-v48-0-2564\" class=\"headerlink\" title=\"Chrome (v48.0.2564)\"></a>Chrome (v48.0.2564)</h4><ol>\n<li><em>arr[arr.length] = 6;</em> // 21 602 722 ops/sec</li>\n<li><em>arr.push(6);</em> 慢61.94%</li>\n<li><em>arr2 = arr.concat([6]);</em> 慢87.45%</li>\n</ol>\n<h4 id=\"Firefox-v44\"><a href=\"#Firefox-v44\" class=\"headerlink\" title=\"Firefox (v44)\"></a>Firefox (v44)</h4><ol>\n<li><em>arr.push(6);</em> // 56 032 805 ops/sec</li>\n<li><em>arr[arr.length] = 6;</em> 慢0.52%</li>\n<li><em>arr2 = arr.concat([6]);</em> 慢87.36%</li>\n</ol>\n<h4 id=\"IE-v11\"><a href=\"#IE-v11\" class=\"headerlink\" title=\"IE (v11)\"></a>IE (v11)</h4><ol>\n<li><em>arr[arr.length] = 6;</em> // 67 197 046 ops/sec</li>\n<li><em>arr.push(6);</em> 慢39.61%</li>\n<li><em>arr2 = arr.concat([6]);</em> 慢93.41%</li>\n</ol>\n<h4 id=\"Opera-v35-0-2066-68\"><a href=\"#Opera-v35-0-2066-68\" class=\"headerlink\" title=\"Opera (v35.0.2066.68)\"></a>Opera (v35.0.2066.68)</h4><ol>\n<li><em>arr[arr.length] = 6;</em> // 30 775 071 ops/sec</li>\n<li><em>arr.push(6);</em> 慢71.60%</li>\n<li><em>arr2 = arr.concat([6]);</em> 慢83.70%</li>\n</ol>\n<h4 id=\"Safari-v9-0-3\"><a href=\"#Safari-v9-0-3\" class=\"headerlink\" title=\"Safari (v9.0.3)\"></a>Safari (v9.0.3)</h4><ol>\n<li><em>arr.push(6);</em> // 42 670 978 ops/sec</li>\n<li><em>arr[arr.length] = 6;</em> 慢0.80%</li>\n<li><em>arr2 = arr.concat([6]);</em> 慢76.07%</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">最快的为</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">1.</span> arr[arr.length] = <span class=\"number\">6</span>; <span class=\"comment\">// 平均42 345 449 ops/sec</span></div><div class=\"line\"><span class=\"number\">2.</span> arr.push(<span class=\"number\">6</span>); <span class=\"comment\">// 慢34.66%</span></div><div class=\"line\"><span class=\"number\">3.</span> arr2 = arr.concat([<span class=\"number\">6</span>]); <span class=\"comment\">// 慢85.79%</span></div></pre></td></tr></table></figure>\n<h2 id=\"向数组的头部添加元素\"><a href=\"#向数组的头部添加元素\" class=\"headerlink\" title=\"向数组的头部添加元素\"></a>向数组的头部添加元素</h2><p>现在我们试着向数组的头部添加元素：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"></div><div class=\"line\">arr.unshift(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">[<span class=\"number\">0</span>].concat(arr);</div></pre></td></tr></table></figure>\n<p>这里有一些小区别，unshift操作的是原始数组，concat返回一个新数组，参考<a href=\"http://jsperf.com/unshift-item-inside-an-array\" target=\"_blank\" rel=\"external\">jsperf</a></p>\n<h3 id=\"手机上的效率-1\"><a href=\"#手机上的效率-1\" class=\"headerlink\" title=\"手机上的效率 :\"></a>手机上的效率 :</h3><h4 id=\"Android-v4-2-2-1\"><a href=\"#Android-v4-2-2-1\" class=\"headerlink\" title=\"Android (v4.2.2)\"></a>Android (v4.2.2)</h4><ol>\n<li><em>[0].concat(arr);</em> // 1 808 717 ops/sec</li>\n<li><em>arr.unshift(0);</em> 慢97.85%</li>\n</ol>\n<h4 id=\"Chrome-Mobile-v33-0-0-1\"><a href=\"#Chrome-Mobile-v33-0-0-1\" class=\"headerlink\" title=\"Chrome Mobile (v33.0.0)\"></a>Chrome Mobile (v33.0.0)</h4><ol>\n<li><em>[0].concat(arr);</em> // 1 269 498 ops/sec</li>\n<li><em>arr.unshift(0);</em> 慢99.86%</li>\n</ol>\n<h4 id=\"Safari-Mobile-v9-1\"><a href=\"#Safari-Mobile-v9-1\" class=\"headerlink\" title=\"Safari Mobile (v9)\"></a>Safari Mobile (v9)</h4><ol>\n<li><em>arr.unshift(0);</em> // 3 250 184 ops/sec</li>\n<li><em>[0].concat(arr);</em> 慢33.67%</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">最快的为</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">1.</span> [<span class=\"number\">0</span>].concat(arr); <span class=\"comment\">// 平均4 972 622 ops/sec</span></div><div class=\"line\"><span class=\"number\">2.</span> arr.unshift(<span class=\"number\">0</span>); <span class=\"comment\">// 慢64.70%</span></div></pre></td></tr></table></figure>\n<h3 id=\"桌面上的效率-1\"><a href=\"#桌面上的效率-1\" class=\"headerlink\" title=\"桌面上的效率\"></a>桌面上的效率</h3><h4 id=\"Chrome-v48-0-2564-1\"><a href=\"#Chrome-v48-0-2564-1\" class=\"headerlink\" title=\"Chrome (v48.0.2564)\"></a>Chrome (v48.0.2564)</h4><ol>\n<li><em>[0].concat(arr);</em> // 2 656 685 ops/sec</li>\n<li><em>arr.unshift(0);</em> 慢96.77%</li>\n</ol>\n<h4 id=\"Firefox-v44-1\"><a href=\"#Firefox-v44-1\" class=\"headerlink\" title=\"Firefox (v44)\"></a>Firefox (v44)</h4><ol>\n<li><em>[0].concat(arr);</em> // 8 039 759 ops/sec</li>\n<li><em>arr.unshift(0);</em> 慢99.72%</li>\n</ol>\n<h4 id=\"IE-v11-1\"><a href=\"#IE-v11-1\" class=\"headerlink\" title=\"IE (v11)\"></a>IE (v11)</h4><ol>\n<li><em>[0].concat(arr);</em> // 3 604 226 ops/sec</li>\n<li><em>arr.unshift(0);</em> 慢98.31%</li>\n</ol>\n<h4 id=\"Opera-v35-0-2066-68-1\"><a href=\"#Opera-v35-0-2066-68-1\" class=\"headerlink\" title=\"Opera (v35.0.2066.68)\"></a>Opera (v35.0.2066.68)</h4><ol>\n<li><em>[0].concat(arr);</em> // 4 102 128 ops/sec</li>\n<li><em>arr.unshift(0);</em> 慢97.44%</li>\n</ol>\n<h4 id=\"Safari-v9-0-3-1\"><a href=\"#Safari-v9-0-3-1\" class=\"headerlink\" title=\"Safari (v9.0.3)\"></a>Safari (v9.0.3)</h4><ol>\n<li><em>arr.unshift(0);</em> // 12 356 477 ops/sec</li>\n<li><em>[0].concat(arr);</em> 慢15.17%</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">最快的为</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">1.</span> [<span class=\"number\">0</span>].concat(arr); <span class=\"comment\">// 平均6 032 573 ops/sec</span></div><div class=\"line\"><span class=\"number\">2.</span> arr.unshift(<span class=\"number\">0</span>); <span class=\"comment\">// 慢78.65%</span></div></pre></td></tr></table></figure>\n<h2 id=\"向数组中间添加元素\"><a href=\"#向数组中间添加元素\" class=\"headerlink\" title=\"向数组中间添加元素\"></a>向数组中间添加元素</h2><p>使用splice可以简单的向数组中间添加元素，这也是最高效的方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> items = [<span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>, <span class=\"string\">'four'</span>];</div><div class=\"line\">items.splice(items.length / <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"string\">'hello'</span>);</div></pre></td></tr></table></figure>\n<p>我在许多浏览器和系统中进行了测试，结果都是相似的。希望这条小知识可以帮到你，也欢迎大家自行测试。</p>\n"},{"layout":"post","title":"优化嵌套的条件语句","tip-number":3,"tip-username":"AlbertoFuente","tip-username-profile":"https://github.com/AlbertoFuente","tip-tldr":"我们怎样来提高和优化javascript里嵌套的`if`语句呢？","redirect_from":["/zh_cn/improve-nested-conditionals/"],"_content":"\n\n我们怎样来提高和优化javascript里嵌套的`if`语句呢？\n\n```javascript\nif (color) {\n  if (color === 'black') {\n    printBlackBackground();\n  } else if (color === 'red') {\n    printRedBackground();\n  } else if (color === 'blue') {\n    printBlueBackground();\n  } else if (color === 'green') {\n    printGreenBackground();\n  } else {\n    printYellowBackground();\n  }\n}\n```\n\n\n一种方法来提高嵌套的`if`语句是用`switch`语句。虽然它不那么啰嗦而且排列整齐，但是并不建议使用它，因为这对于调试错误很困难。这告诉你[为什么](https://toddmotto.com/deprecating-the-switch-statement-for-object-literals).\n\n```javascript\nswitch(color) {\n  case 'black':\n    printBlackBackground();\n    break;\n  case 'red':\n    printRedBackground();\n    break;\n  case 'blue':\n    printBlueBackground();\n    break;\n  case 'green':\n    printGreenBackground();\n    break;\n  default:\n    printYellowBackground();\n}\n```\n\n如果可以重构的话，我们可以试着简化函数。比如不需要为每个颜色写一个函数，而是将颜色作为函数的参数。\n\n```javascript\nfunction printBackground(color) {\n  if (!color || typeof color !== 'string') {\n    return; // Invalid color, return immediately\n  }\n}\n```\n\n但是如果不能重构的话，我们必须避免过多的条件检查，避免过多使用`switch`。我们必须考虑最有效率的方法，使用`object`。\n\n```javascript\nswitch(true) {\n  case (typeof color === 'string' && color === 'black'):\n    printBlackBackground();\n    break;\n  case (typeof color === 'string' && color === 'red'):\n    printRedBackground();\n    break;\n  case (typeof color === 'string' && color === 'blue'):\n    printBlueBackground();\n    break;\n  case (typeof color === 'string' && color === 'green'):\n    printGreenBackground();\n    break;\n  case (typeof color === 'string' && color === 'yellow'):\n    printYellowBackground();\n    break;\n}\n```\n\n\n但是我们应该时刻注意避免太多判断在一个条件里，尽量少的使用`switch`，考虑最有效率的方法：借助`object`。\n\n```javascript\nvar colorObj = {\n  'black': printBlackBackground,\n  'red': printRedBackground,\n  'blue': printBlueBackground,\n  'green': printGreenBackground,\n  'yellow': printYellowBackground\n};\n\n\nif (color in colorObj) {\n  colorObj[color]();\n}\n```\n\n\n这里有更多相关的[内容](http://www.nicoespeon.com/en/2015/01/oop-revisited-switch-in-js/).\n\n","source":"_posts/javascript/2016-01-03-improve-nested-conditionals.md","raw":"---\nlayout: post\n\ntitle: 优化嵌套的条件语句\ntip-number: 03\ntip-username: AlbertoFuente \ntip-username-profile: https://github.com/AlbertoFuente\ntip-tldr: 我们怎样来提高和优化javascript里嵌套的`if`语句呢？\n\nredirect_from:\n  - /zh_cn/improve-nested-conditionals/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n\n我们怎样来提高和优化javascript里嵌套的`if`语句呢？\n\n```javascript\nif (color) {\n  if (color === 'black') {\n    printBlackBackground();\n  } else if (color === 'red') {\n    printRedBackground();\n  } else if (color === 'blue') {\n    printBlueBackground();\n  } else if (color === 'green') {\n    printGreenBackground();\n  } else {\n    printYellowBackground();\n  }\n}\n```\n\n\n一种方法来提高嵌套的`if`语句是用`switch`语句。虽然它不那么啰嗦而且排列整齐，但是并不建议使用它，因为这对于调试错误很困难。这告诉你[为什么](https://toddmotto.com/deprecating-the-switch-statement-for-object-literals).\n\n```javascript\nswitch(color) {\n  case 'black':\n    printBlackBackground();\n    break;\n  case 'red':\n    printRedBackground();\n    break;\n  case 'blue':\n    printBlueBackground();\n    break;\n  case 'green':\n    printGreenBackground();\n    break;\n  default:\n    printYellowBackground();\n}\n```\n\n如果可以重构的话，我们可以试着简化函数。比如不需要为每个颜色写一个函数，而是将颜色作为函数的参数。\n\n```javascript\nfunction printBackground(color) {\n  if (!color || typeof color !== 'string') {\n    return; // Invalid color, return immediately\n  }\n}\n```\n\n但是如果不能重构的话，我们必须避免过多的条件检查，避免过多使用`switch`。我们必须考虑最有效率的方法，使用`object`。\n\n```javascript\nswitch(true) {\n  case (typeof color === 'string' && color === 'black'):\n    printBlackBackground();\n    break;\n  case (typeof color === 'string' && color === 'red'):\n    printRedBackground();\n    break;\n  case (typeof color === 'string' && color === 'blue'):\n    printBlueBackground();\n    break;\n  case (typeof color === 'string' && color === 'green'):\n    printGreenBackground();\n    break;\n  case (typeof color === 'string' && color === 'yellow'):\n    printYellowBackground();\n    break;\n}\n```\n\n\n但是我们应该时刻注意避免太多判断在一个条件里，尽量少的使用`switch`，考虑最有效率的方法：借助`object`。\n\n```javascript\nvar colorObj = {\n  'black': printBlackBackground,\n  'red': printRedBackground,\n  'blue': printBlueBackground,\n  'green': printGreenBackground,\n  'yellow': printYellowBackground\n};\n\n\nif (color in colorObj) {\n  colorObj[color]();\n}\n```\n\n\n这里有更多相关的[内容](http://www.nicoespeon.com/en/2015/01/oop-revisited-switch-in-js/).\n\n","slug":"javascript/2016-01-03-improve-nested-conditionals","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqca0026lyfynsr287pa","content":"<p>我们怎样来提高和优化javascript里嵌套的<code>if</code>语句呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (color) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (color === <span class=\"string\">'black'</span>) &#123;</div><div class=\"line\">    printBlackBackground();</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (color === <span class=\"string\">'red'</span>) &#123;</div><div class=\"line\">    printRedBackground();</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (color === <span class=\"string\">'blue'</span>) &#123;</div><div class=\"line\">    printBlueBackground();</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (color === <span class=\"string\">'green'</span>) &#123;</div><div class=\"line\">    printGreenBackground();</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    printYellowBackground();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>一种方法来提高嵌套的<code>if</code>语句是用<code>switch</code>语句。虽然它不那么啰嗦而且排列整齐，但是并不建议使用它，因为这对于调试错误很困难。这告诉你<a href=\"https://toddmotto.com/deprecating-the-switch-statement-for-object-literals\" target=\"_blank\" rel=\"external\">为什么</a>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">switch</span>(color) &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'black'</span>:</div><div class=\"line\">    printBlackBackground();</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'red'</span>:</div><div class=\"line\">    printRedBackground();</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'blue'</span>:</div><div class=\"line\">    printBlueBackground();</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'green'</span>:</div><div class=\"line\">    printGreenBackground();</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">  <span class=\"keyword\">default</span>:</div><div class=\"line\">    printYellowBackground();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果可以重构的话，我们可以试着简化函数。比如不需要为每个颜色写一个函数，而是将颜色作为函数的参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printBackground</span>(<span class=\"params\">color</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!color || <span class=\"keyword\">typeof</span> color !== <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// Invalid color, return immediately</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是如果不能重构的话，我们必须避免过多的条件检查，避免过多使用<code>switch</code>。我们必须考虑最有效率的方法，使用<code>object</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">switch</span>(<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> (<span class=\"keyword\">typeof</span> color === <span class=\"string\">'string'</span> &amp;&amp; color === <span class=\"string\">'black'</span>):</div><div class=\"line\">    printBlackBackground();</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> (<span class=\"keyword\">typeof</span> color === <span class=\"string\">'string'</span> &amp;&amp; color === <span class=\"string\">'red'</span>):</div><div class=\"line\">    printRedBackground();</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> (<span class=\"keyword\">typeof</span> color === <span class=\"string\">'string'</span> &amp;&amp; color === <span class=\"string\">'blue'</span>):</div><div class=\"line\">    printBlueBackground();</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> (<span class=\"keyword\">typeof</span> color === <span class=\"string\">'string'</span> &amp;&amp; color === <span class=\"string\">'green'</span>):</div><div class=\"line\">    printGreenBackground();</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> (<span class=\"keyword\">typeof</span> color === <span class=\"string\">'string'</span> &amp;&amp; color === <span class=\"string\">'yellow'</span>):</div><div class=\"line\">    printYellowBackground();</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是我们应该时刻注意避免太多判断在一个条件里，尽量少的使用<code>switch</code>，考虑最有效率的方法：借助<code>object</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> colorObj = &#123;</div><div class=\"line\">  <span class=\"string\">'black'</span>: printBlackBackground,</div><div class=\"line\">  <span class=\"string\">'red'</span>: printRedBackground,</div><div class=\"line\">  <span class=\"string\">'blue'</span>: printBlueBackground,</div><div class=\"line\">  <span class=\"string\">'green'</span>: printGreenBackground,</div><div class=\"line\">  <span class=\"string\">'yellow'</span>: printYellowBackground</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (color <span class=\"keyword\">in</span> colorObj) &#123;</div><div class=\"line\">  colorObj[color]();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里有更多相关的<a href=\"http://www.nicoespeon.com/en/2015/01/oop-revisited-switch-in-js/\" target=\"_blank\" rel=\"external\">内容</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我们怎样来提高和优化javascript里嵌套的<code>if</code>语句呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (color) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (color === <span class=\"string\">'black'</span>) &#123;</div><div class=\"line\">    printBlackBackground();</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (color === <span class=\"string\">'red'</span>) &#123;</div><div class=\"line\">    printRedBackground();</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (color === <span class=\"string\">'blue'</span>) &#123;</div><div class=\"line\">    printBlueBackground();</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (color === <span class=\"string\">'green'</span>) &#123;</div><div class=\"line\">    printGreenBackground();</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    printYellowBackground();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>一种方法来提高嵌套的<code>if</code>语句是用<code>switch</code>语句。虽然它不那么啰嗦而且排列整齐，但是并不建议使用它，因为这对于调试错误很困难。这告诉你<a href=\"https://toddmotto.com/deprecating-the-switch-statement-for-object-literals\" target=\"_blank\" rel=\"external\">为什么</a>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">switch</span>(color) &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'black'</span>:</div><div class=\"line\">    printBlackBackground();</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'red'</span>:</div><div class=\"line\">    printRedBackground();</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'blue'</span>:</div><div class=\"line\">    printBlueBackground();</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'green'</span>:</div><div class=\"line\">    printGreenBackground();</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">  <span class=\"keyword\">default</span>:</div><div class=\"line\">    printYellowBackground();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果可以重构的话，我们可以试着简化函数。比如不需要为每个颜色写一个函数，而是将颜色作为函数的参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printBackground</span>(<span class=\"params\">color</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!color || <span class=\"keyword\">typeof</span> color !== <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// Invalid color, return immediately</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是如果不能重构的话，我们必须避免过多的条件检查，避免过多使用<code>switch</code>。我们必须考虑最有效率的方法，使用<code>object</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">switch</span>(<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> (<span class=\"keyword\">typeof</span> color === <span class=\"string\">'string'</span> &amp;&amp; color === <span class=\"string\">'black'</span>):</div><div class=\"line\">    printBlackBackground();</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> (<span class=\"keyword\">typeof</span> color === <span class=\"string\">'string'</span> &amp;&amp; color === <span class=\"string\">'red'</span>):</div><div class=\"line\">    printRedBackground();</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> (<span class=\"keyword\">typeof</span> color === <span class=\"string\">'string'</span> &amp;&amp; color === <span class=\"string\">'blue'</span>):</div><div class=\"line\">    printBlueBackground();</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> (<span class=\"keyword\">typeof</span> color === <span class=\"string\">'string'</span> &amp;&amp; color === <span class=\"string\">'green'</span>):</div><div class=\"line\">    printGreenBackground();</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> (<span class=\"keyword\">typeof</span> color === <span class=\"string\">'string'</span> &amp;&amp; color === <span class=\"string\">'yellow'</span>):</div><div class=\"line\">    printYellowBackground();</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是我们应该时刻注意避免太多判断在一个条件里，尽量少的使用<code>switch</code>，考虑最有效率的方法：借助<code>object</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> colorObj = &#123;</div><div class=\"line\">  <span class=\"string\">'black'</span>: printBlackBackground,</div><div class=\"line\">  <span class=\"string\">'red'</span>: printRedBackground,</div><div class=\"line\">  <span class=\"string\">'blue'</span>: printBlueBackground,</div><div class=\"line\">  <span class=\"string\">'green'</span>: printGreenBackground,</div><div class=\"line\">  <span class=\"string\">'yellow'</span>: printYellowBackground</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (color <span class=\"keyword\">in</span> colorObj) &#123;</div><div class=\"line\">  colorObj[color]();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里有更多相关的<a href=\"http://www.nicoespeon.com/en/2015/01/oop-revisited-switch-in-js/\" target=\"_blank\" rel=\"external\">内容</a>.</p>\n"},{"layout":"post","title":"排列含音节字母的字符串","tip-number":4,"tip-username":"loverajoel","tip-username-profile":"https://github.com/loverajoel","tip-tldr":"Javascript有一个原生方法**sort**可以排列数组。一次简单的`array.sort()`将每一个数组元素视为字符串并按照字母表排列。但是当你试图整理一个非ASCII元素的数组时，你可能会得到一个奇怪的结果。","tip-writer-support":"https://www.coinbase.com/loverajoel","redirect_from":["/zh_cn/sorting-strings-with-accented-characters/"],"_content":"\nJavascript有一个原生方法**[sort](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)**可以排列数组。一次简单的`array.sort()`将每一个数组元素视为字符串并按照字母表排列。你也可以提供[自定义排列方法](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Parameters)。\n\n```javascript\n['Shanghai', 'New York', 'Mumbai', 'Buenos Aires'].sort();\n// [\"Buenos Aires\", \"Mumbai\", \"New York\", \"Shanghai\"]\n```\n\n\n但是当你试图整理一个如`['é', 'a', 'ú', 'c']`这样的非ASCII元素的数组时，你可能会得到一个奇怪的结果`['c', 'e', 'á', 'ú']`。这是因为排序方法只在英文下有用。\n\n看一下下一个例子:\n\n```javascript\n// 西班牙语\n['único','árbol', 'cosas', 'fútbol'].sort();\n// [\"cosas\", \"fútbol\", \"árbol\", \"único\"] // bad order\n\n// 德语\n['Woche', 'wöchentlich', 'wäre', 'Wann'].sort();\n// [\"Wann\", \"Woche\", \"wäre\", \"wöchentlich\"] // bad order\n```\n\n\n幸运的是，有两种方法可以解决这个问题，由ECMAScript国际化API提供的[localeCompare](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare)和[Intl.Collator](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Collator)。\n\n> 两个方法都有自定义配置参数可以使其更好用。\n\n### 使用`localeCompare()`\n\n```javascript\n['único','árbol', 'cosas', 'fútbol'].sort(function (a, b) {\n  return a.localeCompare(b);\n});\n// [\"árbol\", \"cosas\", \"fútbol\", \"único\"]\n\n['Woche', 'wöchentlich', 'wäre', 'Wann'].sort(function (a, b) {\n  return a.localeCompare(b);\n});\n// [\"Wann\", \"wäre\", \"Woche\", \"wöchentlich\"]\n```\n\n\n### 使用`Intl.Collator()`\n\n```javascript\n['único','árbol', 'cosas', 'fútbol'].sort(Intl.Collator().compare);\n// [\"árbol\", \"cosas\", \"fútbol\", \"único\"]\n\n['Woche', 'wöchentlich', 'wäre', 'Wann'].sort(Intl.Collator().compare);\n// [\"Wann\", \"wäre\", \"Woche\", \"wöchentlich\"]\n```\n\n\n- 两个方法都可以自定义区域位置。\n- 根据[Firefox](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare#Performance)，当比较大数量的字符串时，使用`Intl.Collator`更快。\n\n所以当你处理一个由非英语组成的字符串数组时，记得使用此方法来避免排序出现意外。\n","source":"_posts/javascript/2016-01-04-sorting-strings-with-accented-characters.md","raw":"---\nlayout: post\n\ntitle: 排列含音节字母的字符串\ntip-number: 04\ntip-username: loverajoel \ntip-username-profile: https://github.com/loverajoel\ntip-tldr: Javascript有一个原生方法**sort**可以排列数组。一次简单的`array.sort()`将每一个数组元素视为字符串并按照字母表排列。但是当你试图整理一个非ASCII元素的数组时，你可能会得到一个奇怪的结果。\ntip-writer-support: https://www.coinbase.com/loverajoel\n\nredirect_from:\n  - /zh_cn/sorting-strings-with-accented-characters/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\nJavascript有一个原生方法**[sort](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)**可以排列数组。一次简单的`array.sort()`将每一个数组元素视为字符串并按照字母表排列。你也可以提供[自定义排列方法](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Parameters)。\n\n```javascript\n['Shanghai', 'New York', 'Mumbai', 'Buenos Aires'].sort();\n// [\"Buenos Aires\", \"Mumbai\", \"New York\", \"Shanghai\"]\n```\n\n\n但是当你试图整理一个如`['é', 'a', 'ú', 'c']`这样的非ASCII元素的数组时，你可能会得到一个奇怪的结果`['c', 'e', 'á', 'ú']`。这是因为排序方法只在英文下有用。\n\n看一下下一个例子:\n\n```javascript\n// 西班牙语\n['único','árbol', 'cosas', 'fútbol'].sort();\n// [\"cosas\", \"fútbol\", \"árbol\", \"único\"] // bad order\n\n// 德语\n['Woche', 'wöchentlich', 'wäre', 'Wann'].sort();\n// [\"Wann\", \"Woche\", \"wäre\", \"wöchentlich\"] // bad order\n```\n\n\n幸运的是，有两种方法可以解决这个问题，由ECMAScript国际化API提供的[localeCompare](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare)和[Intl.Collator](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Collator)。\n\n> 两个方法都有自定义配置参数可以使其更好用。\n\n### 使用`localeCompare()`\n\n```javascript\n['único','árbol', 'cosas', 'fútbol'].sort(function (a, b) {\n  return a.localeCompare(b);\n});\n// [\"árbol\", \"cosas\", \"fútbol\", \"único\"]\n\n['Woche', 'wöchentlich', 'wäre', 'Wann'].sort(function (a, b) {\n  return a.localeCompare(b);\n});\n// [\"Wann\", \"wäre\", \"Woche\", \"wöchentlich\"]\n```\n\n\n### 使用`Intl.Collator()`\n\n```javascript\n['único','árbol', 'cosas', 'fútbol'].sort(Intl.Collator().compare);\n// [\"árbol\", \"cosas\", \"fútbol\", \"único\"]\n\n['Woche', 'wöchentlich', 'wäre', 'Wann'].sort(Intl.Collator().compare);\n// [\"Wann\", \"wäre\", \"Woche\", \"wöchentlich\"]\n```\n\n\n- 两个方法都可以自定义区域位置。\n- 根据[Firefox](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare#Performance)，当比较大数量的字符串时，使用`Intl.Collator`更快。\n\n所以当你处理一个由非英语组成的字符串数组时，记得使用此方法来避免排序出现意外。\n","slug":"javascript/2016-01-04-sorting-strings-with-accented-characters","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqcc0028lyfy008zei3l","content":"<p>Javascript有一个原生方法<strong><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\" target=\"_blank\" rel=\"external\">sort</a></strong>可以排列数组。一次简单的<code>array.sort()</code>将每一个数组元素视为字符串并按照字母表排列。你也可以提供<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Parameters\" target=\"_blank\" rel=\"external\">自定义排列方法</a>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"string\">'Shanghai'</span>, <span class=\"string\">'New York'</span>, <span class=\"string\">'Mumbai'</span>, <span class=\"string\">'Buenos Aires'</span>].sort();</div><div class=\"line\"><span class=\"comment\">// [\"Buenos Aires\", \"Mumbai\", \"New York\", \"Shanghai\"]</span></div></pre></td></tr></table></figure>\n<p>但是当你试图整理一个如<code>[&#39;é&#39;, &#39;a&#39;, &#39;ú&#39;, &#39;c&#39;]</code>这样的非ASCII元素的数组时，你可能会得到一个奇怪的结果<code>[&#39;c&#39;, &#39;e&#39;, &#39;á&#39;, &#39;ú&#39;]</code>。这是因为排序方法只在英文下有用。</p>\n<p>看一下下一个例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 西班牙语</span></div><div class=\"line\">[<span class=\"string\">'único'</span>,<span class=\"string\">'árbol'</span>, <span class=\"string\">'cosas'</span>, <span class=\"string\">'fútbol'</span>].sort();</div><div class=\"line\"><span class=\"comment\">// [\"cosas\", \"fútbol\", \"árbol\", \"único\"] // bad order</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 德语</span></div><div class=\"line\">[<span class=\"string\">'Woche'</span>, <span class=\"string\">'wöchentlich'</span>, <span class=\"string\">'wäre'</span>, <span class=\"string\">'Wann'</span>].sort();</div><div class=\"line\"><span class=\"comment\">// [\"Wann\", \"Woche\", \"wäre\", \"wöchentlich\"] // bad order</span></div></pre></td></tr></table></figure>\n<p>幸运的是，有两种方法可以解决这个问题，由ECMAScript国际化API提供的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\" target=\"_blank\" rel=\"external\">localeCompare</a>和<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Collator\" target=\"_blank\" rel=\"external\">Intl.Collator</a>。</p>\n<blockquote>\n<p>两个方法都有自定义配置参数可以使其更好用。</p>\n</blockquote>\n<h3 id=\"使用localeCompare\"><a href=\"#使用localeCompare\" class=\"headerlink\" title=\"使用localeCompare()\"></a>使用<code>localeCompare()</code></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"string\">'único'</span>,<span class=\"string\">'árbol'</span>, <span class=\"string\">'cosas'</span>, <span class=\"string\">'fútbol'</span>].sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> a.localeCompare(b);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// [\"árbol\", \"cosas\", \"fútbol\", \"único\"]</span></div><div class=\"line\"></div><div class=\"line\">[<span class=\"string\">'Woche'</span>, <span class=\"string\">'wöchentlich'</span>, <span class=\"string\">'wäre'</span>, <span class=\"string\">'Wann'</span>].sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> a.localeCompare(b);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// [\"Wann\", \"wäre\", \"Woche\", \"wöchentlich\"]</span></div></pre></td></tr></table></figure>\n<h3 id=\"使用Intl-Collator\"><a href=\"#使用Intl-Collator\" class=\"headerlink\" title=\"使用Intl.Collator()\"></a>使用<code>Intl.Collator()</code></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"string\">'único'</span>,<span class=\"string\">'árbol'</span>, <span class=\"string\">'cosas'</span>, <span class=\"string\">'fútbol'</span>].sort(<span class=\"built_in\">Intl</span>.Collator().compare);</div><div class=\"line\"><span class=\"comment\">// [\"árbol\", \"cosas\", \"fútbol\", \"único\"]</span></div><div class=\"line\"></div><div class=\"line\">[<span class=\"string\">'Woche'</span>, <span class=\"string\">'wöchentlich'</span>, <span class=\"string\">'wäre'</span>, <span class=\"string\">'Wann'</span>].sort(<span class=\"built_in\">Intl</span>.Collator().compare);</div><div class=\"line\"><span class=\"comment\">// [\"Wann\", \"wäre\", \"Woche\", \"wöchentlich\"]</span></div></pre></td></tr></table></figure>\n<ul>\n<li>两个方法都可以自定义区域位置。</li>\n<li>根据<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare#Performance\" target=\"_blank\" rel=\"external\">Firefox</a>，当比较大数量的字符串时，使用<code>Intl.Collator</code>更快。</li>\n</ul>\n<p>所以当你处理一个由非英语组成的字符串数组时，记得使用此方法来避免排序出现意外。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Javascript有一个原生方法<strong><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\" target=\"_blank\" rel=\"external\">sort</a></strong>可以排列数组。一次简单的<code>array.sort()</code>将每一个数组元素视为字符串并按照字母表排列。你也可以提供<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Parameters\" target=\"_blank\" rel=\"external\">自定义排列方法</a>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"string\">'Shanghai'</span>, <span class=\"string\">'New York'</span>, <span class=\"string\">'Mumbai'</span>, <span class=\"string\">'Buenos Aires'</span>].sort();</div><div class=\"line\"><span class=\"comment\">// [\"Buenos Aires\", \"Mumbai\", \"New York\", \"Shanghai\"]</span></div></pre></td></tr></table></figure>\n<p>但是当你试图整理一个如<code>[&#39;é&#39;, &#39;a&#39;, &#39;ú&#39;, &#39;c&#39;]</code>这样的非ASCII元素的数组时，你可能会得到一个奇怪的结果<code>[&#39;c&#39;, &#39;e&#39;, &#39;á&#39;, &#39;ú&#39;]</code>。这是因为排序方法只在英文下有用。</p>\n<p>看一下下一个例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 西班牙语</span></div><div class=\"line\">[<span class=\"string\">'único'</span>,<span class=\"string\">'árbol'</span>, <span class=\"string\">'cosas'</span>, <span class=\"string\">'fútbol'</span>].sort();</div><div class=\"line\"><span class=\"comment\">// [\"cosas\", \"fútbol\", \"árbol\", \"único\"] // bad order</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 德语</span></div><div class=\"line\">[<span class=\"string\">'Woche'</span>, <span class=\"string\">'wöchentlich'</span>, <span class=\"string\">'wäre'</span>, <span class=\"string\">'Wann'</span>].sort();</div><div class=\"line\"><span class=\"comment\">// [\"Wann\", \"Woche\", \"wäre\", \"wöchentlich\"] // bad order</span></div></pre></td></tr></table></figure>\n<p>幸运的是，有两种方法可以解决这个问题，由ECMAScript国际化API提供的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\" target=\"_blank\" rel=\"external\">localeCompare</a>和<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Collator\" target=\"_blank\" rel=\"external\">Intl.Collator</a>。</p>\n<blockquote>\n<p>两个方法都有自定义配置参数可以使其更好用。</p>\n</blockquote>\n<h3 id=\"使用localeCompare\"><a href=\"#使用localeCompare\" class=\"headerlink\" title=\"使用localeCompare()\"></a>使用<code>localeCompare()</code></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"string\">'único'</span>,<span class=\"string\">'árbol'</span>, <span class=\"string\">'cosas'</span>, <span class=\"string\">'fútbol'</span>].sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> a.localeCompare(b);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// [\"árbol\", \"cosas\", \"fútbol\", \"único\"]</span></div><div class=\"line\"></div><div class=\"line\">[<span class=\"string\">'Woche'</span>, <span class=\"string\">'wöchentlich'</span>, <span class=\"string\">'wäre'</span>, <span class=\"string\">'Wann'</span>].sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> a.localeCompare(b);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// [\"Wann\", \"wäre\", \"Woche\", \"wöchentlich\"]</span></div></pre></td></tr></table></figure>\n<h3 id=\"使用Intl-Collator\"><a href=\"#使用Intl-Collator\" class=\"headerlink\" title=\"使用Intl.Collator()\"></a>使用<code>Intl.Collator()</code></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"string\">'único'</span>,<span class=\"string\">'árbol'</span>, <span class=\"string\">'cosas'</span>, <span class=\"string\">'fútbol'</span>].sort(<span class=\"built_in\">Intl</span>.Collator().compare);</div><div class=\"line\"><span class=\"comment\">// [\"árbol\", \"cosas\", \"fútbol\", \"único\"]</span></div><div class=\"line\"></div><div class=\"line\">[<span class=\"string\">'Woche'</span>, <span class=\"string\">'wöchentlich'</span>, <span class=\"string\">'wäre'</span>, <span class=\"string\">'Wann'</span>].sort(<span class=\"built_in\">Intl</span>.Collator().compare);</div><div class=\"line\"><span class=\"comment\">// [\"Wann\", \"wäre\", \"Woche\", \"wöchentlich\"]</span></div></pre></td></tr></table></figure>\n<ul>\n<li>两个方法都可以自定义区域位置。</li>\n<li>根据<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare#Performance\" target=\"_blank\" rel=\"external\">Firefox</a>，当比较大数量的字符串时，使用<code>Intl.Collator</code>更快。</li>\n</ul>\n<p>所以当你处理一个由非英语组成的字符串数组时，记得使用此方法来避免排序出现意外。</p>\n"},{"layout":"post","title":"undefined与null的区别","tip-number":5,"tip-username":"loverajoel","tip-username-profile":"https://github.com/loverajoel","tip-tldr":"理解`undefined`与`null`的区别。","tip-writer-support":"https://www.coinbase.com/loverajoel","redirect_from":["/zh_cn/differences-between-undefined-and-null/"],"_content":"\n\n- `undefined`表示一个变量没有被声明，或者被声明了但没有被赋值\n- `null`是一个表示“没有值”的值\n- Javascript将未赋值的变量默认值设为`undefined`\n- Javascript从来不会将变量设为`null`。它是用来让程序员表明某个用`var`声明的变量时没有值的。\n- `undefined`不是一个有效的JSON，而`null`是\n- `undefined`的类型(typeof)是`undefined`\n- `null`的类型(typeof)是`object`. [为什么?](http://www.2ality.com/2013/10/typeof-null.html)\n- 它们都是基本类型\n- 他们都是[falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy)\n  (`Boolean(undefined) // false`, `Boolean(null) // false`)\n- 你可以这样判断一个变量是否是[undefined](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined)\n\n```javascript\n  typeof variable === \"undefined\"\n```\n\n- 你可以这样判断一个变量是否是[null](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null)\n\n```javascript\n  variable === null\n```\n\n- **双等号**比较时它们相等，但**三等号**比较时不相等\n\n```javascript\n  null == undefined // true\n\n  null === undefined // false\n```\n","source":"_posts/javascript/2016-01-05-differences-between-undefined-and-null.md","raw":"---\nlayout: post\n\ntitle: undefined与null的区别\ntip-number: 05\ntip-username: loverajoel \ntip-username-profile: https://github.com/loverajoel\ntip-tldr: 理解`undefined`与`null`的区别。\ntip-writer-support: https://www.coinbase.com/loverajoel\n\nredirect_from:\n  - /zh_cn/differences-between-undefined-and-null/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n\n- `undefined`表示一个变量没有被声明，或者被声明了但没有被赋值\n- `null`是一个表示“没有值”的值\n- Javascript将未赋值的变量默认值设为`undefined`\n- Javascript从来不会将变量设为`null`。它是用来让程序员表明某个用`var`声明的变量时没有值的。\n- `undefined`不是一个有效的JSON，而`null`是\n- `undefined`的类型(typeof)是`undefined`\n- `null`的类型(typeof)是`object`. [为什么?](http://www.2ality.com/2013/10/typeof-null.html)\n- 它们都是基本类型\n- 他们都是[falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy)\n  (`Boolean(undefined) // false`, `Boolean(null) // false`)\n- 你可以这样判断一个变量是否是[undefined](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined)\n\n```javascript\n  typeof variable === \"undefined\"\n```\n\n- 你可以这样判断一个变量是否是[null](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null)\n\n```javascript\n  variable === null\n```\n\n- **双等号**比较时它们相等，但**三等号**比较时不相等\n\n```javascript\n  null == undefined // true\n\n  null === undefined // false\n```\n","slug":"javascript/2016-01-05-differences-between-undefined-and-null","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqce0029lyfyc4cwjlur","content":"<ul>\n<li><code>undefined</code>表示一个变量没有被声明，或者被声明了但没有被赋值</li>\n<li><code>null</code>是一个表示“没有值”的值</li>\n<li>Javascript将未赋值的变量默认值设为<code>undefined</code></li>\n<li>Javascript从来不会将变量设为<code>null</code>。它是用来让程序员表明某个用<code>var</code>声明的变量时没有值的。</li>\n<li><code>undefined</code>不是一个有效的JSON，而<code>null</code>是</li>\n<li><code>undefined</code>的类型(typeof)是<code>undefined</code></li>\n<li><code>null</code>的类型(typeof)是<code>object</code>. <a href=\"http://www.2ality.com/2013/10/typeof-null.html\" target=\"_blank\" rel=\"external\">为什么?</a></li>\n<li>它们都是基本类型</li>\n<li>他们都是<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\" target=\"_blank\" rel=\"external\">falsy</a><br>(<code>Boolean(undefined) // false</code>, <code>Boolean(null) // false</code>)</li>\n<li>你可以这样判断一个变量是否是<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined\" target=\"_blank\" rel=\"external\">undefined</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typeof</span> variable === <span class=\"string\">\"undefined\"</span></div></pre></td></tr></table></figure>\n<ul>\n<li>你可以这样判断一个变量是否是<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null\" target=\"_blank\" rel=\"external\">null</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">variable === <span class=\"literal\">null</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>双等号</strong>比较时它们相等，但<strong>三等号</strong>比较时不相等</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span> <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"literal\">null</span> === <span class=\"literal\">undefined</span> <span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><code>undefined</code>表示一个变量没有被声明，或者被声明了但没有被赋值</li>\n<li><code>null</code>是一个表示“没有值”的值</li>\n<li>Javascript将未赋值的变量默认值设为<code>undefined</code></li>\n<li>Javascript从来不会将变量设为<code>null</code>。它是用来让程序员表明某个用<code>var</code>声明的变量时没有值的。</li>\n<li><code>undefined</code>不是一个有效的JSON，而<code>null</code>是</li>\n<li><code>undefined</code>的类型(typeof)是<code>undefined</code></li>\n<li><code>null</code>的类型(typeof)是<code>object</code>. <a href=\"http://www.2ality.com/2013/10/typeof-null.html\" target=\"_blank\" rel=\"external\">为什么?</a></li>\n<li>它们都是基本类型</li>\n<li>他们都是<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\" target=\"_blank\" rel=\"external\">falsy</a><br>(<code>Boolean(undefined) // false</code>, <code>Boolean(null) // false</code>)</li>\n<li>你可以这样判断一个变量是否是<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined\" target=\"_blank\" rel=\"external\">undefined</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typeof</span> variable === <span class=\"string\">\"undefined\"</span></div></pre></td></tr></table></figure>\n<ul>\n<li>你可以这样判断一个变量是否是<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null\" target=\"_blank\" rel=\"external\">null</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">variable === <span class=\"literal\">null</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>双等号</strong>比较时它们相等，但<strong>三等号</strong>比较时不相等</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span> <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"literal\">null</span> === <span class=\"literal\">undefined</span> <span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"可以接受单参数与数组的方法","tip-number":6,"tip-username":"mattfxyz","tip-username-profile":"https://twitter.com/mattfxyz","tip-tldr":"写一个方法可以接受单个参数也可以接受一个数组，而不是分开写两个方法。这和jQuery的一些方法的工作原理很像(`css` 可以修改任何匹配到的选择器).","redirect_from":["/zh_cn/writing-a-single-method-for-arrays-and-a-single-element/"],"_content":"\n写一个方法可以接受单个参数也可以接受一个数组，而不是分开写两个方法。这和jQuery的一些方法的工作原理很像(`css` 可以修改任何匹配到的选择器).\n\n你只要把任何东西连接到一个数组. `Array.concat`可以接受一个数组也可以接受单个参数。\n\n```javascript\nfunction printUpperCase(words) {\n  var elements = [].concat(words || []);\n  for (var i = 0; i < elements.length; i++) {\n    console.log(elements[i].toUpperCase());\n  }\n}\n```\n\n\n`printUpperCase`现在可以接受单个单词或多个单词的数组作为它的参数。同时也可以避免在不传递参数时抛出的`TypeError`错误的隐患。\n\n```javascript\nprintUpperCase(\"cactus\");\n// => CACTUS\nprintUpperCase([\"cactus\", \"bear\", \"potato\"]);\n// => CACTUS\n//  BEAR\n//  POTATO\n```\n\n","source":"_posts/javascript/2016-01-06-writing-a-single-method-for-arrays-and-a-single-element.md","raw":"---\nlayout: post\n\ntitle: 可以接受单参数与数组的方法\ntip-number: 06\ntip-username: mattfxyz\ntip-username-profile: https://twitter.com/mattfxyz\ntip-tldr: 写一个方法可以接受单个参数也可以接受一个数组，而不是分开写两个方法。这和jQuery的一些方法的工作原理很像(`css` 可以修改任何匹配到的选择器).\n\nredirect_from:\n  - /zh_cn/writing-a-single-method-for-arrays-and-a-single-element/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n写一个方法可以接受单个参数也可以接受一个数组，而不是分开写两个方法。这和jQuery的一些方法的工作原理很像(`css` 可以修改任何匹配到的选择器).\n\n你只要把任何东西连接到一个数组. `Array.concat`可以接受一个数组也可以接受单个参数。\n\n```javascript\nfunction printUpperCase(words) {\n  var elements = [].concat(words || []);\n  for (var i = 0; i < elements.length; i++) {\n    console.log(elements[i].toUpperCase());\n  }\n}\n```\n\n\n`printUpperCase`现在可以接受单个单词或多个单词的数组作为它的参数。同时也可以避免在不传递参数时抛出的`TypeError`错误的隐患。\n\n```javascript\nprintUpperCase(\"cactus\");\n// => CACTUS\nprintUpperCase([\"cactus\", \"bear\", \"potato\"]);\n// => CACTUS\n//  BEAR\n//  POTATO\n```\n\n","slug":"javascript/2016-01-06-writing-a-single-method-for-arrays-and-a-single-element","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqch002blyfy100n1avf","content":"<p>写一个方法可以接受单个参数也可以接受一个数组，而不是分开写两个方法。这和jQuery的一些方法的工作原理很像(<code>css</code> 可以修改任何匹配到的选择器).</p>\n<p>你只要把任何东西连接到一个数组. <code>Array.concat</code>可以接受一个数组也可以接受单个参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printUpperCase</span>(<span class=\"params\">words</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> elements = [].concat(words || []);</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; elements.length; i++) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(elements[i].toUpperCase());</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>printUpperCase</code>现在可以接受单个单词或多个单词的数组作为它的参数。同时也可以避免在不传递参数时抛出的<code>TypeError</code>错误的隐患。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">printUpperCase(<span class=\"string\">\"cactus\"</span>);</div><div class=\"line\"><span class=\"comment\">// =&gt; CACTUS</span></div><div class=\"line\">printUpperCase([<span class=\"string\">\"cactus\"</span>, <span class=\"string\">\"bear\"</span>, <span class=\"string\">\"potato\"</span>]);</div><div class=\"line\"><span class=\"comment\">// =&gt; CACTUS</span></div><div class=\"line\"><span class=\"comment\">//  BEAR</span></div><div class=\"line\"><span class=\"comment\">//  POTATO</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>写一个方法可以接受单个参数也可以接受一个数组，而不是分开写两个方法。这和jQuery的一些方法的工作原理很像(<code>css</code> 可以修改任何匹配到的选择器).</p>\n<p>你只要把任何东西连接到一个数组. <code>Array.concat</code>可以接受一个数组也可以接受单个参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printUpperCase</span>(<span class=\"params\">words</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> elements = [].concat(words || []);</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; elements.length; i++) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(elements[i].toUpperCase());</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>printUpperCase</code>现在可以接受单个单词或多个单词的数组作为它的参数。同时也可以避免在不传递参数时抛出的<code>TypeError</code>错误的隐患。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">printUpperCase(<span class=\"string\">\"cactus\"</span>);</div><div class=\"line\"><span class=\"comment\">// =&gt; CACTUS</span></div><div class=\"line\">printUpperCase([<span class=\"string\">\"cactus\"</span>, <span class=\"string\">\"bear\"</span>, <span class=\"string\">\"potato\"</span>]);</div><div class=\"line\"><span class=\"comment\">// =&gt; CACTUS</span></div><div class=\"line\"><span class=\"comment\">//  BEAR</span></div><div class=\"line\"><span class=\"comment\">//  POTATO</span></div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"使用\"use strict\" 变得懒惰","tip-number":7,"tip-username":"nainslie","tip-username-profile":"https://twitter.com/nat5an","tip-tldr":"JavaScript的严格模式使开发者更容易写出“安全”的代码。","redirect_from":["/zh_cn/use-strict-and-get-lazy/"],"_content":"\n（译者注：此片翻译较渣，欢迎指正，建议大家[阅读原文](http://www.jstips.co/en/use-strict-and-get-lazy/)或直接阅读[MDN对严格模式的中文介绍](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode) 并欢迎PR）\n\nJavaScript的严格模式使开发者更容易写出“安全”的代码。\n\n通常情况下，JavaScript允许程序员相当粗心，比如你可以引用一个从未用\"var\"声明的变量。或许对于一个刚入门的开发者来说这看起来很方便，但这也是变量拼写错误或者从作用域外引用变量时引发的一系列错误的原因。\n\n程序员喜欢电脑帮我们做一些无聊的工作，喜欢它自动的检查我们工作上的错误。这就是\"use strict\"帮我们做的，它把我们的错误转变为了JavaScript错误。\n\n我们把这个指令放在js文件顶端来使用它:\n\n```javascript\n// 全脚本严格模式\n\"use strict\";\nvar v = \"Hi!  I'm a strict mode script!\";\n```\n\n\n或者放在一个方法内：\n\n```javascript\nfunction f()\n{\n\n  // 方法级严格模式\n  'use strict';\n  function nested() { return \"And so am I!\"; }\n  return \"Hi!  I'm a strict mode function!  \" + nested();\n}\nfunction f2() { return \"I'm not strict.\"; }\n```\n\n\n通过在JavaScript文件或方法内引入此指令，使JavaScript引擎运行在严格模式下，这直接禁止了许多大项目中不受欢迎的操作。另外，严格模式也改变了以下行为：\n* 只有被\"var\"声明过的变量才可以引用\n* 试图写只读变量时将会报错\n* 只能通过\"new\"关键字调用构造方法\n* \"this\"不再隐式的指向全局变量\n* 对eval()有更严格的限制\n* 防止你使用预保留关键字命名变量\n\n严格模式对于新项目来说是很棒的，但对于一些并没有使用它的老项目来说，引入它也是很有挑战性的。如果你把所有js文件都连接到一个大文件中的话，可能导致所有文件都运行在严格模式下，这可能也会有一些问题。\n\n它不是一个声明，而是一个表达式，被低版本的JavaScript忽略。\n严格模式的支持情况：\n* Internet Explorer 10+\n* Firefox 4+\n* Chrome 13+\n* Safari 5.1+\n* Opera 12+\n\n\n[MDN对严格模式的全面介绍](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode)\n","source":"_posts/javascript/2016-01-07-use-strict-and-get-lazy.md","raw":"---\nlayout: post\n\ntitle: 使用\"use strict\" 变得懒惰\ntip-number: 07\ntip-username: nainslie\ntip-username-profile: https://twitter.com/nat5an\ntip-tldr: JavaScript的严格模式使开发者更容易写出“安全”的代码。\n\nredirect_from:\n  - /zh_cn/use-strict-and-get-lazy/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n（译者注：此片翻译较渣，欢迎指正，建议大家[阅读原文](http://www.jstips.co/en/use-strict-and-get-lazy/)或直接阅读[MDN对严格模式的中文介绍](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode) 并欢迎PR）\n\nJavaScript的严格模式使开发者更容易写出“安全”的代码。\n\n通常情况下，JavaScript允许程序员相当粗心，比如你可以引用一个从未用\"var\"声明的变量。或许对于一个刚入门的开发者来说这看起来很方便，但这也是变量拼写错误或者从作用域外引用变量时引发的一系列错误的原因。\n\n程序员喜欢电脑帮我们做一些无聊的工作，喜欢它自动的检查我们工作上的错误。这就是\"use strict\"帮我们做的，它把我们的错误转变为了JavaScript错误。\n\n我们把这个指令放在js文件顶端来使用它:\n\n```javascript\n// 全脚本严格模式\n\"use strict\";\nvar v = \"Hi!  I'm a strict mode script!\";\n```\n\n\n或者放在一个方法内：\n\n```javascript\nfunction f()\n{\n\n  // 方法级严格模式\n  'use strict';\n  function nested() { return \"And so am I!\"; }\n  return \"Hi!  I'm a strict mode function!  \" + nested();\n}\nfunction f2() { return \"I'm not strict.\"; }\n```\n\n\n通过在JavaScript文件或方法内引入此指令，使JavaScript引擎运行在严格模式下，这直接禁止了许多大项目中不受欢迎的操作。另外，严格模式也改变了以下行为：\n* 只有被\"var\"声明过的变量才可以引用\n* 试图写只读变量时将会报错\n* 只能通过\"new\"关键字调用构造方法\n* \"this\"不再隐式的指向全局变量\n* 对eval()有更严格的限制\n* 防止你使用预保留关键字命名变量\n\n严格模式对于新项目来说是很棒的，但对于一些并没有使用它的老项目来说，引入它也是很有挑战性的。如果你把所有js文件都连接到一个大文件中的话，可能导致所有文件都运行在严格模式下，这可能也会有一些问题。\n\n它不是一个声明，而是一个表达式，被低版本的JavaScript忽略。\n严格模式的支持情况：\n* Internet Explorer 10+\n* Firefox 4+\n* Chrome 13+\n* Safari 5.1+\n* Opera 12+\n\n\n[MDN对严格模式的全面介绍](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode)\n","slug":"javascript/2016-01-07-use-strict-and-get-lazy","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqcj002clyfy163xqchg","content":"<p>（译者注：此片翻译较渣，欢迎指正，建议大家<a href=\"http://www.jstips.co/en/use-strict-and-get-lazy/\" target=\"_blank\" rel=\"external\">阅读原文</a>或直接阅读<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode\" target=\"_blank\" rel=\"external\">MDN对严格模式的中文介绍</a> 并欢迎PR）</p>\n<p>JavaScript的严格模式使开发者更容易写出“安全”的代码。</p>\n<p>通常情况下，JavaScript允许程序员相当粗心，比如你可以引用一个从未用”var”声明的变量。或许对于一个刚入门的开发者来说这看起来很方便，但这也是变量拼写错误或者从作用域外引用变量时引发的一系列错误的原因。</p>\n<p>程序员喜欢电脑帮我们做一些无聊的工作，喜欢它自动的检查我们工作上的错误。这就是”use strict”帮我们做的，它把我们的错误转变为了JavaScript错误。</p>\n<p>我们把这个指令放在js文件顶端来使用它:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 全脚本严格模式</span></div><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> v = <span class=\"string\">\"Hi!  I'm a strict mode script!\"</span>;</div></pre></td></tr></table></figure>\n<p>或者放在一个方法内：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 方法级严格模式</span></div><div class=\"line\"><span class=\"meta\">  'use strict'</span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nested</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">\"And so am I!\"</span>; &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"Hi!  I'm a strict mode function!  \"</span> + nested();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">\"I'm not strict.\"</span>; &#125;</div></pre></td></tr></table></figure>\n<p>通过在JavaScript文件或方法内引入此指令，使JavaScript引擎运行在严格模式下，这直接禁止了许多大项目中不受欢迎的操作。另外，严格模式也改变了以下行为：</p>\n<ul>\n<li>只有被”var”声明过的变量才可以引用</li>\n<li>试图写只读变量时将会报错</li>\n<li>只能通过”new”关键字调用构造方法</li>\n<li>“this”不再隐式的指向全局变量</li>\n<li>对eval()有更严格的限制</li>\n<li>防止你使用预保留关键字命名变量</li>\n</ul>\n<p>严格模式对于新项目来说是很棒的，但对于一些并没有使用它的老项目来说，引入它也是很有挑战性的。如果你把所有js文件都连接到一个大文件中的话，可能导致所有文件都运行在严格模式下，这可能也会有一些问题。</p>\n<p>它不是一个声明，而是一个表达式，被低版本的JavaScript忽略。<br>严格模式的支持情况：</p>\n<ul>\n<li>Internet Explorer 10+</li>\n<li>Firefox 4+</li>\n<li>Chrome 13+</li>\n<li>Safari 5.1+</li>\n<li>Opera 12+</li>\n</ul>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode\" target=\"_blank\" rel=\"external\">MDN对严格模式的全面介绍</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>（译者注：此片翻译较渣，欢迎指正，建议大家<a href=\"http://www.jstips.co/en/use-strict-and-get-lazy/\" target=\"_blank\" rel=\"external\">阅读原文</a>或直接阅读<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode\" target=\"_blank\" rel=\"external\">MDN对严格模式的中文介绍</a> 并欢迎PR）</p>\n<p>JavaScript的严格模式使开发者更容易写出“安全”的代码。</p>\n<p>通常情况下，JavaScript允许程序员相当粗心，比如你可以引用一个从未用”var”声明的变量。或许对于一个刚入门的开发者来说这看起来很方便，但这也是变量拼写错误或者从作用域外引用变量时引发的一系列错误的原因。</p>\n<p>程序员喜欢电脑帮我们做一些无聊的工作，喜欢它自动的检查我们工作上的错误。这就是”use strict”帮我们做的，它把我们的错误转变为了JavaScript错误。</p>\n<p>我们把这个指令放在js文件顶端来使用它:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 全脚本严格模式</span></div><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> v = <span class=\"string\">\"Hi!  I'm a strict mode script!\"</span>;</div></pre></td></tr></table></figure>\n<p>或者放在一个方法内：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 方法级严格模式</span></div><div class=\"line\"><span class=\"meta\">  'use strict'</span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nested</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">\"And so am I!\"</span>; &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"Hi!  I'm a strict mode function!  \"</span> + nested();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">\"I'm not strict.\"</span>; &#125;</div></pre></td></tr></table></figure>\n<p>通过在JavaScript文件或方法内引入此指令，使JavaScript引擎运行在严格模式下，这直接禁止了许多大项目中不受欢迎的操作。另外，严格模式也改变了以下行为：</p>\n<ul>\n<li>只有被”var”声明过的变量才可以引用</li>\n<li>试图写只读变量时将会报错</li>\n<li>只能通过”new”关键字调用构造方法</li>\n<li>“this”不再隐式的指向全局变量</li>\n<li>对eval()有更严格的限制</li>\n<li>防止你使用预保留关键字命名变量</li>\n</ul>\n<p>严格模式对于新项目来说是很棒的，但对于一些并没有使用它的老项目来说，引入它也是很有挑战性的。如果你把所有js文件都连接到一个大文件中的话，可能导致所有文件都运行在严格模式下，这可能也会有一些问题。</p>\n<p>它不是一个声明，而是一个表达式，被低版本的JavaScript忽略。<br>严格模式的支持情况：</p>\n<ul>\n<li>Internet Explorer 10+</li>\n<li>Firefox 4+</li>\n<li>Chrome 13+</li>\n<li>Safari 5.1+</li>\n<li>Opera 12+</li>\n</ul>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode\" target=\"_blank\" rel=\"external\">MDN对严格模式的全面介绍</a></p>\n"},{"layout":"post","title":"将Node List转换为数组(Array)","tip-number":"08","tip-username":"Tevko","tip-username-profile":"https://twitter.com/tevko","tip-tldr":"这是一个快速、安全、可重用的方法将node list转换为DOM元素的数组。","redirect_from":["/zh_cn/converting-a-node-list-to-an-array/"],"_content":"\n`querySelectorAll`方法返回一个类数组对象称为node list。这些数据结构被称为“类数组”，因为他们看似数组却没有类似`map`、`foreach`这样的数组方法。这是一个快速、安全、可重用的方法将node list转换为DOM元素的数组：\n\n```javascript\nconst nodelist = document.querySelectorAll('div');\nconst nodelistToArray = Array.apply(null, nodelist);\n\n\n//之后 ..\n\nnodelistToArray.forEach(...);\nnodelistToArray.map(...);\nnodelistToArray.slice(...);\n\n\n//等...\n```\n\n`apply`方法可以在指定`this`时以数组形式向方法传递参数。[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)规定`apply`可以接受类数组对象,恰巧就是`querySelectorAll`方法所返回的内容。如果我们不需要指定方法内`this`的值时传`null`或`0`即可。返回的结果即包含所有数组方法的DOM元素数组。\n\n另外你可以使用`Array.prototype.slice`结合`Function.prototype.call`或`Function.prototype.apply`， 将类数组对象当做`this`传入：\n\n```javascript\nconst nodelist = document.querySelectorAll('div');\nconst nodelistToArray = Array.prototype.slice.call(nodelist); // or equivalently Array.prototype.slice.apply(nodelist);\n\n//之后 ..\n\nnodelistToArray.forEach(...);\nnodelistToArray.map(...);\nnodelistToArray.slice(...);\n\n//等...\n```\n\n\n如果你正在用ES2015你可以使用[展开运算符 `...`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_operator)\n\n```js\nconst nodelist = [...document.querySelectorAll('div')]; // 返回一个真正的数组\n\n//之后 ..\n\nnodelist.forEach(...);\nnodelist.map(...);\nnodelist.slice(...);\n\n\n//等...\n```\n","source":"_posts/javascript/2016-01-08-converting-a-node-list-to-an-array.md","raw":"---\nlayout: post\n\ntitle: 将Node List转换为数组(Array)\ntip-number: 08\ntip-username: Tevko\ntip-username-profile: https://twitter.com/tevko\ntip-tldr: 这是一个快速、安全、可重用的方法将node list转换为DOM元素的数组。\n\nredirect_from:\n  - /zh_cn/converting-a-node-list-to-an-array/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n`querySelectorAll`方法返回一个类数组对象称为node list。这些数据结构被称为“类数组”，因为他们看似数组却没有类似`map`、`foreach`这样的数组方法。这是一个快速、安全、可重用的方法将node list转换为DOM元素的数组：\n\n```javascript\nconst nodelist = document.querySelectorAll('div');\nconst nodelistToArray = Array.apply(null, nodelist);\n\n\n//之后 ..\n\nnodelistToArray.forEach(...);\nnodelistToArray.map(...);\nnodelistToArray.slice(...);\n\n\n//等...\n```\n\n`apply`方法可以在指定`this`时以数组形式向方法传递参数。[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)规定`apply`可以接受类数组对象,恰巧就是`querySelectorAll`方法所返回的内容。如果我们不需要指定方法内`this`的值时传`null`或`0`即可。返回的结果即包含所有数组方法的DOM元素数组。\n\n另外你可以使用`Array.prototype.slice`结合`Function.prototype.call`或`Function.prototype.apply`， 将类数组对象当做`this`传入：\n\n```javascript\nconst nodelist = document.querySelectorAll('div');\nconst nodelistToArray = Array.prototype.slice.call(nodelist); // or equivalently Array.prototype.slice.apply(nodelist);\n\n//之后 ..\n\nnodelistToArray.forEach(...);\nnodelistToArray.map(...);\nnodelistToArray.slice(...);\n\n//等...\n```\n\n\n如果你正在用ES2015你可以使用[展开运算符 `...`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_operator)\n\n```js\nconst nodelist = [...document.querySelectorAll('div')]; // 返回一个真正的数组\n\n//之后 ..\n\nnodelist.forEach(...);\nnodelist.map(...);\nnodelist.slice(...);\n\n\n//等...\n```\n","slug":"javascript/2016-01-08-converting-a-node-list-to-an-array","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqcl002elyfyo8dhlo94","content":"<p><code>querySelectorAll</code>方法返回一个类数组对象称为node list。这些数据结构被称为“类数组”，因为他们看似数组却没有类似<code>map</code>、<code>foreach</code>这样的数组方法。这是一个快速、安全、可重用的方法将node list转换为DOM元素的数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> nodelist = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'div'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> nodelistToArray = <span class=\"built_in\">Array</span>.apply(<span class=\"literal\">null</span>, nodelist);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//之后 ..</span></div><div class=\"line\"></div><div class=\"line\">nodelistToArray.forEach(...);</div><div class=\"line\">nodelistToArray.map(...);</div><div class=\"line\">nodelistToArray.slice(...);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//等...</span></div></pre></td></tr></table></figure>\n<p><code>apply</code>方法可以在指定<code>this</code>时以数组形式向方法传递参数。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"external\">MDN</a>规定<code>apply</code>可以接受类数组对象,恰巧就是<code>querySelectorAll</code>方法所返回的内容。如果我们不需要指定方法内<code>this</code>的值时传<code>null</code>或<code>0</code>即可。返回的结果即包含所有数组方法的DOM元素数组。</p>\n<p>另外你可以使用<code>Array.prototype.slice</code>结合<code>Function.prototype.call</code>或<code>Function.prototype.apply</code>， 将类数组对象当做<code>this</code>传入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> nodelist = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'div'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> nodelistToArray = <span class=\"built_in\">Array</span>.prototype.slice.call(nodelist); <span class=\"comment\">// or equivalently Array.prototype.slice.apply(nodelist);</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//之后 ..</span></div><div class=\"line\"></div><div class=\"line\">nodelistToArray.forEach(...);</div><div class=\"line\">nodelistToArray.map(...);</div><div class=\"line\">nodelistToArray.slice(...);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//等...</span></div></pre></td></tr></table></figure>\n<p>如果你正在用ES2015你可以使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_operator\" target=\"_blank\" rel=\"external\">展开运算符 <code>...</code></a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> nodelist = [...document.querySelectorAll(<span class=\"string\">'div'</span>)]; <span class=\"comment\">// 返回一个真正的数组</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//之后 ..</span></div><div class=\"line\"></div><div class=\"line\">nodelist.forEach(...);</div><div class=\"line\">nodelist.map(...);</div><div class=\"line\">nodelist.slice(...);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//等...</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><code>querySelectorAll</code>方法返回一个类数组对象称为node list。这些数据结构被称为“类数组”，因为他们看似数组却没有类似<code>map</code>、<code>foreach</code>这样的数组方法。这是一个快速、安全、可重用的方法将node list转换为DOM元素的数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> nodelist = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'div'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> nodelistToArray = <span class=\"built_in\">Array</span>.apply(<span class=\"literal\">null</span>, nodelist);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//之后 ..</span></div><div class=\"line\"></div><div class=\"line\">nodelistToArray.forEach(...);</div><div class=\"line\">nodelistToArray.map(...);</div><div class=\"line\">nodelistToArray.slice(...);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//等...</span></div></pre></td></tr></table></figure>\n<p><code>apply</code>方法可以在指定<code>this</code>时以数组形式向方法传递参数。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"external\">MDN</a>规定<code>apply</code>可以接受类数组对象,恰巧就是<code>querySelectorAll</code>方法所返回的内容。如果我们不需要指定方法内<code>this</code>的值时传<code>null</code>或<code>0</code>即可。返回的结果即包含所有数组方法的DOM元素数组。</p>\n<p>另外你可以使用<code>Array.prototype.slice</code>结合<code>Function.prototype.call</code>或<code>Function.prototype.apply</code>， 将类数组对象当做<code>this</code>传入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> nodelist = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'div'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> nodelistToArray = <span class=\"built_in\">Array</span>.prototype.slice.call(nodelist); <span class=\"comment\">// or equivalently Array.prototype.slice.apply(nodelist);</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//之后 ..</span></div><div class=\"line\"></div><div class=\"line\">nodelistToArray.forEach(...);</div><div class=\"line\">nodelistToArray.map(...);</div><div class=\"line\">nodelistToArray.slice(...);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//等...</span></div></pre></td></tr></table></figure>\n<p>如果你正在用ES2015你可以使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_operator\" target=\"_blank\" rel=\"external\">展开运算符 <code>...</code></a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> nodelist = [...document.querySelectorAll(<span class=\"string\">'div'</span>)]; <span class=\"comment\">// 返回一个真正的数组</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//之后 ..</span></div><div class=\"line\"></div><div class=\"line\">nodelist.forEach(...);</div><div class=\"line\">nodelist.map(...);</div><div class=\"line\">nodelist.slice(...);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//等...</span></div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"模板字符串","tip-number":"09","tip-username":"JakeRawr","tip-username-profile":"https://github.com/JakeRawr","tip-tldr":"ES6中，JS现在有了引号拼接字符串的替代品，模板字符串。","redirect_from":["/zh_cn/template-strings/"],"_content":"\n\nES6中，JS现在有了引号拼接字符串的替代品，模板字符串。\n\n示例:\n普通字符串\n\n```javascript\nvar firstName = 'Jake';\nvar lastName = 'Rawr';\nconsole.log('My name is ' + firstName + ' ' + lastName);\n// My name is Jake Rawr\n```\n\n模板字符串\n```javascript\nvar firstName = 'Jake';\nvar lastName = 'Rawr';\nconsole.log(`My name is ${firstName} ${lastName}`);\n// My name is Jake Rawr\n```\n\n在模板字符串中，你可以不用`\\n`来生成多行字符串，在`${}`里做简单的逻辑运算（例如 2+3）甚至使用[逻辑运算符](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Conditional_Operator)。\n\n```javascript\nvar val1 = 1, val2 = 2;\nconsole.log(`${val1} is ${val1 < val2 ? 'less than': 'greater than'} ${val2}`)\n// 1 is less than 2\n```\n\n你也可以使用函数修改末班字符串的输出内容；这被称为[带标签的模板字符串](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings#带标签的模板字符串)，其中包含了带标签的模板字符串的示例.\n\n\n或许你还想[阅读更多内容](https://hacks.mozilla.org/2015/05/es6-in-depth-template-strings-2)来了解模板字符串。\n","source":"_posts/javascript/2016-01-09-template-strings.md","raw":"---\nlayout: post\n\ntitle: 模板字符串\ntip-number: 09\ntip-username: JakeRawr\ntip-username-profile: https://github.com/JakeRawr\ntip-tldr: ES6中，JS现在有了引号拼接字符串的替代品，模板字符串。\n\nredirect_from:\n  - /zh_cn/template-strings/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n\nES6中，JS现在有了引号拼接字符串的替代品，模板字符串。\n\n示例:\n普通字符串\n\n```javascript\nvar firstName = 'Jake';\nvar lastName = 'Rawr';\nconsole.log('My name is ' + firstName + ' ' + lastName);\n// My name is Jake Rawr\n```\n\n模板字符串\n```javascript\nvar firstName = 'Jake';\nvar lastName = 'Rawr';\nconsole.log(`My name is ${firstName} ${lastName}`);\n// My name is Jake Rawr\n```\n\n在模板字符串中，你可以不用`\\n`来生成多行字符串，在`${}`里做简单的逻辑运算（例如 2+3）甚至使用[逻辑运算符](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Conditional_Operator)。\n\n```javascript\nvar val1 = 1, val2 = 2;\nconsole.log(`${val1} is ${val1 < val2 ? 'less than': 'greater than'} ${val2}`)\n// 1 is less than 2\n```\n\n你也可以使用函数修改末班字符串的输出内容；这被称为[带标签的模板字符串](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings#带标签的模板字符串)，其中包含了带标签的模板字符串的示例.\n\n\n或许你还想[阅读更多内容](https://hacks.mozilla.org/2015/05/es6-in-depth-template-strings-2)来了解模板字符串。\n","slug":"javascript/2016-01-09-template-strings","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqcn002glyfyscnqeoy3","content":"<p>ES6中，JS现在有了引号拼接字符串的替代品，模板字符串。</p>\n<p>示例:<br>普通字符串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> firstName = <span class=\"string\">'Jake'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> lastName = <span class=\"string\">'Rawr'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'My name is '</span> + firstName + <span class=\"string\">' '</span> + lastName);</div><div class=\"line\"><span class=\"comment\">// My name is Jake Rawr</span></div></pre></td></tr></table></figure>\n<p>模板字符串<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> firstName = <span class=\"string\">'Jake'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> lastName = <span class=\"string\">'Rawr'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`My name is <span class=\"subst\">$&#123;firstName&#125;</span> <span class=\"subst\">$&#123;lastName&#125;</span>`</span>);</div><div class=\"line\"><span class=\"comment\">// My name is Jake Rawr</span></div></pre></td></tr></table></figure></p>\n<p>在模板字符串中，你可以不用<code>\\n</code>来生成多行字符串，在<code>${}</code>里做简单的逻辑运算（例如 2+3）甚至使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\" target=\"_blank\" rel=\"external\">逻辑运算符</a>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> val1 = <span class=\"number\">1</span>, val2 = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;val1&#125;</span> is <span class=\"subst\">$&#123;val1 &lt; val2 ? <span class=\"string\">'less than'</span>: <span class=\"string\">'greater than'</span>&#125;</span> <span class=\"subst\">$&#123;val2&#125;</span>`</span>)</div><div class=\"line\"><span class=\"comment\">// 1 is less than 2</span></div></pre></td></tr></table></figure>\n<p>你也可以使用函数修改末班字符串的输出内容；这被称为<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings#带标签的模板字符串\" target=\"_blank\" rel=\"external\">带标签的模板字符串</a>，其中包含了带标签的模板字符串的示例.</p>\n<p>或许你还想<a href=\"https://hacks.mozilla.org/2015/05/es6-in-depth-template-strings-2\" target=\"_blank\" rel=\"external\">阅读更多内容</a>来了解模板字符串。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>ES6中，JS现在有了引号拼接字符串的替代品，模板字符串。</p>\n<p>示例:<br>普通字符串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> firstName = <span class=\"string\">'Jake'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> lastName = <span class=\"string\">'Rawr'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'My name is '</span> + firstName + <span class=\"string\">' '</span> + lastName);</div><div class=\"line\"><span class=\"comment\">// My name is Jake Rawr</span></div></pre></td></tr></table></figure>\n<p>模板字符串<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> firstName = <span class=\"string\">'Jake'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> lastName = <span class=\"string\">'Rawr'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`My name is <span class=\"subst\">$&#123;firstName&#125;</span> <span class=\"subst\">$&#123;lastName&#125;</span>`</span>);</div><div class=\"line\"><span class=\"comment\">// My name is Jake Rawr</span></div></pre></td></tr></table></figure></p>\n<p>在模板字符串中，你可以不用<code>\\n</code>来生成多行字符串，在<code>${}</code>里做简单的逻辑运算（例如 2+3）甚至使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\" target=\"_blank\" rel=\"external\">逻辑运算符</a>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> val1 = <span class=\"number\">1</span>, val2 = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;val1&#125;</span> is <span class=\"subst\">$&#123;val1 &lt; val2 ? <span class=\"string\">'less than'</span>: <span class=\"string\">'greater than'</span>&#125;</span> <span class=\"subst\">$&#123;val2&#125;</span>`</span>)</div><div class=\"line\"><span class=\"comment\">// 1 is less than 2</span></div></pre></td></tr></table></figure>\n<p>你也可以使用函数修改末班字符串的输出内容；这被称为<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings#带标签的模板字符串\" target=\"_blank\" rel=\"external\">带标签的模板字符串</a>，其中包含了带标签的模板字符串的示例.</p>\n<p>或许你还想<a href=\"https://hacks.mozilla.org/2015/05/es6-in-depth-template-strings-2\" target=\"_blank\" rel=\"external\">阅读更多内容</a>来了解模板字符串。</p>\n"},{"layout":"post","title":"变量提升","tip-number":11,"tip-username":"squizzleflip","tip-username-profile":"https://twitter.com/squizzleflip","tip-tldr":"理解变量提升有助于管理函数作用域","redirect_from":["/zh_cn/hoisting/"],"_content":"\n理解[变量提升](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/var#var_hoisting)可以帮助你组织方法作用域。只要记住变量声明和方法声明都会被提升到顶部。变量的定义不会提升，即使你在同一行声明和定义一个变量。变量**声明**是让系统知道有这个变量存在而**定义**是给其赋值。\n\n```javascript\nfunction doTheThing() {\n  // ReferenceError: notDeclared is not defined\n  console.log(notDeclared);\n\n  // Outputs: undefined\n  console.log(definedLater);\n  var definedLater;\n\n  definedLater = 'I am defined!'\n  // Outputs: 'I am defined!'\n  console.log(definedLater)\n\n  // Outputs: undefined\n  console.log(definedSimulateneously);\n  var definedSimulateneously = 'I am defined!'\n  // Outputs: 'I am defined!'\n  console.log(definedSimulateneously)\n\n  // Outputs: 'I did it!'\n  doSomethingElse();\n\n  function doSomethingElse(){\n    console.log('I did it!');\n  }\n\n  // TypeError: undefined is not a function\n  functionVar();\n\n  var functionVar = function(){\n    console.log('I did it!');\n  }\n}\n```\n\n\n为了让你的代码更易读，将所有的变量声明在函数的顶端，这样可以更清楚的知道变量来自哪个作用域。在使用变量之前声明变量。将方法定义在函数的底部。\n","source":"_posts/javascript/2016-01-11-hoisting.md","raw":"---\nlayout: post\n\ntitle: 变量提升\ntip-number: 11\ntip-username: squizzleflip\ntip-username-profile: https://twitter.com/squizzleflip\ntip-tldr: 理解变量提升有助于管理函数作用域\n\nredirect_from:\n  - /zh_cn/hoisting/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n理解[变量提升](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/var#var_hoisting)可以帮助你组织方法作用域。只要记住变量声明和方法声明都会被提升到顶部。变量的定义不会提升，即使你在同一行声明和定义一个变量。变量**声明**是让系统知道有这个变量存在而**定义**是给其赋值。\n\n```javascript\nfunction doTheThing() {\n  // ReferenceError: notDeclared is not defined\n  console.log(notDeclared);\n\n  // Outputs: undefined\n  console.log(definedLater);\n  var definedLater;\n\n  definedLater = 'I am defined!'\n  // Outputs: 'I am defined!'\n  console.log(definedLater)\n\n  // Outputs: undefined\n  console.log(definedSimulateneously);\n  var definedSimulateneously = 'I am defined!'\n  // Outputs: 'I am defined!'\n  console.log(definedSimulateneously)\n\n  // Outputs: 'I did it!'\n  doSomethingElse();\n\n  function doSomethingElse(){\n    console.log('I did it!');\n  }\n\n  // TypeError: undefined is not a function\n  functionVar();\n\n  var functionVar = function(){\n    console.log('I did it!');\n  }\n}\n```\n\n\n为了让你的代码更易读，将所有的变量声明在函数的顶端，这样可以更清楚的知道变量来自哪个作用域。在使用变量之前声明变量。将方法定义在函数的底部。\n","slug":"javascript/2016-01-11-hoisting","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqco002ilyfyl603s172","content":"<p>理解<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/var#var_hoisting\" target=\"_blank\" rel=\"external\">变量提升</a>可以帮助你组织方法作用域。只要记住变量声明和方法声明都会被提升到顶部。变量的定义不会提升，即使你在同一行声明和定义一个变量。变量<strong>声明</strong>是让系统知道有这个变量存在而<strong>定义</strong>是给其赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doTheThing</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ReferenceError: notDeclared is not defined</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(notDeclared);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Outputs: undefined</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(definedLater);</div><div class=\"line\">  <span class=\"keyword\">var</span> definedLater;</div><div class=\"line\"></div><div class=\"line\">  definedLater = <span class=\"string\">'I am defined!'</span></div><div class=\"line\">  <span class=\"comment\">// Outputs: 'I am defined!'</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(definedLater)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Outputs: undefined</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(definedSimulateneously);</div><div class=\"line\">  <span class=\"keyword\">var</span> definedSimulateneously = <span class=\"string\">'I am defined!'</span></div><div class=\"line\">  <span class=\"comment\">// Outputs: 'I am defined!'</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(definedSimulateneously)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Outputs: 'I did it!'</span></div><div class=\"line\">  doSomethingElse();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomethingElse</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'I did it!'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// TypeError: undefined is not a function</span></div><div class=\"line\">  functionVar();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> functionVar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'I did it!'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>为了让你的代码更易读，将所有的变量声明在函数的顶端，这样可以更清楚的知道变量来自哪个作用域。在使用变量之前声明变量。将方法定义在函数的底部。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>理解<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/var#var_hoisting\" target=\"_blank\" rel=\"external\">变量提升</a>可以帮助你组织方法作用域。只要记住变量声明和方法声明都会被提升到顶部。变量的定义不会提升，即使你在同一行声明和定义一个变量。变量<strong>声明</strong>是让系统知道有这个变量存在而<strong>定义</strong>是给其赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doTheThing</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ReferenceError: notDeclared is not defined</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(notDeclared);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Outputs: undefined</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(definedLater);</div><div class=\"line\">  <span class=\"keyword\">var</span> definedLater;</div><div class=\"line\"></div><div class=\"line\">  definedLater = <span class=\"string\">'I am defined!'</span></div><div class=\"line\">  <span class=\"comment\">// Outputs: 'I am defined!'</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(definedLater)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Outputs: undefined</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(definedSimulateneously);</div><div class=\"line\">  <span class=\"keyword\">var</span> definedSimulateneously = <span class=\"string\">'I am defined!'</span></div><div class=\"line\">  <span class=\"comment\">// Outputs: 'I am defined!'</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(definedSimulateneously)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Outputs: 'I did it!'</span></div><div class=\"line\">  doSomethingElse();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomethingElse</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'I did it!'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// TypeError: undefined is not a function</span></div><div class=\"line\">  functionVar();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> functionVar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'I did it!'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>为了让你的代码更易读，将所有的变量声明在函数的顶端，这样可以更清楚的知道变量来自哪个作用域。在使用变量之前声明变量。将方法定义在函数的底部。</p>\n"},{"layout":"post","title":"检查某对象是否有某属性","tip-number":10,"tip-username":"loverajoel","tip-username-profile":"https://www.twitter.com/loverajoel","tip-tldr":"这是一些检查某对象是否有某属性的方法。","tip-writer-support":"https://www.coinbase.com/loverajoel","redirect_from":["/zh_cn/check-if-a-property-is-in-a-object/"],"_content":"\n当你需要检查某属性是否存在于一个[对象](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects)，你可能会这样做：\n\n```javascript\nvar myObject = {\n  name: '@tips_js'\n};\n\n\nif (myObject.name) { ... }\n\n```\n\n这是可以的，但是你需要知道有两种原生方法可以解决此类问题。[`in` 操作符](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/in) 和 [`Object.hasOwnProperty`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty)，任何继承自`Object`的对象都可以使用这两种方法。\n\n### 看一下较大的区别\n\n```javascript\nvar myObject = {\n  name: '@tips_js'\n};\n\nmyObject.hasOwnProperty('name'); // true\n'name' in myObject; // true\n\n\nmyObject.hasOwnProperty('valueOf'); // false, valueOf 继承自原型链\n'valueOf' in myObject; // true\n\n```\n\n\n两者检查属性的深度不同，换言之`hasOwnProperty`只在本身有此属性时返回true,而`in`操作符不区分属性来自于本身或继承自原型链。\n\n这是另一个例子\n\n```javascript\nvar myFunc = function() {\n  this.name = '@tips_js';\n};\nmyFunc.prototype.age = '10 days';\n\nvar user = new myFunc();\n\nuser.hasOwnProperty('name'); // true\n\nuser.hasOwnProperty('age'); // false, 因为age来自于原型链\n```\n\n[在线示例](https://jsbin.com/tecoqa/edit?js,console)!\n\n同样建议阅读关于检查对象是否包含属性时常见错误的[讨论](https://github.com/loverajoel/jstips/issues/62)。\n","source":"_posts/javascript/2016-01-10-check-if-a-property-is-in-a-object.md","raw":"---\nlayout: post\n\ntitle: 检查某对象是否有某属性\ntip-number: 10\ntip-username: loverajoel\ntip-username-profile: https://www.twitter.com/loverajoel\ntip-tldr: 这是一些检查某对象是否有某属性的方法。\ntip-writer-support: https://www.coinbase.com/loverajoel\n\nredirect_from:\n  - /zh_cn/check-if-a-property-is-in-a-object/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n当你需要检查某属性是否存在于一个[对象](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects)，你可能会这样做：\n\n```javascript\nvar myObject = {\n  name: '@tips_js'\n};\n\n\nif (myObject.name) { ... }\n\n```\n\n这是可以的，但是你需要知道有两种原生方法可以解决此类问题。[`in` 操作符](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/in) 和 [`Object.hasOwnProperty`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty)，任何继承自`Object`的对象都可以使用这两种方法。\n\n### 看一下较大的区别\n\n```javascript\nvar myObject = {\n  name: '@tips_js'\n};\n\nmyObject.hasOwnProperty('name'); // true\n'name' in myObject; // true\n\n\nmyObject.hasOwnProperty('valueOf'); // false, valueOf 继承自原型链\n'valueOf' in myObject; // true\n\n```\n\n\n两者检查属性的深度不同，换言之`hasOwnProperty`只在本身有此属性时返回true,而`in`操作符不区分属性来自于本身或继承自原型链。\n\n这是另一个例子\n\n```javascript\nvar myFunc = function() {\n  this.name = '@tips_js';\n};\nmyFunc.prototype.age = '10 days';\n\nvar user = new myFunc();\n\nuser.hasOwnProperty('name'); // true\n\nuser.hasOwnProperty('age'); // false, 因为age来自于原型链\n```\n\n[在线示例](https://jsbin.com/tecoqa/edit?js,console)!\n\n同样建议阅读关于检查对象是否包含属性时常见错误的[讨论](https://github.com/loverajoel/jstips/issues/62)。\n","slug":"javascript/2016-01-10-check-if-a-property-is-in-a-object","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqcp002jlyfyvo6ratbx","content":"<p>当你需要检查某属性是否存在于一个<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects\" target=\"_blank\" rel=\"external\">对象</a>，你可能会这样做：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'@tips_js'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (myObject.name) &#123; ... &#125;</div></pre></td></tr></table></figure>\n<p>这是可以的，但是你需要知道有两种原生方法可以解决此类问题。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/in\" target=\"_blank\" rel=\"external\"><code>in</code> 操作符</a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\" target=\"_blank\" rel=\"external\"><code>Object.hasOwnProperty</code></a>，任何继承自<code>Object</code>的对象都可以使用这两种方法。</p>\n<h3 id=\"看一下较大的区别\"><a href=\"#看一下较大的区别\" class=\"headerlink\" title=\"看一下较大的区别\"></a>看一下较大的区别</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'@tips_js'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">myObject.hasOwnProperty(<span class=\"string\">'name'</span>); <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"string\">'name'</span> <span class=\"keyword\">in</span> myObject; <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">myObject.hasOwnProperty(<span class=\"string\">'valueOf'</span>); <span class=\"comment\">// false, valueOf 继承自原型链</span></div><div class=\"line\"><span class=\"string\">'valueOf'</span> <span class=\"keyword\">in</span> myObject; <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>两者检查属性的深度不同，换言之<code>hasOwnProperty</code>只在本身有此属性时返回true,而<code>in</code>操作符不区分属性来自于本身或继承自原型链。</p>\n<p>这是另一个例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myFunc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = <span class=\"string\">'@tips_js'</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\">myFunc.prototype.age = <span class=\"string\">'10 days'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> myFunc();</div><div class=\"line\"></div><div class=\"line\">user.hasOwnProperty(<span class=\"string\">'name'</span>); <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">user.hasOwnProperty(<span class=\"string\">'age'</span>); <span class=\"comment\">// false, 因为age来自于原型链</span></div></pre></td></tr></table></figure>\n<p><a href=\"https://jsbin.com/tecoqa/edit?js,console\" target=\"_blank\" rel=\"external\">在线示例</a>!</p>\n<p>同样建议阅读关于检查对象是否包含属性时常见错误的<a href=\"https://github.com/loverajoel/jstips/issues/62\" target=\"_blank\" rel=\"external\">讨论</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>当你需要检查某属性是否存在于一个<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects\" target=\"_blank\" rel=\"external\">对象</a>，你可能会这样做：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'@tips_js'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (myObject.name) &#123; ... &#125;</div></pre></td></tr></table></figure>\n<p>这是可以的，但是你需要知道有两种原生方法可以解决此类问题。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/in\" target=\"_blank\" rel=\"external\"><code>in</code> 操作符</a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\" target=\"_blank\" rel=\"external\"><code>Object.hasOwnProperty</code></a>，任何继承自<code>Object</code>的对象都可以使用这两种方法。</p>\n<h3 id=\"看一下较大的区别\"><a href=\"#看一下较大的区别\" class=\"headerlink\" title=\"看一下较大的区别\"></a>看一下较大的区别</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'@tips_js'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">myObject.hasOwnProperty(<span class=\"string\">'name'</span>); <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"string\">'name'</span> <span class=\"keyword\">in</span> myObject; <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">myObject.hasOwnProperty(<span class=\"string\">'valueOf'</span>); <span class=\"comment\">// false, valueOf 继承自原型链</span></div><div class=\"line\"><span class=\"string\">'valueOf'</span> <span class=\"keyword\">in</span> myObject; <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>两者检查属性的深度不同，换言之<code>hasOwnProperty</code>只在本身有此属性时返回true,而<code>in</code>操作符不区分属性来自于本身或继承自原型链。</p>\n<p>这是另一个例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myFunc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = <span class=\"string\">'@tips_js'</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\">myFunc.prototype.age = <span class=\"string\">'10 days'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> myFunc();</div><div class=\"line\"></div><div class=\"line\">user.hasOwnProperty(<span class=\"string\">'name'</span>); <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">user.hasOwnProperty(<span class=\"string\">'age'</span>); <span class=\"comment\">// false, 因为age来自于原型链</span></div></pre></td></tr></table></figure>\n<p><a href=\"https://jsbin.com/tecoqa/edit?js,console\" target=\"_blank\" rel=\"external\">在线示例</a>!</p>\n<p>同样建议阅读关于检查对象是否包含属性时常见错误的<a href=\"https://github.com/loverajoel/jstips/issues/62\" target=\"_blank\" rel=\"external\">讨论</a>。</p>\n"},{"layout":"post","title":"ES6中的伪强制参数","tip-number":12,"tip-username":"Avraam Mavridis","tip-username-profile":"https://github.com/AvraamMavridis","tip-tldr":"在许多编程语言中，方法的参数时默认强制需要的，开发人员需要明确定义一个可选的参数。","redirect_from":["/zh_cn/tip-to-measure-performance-of-a-javascript-block/"],"_content":"\n在许多编程语言中，方法的参数是默认强制需要的，开发人员必须明确定义一个可选的参数。在Javascript 中每一个参数都是可选的，但是我们可以利用[**es6参数默认值**](http://exploringjs.com/es6/ch_parameter-handling.html#sec_parameter-default-values)特性的优点来达到强制要求这种目的，并且不污染函数体本身。\n\n``` javascript\nconst _err = function( message ){\n\n  throw new Error( message );\n\n}\n\nconst getSum = (a = _err('a is not defined'), b = _err('b is not defined')) => a + b\n\ngetSum( 10 ) // throws Error, b is not defined\n\ngetSum( undefined, 10 ) // throws Error, a is not defined\n```\n\n `_err`  是一个即时抛出错误的方法。如果参数中的任何一个没有值，参数默认的值将会被使用， `_err`方法将被调用，并且会抛出一个错误。你可以从[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Default_parameters)看到更多关于**默认参数特性**的例子。 ","source":"_posts/javascript/2016-01-12-pseudomandatory-parameters-in-es6-functions.md","raw":"---\nlayout: post\n\ntitle: ES6中的伪强制参数\ntip-number: 12\ntip-username: Avraam Mavridis\ntip-username-profile: https://github.com/AvraamMavridis\ntip-tldr: 在许多编程语言中，方法的参数时默认强制需要的，开发人员需要明确定义一个可选的参数。\n\nredirect_from:\n  - /zh_cn/tip-to-measure-performance-of-a-javascript-block/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n在许多编程语言中，方法的参数是默认强制需要的，开发人员必须明确定义一个可选的参数。在Javascript 中每一个参数都是可选的，但是我们可以利用[**es6参数默认值**](http://exploringjs.com/es6/ch_parameter-handling.html#sec_parameter-default-values)特性的优点来达到强制要求这种目的，并且不污染函数体本身。\n\n``` javascript\nconst _err = function( message ){\n\n  throw new Error( message );\n\n}\n\nconst getSum = (a = _err('a is not defined'), b = _err('b is not defined')) => a + b\n\ngetSum( 10 ) // throws Error, b is not defined\n\ngetSum( undefined, 10 ) // throws Error, a is not defined\n```\n\n `_err`  是一个即时抛出错误的方法。如果参数中的任何一个没有值，参数默认的值将会被使用， `_err`方法将被调用，并且会抛出一个错误。你可以从[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Default_parameters)看到更多关于**默认参数特性**的例子。 ","slug":"javascript/2016-01-12-pseudomandatory-parameters-in-es6-functions","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqcs002mlyfyq5z0vcfp","content":"<p>在许多编程语言中，方法的参数是默认强制需要的，开发人员必须明确定义一个可选的参数。在Javascript 中每一个参数都是可选的，但是我们可以利用<a href=\"http://exploringjs.com/es6/ch_parameter-handling.html#sec_parameter-default-values\" target=\"_blank\" rel=\"external\"><strong>es6参数默认值</strong></a>特性的优点来达到强制要求这种目的，并且不污染函数体本身。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> _err = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> message </span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>( message );</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> getSum = <span class=\"function\">(<span class=\"params\">a = _err(<span class=\"string\">'a is not defined'</span></span>), <span class=\"params\">b</span> = <span class=\"params\">_err</span>(<span class=\"params\"><span class=\"string\">'b is not defined'</span></span>)) =&gt;</span> a + b</div><div class=\"line\"></div><div class=\"line\">getSum( <span class=\"number\">10</span> ) <span class=\"comment\">// throws Error, b is not defined</span></div><div class=\"line\"></div><div class=\"line\">getSum( <span class=\"literal\">undefined</span>, <span class=\"number\">10</span> ) <span class=\"comment\">// throws Error, a is not defined</span></div></pre></td></tr></table></figure>\n<p> <code>_err</code>  是一个即时抛出错误的方法。如果参数中的任何一个没有值，参数默认的值将会被使用， <code>_err</code>方法将被调用，并且会抛出一个错误。你可以从<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Default_parameters\" target=\"_blank\" rel=\"external\">MDN</a>看到更多关于<strong>默认参数特性</strong>的例子。 </p>\n","site":{"data":{}},"excerpt":"","more":"<p>在许多编程语言中，方法的参数是默认强制需要的，开发人员必须明确定义一个可选的参数。在Javascript 中每一个参数都是可选的，但是我们可以利用<a href=\"http://exploringjs.com/es6/ch_parameter-handling.html#sec_parameter-default-values\" target=\"_blank\" rel=\"external\"><strong>es6参数默认值</strong></a>特性的优点来达到强制要求这种目的，并且不污染函数体本身。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> _err = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> message </span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>( message );</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> getSum = <span class=\"function\">(<span class=\"params\">a = _err(<span class=\"string\">'a is not defined'</span></span>), <span class=\"params\">b</span> = <span class=\"params\">_err</span>(<span class=\"params\"><span class=\"string\">'b is not defined'</span></span>)) =&gt;</span> a + b</div><div class=\"line\"></div><div class=\"line\">getSum( <span class=\"number\">10</span> ) <span class=\"comment\">// throws Error, b is not defined</span></div><div class=\"line\"></div><div class=\"line\">getSum( <span class=\"literal\">undefined</span>, <span class=\"number\">10</span> ) <span class=\"comment\">// throws Error, a is not defined</span></div></pre></td></tr></table></figure>\n<p> <code>_err</code>  是一个即时抛出错误的方法。如果参数中的任何一个没有值，参数默认的值将会被使用， <code>_err</code>方法将被调用，并且会抛出一个错误。你可以从<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Default_parameters\" target=\"_blank\" rel=\"external\">MDN</a>看到更多关于<strong>默认参数特性</strong>的例子。 </p>\n"},{"layout":"post","title":"测量javascript代码块性能的小知识","tip-number":13,"tip-username":"manmadareddy","tip-username-profile":"https://twitter.com/manmadareddy","tip-tldr":"快速的测量javascript的性能，我们可以使用console的方法，例如 ```console.time(label)```和 ```console.timeEnd(label)```","redirect_from":["/zh_cn/fat-arrow-functions/"],"_content":"\n快速的测量javascript的性能，我们可以使用console的方法，例如\n[```console.time(label)```](https://developer.chrome.com/devtools/docs/console-api#consoletimelabel) 和 [```console.timeEnd(label)```](https://developer.chrome.com/devtools/docs/console-api#consoletimeendlabel)\n\n\n```javascript\nconsole.time(\"Array initialize\");\nvar arr = new Array(100),\n    len = arr.length,\n    i;\n\nfor (i = 0; i < len; i++) {\n    arr[i] = new Object();\n};\nconsole.timeEnd(\"Array initialize\"); // Outputs: Array initialize: 0.711ms\n```\n\n\n更多内容:\n[Console object](https://github.com/DeveloperToolsWG/console-object),\n[Javascript benchmarking](https://mathiasbynens.be/notes/javascript-benchmarking)\n\nDemo: [jsfiddle](https://jsfiddle.net/meottb62/) - [codepen](http://codepen.io/anon/pen/JGJPoa) (在浏览器控制台输出)\n\n> 注意：由于[Mozilla](https://developer.mozilla.org/zh-CN/docs/Web/API/Console/time)不建议将其使用在线上项目中，建议仅在开发中使用。","source":"_posts/javascript/2016-01-13-tip-to-measure-performance-of-a-javascript-block.md","raw":"---\nlayout: post\n\ntitle:  测量javascript代码块性能的小知识\ntip-number: 13\ntip-username: manmadareddy\ntip-username-profile: https://twitter.com/manmadareddy\ntip-tldr: 快速的测量javascript的性能，我们可以使用console的方法，例如 ```console.time(label)```和 ```console.timeEnd(label)```\n\nredirect_from:\n  - /zh_cn/fat-arrow-functions/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n快速的测量javascript的性能，我们可以使用console的方法，例如\n[```console.time(label)```](https://developer.chrome.com/devtools/docs/console-api#consoletimelabel) 和 [```console.timeEnd(label)```](https://developer.chrome.com/devtools/docs/console-api#consoletimeendlabel)\n\n\n```javascript\nconsole.time(\"Array initialize\");\nvar arr = new Array(100),\n    len = arr.length,\n    i;\n\nfor (i = 0; i < len; i++) {\n    arr[i] = new Object();\n};\nconsole.timeEnd(\"Array initialize\"); // Outputs: Array initialize: 0.711ms\n```\n\n\n更多内容:\n[Console object](https://github.com/DeveloperToolsWG/console-object),\n[Javascript benchmarking](https://mathiasbynens.be/notes/javascript-benchmarking)\n\nDemo: [jsfiddle](https://jsfiddle.net/meottb62/) - [codepen](http://codepen.io/anon/pen/JGJPoa) (在浏览器控制台输出)\n\n> 注意：由于[Mozilla](https://developer.mozilla.org/zh-CN/docs/Web/API/Console/time)不建议将其使用在线上项目中，建议仅在开发中使用。","slug":"javascript/2016-01-13-tip-to-measure-performance-of-a-javascript-block","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqcu002olyfycacgztgi","content":"<p>快速的测量javascript的性能，我们可以使用console的方法，例如<br>[<figure class=\"highlight plain\"><figcaption><span>和 [```console.timeEnd(label)```](https://developer.chrome.com/devtools/docs/console-api#consoletimeendlabel)</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">```javascript</div><div class=\"line\">console.time(&quot;Array initialize&quot;);</div><div class=\"line\">var arr = new Array(100),</div><div class=\"line\">    len = arr.length,</div><div class=\"line\">    i;</div><div class=\"line\"></div><div class=\"line\">for (i = 0; i &lt; len; i++) &#123;</div><div class=\"line\">    arr[i] = new Object();</div><div class=\"line\">&#125;;</div><div class=\"line\">console.timeEnd(&quot;Array initialize&quot;); // Outputs: Array initialize: 0.711ms</div></pre></td></tr></table></figure></p>\n<p>更多内容:<br><a href=\"https://github.com/DeveloperToolsWG/console-object\" target=\"_blank\" rel=\"external\">Console object</a>,<br><a href=\"https://mathiasbynens.be/notes/javascript-benchmarking\" target=\"_blank\" rel=\"external\">Javascript benchmarking</a></p>\n<p>Demo: <a href=\"https://jsfiddle.net/meottb62/\" target=\"_blank\" rel=\"external\">jsfiddle</a> - <a href=\"http://codepen.io/anon/pen/JGJPoa\" target=\"_blank\" rel=\"external\">codepen</a> (在浏览器控制台输出)</p>\n<blockquote>\n<p>注意：由于<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Console/time\" target=\"_blank\" rel=\"external\">Mozilla</a>不建议将其使用在线上项目中，建议仅在开发中使用。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>快速的测量javascript的性能，我们可以使用console的方法，例如<br>[<figure class=\"highlight plain\"><figcaption><span>和 [```console.timeEnd(label)```](https://developer.chrome.com/devtools/docs/console-api#consoletimeendlabel)</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">```javascript</div><div class=\"line\">console.time(&quot;Array initialize&quot;);</div><div class=\"line\">var arr = new Array(100),</div><div class=\"line\">    len = arr.length,</div><div class=\"line\">    i;</div><div class=\"line\"></div><div class=\"line\">for (i = 0; i &lt; len; i++) &#123;</div><div class=\"line\">    arr[i] = new Object();</div><div class=\"line\">&#125;;</div><div class=\"line\">console.timeEnd(&quot;Array initialize&quot;); // Outputs: Array initialize: 0.711ms</div></pre></td></tr></table></figure></p>\n<p>更多内容:<br><a href=\"https://github.com/DeveloperToolsWG/console-object\" target=\"_blank\" rel=\"external\">Console object</a>,<br><a href=\"https://mathiasbynens.be/notes/javascript-benchmarking\" target=\"_blank\" rel=\"external\">Javascript benchmarking</a></p>\n<p>Demo: <a href=\"https://jsfiddle.net/meottb62/\" target=\"_blank\" rel=\"external\">jsfiddle</a> - <a href=\"http://codepen.io/anon/pen/JGJPoa\" target=\"_blank\" rel=\"external\">codepen</a> (在浏览器控制台输出)</p>\n<blockquote>\n<p>注意：由于<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Console/time\" target=\"_blank\" rel=\"external\">Mozilla</a>不建议将其使用在线上项目中，建议仅在开发中使用。</p>\n</blockquote>\n"},{"layout":"post","title":"箭头函数","tip-number":14,"tip-username":"pklinger","tip-username-profile":"https://github.com/pklinger/","tip-tldr":"介绍一个ES6的新特性，箭头函数或许一个让你用更少行写更多代码的方便工具。","redirect_from":["/zh_cn/fat-arrow-functions/"],"_content":"\n\n介绍一个ES6的新特性，箭头函数或许一个让你用更少行写更多代码的方便工具。它的名字(fat arrow functions)来自于它的语法`=>`是一个比瘦箭头`->`要'胖的箭头'（译者注：但是国内貌似不分胖瘦就叫箭头函数）。Some programmers might already know this type of functions from different languages such as Haskell as 'lambda expressions' respectively 'anonymous functions'. It is called anonymous, as these arrow functions do not have a descriptive function name.（译者注：一些其他语言中的箭头函数，避免不准确就不翻译了 欢迎PR）\n\n### 有什么益处呢?\n* 语法: 更少的代码行; 不再需要一遍一遍的打`function`了\n* 语义: 从上下文中捕获`this`关键字\n\n### 简单的语法示例\n观察一下这两个功能完全相同的代码片段。你将很快明白箭头函数做了什么。\n\n```javascript\n// 箭头函数的一般语法\nparam => expression\n\n// 也可以用用小括号\n// 多参数时小括号是必须的\n(param1 [, param2]) => expression\n\n\n// 使用functions\nvar arr = [5,3,2,9,1];\nvar arrFunc = arr.map(function(x) {\n  return x * x;\n});\nconsole.log(arr)\n\n// 使用箭头函数\nvar arr = [5,3,2,9,1];\nvar arrFunc = arr.map((x) => x*x);\nconsole.log(arr)\n```\n\n正如你所看到的，箭头函数在这种情况下省去了写小括号，function以及return的时间。我建议你总是使用小括号，因为对于像`(x,y) => x+y`这样多参数函数，小括号总是需要的。这仅是以防在不同使用场景下忘记小括号的一种方法。但是上面的代码和`x => x*x`是一样的。至此仅是语法上的提升，减少了代码行数并提高了可读性。\n\n### Lexically binding `this`\n\n这是另一个使用箭头函数的好原因。这是一个关于`this`上下文的问题。使用箭头函数，你不需要再担心`.bind(this)`也不用再设置`that = this`了，因为箭头函数继承了外围作用域的`this`值。看一下下面的[示例](https://jsfiddle.net/pklinger/rw94oc11/):\n\n```javascript\n\n// 全局定义 this.i\nthis.i = 100;\n\nvar counterA = new CounterA();\nvar counterB = new CounterB();\nvar counterC = new CounterC();\nvar counterD = new CounterD();\n\n// 不好的例子\nfunction CounterA() {\n  // CounterA的`this`实例 (!!调用时忽略了此实例)\n  this.i = 0;\n  setInterval(function () {\n    // `this` 指向全局(global)对象,而不是CounterA的`this`\n    // 所以从100开始计数,而不是0 (本地的this.i)\n    this.i++;\n    document.getElementById(\"counterA\").innerHTML = this.i;\n  }, 500);\n}\n\n// 手动绑定 that = this\nfunction CounterB() {\n  this.i = 0;\n  var that = this;\n  setInterval(function() {\n    that.i++;\n    document.getElementById(\"counterB\").innerHTML = that.i;\n  }, 500);\n}\n\n// 使用 .bind(this)\nfunction CounterC() {\n  this.i = 0;\n  setInterval(function() {\n    this.i++;\n    document.getElementById(\"counterC\").innerHTML = this.i;\n  }.bind(this), 500);\n}\n\n// 箭头函数\nfunction CounterD() {\n  this.i = 0;\n  setInterval(() => {\n    this.i++;\n    document.getElementById(\"counterD\").innerHTML = this.i;\n  }, 500);\n}\n```\n\n更多有关箭头函数的内容可以查看[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions)。更多语法选项请看[这里](http://jsrocks.org/2014/10/arrow-functions-and-their-scope/).\n\n","source":"_posts/javascript/2016-01-14-fat-arrow-functions.md","raw":"---\nlayout: post\n\ntitle: 箭头函数\ntip-number: 14\ntip-username: pklinger\ntip-username-profile: https://github.com/pklinger/\ntip-tldr: 介绍一个ES6的新特性，箭头函数或许一个让你用更少行写更多代码的方便工具。\n\nredirect_from:\n  - /zh_cn/fat-arrow-functions/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n\n介绍一个ES6的新特性，箭头函数或许一个让你用更少行写更多代码的方便工具。它的名字(fat arrow functions)来自于它的语法`=>`是一个比瘦箭头`->`要'胖的箭头'（译者注：但是国内貌似不分胖瘦就叫箭头函数）。Some programmers might already know this type of functions from different languages such as Haskell as 'lambda expressions' respectively 'anonymous functions'. It is called anonymous, as these arrow functions do not have a descriptive function name.（译者注：一些其他语言中的箭头函数，避免不准确就不翻译了 欢迎PR）\n\n### 有什么益处呢?\n* 语法: 更少的代码行; 不再需要一遍一遍的打`function`了\n* 语义: 从上下文中捕获`this`关键字\n\n### 简单的语法示例\n观察一下这两个功能完全相同的代码片段。你将很快明白箭头函数做了什么。\n\n```javascript\n// 箭头函数的一般语法\nparam => expression\n\n// 也可以用用小括号\n// 多参数时小括号是必须的\n(param1 [, param2]) => expression\n\n\n// 使用functions\nvar arr = [5,3,2,9,1];\nvar arrFunc = arr.map(function(x) {\n  return x * x;\n});\nconsole.log(arr)\n\n// 使用箭头函数\nvar arr = [5,3,2,9,1];\nvar arrFunc = arr.map((x) => x*x);\nconsole.log(arr)\n```\n\n正如你所看到的，箭头函数在这种情况下省去了写小括号，function以及return的时间。我建议你总是使用小括号，因为对于像`(x,y) => x+y`这样多参数函数，小括号总是需要的。这仅是以防在不同使用场景下忘记小括号的一种方法。但是上面的代码和`x => x*x`是一样的。至此仅是语法上的提升，减少了代码行数并提高了可读性。\n\n### Lexically binding `this`\n\n这是另一个使用箭头函数的好原因。这是一个关于`this`上下文的问题。使用箭头函数，你不需要再担心`.bind(this)`也不用再设置`that = this`了，因为箭头函数继承了外围作用域的`this`值。看一下下面的[示例](https://jsfiddle.net/pklinger/rw94oc11/):\n\n```javascript\n\n// 全局定义 this.i\nthis.i = 100;\n\nvar counterA = new CounterA();\nvar counterB = new CounterB();\nvar counterC = new CounterC();\nvar counterD = new CounterD();\n\n// 不好的例子\nfunction CounterA() {\n  // CounterA的`this`实例 (!!调用时忽略了此实例)\n  this.i = 0;\n  setInterval(function () {\n    // `this` 指向全局(global)对象,而不是CounterA的`this`\n    // 所以从100开始计数,而不是0 (本地的this.i)\n    this.i++;\n    document.getElementById(\"counterA\").innerHTML = this.i;\n  }, 500);\n}\n\n// 手动绑定 that = this\nfunction CounterB() {\n  this.i = 0;\n  var that = this;\n  setInterval(function() {\n    that.i++;\n    document.getElementById(\"counterB\").innerHTML = that.i;\n  }, 500);\n}\n\n// 使用 .bind(this)\nfunction CounterC() {\n  this.i = 0;\n  setInterval(function() {\n    this.i++;\n    document.getElementById(\"counterC\").innerHTML = this.i;\n  }.bind(this), 500);\n}\n\n// 箭头函数\nfunction CounterD() {\n  this.i = 0;\n  setInterval(() => {\n    this.i++;\n    document.getElementById(\"counterD\").innerHTML = this.i;\n  }, 500);\n}\n```\n\n更多有关箭头函数的内容可以查看[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions)。更多语法选项请看[这里](http://jsrocks.org/2014/10/arrow-functions-and-their-scope/).\n\n","slug":"javascript/2016-01-14-fat-arrow-functions","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqcw002rlyfyffq08oft","content":"<p>介绍一个ES6的新特性，箭头函数或许一个让你用更少行写更多代码的方便工具。它的名字(fat arrow functions)来自于它的语法<code>=&gt;</code>是一个比瘦箭头<code>-&gt;</code>要’胖的箭头’（译者注：但是国内貌似不分胖瘦就叫箭头函数）。Some programmers might already know this type of functions from different languages such as Haskell as ‘lambda expressions’ respectively ‘anonymous functions’. It is called anonymous, as these arrow functions do not have a descriptive function name.（译者注：一些其他语言中的箭头函数，避免不准确就不翻译了 欢迎PR）</p>\n<h3 id=\"有什么益处呢\"><a href=\"#有什么益处呢\" class=\"headerlink\" title=\"有什么益处呢?\"></a>有什么益处呢?</h3><ul>\n<li>语法: 更少的代码行; 不再需要一遍一遍的打<code>function</code>了</li>\n<li>语义: 从上下文中捕获<code>this</code>关键字</li>\n</ul>\n<h3 id=\"简单的语法示例\"><a href=\"#简单的语法示例\" class=\"headerlink\" title=\"简单的语法示例\"></a>简单的语法示例</h3><p>观察一下这两个功能完全相同的代码片段。你将很快明白箭头函数做了什么。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 箭头函数的一般语法</span></div><div class=\"line\">param =&gt; expression</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 也可以用用小括号</span></div><div class=\"line\"><span class=\"comment\">// 多参数时小括号是必须的</span></div><div class=\"line\">(param1 [, param2]) =&gt; expression</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用functions</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">9</span>,<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> arrFunc = arr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x * x;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用箭头函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">9</span>,<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> arrFunc = arr.map(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> x*x);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr)</div></pre></td></tr></table></figure>\n<p>正如你所看到的，箭头函数在这种情况下省去了写小括号，function以及return的时间。我建议你总是使用小括号，因为对于像<code>(x,y) =&gt; x+y</code>这样多参数函数，小括号总是需要的。这仅是以防在不同使用场景下忘记小括号的一种方法。但是上面的代码和<code>x =&gt; x*x</code>是一样的。至此仅是语法上的提升，减少了代码行数并提高了可读性。</p>\n<h3 id=\"Lexically-binding-this\"><a href=\"#Lexically-binding-this\" class=\"headerlink\" title=\"Lexically binding this\"></a>Lexically binding <code>this</code></h3><p>这是另一个使用箭头函数的好原因。这是一个关于<code>this</code>上下文的问题。使用箭头函数，你不需要再担心<code>.bind(this)</code>也不用再设置<code>that = this</code>了，因为箭头函数继承了外围作用域的<code>this</code>值。看一下下面的<a href=\"https://jsfiddle.net/pklinger/rw94oc11/\" target=\"_blank\" rel=\"external\">示例</a>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 全局定义 this.i</span></div><div class=\"line\"><span class=\"keyword\">this</span>.i = <span class=\"number\">100</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> counterA = <span class=\"keyword\">new</span> CounterA();</div><div class=\"line\"><span class=\"keyword\">var</span> counterB = <span class=\"keyword\">new</span> CounterB();</div><div class=\"line\"><span class=\"keyword\">var</span> counterC = <span class=\"keyword\">new</span> CounterC();</div><div class=\"line\"><span class=\"keyword\">var</span> counterD = <span class=\"keyword\">new</span> CounterD();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 不好的例子</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CounterA</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// CounterA的`this`实例 (!!调用时忽略了此实例)</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.i = <span class=\"number\">0</span>;</div><div class=\"line\">  setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// `this` 指向全局(global)对象,而不是CounterA的`this`</span></div><div class=\"line\">    <span class=\"comment\">// 所以从100开始计数,而不是0 (本地的this.i)</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.i++;</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"counterA\"</span>).innerHTML = <span class=\"keyword\">this</span>.i;</div><div class=\"line\">  &#125;, <span class=\"number\">500</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 手动绑定 that = this</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CounterB</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.i = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\">  setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    that.i++;</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"counterB\"</span>).innerHTML = that.i;</div><div class=\"line\">  &#125;, <span class=\"number\">500</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 .bind(this)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CounterC</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.i = <span class=\"number\">0</span>;</div><div class=\"line\">  setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.i++;</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"counterC\"</span>).innerHTML = <span class=\"keyword\">this</span>.i;</div><div class=\"line\">  &#125;.bind(<span class=\"keyword\">this</span>), <span class=\"number\">500</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 箭头函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CounterD</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.i = <span class=\"number\">0</span>;</div><div class=\"line\">  setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.i++;</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"counterD\"</span>).innerHTML = <span class=\"keyword\">this</span>.i;</div><div class=\"line\">  &#125;, <span class=\"number\">500</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>更多有关箭头函数的内容可以查看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"external\">MDN</a>。更多语法选项请看<a href=\"http://jsrocks.org/2014/10/arrow-functions-and-their-scope/\" target=\"_blank\" rel=\"external\">这里</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>介绍一个ES6的新特性，箭头函数或许一个让你用更少行写更多代码的方便工具。它的名字(fat arrow functions)来自于它的语法<code>=&gt;</code>是一个比瘦箭头<code>-&gt;</code>要’胖的箭头’（译者注：但是国内貌似不分胖瘦就叫箭头函数）。Some programmers might already know this type of functions from different languages such as Haskell as ‘lambda expressions’ respectively ‘anonymous functions’. It is called anonymous, as these arrow functions do not have a descriptive function name.（译者注：一些其他语言中的箭头函数，避免不准确就不翻译了 欢迎PR）</p>\n<h3 id=\"有什么益处呢\"><a href=\"#有什么益处呢\" class=\"headerlink\" title=\"有什么益处呢?\"></a>有什么益处呢?</h3><ul>\n<li>语法: 更少的代码行; 不再需要一遍一遍的打<code>function</code>了</li>\n<li>语义: 从上下文中捕获<code>this</code>关键字</li>\n</ul>\n<h3 id=\"简单的语法示例\"><a href=\"#简单的语法示例\" class=\"headerlink\" title=\"简单的语法示例\"></a>简单的语法示例</h3><p>观察一下这两个功能完全相同的代码片段。你将很快明白箭头函数做了什么。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 箭头函数的一般语法</span></div><div class=\"line\">param =&gt; expression</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 也可以用用小括号</span></div><div class=\"line\"><span class=\"comment\">// 多参数时小括号是必须的</span></div><div class=\"line\">(param1 [, param2]) =&gt; expression</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用functions</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">9</span>,<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> arrFunc = arr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x * x;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用箭头函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">9</span>,<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> arrFunc = arr.map(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> x*x);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr)</div></pre></td></tr></table></figure>\n<p>正如你所看到的，箭头函数在这种情况下省去了写小括号，function以及return的时间。我建议你总是使用小括号，因为对于像<code>(x,y) =&gt; x+y</code>这样多参数函数，小括号总是需要的。这仅是以防在不同使用场景下忘记小括号的一种方法。但是上面的代码和<code>x =&gt; x*x</code>是一样的。至此仅是语法上的提升，减少了代码行数并提高了可读性。</p>\n<h3 id=\"Lexically-binding-this\"><a href=\"#Lexically-binding-this\" class=\"headerlink\" title=\"Lexically binding this\"></a>Lexically binding <code>this</code></h3><p>这是另一个使用箭头函数的好原因。这是一个关于<code>this</code>上下文的问题。使用箭头函数，你不需要再担心<code>.bind(this)</code>也不用再设置<code>that = this</code>了，因为箭头函数继承了外围作用域的<code>this</code>值。看一下下面的<a href=\"https://jsfiddle.net/pklinger/rw94oc11/\" target=\"_blank\" rel=\"external\">示例</a>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 全局定义 this.i</span></div><div class=\"line\"><span class=\"keyword\">this</span>.i = <span class=\"number\">100</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> counterA = <span class=\"keyword\">new</span> CounterA();</div><div class=\"line\"><span class=\"keyword\">var</span> counterB = <span class=\"keyword\">new</span> CounterB();</div><div class=\"line\"><span class=\"keyword\">var</span> counterC = <span class=\"keyword\">new</span> CounterC();</div><div class=\"line\"><span class=\"keyword\">var</span> counterD = <span class=\"keyword\">new</span> CounterD();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 不好的例子</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CounterA</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// CounterA的`this`实例 (!!调用时忽略了此实例)</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.i = <span class=\"number\">0</span>;</div><div class=\"line\">  setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// `this` 指向全局(global)对象,而不是CounterA的`this`</span></div><div class=\"line\">    <span class=\"comment\">// 所以从100开始计数,而不是0 (本地的this.i)</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.i++;</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"counterA\"</span>).innerHTML = <span class=\"keyword\">this</span>.i;</div><div class=\"line\">  &#125;, <span class=\"number\">500</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 手动绑定 that = this</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CounterB</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.i = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\">  setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    that.i++;</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"counterB\"</span>).innerHTML = that.i;</div><div class=\"line\">  &#125;, <span class=\"number\">500</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 .bind(this)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CounterC</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.i = <span class=\"number\">0</span>;</div><div class=\"line\">  setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.i++;</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"counterC\"</span>).innerHTML = <span class=\"keyword\">this</span>.i;</div><div class=\"line\">  &#125;.bind(<span class=\"keyword\">this</span>), <span class=\"number\">500</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 箭头函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CounterD</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.i = <span class=\"number\">0</span>;</div><div class=\"line\">  setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.i++;</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"counterD\"</span>).innerHTML = <span class=\"keyword\">this</span>.i;</div><div class=\"line\">  &#125;, <span class=\"number\">500</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>更多有关箭头函数的内容可以查看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"external\">MDN</a>。更多语法选项请看<a href=\"http://jsrocks.org/2014/10/arrow-functions-and-their-scope/\" target=\"_blank\" rel=\"external\">这里</a>.</p>\n"},{"layout":"post","title":"更简单的使用indexOf实现contains功能","tip-number":15,"tip-username":"jhogoforbroke","tip-username-profile":"https://twitter.com/jhogoforbroke","tip-tldr":"JavaScript并未提供contains方法。检测子字符串是否存在于字符串或者变量是否存在于数组你可能会这样做。","redirect_from":["/zh_cn/even-simpler-way-of-using-indexof-as-a-contains-clause/"],"_content":"\n\nJavaScript并未提供contains方法。检测子字符串是否存在于字符串或者变量是否存在于数组你可能会这样做：\n\n```javascript\nvar someText = 'javascript rules';\nif (someText.indexOf('javascript') !== -1) {\n}\n\n// or\nif (someText.indexOf('javascript') >= 0) {\n}\n```\n\n但是让我们看一下这些 [Expressjs](https://github.com/strongloop/express)代码段。\n\n[examples/mvc/lib/boot.js](https://github.com/strongloop/express/blob/2f8ac6726fa20ab5b4a05c112c886752868ac8ce/examples/mvc/lib/boot.js#L26)\n\n```javascript\nfor (var key in obj) {\n  // \"reserved\" exports\n  if (~['name', 'prefix', 'engine', 'before'].indexOf(key)) continue;\n```\n\n[lib/utils.js](https://github.com/strongloop/express/blob/2f8ac6726fa20ab5b4a05c112c886752868ac8ce/lib/utils.js#L93)\n\n```javascript\nexports.normalizeType = function(type){\n  return ~type.indexOf('/')\n    ? acceptParams(type)\n    : { value: mime.lookup(type), params: {} };\n};\n```\n\n[examples/web-service/index.js](https://github.com/strongloop/express/blob/2f8ac6726fa20ab5b4a05c112c886752868ac8ce/examples/web-service/index.js#L35)\n\n```javascript\n// key is invalid\nif (!~apiKeys.indexOf(key)) return next(error(401, 'invalid api key'));\n```\n\n难点是 [位操作符](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators) **~**, “按位操作符操作数字的二进制形式，但是返回值依然是标准的JavaScript数值。”\n\n它将`-1`转换为`0`,而`0`在javascript为`false`,所以:\n\n```javascript\nvar someText = 'text';\n!!~someText.indexOf('tex'); // someText contains \"tex\" - true\n!~someText.indexOf('tex'); // someText NOT contains \"tex\" - false\n~someText.indexOf('asd'); // someText doesn't contain \"asd\" - false\n~someText.indexOf('ext'); // someText contains \"ext\" - true\n```\n\n### String.prototype.includes()\n\n在ES6中提供了[includes() 方法](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/includes)供我们判断一个字符串是否包含了另一个字符串:\n\n```javascript\n'something'.includes('thing'); // true\n```\n\n在ECMAScript 2016 (ES7)甚至可能将其应用于数组，像indexOf一样:\n\n```javascript\n!!~[1, 2, 3].indexOf(1); // true\n[1, 2, 3].includes(1); // true\n```\n\n**不幸的是, 只有Chrome、Firefox、Safari 9及其更高版本和Edge支持了这功能。IE11及其更低版本并不支持**\n**最好在受控的环境中使用此功能**\n","source":"_posts/javascript/2016-01-15-even-simpler-way-of-using-indexof-as-a-contains-clause.md","raw":"---\nlayout: post\n\ntitle: 更简单的使用indexOf实现contains功能\ntip-number: 15\ntip-username: jhogoforbroke\ntip-username-profile: https://twitter.com/jhogoforbroke\ntip-tldr: JavaScript并未提供contains方法。检测子字符串是否存在于字符串或者变量是否存在于数组你可能会这样做。\n\nredirect_from:\n  - /zh_cn/even-simpler-way-of-using-indexof-as-a-contains-clause/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n\nJavaScript并未提供contains方法。检测子字符串是否存在于字符串或者变量是否存在于数组你可能会这样做：\n\n```javascript\nvar someText = 'javascript rules';\nif (someText.indexOf('javascript') !== -1) {\n}\n\n// or\nif (someText.indexOf('javascript') >= 0) {\n}\n```\n\n但是让我们看一下这些 [Expressjs](https://github.com/strongloop/express)代码段。\n\n[examples/mvc/lib/boot.js](https://github.com/strongloop/express/blob/2f8ac6726fa20ab5b4a05c112c886752868ac8ce/examples/mvc/lib/boot.js#L26)\n\n```javascript\nfor (var key in obj) {\n  // \"reserved\" exports\n  if (~['name', 'prefix', 'engine', 'before'].indexOf(key)) continue;\n```\n\n[lib/utils.js](https://github.com/strongloop/express/blob/2f8ac6726fa20ab5b4a05c112c886752868ac8ce/lib/utils.js#L93)\n\n```javascript\nexports.normalizeType = function(type){\n  return ~type.indexOf('/')\n    ? acceptParams(type)\n    : { value: mime.lookup(type), params: {} };\n};\n```\n\n[examples/web-service/index.js](https://github.com/strongloop/express/blob/2f8ac6726fa20ab5b4a05c112c886752868ac8ce/examples/web-service/index.js#L35)\n\n```javascript\n// key is invalid\nif (!~apiKeys.indexOf(key)) return next(error(401, 'invalid api key'));\n```\n\n难点是 [位操作符](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators) **~**, “按位操作符操作数字的二进制形式，但是返回值依然是标准的JavaScript数值。”\n\n它将`-1`转换为`0`,而`0`在javascript为`false`,所以:\n\n```javascript\nvar someText = 'text';\n!!~someText.indexOf('tex'); // someText contains \"tex\" - true\n!~someText.indexOf('tex'); // someText NOT contains \"tex\" - false\n~someText.indexOf('asd'); // someText doesn't contain \"asd\" - false\n~someText.indexOf('ext'); // someText contains \"ext\" - true\n```\n\n### String.prototype.includes()\n\n在ES6中提供了[includes() 方法](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/includes)供我们判断一个字符串是否包含了另一个字符串:\n\n```javascript\n'something'.includes('thing'); // true\n```\n\n在ECMAScript 2016 (ES7)甚至可能将其应用于数组，像indexOf一样:\n\n```javascript\n!!~[1, 2, 3].indexOf(1); // true\n[1, 2, 3].includes(1); // true\n```\n\n**不幸的是, 只有Chrome、Firefox、Safari 9及其更高版本和Edge支持了这功能。IE11及其更低版本并不支持**\n**最好在受控的环境中使用此功能**\n","slug":"javascript/2016-01-15-even-simpler-way-of-using-indexof-as-a-contains-clause","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqcx002tlyfy4uwna6u2","content":"<p>JavaScript并未提供contains方法。检测子字符串是否存在于字符串或者变量是否存在于数组你可能会这样做：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> someText = <span class=\"string\">'javascript rules'</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (someText.indexOf(<span class=\"string\">'javascript'</span>) !== <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// or</span></div><div class=\"line\"><span class=\"keyword\">if</span> (someText.indexOf(<span class=\"string\">'javascript'</span>) &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是让我们看一下这些 <a href=\"https://github.com/strongloop/express\" target=\"_blank\" rel=\"external\">Expressjs</a>代码段。</p>\n<p><a href=\"https://github.com/strongloop/express/blob/2f8ac6726fa20ab5b4a05c112c886752868ac8ce/examples/mvc/lib/boot.js#L26\" target=\"_blank\" rel=\"external\">examples/mvc/lib/boot.js</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj) &#123;</div><div class=\"line\">  <span class=\"comment\">// \"reserved\" exports</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (~[<span class=\"string\">'name'</span>, <span class=\"string\">'prefix'</span>, <span class=\"string\">'engine'</span>, <span class=\"string\">'before'</span>].indexOf(key)) <span class=\"keyword\">continue</span>;</div></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/strongloop/express/blob/2f8ac6726fa20ab5b4a05c112c886752868ac8ce/lib/utils.js#L93\" target=\"_blank\" rel=\"external\">lib/utils.js</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.normalizeType = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> ~type.indexOf(<span class=\"string\">'/'</span>)</div><div class=\"line\">    ? acceptParams(type)</div><div class=\"line\">    : &#123; <span class=\"attr\">value</span>: mime.lookup(type), <span class=\"attr\">params</span>: &#123;&#125; &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/strongloop/express/blob/2f8ac6726fa20ab5b4a05c112c886752868ac8ce/examples/web-service/index.js#L35\" target=\"_blank\" rel=\"external\">examples/web-service/index.js</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// key is invalid</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!~apiKeys.indexOf(key)) <span class=\"keyword\">return</span> next(error(<span class=\"number\">401</span>, <span class=\"string\">'invalid api key'</span>));</div></pre></td></tr></table></figure>\n<p>难点是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\" target=\"_blank\" rel=\"external\">位操作符</a> <strong>~</strong>, “按位操作符操作数字的二进制形式，但是返回值依然是标准的JavaScript数值。”</p>\n<p>它将<code>-1</code>转换为<code>0</code>,而<code>0</code>在javascript为<code>false</code>,所以:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> someText = <span class=\"string\">'text'</span>;</div><div class=\"line\">!!~someText.indexOf(<span class=\"string\">'tex'</span>); <span class=\"comment\">// someText contains \"tex\" - true</span></div><div class=\"line\">!~someText.indexOf(<span class=\"string\">'tex'</span>); <span class=\"comment\">// someText NOT contains \"tex\" - false</span></div><div class=\"line\">~someText.indexOf(<span class=\"string\">'asd'</span>); <span class=\"comment\">// someText doesn't contain \"asd\" - false</span></div><div class=\"line\">~someText.indexOf(<span class=\"string\">'ext'</span>); <span class=\"comment\">// someText contains \"ext\" - true</span></div></pre></td></tr></table></figure>\n<h3 id=\"String-prototype-includes\"><a href=\"#String-prototype-includes\" class=\"headerlink\" title=\"String.prototype.includes()\"></a>String.prototype.includes()</h3><p>在ES6中提供了<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/includes\" target=\"_blank\" rel=\"external\">includes() 方法</a>供我们判断一个字符串是否包含了另一个字符串:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'something'</span>.includes(<span class=\"string\">'thing'</span>); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>在ECMAScript 2016 (ES7)甚至可能将其应用于数组，像indexOf一样:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">!!~[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].indexOf(<span class=\"number\">1</span>); <span class=\"comment\">// true</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">1</span>); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p><strong>不幸的是, 只有Chrome、Firefox、Safari 9及其更高版本和Edge支持了这功能。IE11及其更低版本并不支持</strong><br><strong>最好在受控的环境中使用此功能</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>JavaScript并未提供contains方法。检测子字符串是否存在于字符串或者变量是否存在于数组你可能会这样做：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> someText = <span class=\"string\">'javascript rules'</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (someText.indexOf(<span class=\"string\">'javascript'</span>) !== <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// or</span></div><div class=\"line\"><span class=\"keyword\">if</span> (someText.indexOf(<span class=\"string\">'javascript'</span>) &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是让我们看一下这些 <a href=\"https://github.com/strongloop/express\" target=\"_blank\" rel=\"external\">Expressjs</a>代码段。</p>\n<p><a href=\"https://github.com/strongloop/express/blob/2f8ac6726fa20ab5b4a05c112c886752868ac8ce/examples/mvc/lib/boot.js#L26\" target=\"_blank\" rel=\"external\">examples/mvc/lib/boot.js</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj) &#123;</div><div class=\"line\">  <span class=\"comment\">// \"reserved\" exports</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (~[<span class=\"string\">'name'</span>, <span class=\"string\">'prefix'</span>, <span class=\"string\">'engine'</span>, <span class=\"string\">'before'</span>].indexOf(key)) <span class=\"keyword\">continue</span>;</div></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/strongloop/express/blob/2f8ac6726fa20ab5b4a05c112c886752868ac8ce/lib/utils.js#L93\" target=\"_blank\" rel=\"external\">lib/utils.js</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.normalizeType = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> ~type.indexOf(<span class=\"string\">'/'</span>)</div><div class=\"line\">    ? acceptParams(type)</div><div class=\"line\">    : &#123; <span class=\"attr\">value</span>: mime.lookup(type), <span class=\"attr\">params</span>: &#123;&#125; &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/strongloop/express/blob/2f8ac6726fa20ab5b4a05c112c886752868ac8ce/examples/web-service/index.js#L35\" target=\"_blank\" rel=\"external\">examples/web-service/index.js</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// key is invalid</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!~apiKeys.indexOf(key)) <span class=\"keyword\">return</span> next(error(<span class=\"number\">401</span>, <span class=\"string\">'invalid api key'</span>));</div></pre></td></tr></table></figure>\n<p>难点是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\" target=\"_blank\" rel=\"external\">位操作符</a> <strong>~</strong>, “按位操作符操作数字的二进制形式，但是返回值依然是标准的JavaScript数值。”</p>\n<p>它将<code>-1</code>转换为<code>0</code>,而<code>0</code>在javascript为<code>false</code>,所以:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> someText = <span class=\"string\">'text'</span>;</div><div class=\"line\">!!~someText.indexOf(<span class=\"string\">'tex'</span>); <span class=\"comment\">// someText contains \"tex\" - true</span></div><div class=\"line\">!~someText.indexOf(<span class=\"string\">'tex'</span>); <span class=\"comment\">// someText NOT contains \"tex\" - false</span></div><div class=\"line\">~someText.indexOf(<span class=\"string\">'asd'</span>); <span class=\"comment\">// someText doesn't contain \"asd\" - false</span></div><div class=\"line\">~someText.indexOf(<span class=\"string\">'ext'</span>); <span class=\"comment\">// someText contains \"ext\" - true</span></div></pre></td></tr></table></figure>\n<h3 id=\"String-prototype-includes\"><a href=\"#String-prototype-includes\" class=\"headerlink\" title=\"String.prototype.includes()\"></a>String.prototype.includes()</h3><p>在ES6中提供了<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/includes\" target=\"_blank\" rel=\"external\">includes() 方法</a>供我们判断一个字符串是否包含了另一个字符串:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'something'</span>.includes(<span class=\"string\">'thing'</span>); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>在ECMAScript 2016 (ES7)甚至可能将其应用于数组，像indexOf一样:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">!!~[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].indexOf(<span class=\"number\">1</span>); <span class=\"comment\">// true</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">1</span>); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p><strong>不幸的是, 只有Chrome、Firefox、Safari 9及其更高版本和Edge支持了这功能。IE11及其更低版本并不支持</strong><br><strong>最好在受控的环境中使用此功能</strong></p>\n"},{"layout":"post","title":"向回调方法传递参数","tip-number":16,"tip-username":"minhazav","tip-username-profile":"https://twitter.com/minhazav","tip-tldr":"通常下，你并不能给回调函数传递参数，但是你可以借助Javascript闭包的优势来传递参数给回调函数。","redirect_from":["/zh_cn/passing-arguments-to-callback-functions/"],"_content":"\n通常下，你并不能给回调函数传递参数。 比如:\n\n```js\nfunction callback() {\n  console.log('Hi human');\n}\n\ndocument.getElementById('someelem').addEventListener('click', callback);\n```\n\n你可以借助Javascript闭包的优势来传递参数给回调函数。看这个例子:\n\n```js\nfunction callback(a, b) {\n  return function() {\n    console.log('sum = ', (a+b));\n  }\n}\n\nvar x = 1, y = 2;\ndocument.getElementById('someelem').addEventListener('click', callback(x, y));\n```\n\n**什么是闭包?**\n闭包是指函数有自由独立的变量。换句话说，定义在闭包中的函数可以“记忆”它创建时候的环境。想了解更多请[参考MDN的文档](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures)。\n\n这种方法使参数`x`和`y`在回调方法被调用时处于其作用域内。\n\n另一个办法是使用`bind`方法。比如:\n\n```js\nvar alertText = function(text) {\n  alert(text);\n};\n\ndocument.getElementById('someelem').addEventListener('click', alertText.bind(this, 'hello'));\n```\n\n两种方法之间有着微小的性能差异,请看[jsperf](http://jsperf.com/bind-vs-closure-23).\n","source":"_posts/javascript/2016-01-16-passing-arguments-to-callback-functions.md","raw":"---\nlayout: post\n\ntitle: 向回调方法传递参数\ntip-number: 16\ntip-username: minhazav\ntip-username-profile: https://twitter.com/minhazav\ntip-tldr: 通常下，你并不能给回调函数传递参数，但是你可以借助Javascript闭包的优势来传递参数给回调函数。\n\nredirect_from:\n  - /zh_cn/passing-arguments-to-callback-functions/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n通常下，你并不能给回调函数传递参数。 比如:\n\n```js\nfunction callback() {\n  console.log('Hi human');\n}\n\ndocument.getElementById('someelem').addEventListener('click', callback);\n```\n\n你可以借助Javascript闭包的优势来传递参数给回调函数。看这个例子:\n\n```js\nfunction callback(a, b) {\n  return function() {\n    console.log('sum = ', (a+b));\n  }\n}\n\nvar x = 1, y = 2;\ndocument.getElementById('someelem').addEventListener('click', callback(x, y));\n```\n\n**什么是闭包?**\n闭包是指函数有自由独立的变量。换句话说，定义在闭包中的函数可以“记忆”它创建时候的环境。想了解更多请[参考MDN的文档](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures)。\n\n这种方法使参数`x`和`y`在回调方法被调用时处于其作用域内。\n\n另一个办法是使用`bind`方法。比如:\n\n```js\nvar alertText = function(text) {\n  alert(text);\n};\n\ndocument.getElementById('someelem').addEventListener('click', alertText.bind(this, 'hello'));\n```\n\n两种方法之间有着微小的性能差异,请看[jsperf](http://jsperf.com/bind-vs-closure-23).\n","slug":"javascript/2016-01-16-passing-arguments-to-callback-functions","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqcz002wlyfyt5p8fkfw","content":"<p>通常下，你并不能给回调函数传递参数。 比如:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hi human'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'someelem'</span>).addEventListener(<span class=\"string\">'click'</span>, callback);</div></pre></td></tr></table></figure>\n<p>你可以借助Javascript闭包的优势来传递参数给回调函数。看这个例子:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'sum = '</span>, (a+b));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>, y = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'someelem'</span>).addEventListener(<span class=\"string\">'click'</span>, callback(x, y));</div></pre></td></tr></table></figure>\n<p><strong>什么是闭包?</strong><br>闭包是指函数有自由独立的变量。换句话说，定义在闭包中的函数可以“记忆”它创建时候的环境。想了解更多请<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures\" target=\"_blank\" rel=\"external\">参考MDN的文档</a>。</p>\n<p>这种方法使参数<code>x</code>和<code>y</code>在回调方法被调用时处于其作用域内。</p>\n<p>另一个办法是使用<code>bind</code>方法。比如:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> alertText = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">  alert(text);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'someelem'</span>).addEventListener(<span class=\"string\">'click'</span>, alertText.bind(<span class=\"keyword\">this</span>, <span class=\"string\">'hello'</span>));</div></pre></td></tr></table></figure>\n<p>两种方法之间有着微小的性能差异,请看<a href=\"http://jsperf.com/bind-vs-closure-23\" target=\"_blank\" rel=\"external\">jsperf</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>通常下，你并不能给回调函数传递参数。 比如:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hi human'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'someelem'</span>).addEventListener(<span class=\"string\">'click'</span>, callback);</div></pre></td></tr></table></figure>\n<p>你可以借助Javascript闭包的优势来传递参数给回调函数。看这个例子:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'sum = '</span>, (a+b));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>, y = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'someelem'</span>).addEventListener(<span class=\"string\">'click'</span>, callback(x, y));</div></pre></td></tr></table></figure>\n<p><strong>什么是闭包?</strong><br>闭包是指函数有自由独立的变量。换句话说，定义在闭包中的函数可以“记忆”它创建时候的环境。想了解更多请<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures\" target=\"_blank\" rel=\"external\">参考MDN的文档</a>。</p>\n<p>这种方法使参数<code>x</code>和<code>y</code>在回调方法被调用时处于其作用域内。</p>\n<p>另一个办法是使用<code>bind</code>方法。比如:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> alertText = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">  alert(text);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'someelem'</span>).addEventListener(<span class=\"string\">'click'</span>, alertText.bind(<span class=\"keyword\">this</span>, <span class=\"string\">'hello'</span>));</div></pre></td></tr></table></figure>\n<p>两种方法之间有着微小的性能差异,请看<a href=\"http://jsperf.com/bind-vs-closure-23\" target=\"_blank\" rel=\"external\">jsperf</a>.</p>\n"},{"layout":"post","title":"Node.js - 运行未被引用的模块","tip-number":17,"tip-username":"odsdq","tip-username-profile":"https://twitter.com/odsdq","tip-tldr":"在Node里,你可以让你的程序根据其运行自`require('./something.js')`或者`node something.js`而做不同的处理。如果你想与你的一个独立的模块进行交互，这是非常有用的。","redirect_from":["/zh_cn/nodejs-run-a-module-if-it-is-not-required/"],"_content":"\n在Node里,你可以让你的程序根据其运行自`require('./something.js')`或者`node something.js`而做不同的处理。如果你想与你的一个独立的模块进行交互，这是非常有用的。\n\n```js\nif (!module.parent) {\n    // 通过 `node something.js` 启动\n    app.listen(8088, function() {\n        console.log('app listening on port 8088');\n    })\n} else {\n    // 通过 `require('/.something.js')` 被引用\n    module.exports = app;\n}\n```\n\n更多内容请看 [modules的文档](https://nodejs.org/api/modules.html#modules_module_parent)\n","source":"_posts/javascript/2016-01-17-nodejs-run-a-module-if-it-is-not-required.md","raw":"---\nlayout: post\n\ntitle: Node.js - 运行未被引用的模块\ntip-number: 17\ntip-username: odsdq\ntip-username-profile: https://twitter.com/odsdq\ntip-tldr: 在Node里,你可以让你的程序根据其运行自`require('./something.js')`或者`node something.js`而做不同的处理。如果你想与你的一个独立的模块进行交互，这是非常有用的。\n\nredirect_from:\n  - /zh_cn/nodejs-run-a-module-if-it-is-not-required/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n在Node里,你可以让你的程序根据其运行自`require('./something.js')`或者`node something.js`而做不同的处理。如果你想与你的一个独立的模块进行交互，这是非常有用的。\n\n```js\nif (!module.parent) {\n    // 通过 `node something.js` 启动\n    app.listen(8088, function() {\n        console.log('app listening on port 8088');\n    })\n} else {\n    // 通过 `require('/.something.js')` 被引用\n    module.exports = app;\n}\n```\n\n更多内容请看 [modules的文档](https://nodejs.org/api/modules.html#modules_module_parent)\n","slug":"javascript/2016-01-17-nodejs-run-a-module-if-it-is-not-required","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqd0002ylyfycywojp0a","content":"<p>在Node里,你可以让你的程序根据其运行自<code>require(&#39;./something.js&#39;)</code>或者<code>node something.js</code>而做不同的处理。如果你想与你的一个独立的模块进行交互，这是非常有用的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">module</span>.parent) &#123;</div><div class=\"line\">    <span class=\"comment\">// 通过 `node something.js` 启动</span></div><div class=\"line\">    app.listen(<span class=\"number\">8088</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'app listening on port 8088'</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 通过 `require('/.something.js')` 被引用</span></div><div class=\"line\">    <span class=\"built_in\">module</span>.exports = app;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>更多内容请看 <a href=\"https://nodejs.org/api/modules.html#modules_module_parent\" target=\"_blank\" rel=\"external\">modules的文档</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在Node里,你可以让你的程序根据其运行自<code>require(&#39;./something.js&#39;)</code>或者<code>node something.js</code>而做不同的处理。如果你想与你的一个独立的模块进行交互，这是非常有用的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">module</span>.parent) &#123;</div><div class=\"line\">    <span class=\"comment\">// 通过 `node something.js` 启动</span></div><div class=\"line\">    app.listen(<span class=\"number\">8088</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'app listening on port 8088'</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 通过 `require('/.something.js')` 被引用</span></div><div class=\"line\">    <span class=\"built_in\">module</span>.exports = app;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>更多内容请看 <a href=\"https://nodejs.org/api/modules.html#modules_module_parent\" target=\"_blank\" rel=\"external\">modules的文档</a></p>\n"},{"layout":"post","title":"安全的字符串拼接","tip-number":19,"tip-username":"gogainda","tip-username-profile":"https://twitter.com/gogainda","tip-tldr":"假如你需要拼接一些不确定类型的变量为字符串，你需要确保算术运算符在你拼接时不会起作用。使用concat","redirect_from":["/zh_cn/safe-string-concatenation/"],"_content":"\n假如你需要拼接一些不确定类型的变量为字符串，你需要确保算术运算符在你拼接时不会起作用。使用concat：\n\n```javascript\nvar one = 1;\nvar two = 2;\nvar three = '3';\n\nvar result = ''.concat(one, two, three); //\"123\"\n```\n\n这应该就是你所期望的拼接结果。如果不这样，拼接时加号可能会导致你意想不到的结果：\n\n```javascript\nvar one = 1;\nvar two = 2;\nvar three = '3';\n\nvar result = one + two + three; //\"33\" instead of \"123\"\n```\n\n关于性能,与用[```join```](http://www.sitepoint.com/javascript-fast-string-concatenation/)来拼接字符串相比 ```concat```的效率是几乎一样的。\n\n你可以在[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)了解更多关于```concat```方法的内容。\n","source":"_posts/javascript/2016-01-19-safe-string-concatenation.md","raw":"---\nlayout: post\n\ntitle: 安全的字符串拼接\ntip-number: 19\ntip-username: gogainda\ntip-username-profile: https://twitter.com/gogainda\ntip-tldr: 假如你需要拼接一些不确定类型的变量为字符串，你需要确保算术运算符在你拼接时不会起作用。使用concat\n\nredirect_from:\n  - /zh_cn/safe-string-concatenation/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n假如你需要拼接一些不确定类型的变量为字符串，你需要确保算术运算符在你拼接时不会起作用。使用concat：\n\n```javascript\nvar one = 1;\nvar two = 2;\nvar three = '3';\n\nvar result = ''.concat(one, two, three); //\"123\"\n```\n\n这应该就是你所期望的拼接结果。如果不这样，拼接时加号可能会导致你意想不到的结果：\n\n```javascript\nvar one = 1;\nvar two = 2;\nvar three = '3';\n\nvar result = one + two + three; //\"33\" instead of \"123\"\n```\n\n关于性能,与用[```join```](http://www.sitepoint.com/javascript-fast-string-concatenation/)来拼接字符串相比 ```concat```的效率是几乎一样的。\n\n你可以在[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)了解更多关于```concat```方法的内容。\n","slug":"javascript/2016-01-19-safe-string-concatenation","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqd10031lyfywde5voi7","content":"<p>假如你需要拼接一些不确定类型的变量为字符串，你需要确保算术运算符在你拼接时不会起作用。使用concat：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> one = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> two = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> three = <span class=\"string\">'3'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"string\">''</span>.concat(one, two, three); <span class=\"comment\">//\"123\"</span></div></pre></td></tr></table></figure>\n<p>这应该就是你所期望的拼接结果。如果不这样，拼接时加号可能会导致你意想不到的结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> one = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> two = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> three = <span class=\"string\">'3'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> result = one + two + three; <span class=\"comment\">//\"33\" instead of \"123\"</span></div></pre></td></tr></table></figure>\n<p>关于性能,与用<a href=\"http://www.sitepoint.com/javascript-fast-string-concatenation/\" target=\"_blank\" rel=\"external\"><code>join</code></a>来拼接字符串相比 <code>concat</code>的效率是几乎一样的。</p>\n<p>你可以在<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"external\">MDN</a>了解更多关于<code>concat</code>方法的内容。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>假如你需要拼接一些不确定类型的变量为字符串，你需要确保算术运算符在你拼接时不会起作用。使用concat：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> one = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> two = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> three = <span class=\"string\">'3'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"string\">''</span>.concat(one, two, three); <span class=\"comment\">//\"123\"</span></div></pre></td></tr></table></figure>\n<p>这应该就是你所期望的拼接结果。如果不这样，拼接时加号可能会导致你意想不到的结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> one = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> two = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> three = <span class=\"string\">'3'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> result = one + two + three; <span class=\"comment\">//\"33\" instead of \"123\"</span></div></pre></td></tr></table></figure>\n<p>关于性能,与用<a href=\"http://www.sitepoint.com/javascript-fast-string-concatenation/\" target=\"_blank\" rel=\"external\"><code>join</code></a>来拼接字符串相比 <code>concat</code>的效率是几乎一样的。</p>\n<p>你可以在<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"external\">MDN</a>了解更多关于<code>concat</code>方法的内容。</p>\n"},{"layout":"post","title":"快速（但危险）的取整方法","tip-number":18,"tip-username":"pklinger","tip-username-profile":"https://github.com/pklinger","tip-tldr":"通常情况下`~~X`比`Math.trunc(X)`要快，但同时也会使你的代码做一些讨厌的事情。","redirect_from":["/zh_cn/rounding-the-fast-way/"],"_content":"\n本条小知识关于性能...\n\n你曾遇到过[双波浪线`~~`操作符](http://stackoverflow.com/questions/5971645/what-is-the-double-tilde-operator-in-javascript)吗？它也被称为“双按位非”操作符。你通常可以使用它作为代替`Math.trunc()`的更快的方法。为什么呢？\n\n一个按位非操作符`~`首先将输入`input`截取为32位，然后将其转换为`-(input+1)`。因此双按位非操作符将输入转换为`-(-(input + 1)+1)`，使其成为一个趋向于0取整的好工具。对于数字的输入，它很像`Math.trunc()`。失败时返回`0`,这可能在解决`Math.trunc()`转换错误返回`NaN`时是一个很好的替代。\n\n```js\n// 单个 ~\nconsole.log(~1337)    // -1338\n\n// 数字输入\nconsole.log(~~47.11)  // -> 47\nconsole.log(~~1.9999) // -> 1\nconsole.log(~~3)      // -> 3\n```\n\n然而, 尽管`~~`可能有更好的性能，有经验的程序员通常坚持使用`Math.trunc()`。要明白为什么，这里有一个关于此操作符的冷静分析。\n\n### 适用的情况\n\n##### 当CPU资源很珍贵时\n`~~`可能在各平台上都比`Math.trunc()`快，但是你应该在你所关心的所有平台上[测试这种猜想](https://jsperf.com/jsfvsbitnot/10)。同样，你通常需要执行数百万这样的操作来看看在运行时有没有明显的影响。\n\n##### 当不需要关心代码清晰度时\n如果你想迷惑其他人，或者想在`minifier/uglifier`时取得更大功效，这是一种相对廉价的方式。\n\n### 禁用的情况\n\n##### 当你的代码需要维护时\n代码可读性始终是最重要的。无论你工作在一个团队，或是贡献给开源仓库，或是单飞。正如[名言所说](http://c2.com/cgi/wiki?CodeForTheMaintainer)：\n> Always code as if the person who ends up maintaining your code is a violent psychopath who knows where you live.(写代码时，要始终认为一个有暴力倾向并知道你住在哪里的人会最终维护你的代码。)\n\nFor a solo programmer, that psychopath is inevitably \"you in six months\".（这句不会翻译……）\n\n##### 当你忘记`~~`永远趋向于0时\n新手程序员或许更关注`~~`的聪明之处，却忘记了“只去掉小数部分”的意义。这在将浮点数转换为数组索引或关联有序的值时很容易导致**差一错误** ，这时明显需要一个不同的取整方法。 （代码可读性不高往往会导致此问题）\n\n打个比方，如果你想得到离一个数“最近的整数”，你应该用`Math.round()`而不是`~~`，但是由于程序员的惰性和**_每次使用需要敲10个键_**的事实，人类的手指往往会战胜冷冷的逻辑，导致错误的结果。\n\n相比之下，`Math.xyz()`（举例）函数的名字清楚的传达了它们的作用，减少了可能出现的意外的错误。\n\n##### 当处理大数时\n因为`~`首先将数组转换为32位，`~~`的结果伪值在 &plusmn;2.15*10^12左右。如果你没有明确的检查输入值的范围，当转换的值最终与原始值有很大差距时，用户就可能触发未知的行为：\n\n```js\na = 2147483647.123  // 比32位最大正数，再多一点\nconsole.log(~~a)    // ->  2147483647     (ok)\na += 10000          // ->  2147493647.123 (ok)\nconsole.log(~~a)    // -> -2147483648     (huh?)\n```\n\n一个特别容易中招的地方是在处理Unix时间戳时(从1970年1月1日 00:00:00 UTC开始以秒测量)。一个快速获取的方法:\n\n```js\nepoch_int = ~~(+new Date() / 1000)  // Date() 以毫秒计量，所以我们缩小它\n```\n\n然而，当处理2038年1月19日 03:14:07 UTC 之后的时间戳时（有时称为**Y2038 limit**）, 可怕的事情发生了：\n\n```js\n// 2040年1月1日 00:00:00.123 UTC的时间戳\nepoch = +new Date('2040-01-01') / 1000 + 0.123  // ->  2208988800.123\n\n// 回到未来!\nepoch_int = ~~epoch                                 // -> -2085978496\nconsole.log(new Date(epoch_int * 1000))             // ->  Wed Nov 25 1903 17:31:44 UTC\n\n// 这很搞笑，让我们来取得正确答案\nepoch_flr = Math.floor(epoch)                       // ->  2208988800\nconsole.log(new Date(epoch_flr * 1000))             // ->  Sun Jan 01 2040 00:00:00 UTC\n```\n\n##### 当原始输入的数据类型不确定时\n因为`~~`可以将任何非数字类型转换为`0`：\n\n```js\nconsole.log(~~[])   // -> 0\nconsole.log(~~NaN)  // -> 0\nconsole.log(~~null) // -> 0\n```\n\n一些程序员将其看作适当输入验证的替代品。然而，这将导致奇怪的逻辑问题，因此你不能辨别违法输入还是真正的`0`。因此这_并不_推荐。\n\n##### 当很多人认为`~~X == Math.floor(X)`时\n很多人由于很多原因错误的把\"双按位非\"等同于`Math.floor()`。如果你不能准确地使用它，最终你很有可能会滥用它。\n\n另一些人很细心的注意正数使用`Math.floor()`而负数使用`Math.ceil()`，但这又强制你在处理它的时候需要停下来想一想你处理的数是什么值。这又违背了使用`~~`快捷无陷阱的目的。\n\n### 结论\n尽量避免，并有节制的使用。\n\n### 使用\n1. 谨慎使用。\n2. 在应用前检查值。\n3. 仔细记录被转化值的相关假设。\n4. 审查代码至少处理：\n   * 逻辑错误，不合法的输入作为合法的`0`传入其他代码模块\n   * 输入转换后范围错误\n   * 错误的舍入方向导致差一错误\n","source":"_posts/javascript/2016-01-18-rounding-the-fast-way.md","raw":"---\nlayout: post\n\ntitle: 快速（但危险）的取整方法\ntip-number: 18\ntip-username: pklinger\ntip-username-profile: https://github.com/pklinger\ntip-tldr: 通常情况下`~~X`比`Math.trunc(X)`要快，但同时也会使你的代码做一些讨厌的事情。\n\nredirect_from:\n  - /zh_cn/rounding-the-fast-way/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n本条小知识关于性能...\n\n你曾遇到过[双波浪线`~~`操作符](http://stackoverflow.com/questions/5971645/what-is-the-double-tilde-operator-in-javascript)吗？它也被称为“双按位非”操作符。你通常可以使用它作为代替`Math.trunc()`的更快的方法。为什么呢？\n\n一个按位非操作符`~`首先将输入`input`截取为32位，然后将其转换为`-(input+1)`。因此双按位非操作符将输入转换为`-(-(input + 1)+1)`，使其成为一个趋向于0取整的好工具。对于数字的输入，它很像`Math.trunc()`。失败时返回`0`,这可能在解决`Math.trunc()`转换错误返回`NaN`时是一个很好的替代。\n\n```js\n// 单个 ~\nconsole.log(~1337)    // -1338\n\n// 数字输入\nconsole.log(~~47.11)  // -> 47\nconsole.log(~~1.9999) // -> 1\nconsole.log(~~3)      // -> 3\n```\n\n然而, 尽管`~~`可能有更好的性能，有经验的程序员通常坚持使用`Math.trunc()`。要明白为什么，这里有一个关于此操作符的冷静分析。\n\n### 适用的情况\n\n##### 当CPU资源很珍贵时\n`~~`可能在各平台上都比`Math.trunc()`快，但是你应该在你所关心的所有平台上[测试这种猜想](https://jsperf.com/jsfvsbitnot/10)。同样，你通常需要执行数百万这样的操作来看看在运行时有没有明显的影响。\n\n##### 当不需要关心代码清晰度时\n如果你想迷惑其他人，或者想在`minifier/uglifier`时取得更大功效，这是一种相对廉价的方式。\n\n### 禁用的情况\n\n##### 当你的代码需要维护时\n代码可读性始终是最重要的。无论你工作在一个团队，或是贡献给开源仓库，或是单飞。正如[名言所说](http://c2.com/cgi/wiki?CodeForTheMaintainer)：\n> Always code as if the person who ends up maintaining your code is a violent psychopath who knows where you live.(写代码时，要始终认为一个有暴力倾向并知道你住在哪里的人会最终维护你的代码。)\n\nFor a solo programmer, that psychopath is inevitably \"you in six months\".（这句不会翻译……）\n\n##### 当你忘记`~~`永远趋向于0时\n新手程序员或许更关注`~~`的聪明之处，却忘记了“只去掉小数部分”的意义。这在将浮点数转换为数组索引或关联有序的值时很容易导致**差一错误** ，这时明显需要一个不同的取整方法。 （代码可读性不高往往会导致此问题）\n\n打个比方，如果你想得到离一个数“最近的整数”，你应该用`Math.round()`而不是`~~`，但是由于程序员的惰性和**_每次使用需要敲10个键_**的事实，人类的手指往往会战胜冷冷的逻辑，导致错误的结果。\n\n相比之下，`Math.xyz()`（举例）函数的名字清楚的传达了它们的作用，减少了可能出现的意外的错误。\n\n##### 当处理大数时\n因为`~`首先将数组转换为32位，`~~`的结果伪值在 &plusmn;2.15*10^12左右。如果你没有明确的检查输入值的范围，当转换的值最终与原始值有很大差距时，用户就可能触发未知的行为：\n\n```js\na = 2147483647.123  // 比32位最大正数，再多一点\nconsole.log(~~a)    // ->  2147483647     (ok)\na += 10000          // ->  2147493647.123 (ok)\nconsole.log(~~a)    // -> -2147483648     (huh?)\n```\n\n一个特别容易中招的地方是在处理Unix时间戳时(从1970年1月1日 00:00:00 UTC开始以秒测量)。一个快速获取的方法:\n\n```js\nepoch_int = ~~(+new Date() / 1000)  // Date() 以毫秒计量，所以我们缩小它\n```\n\n然而，当处理2038年1月19日 03:14:07 UTC 之后的时间戳时（有时称为**Y2038 limit**）, 可怕的事情发生了：\n\n```js\n// 2040年1月1日 00:00:00.123 UTC的时间戳\nepoch = +new Date('2040-01-01') / 1000 + 0.123  // ->  2208988800.123\n\n// 回到未来!\nepoch_int = ~~epoch                                 // -> -2085978496\nconsole.log(new Date(epoch_int * 1000))             // ->  Wed Nov 25 1903 17:31:44 UTC\n\n// 这很搞笑，让我们来取得正确答案\nepoch_flr = Math.floor(epoch)                       // ->  2208988800\nconsole.log(new Date(epoch_flr * 1000))             // ->  Sun Jan 01 2040 00:00:00 UTC\n```\n\n##### 当原始输入的数据类型不确定时\n因为`~~`可以将任何非数字类型转换为`0`：\n\n```js\nconsole.log(~~[])   // -> 0\nconsole.log(~~NaN)  // -> 0\nconsole.log(~~null) // -> 0\n```\n\n一些程序员将其看作适当输入验证的替代品。然而，这将导致奇怪的逻辑问题，因此你不能辨别违法输入还是真正的`0`。因此这_并不_推荐。\n\n##### 当很多人认为`~~X == Math.floor(X)`时\n很多人由于很多原因错误的把\"双按位非\"等同于`Math.floor()`。如果你不能准确地使用它，最终你很有可能会滥用它。\n\n另一些人很细心的注意正数使用`Math.floor()`而负数使用`Math.ceil()`，但这又强制你在处理它的时候需要停下来想一想你处理的数是什么值。这又违背了使用`~~`快捷无陷阱的目的。\n\n### 结论\n尽量避免，并有节制的使用。\n\n### 使用\n1. 谨慎使用。\n2. 在应用前检查值。\n3. 仔细记录被转化值的相关假设。\n4. 审查代码至少处理：\n   * 逻辑错误，不合法的输入作为合法的`0`传入其他代码模块\n   * 输入转换后范围错误\n   * 错误的舍入方向导致差一错误\n","slug":"javascript/2016-01-18-rounding-the-fast-way","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqd40033lyfyb5ccogx7","content":"<p>本条小知识关于性能…</p>\n<p>你曾遇到过<a href=\"http://stackoverflow.com/questions/5971645/what-is-the-double-tilde-operator-in-javascript\" target=\"_blank\" rel=\"external\">双波浪线<code>~~</code>操作符</a>吗？它也被称为“双按位非”操作符。你通常可以使用它作为代替<code>Math.trunc()</code>的更快的方法。为什么呢？</p>\n<p>一个按位非操作符<code>~</code>首先将输入<code>input</code>截取为32位，然后将其转换为<code>-(input+1)</code>。因此双按位非操作符将输入转换为<code>-(-(input + 1)+1)</code>，使其成为一个趋向于0取整的好工具。对于数字的输入，它很像<code>Math.trunc()</code>。失败时返回<code>0</code>,这可能在解决<code>Math.trunc()</code>转换错误返回<code>NaN</code>时是一个很好的替代。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 单个 ~</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(~<span class=\"number\">1337</span>)    <span class=\"comment\">// -1338</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 数字输入</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(~~<span class=\"number\">47.11</span>)  <span class=\"comment\">// -&gt; 47</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(~~<span class=\"number\">1.9999</span>) <span class=\"comment\">// -&gt; 1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(~~<span class=\"number\">3</span>)      <span class=\"comment\">// -&gt; 3</span></div></pre></td></tr></table></figure>\n<p>然而, 尽管<code>~~</code>可能有更好的性能，有经验的程序员通常坚持使用<code>Math.trunc()</code>。要明白为什么，这里有一个关于此操作符的冷静分析。</p>\n<h3 id=\"适用的情况\"><a href=\"#适用的情况\" class=\"headerlink\" title=\"适用的情况\"></a>适用的情况</h3><h5 id=\"当CPU资源很珍贵时\"><a href=\"#当CPU资源很珍贵时\" class=\"headerlink\" title=\"当CPU资源很珍贵时\"></a>当CPU资源很珍贵时</h5><p><code>~~</code>可能在各平台上都比<code>Math.trunc()</code>快，但是你应该在你所关心的所有平台上<a href=\"https://jsperf.com/jsfvsbitnot/10\" target=\"_blank\" rel=\"external\">测试这种猜想</a>。同样，你通常需要执行数百万这样的操作来看看在运行时有没有明显的影响。</p>\n<h5 id=\"当不需要关心代码清晰度时\"><a href=\"#当不需要关心代码清晰度时\" class=\"headerlink\" title=\"当不需要关心代码清晰度时\"></a>当不需要关心代码清晰度时</h5><p>如果你想迷惑其他人，或者想在<code>minifier/uglifier</code>时取得更大功效，这是一种相对廉价的方式。</p>\n<h3 id=\"禁用的情况\"><a href=\"#禁用的情况\" class=\"headerlink\" title=\"禁用的情况\"></a>禁用的情况</h3><h5 id=\"当你的代码需要维护时\"><a href=\"#当你的代码需要维护时\" class=\"headerlink\" title=\"当你的代码需要维护时\"></a>当你的代码需要维护时</h5><p>代码可读性始终是最重要的。无论你工作在一个团队，或是贡献给开源仓库，或是单飞。正如<a href=\"http://c2.com/cgi/wiki?CodeForTheMaintainer\" target=\"_blank\" rel=\"external\">名言所说</a>：</p>\n<blockquote>\n<p>Always code as if the person who ends up maintaining your code is a violent psychopath who knows where you live.(写代码时，要始终认为一个有暴力倾向并知道你住在哪里的人会最终维护你的代码。)</p>\n</blockquote>\n<p>For a solo programmer, that psychopath is inevitably “you in six months”.（这句不会翻译……）</p>\n<h5 id=\"当你忘记-永远趋向于0时\"><a href=\"#当你忘记-永远趋向于0时\" class=\"headerlink\" title=\"当你忘记~~永远趋向于0时\"></a>当你忘记<code>~~</code>永远趋向于0时</h5><p>新手程序员或许更关注<code>~~</code>的聪明之处，却忘记了“只去掉小数部分”的意义。这在将浮点数转换为数组索引或关联有序的值时很容易导致<strong>差一错误</strong> ，这时明显需要一个不同的取整方法。 （代码可读性不高往往会导致此问题）</p>\n<p>打个比方，如果你想得到离一个数“最近的整数”，你应该用<code>Math.round()</code>而不是<code>~~</code>，但是由于程序员的惰性和<strong><em>每次使用需要敲10个键</em></strong>的事实，人类的手指往往会战胜冷冷的逻辑，导致错误的结果。</p>\n<p>相比之下，<code>Math.xyz()</code>（举例）函数的名字清楚的传达了它们的作用，减少了可能出现的意外的错误。</p>\n<h5 id=\"当处理大数时\"><a href=\"#当处理大数时\" class=\"headerlink\" title=\"当处理大数时\"></a>当处理大数时</h5><p>因为<code>~</code>首先将数组转换为32位，<code>~~</code>的结果伪值在 &plusmn;2.15*10^12左右。如果你没有明确的检查输入值的范围，当转换的值最终与原始值有很大差距时，用户就可能触发未知的行为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">a = <span class=\"number\">2147483647.123</span>  <span class=\"comment\">// 比32位最大正数，再多一点</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(~~a)    <span class=\"comment\">// -&gt;  2147483647     (ok)</span></div><div class=\"line\">a += <span class=\"number\">10000</span>          <span class=\"comment\">// -&gt;  2147493647.123 (ok)</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(~~a)    <span class=\"comment\">// -&gt; -2147483648     (huh?)</span></div></pre></td></tr></table></figure>\n<p>一个特别容易中招的地方是在处理Unix时间戳时(从1970年1月1日 00:00:00 UTC开始以秒测量)。一个快速获取的方法:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">epoch_int = ~~(+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() / <span class=\"number\">1000</span>)  <span class=\"comment\">// Date() 以毫秒计量，所以我们缩小它</span></div></pre></td></tr></table></figure>\n<p>然而，当处理2038年1月19日 03:14:07 UTC 之后的时间戳时（有时称为<strong>Y2038 limit</strong>）, 可怕的事情发生了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 2040年1月1日 00:00:00.123 UTC的时间戳</span></div><div class=\"line\">epoch = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">'2040-01-01'</span>) / <span class=\"number\">1000</span> + <span class=\"number\">0.123</span>  <span class=\"comment\">// -&gt;  2208988800.123</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 回到未来!</span></div><div class=\"line\">epoch_int = ~~epoch                                 <span class=\"comment\">// -&gt; -2085978496</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(epoch_int * <span class=\"number\">1000</span>))             <span class=\"comment\">// -&gt;  Wed Nov 25 1903 17:31:44 UTC</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 这很搞笑，让我们来取得正确答案</span></div><div class=\"line\">epoch_flr = <span class=\"built_in\">Math</span>.floor(epoch)                       <span class=\"comment\">// -&gt;  2208988800</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(epoch_flr * <span class=\"number\">1000</span>))             <span class=\"comment\">// -&gt;  Sun Jan 01 2040 00:00:00 UTC</span></div></pre></td></tr></table></figure>\n<h5 id=\"当原始输入的数据类型不确定时\"><a href=\"#当原始输入的数据类型不确定时\" class=\"headerlink\" title=\"当原始输入的数据类型不确定时\"></a>当原始输入的数据类型不确定时</h5><p>因为<code>~~</code>可以将任何非数字类型转换为<code>0</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(~~[])   <span class=\"comment\">// -&gt; 0</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(~~<span class=\"literal\">NaN</span>)  <span class=\"comment\">// -&gt; 0</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(~~<span class=\"literal\">null</span>) <span class=\"comment\">// -&gt; 0</span></div></pre></td></tr></table></figure>\n<p>一些程序员将其看作适当输入验证的替代品。然而，这将导致奇怪的逻辑问题，因此你不能辨别违法输入还是真正的<code>0</code>。因此这<em>并不</em>推荐。</p>\n<h5 id=\"当很多人认为-X-Math-floor-X-时\"><a href=\"#当很多人认为-X-Math-floor-X-时\" class=\"headerlink\" title=\"当很多人认为~~X == Math.floor(X)时\"></a>当很多人认为<code>~~X == Math.floor(X)</code>时</h5><p>很多人由于很多原因错误的把”双按位非”等同于<code>Math.floor()</code>。如果你不能准确地使用它，最终你很有可能会滥用它。</p>\n<p>另一些人很细心的注意正数使用<code>Math.floor()</code>而负数使用<code>Math.ceil()</code>，但这又强制你在处理它的时候需要停下来想一想你处理的数是什么值。这又违背了使用<code>~~</code>快捷无陷阱的目的。</p>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>尽量避免，并有节制的使用。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><ol>\n<li>谨慎使用。</li>\n<li>在应用前检查值。</li>\n<li>仔细记录被转化值的相关假设。</li>\n<li>审查代码至少处理：<ul>\n<li>逻辑错误，不合法的输入作为合法的<code>0</code>传入其他代码模块</li>\n<li>输入转换后范围错误</li>\n<li>错误的舍入方向导致差一错误</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>本条小知识关于性能…</p>\n<p>你曾遇到过<a href=\"http://stackoverflow.com/questions/5971645/what-is-the-double-tilde-operator-in-javascript\" target=\"_blank\" rel=\"external\">双波浪线<code>~~</code>操作符</a>吗？它也被称为“双按位非”操作符。你通常可以使用它作为代替<code>Math.trunc()</code>的更快的方法。为什么呢？</p>\n<p>一个按位非操作符<code>~</code>首先将输入<code>input</code>截取为32位，然后将其转换为<code>-(input+1)</code>。因此双按位非操作符将输入转换为<code>-(-(input + 1)+1)</code>，使其成为一个趋向于0取整的好工具。对于数字的输入，它很像<code>Math.trunc()</code>。失败时返回<code>0</code>,这可能在解决<code>Math.trunc()</code>转换错误返回<code>NaN</code>时是一个很好的替代。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 单个 ~</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(~<span class=\"number\">1337</span>)    <span class=\"comment\">// -1338</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 数字输入</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(~~<span class=\"number\">47.11</span>)  <span class=\"comment\">// -&gt; 47</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(~~<span class=\"number\">1.9999</span>) <span class=\"comment\">// -&gt; 1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(~~<span class=\"number\">3</span>)      <span class=\"comment\">// -&gt; 3</span></div></pre></td></tr></table></figure>\n<p>然而, 尽管<code>~~</code>可能有更好的性能，有经验的程序员通常坚持使用<code>Math.trunc()</code>。要明白为什么，这里有一个关于此操作符的冷静分析。</p>\n<h3 id=\"适用的情况\"><a href=\"#适用的情况\" class=\"headerlink\" title=\"适用的情况\"></a>适用的情况</h3><h5 id=\"当CPU资源很珍贵时\"><a href=\"#当CPU资源很珍贵时\" class=\"headerlink\" title=\"当CPU资源很珍贵时\"></a>当CPU资源很珍贵时</h5><p><code>~~</code>可能在各平台上都比<code>Math.trunc()</code>快，但是你应该在你所关心的所有平台上<a href=\"https://jsperf.com/jsfvsbitnot/10\" target=\"_blank\" rel=\"external\">测试这种猜想</a>。同样，你通常需要执行数百万这样的操作来看看在运行时有没有明显的影响。</p>\n<h5 id=\"当不需要关心代码清晰度时\"><a href=\"#当不需要关心代码清晰度时\" class=\"headerlink\" title=\"当不需要关心代码清晰度时\"></a>当不需要关心代码清晰度时</h5><p>如果你想迷惑其他人，或者想在<code>minifier/uglifier</code>时取得更大功效，这是一种相对廉价的方式。</p>\n<h3 id=\"禁用的情况\"><a href=\"#禁用的情况\" class=\"headerlink\" title=\"禁用的情况\"></a>禁用的情况</h3><h5 id=\"当你的代码需要维护时\"><a href=\"#当你的代码需要维护时\" class=\"headerlink\" title=\"当你的代码需要维护时\"></a>当你的代码需要维护时</h5><p>代码可读性始终是最重要的。无论你工作在一个团队，或是贡献给开源仓库，或是单飞。正如<a href=\"http://c2.com/cgi/wiki?CodeForTheMaintainer\" target=\"_blank\" rel=\"external\">名言所说</a>：</p>\n<blockquote>\n<p>Always code as if the person who ends up maintaining your code is a violent psychopath who knows where you live.(写代码时，要始终认为一个有暴力倾向并知道你住在哪里的人会最终维护你的代码。)</p>\n</blockquote>\n<p>For a solo programmer, that psychopath is inevitably “you in six months”.（这句不会翻译……）</p>\n<h5 id=\"当你忘记-永远趋向于0时\"><a href=\"#当你忘记-永远趋向于0时\" class=\"headerlink\" title=\"当你忘记~~永远趋向于0时\"></a>当你忘记<code>~~</code>永远趋向于0时</h5><p>新手程序员或许更关注<code>~~</code>的聪明之处，却忘记了“只去掉小数部分”的意义。这在将浮点数转换为数组索引或关联有序的值时很容易导致<strong>差一错误</strong> ，这时明显需要一个不同的取整方法。 （代码可读性不高往往会导致此问题）</p>\n<p>打个比方，如果你想得到离一个数“最近的整数”，你应该用<code>Math.round()</code>而不是<code>~~</code>，但是由于程序员的惰性和<strong><em>每次使用需要敲10个键</em></strong>的事实，人类的手指往往会战胜冷冷的逻辑，导致错误的结果。</p>\n<p>相比之下，<code>Math.xyz()</code>（举例）函数的名字清楚的传达了它们的作用，减少了可能出现的意外的错误。</p>\n<h5 id=\"当处理大数时\"><a href=\"#当处理大数时\" class=\"headerlink\" title=\"当处理大数时\"></a>当处理大数时</h5><p>因为<code>~</code>首先将数组转换为32位，<code>~~</code>的结果伪值在 &plusmn;2.15*10^12左右。如果你没有明确的检查输入值的范围，当转换的值最终与原始值有很大差距时，用户就可能触发未知的行为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">a = <span class=\"number\">2147483647.123</span>  <span class=\"comment\">// 比32位最大正数，再多一点</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(~~a)    <span class=\"comment\">// -&gt;  2147483647     (ok)</span></div><div class=\"line\">a += <span class=\"number\">10000</span>          <span class=\"comment\">// -&gt;  2147493647.123 (ok)</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(~~a)    <span class=\"comment\">// -&gt; -2147483648     (huh?)</span></div></pre></td></tr></table></figure>\n<p>一个特别容易中招的地方是在处理Unix时间戳时(从1970年1月1日 00:00:00 UTC开始以秒测量)。一个快速获取的方法:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">epoch_int = ~~(+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() / <span class=\"number\">1000</span>)  <span class=\"comment\">// Date() 以毫秒计量，所以我们缩小它</span></div></pre></td></tr></table></figure>\n<p>然而，当处理2038年1月19日 03:14:07 UTC 之后的时间戳时（有时称为<strong>Y2038 limit</strong>）, 可怕的事情发生了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 2040年1月1日 00:00:00.123 UTC的时间戳</span></div><div class=\"line\">epoch = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">'2040-01-01'</span>) / <span class=\"number\">1000</span> + <span class=\"number\">0.123</span>  <span class=\"comment\">// -&gt;  2208988800.123</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 回到未来!</span></div><div class=\"line\">epoch_int = ~~epoch                                 <span class=\"comment\">// -&gt; -2085978496</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(epoch_int * <span class=\"number\">1000</span>))             <span class=\"comment\">// -&gt;  Wed Nov 25 1903 17:31:44 UTC</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 这很搞笑，让我们来取得正确答案</span></div><div class=\"line\">epoch_flr = <span class=\"built_in\">Math</span>.floor(epoch)                       <span class=\"comment\">// -&gt;  2208988800</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(epoch_flr * <span class=\"number\">1000</span>))             <span class=\"comment\">// -&gt;  Sun Jan 01 2040 00:00:00 UTC</span></div></pre></td></tr></table></figure>\n<h5 id=\"当原始输入的数据类型不确定时\"><a href=\"#当原始输入的数据类型不确定时\" class=\"headerlink\" title=\"当原始输入的数据类型不确定时\"></a>当原始输入的数据类型不确定时</h5><p>因为<code>~~</code>可以将任何非数字类型转换为<code>0</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(~~[])   <span class=\"comment\">// -&gt; 0</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(~~<span class=\"literal\">NaN</span>)  <span class=\"comment\">// -&gt; 0</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(~~<span class=\"literal\">null</span>) <span class=\"comment\">// -&gt; 0</span></div></pre></td></tr></table></figure>\n<p>一些程序员将其看作适当输入验证的替代品。然而，这将导致奇怪的逻辑问题，因此你不能辨别违法输入还是真正的<code>0</code>。因此这<em>并不</em>推荐。</p>\n<h5 id=\"当很多人认为-X-Math-floor-X-时\"><a href=\"#当很多人认为-X-Math-floor-X-时\" class=\"headerlink\" title=\"当很多人认为~~X == Math.floor(X)时\"></a>当很多人认为<code>~~X == Math.floor(X)</code>时</h5><p>很多人由于很多原因错误的把”双按位非”等同于<code>Math.floor()</code>。如果你不能准确地使用它，最终你很有可能会滥用它。</p>\n<p>另一些人很细心的注意正数使用<code>Math.floor()</code>而负数使用<code>Math.ceil()</code>，但这又强制你在处理它的时候需要停下来想一想你处理的数是什么值。这又违背了使用<code>~~</code>快捷无陷阱的目的。</p>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>尽量避免，并有节制的使用。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><ol>\n<li>谨慎使用。</li>\n<li>在应用前检查值。</li>\n<li>仔细记录被转化值的相关假设。</li>\n<li>审查代码至少处理：<ul>\n<li>逻辑错误，不合法的输入作为合法的<code>0</code>传入其他代码模块</li>\n<li>输入转换后范围错误</li>\n<li>错误的舍入方向导致差一错误</li>\n</ul>\n</li>\n</ol>\n"},{"layout":"post","title":"返回对象，使方法可以链式调用","tip-number":20,"tip-username":"WakeskaterX","tip-username-profile":"https://twitter.com/WakeStudio","tip-tldr":"在面向对象的Javascript中为对象建立一个方法时，返回当前对象可以让你在一条链上调用方法。","redirect_from":["/zh_cn/return-objects-to-enable-chaining-of-functions/"],"_content":"\n在面向对象的Javascript中为对象建立一个方法时，返回当前对象可以让你在一条链上调用方法。\n\n```js\nfunction Person(name) {\n  this.name = name;\n\n  this.sayName = function() {\n    console.log(\"Hello my name is: \", this.name);\n    return this;\n  };\n\n  this.changeName = function(name) {\n    this.name = name;\n    return this;\n  };\n}\n\nvar person = new Person(\"John\");\nperson.sayName().changeName(\"Timmy\").sayName();\n```\n","source":"_posts/javascript/2016-01-20-return-objects-to-enable-chaining-of-functions.md","raw":"---\nlayout: post\n\ntitle: 返回对象，使方法可以链式调用\ntip-number: 20\ntip-username: WakeskaterX\ntip-username-profile: https://twitter.com/WakeStudio\ntip-tldr: 在面向对象的Javascript中为对象建立一个方法时，返回当前对象可以让你在一条链上调用方法。\n\nredirect_from:\n  - /zh_cn/return-objects-to-enable-chaining-of-functions/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n在面向对象的Javascript中为对象建立一个方法时，返回当前对象可以让你在一条链上调用方法。\n\n```js\nfunction Person(name) {\n  this.name = name;\n\n  this.sayName = function() {\n    console.log(\"Hello my name is: \", this.name);\n    return this;\n  };\n\n  this.changeName = function(name) {\n    this.name = name;\n    return this;\n  };\n}\n\nvar person = new Person(\"John\");\nperson.sayName().changeName(\"Timmy\").sayName();\n```\n","slug":"javascript/2016-01-20-return-objects-to-enable-chaining-of-functions","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqd60036lyfyoer58vfj","content":"<p>在面向对象的Javascript中为对象建立一个方法时，返回当前对象可以让你在一条链上调用方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello my name is: \"</span>, <span class=\"keyword\">this</span>.name);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.changeName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"John\"</span>);</div><div class=\"line\">person.sayName().changeName(<span class=\"string\">\"Timmy\"</span>).sayName();</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>在面向对象的Javascript中为对象建立一个方法时，返回当前对象可以让你在一条链上调用方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello my name is: \"</span>, <span class=\"keyword\">this</span>.name);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.changeName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"John\"</span>);</div><div class=\"line\">person.sayName().changeName(<span class=\"string\">\"Timmy\"</span>).sayName();</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"对数组洗牌","tip-number":21,"tip-username":"0xmtn","tip-username-profile":"https://github.com/0xmtn/","tip-tldr":"Fisher-Yates Shuffling 算法对数组进行洗牌","redirect_from":["/zh_cn/shuffle-an-array/"],"_content":"\n \n 这段代码运用了[Fisher-Yates Shuffling](https://www.wikiwand.com/en/Fisher%E2%80%93Yates_shuffle)算法对数组进行洗牌。\n  \n```javascript\nfunction shuffle(arr) {\n    var i, \n        j,\n        temp;\n    for (i = arr.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n    return arr;    \n};\n```\n\n调用示例:\n\n```javascript\nvar a = [1, 2, 3, 4, 5, 6, 7, 8];\nvar b = shuffle(a);\nconsole.log(b);\n// [2, 7, 8, 6, 5, 3, 1, 4]\n```\n","source":"_posts/javascript/2016-01-21-shuffle-an-array.md","raw":"---\nlayout: post\n\ntitle: 对数组洗牌\ntip-number: 21\ntip-username: 0xmtn\ntip-username-profile: https://github.com/0xmtn/\ntip-tldr: Fisher-Yates Shuffling 算法对数组进行洗牌\n\nredirect_from:\n  - /zh_cn/shuffle-an-array/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n \n 这段代码运用了[Fisher-Yates Shuffling](https://www.wikiwand.com/en/Fisher%E2%80%93Yates_shuffle)算法对数组进行洗牌。\n  \n```javascript\nfunction shuffle(arr) {\n    var i, \n        j,\n        temp;\n    for (i = arr.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n    return arr;    \n};\n```\n\n调用示例:\n\n```javascript\nvar a = [1, 2, 3, 4, 5, 6, 7, 8];\nvar b = shuffle(a);\nconsole.log(b);\n// [2, 7, 8, 6, 5, 3, 1, 4]\n```\n","slug":"javascript/2016-01-21-shuffle-an-array","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqd70038lyfyt4raau3j","content":"<p> 这段代码运用了<a href=\"https://www.wikiwand.com/en/Fisher%E2%80%93Yates_shuffle\" target=\"_blank\" rel=\"external\">Fisher-Yates Shuffling</a>算法对数组进行洗牌。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shuffle</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> i, </div><div class=\"line\">        j,</div><div class=\"line\">        temp;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = arr.length - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">        j = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (i + <span class=\"number\">1</span>));</div><div class=\"line\">        temp = arr[i];</div><div class=\"line\">        arr[i] = arr[j];</div><div class=\"line\">        arr[j] = temp;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;    </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>调用示例:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = shuffle(a);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(b);</div><div class=\"line\"><span class=\"comment\">// [2, 7, 8, 6, 5, 3, 1, 4]</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p> 这段代码运用了<a href=\"https://www.wikiwand.com/en/Fisher%E2%80%93Yates_shuffle\" target=\"_blank\" rel=\"external\">Fisher-Yates Shuffling</a>算法对数组进行洗牌。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shuffle</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> i, </div><div class=\"line\">        j,</div><div class=\"line\">        temp;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = arr.length - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">        j = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (i + <span class=\"number\">1</span>));</div><div class=\"line\">        temp = arr[i];</div><div class=\"line\">        arr[i] = arr[j];</div><div class=\"line\">        arr[j] = temp;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;    </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>调用示例:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = shuffle(a);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(b);</div><div class=\"line\"><span class=\"comment\">// [2, 7, 8, 6, 5, 3, 1, 4]</span></div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"清空数组的两种方法","tip-number":22,"tip-username":"microlv","tip-username-profile":"https://github.com/microlv","tip-tldr":"在JavaScript中清空一个数组有很多方法，但这是一个最高效的方法。","redirect_from":["/zh_cn/two-ways-to-empty-an-array/"],"_content":"\n如果你定义了一个数组，然后你想清空它。\n通常，你会这样做：\n\n```javascript\n// 定义一个数组\nvar list = [1, 2, 3, 4];\nfunction empty() {\n    //清空数组\n    list = [];\n}\nempty();\n```\n\n但是，这有一个效率更高的方法来清空数组。\n你可以这样写:\n\n```javascript\nvar list = [1, 2, 3, 4];\nfunction empty() {\n    //empty your array\n    list.length = 0;\n}\nempty();\n```\n\n* `list = []` 将一个新的数组的引用赋值给变量，其他引用并不受影响。\n这意味着以前数组的内容被引用的话将依旧存在于内存中，这将导致内存泄漏。\n\n* `list.length = 0` 删除数组里的所有内容，也将影响到其他引用。\n\n然而，如果你复制了一个数组（A 和 Copy-A），如果你用`list.length = 0`清空了它的内容，复制的数组也会清空它的内容。\n\n考虑一下将会输出什么：\n\n```js\nvar foo = [1,2,3];\nvar bar = [1,2,3];\nvar foo2 = foo;\nvar bar2 = bar;\nfoo = [];\nbar.length = 0;\nconsole.log(foo, bar, foo2, bar2);\n\n//[] [] [1, 2, 3] []\n```\n\n更多内容请看Stackoverflow：\n[difference-between-array-length-0-and-array](http://stackoverflow.com/questions/4804235/difference-between-array-length-0-and-array)\n\n","source":"_posts/javascript/2016-01-22-two-ways-to-empty-an-array.md","raw":"---\nlayout: post\n\ntitle: 清空数组的两种方法\ntip-number: 22\ntip-username: microlv\ntip-username-profile: https://github.com/microlv\ntip-tldr: 在JavaScript中清空一个数组有很多方法，但这是一个最高效的方法。\n\nredirect_from:\n  - /zh_cn/two-ways-to-empty-an-array/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n如果你定义了一个数组，然后你想清空它。\n通常，你会这样做：\n\n```javascript\n// 定义一个数组\nvar list = [1, 2, 3, 4];\nfunction empty() {\n    //清空数组\n    list = [];\n}\nempty();\n```\n\n但是，这有一个效率更高的方法来清空数组。\n你可以这样写:\n\n```javascript\nvar list = [1, 2, 3, 4];\nfunction empty() {\n    //empty your array\n    list.length = 0;\n}\nempty();\n```\n\n* `list = []` 将一个新的数组的引用赋值给变量，其他引用并不受影响。\n这意味着以前数组的内容被引用的话将依旧存在于内存中，这将导致内存泄漏。\n\n* `list.length = 0` 删除数组里的所有内容，也将影响到其他引用。\n\n然而，如果你复制了一个数组（A 和 Copy-A），如果你用`list.length = 0`清空了它的内容，复制的数组也会清空它的内容。\n\n考虑一下将会输出什么：\n\n```js\nvar foo = [1,2,3];\nvar bar = [1,2,3];\nvar foo2 = foo;\nvar bar2 = bar;\nfoo = [];\nbar.length = 0;\nconsole.log(foo, bar, foo2, bar2);\n\n//[] [] [1, 2, 3] []\n```\n\n更多内容请看Stackoverflow：\n[difference-between-array-length-0-and-array](http://stackoverflow.com/questions/4804235/difference-between-array-length-0-and-array)\n\n","slug":"javascript/2016-01-22-two-ways-to-empty-an-array","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqd9003blyfy23srfwd9","content":"<p>如果你定义了一个数组，然后你想清空它。<br>通常，你会这样做：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 定义一个数组</span></div><div class=\"line\"><span class=\"keyword\">var</span> list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">empty</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//清空数组</span></div><div class=\"line\">    list = [];</div><div class=\"line\">&#125;</div><div class=\"line\">empty();</div></pre></td></tr></table></figure>\n<p>但是，这有一个效率更高的方法来清空数组。<br>你可以这样写:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">empty</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//empty your array</span></div><div class=\"line\">    list.length = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">empty();</div></pre></td></tr></table></figure>\n<ul>\n<li><p><code>list = []</code> 将一个新的数组的引用赋值给变量，其他引用并不受影响。<br>这意味着以前数组的内容被引用的话将依旧存在于内存中，这将导致内存泄漏。</p>\n</li>\n<li><p><code>list.length = 0</code> 删除数组里的所有内容，也将影响到其他引用。</p>\n</li>\n</ul>\n<p>然而，如果你复制了一个数组（A 和 Copy-A），如果你用<code>list.length = 0</code>清空了它的内容，复制的数组也会清空它的内容。</p>\n<p>考虑一下将会输出什么：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> foo = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> bar = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> foo2 = foo;</div><div class=\"line\"><span class=\"keyword\">var</span> bar2 = bar;</div><div class=\"line\">foo = [];</div><div class=\"line\">bar.length = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo, bar, foo2, bar2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//[] [] [1, 2, 3] []</span></div></pre></td></tr></table></figure>\n<p>更多内容请看Stackoverflow：<br><a href=\"http://stackoverflow.com/questions/4804235/difference-between-array-length-0-and-array\" target=\"_blank\" rel=\"external\">difference-between-array-length-0-and-array</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>如果你定义了一个数组，然后你想清空它。<br>通常，你会这样做：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 定义一个数组</span></div><div class=\"line\"><span class=\"keyword\">var</span> list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">empty</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//清空数组</span></div><div class=\"line\">    list = [];</div><div class=\"line\">&#125;</div><div class=\"line\">empty();</div></pre></td></tr></table></figure>\n<p>但是，这有一个效率更高的方法来清空数组。<br>你可以这样写:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">empty</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//empty your array</span></div><div class=\"line\">    list.length = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">empty();</div></pre></td></tr></table></figure>\n<ul>\n<li><p><code>list = []</code> 将一个新的数组的引用赋值给变量，其他引用并不受影响。<br>这意味着以前数组的内容被引用的话将依旧存在于内存中，这将导致内存泄漏。</p>\n</li>\n<li><p><code>list.length = 0</code> 删除数组里的所有内容，也将影响到其他引用。</p>\n</li>\n</ul>\n<p>然而，如果你复制了一个数组（A 和 Copy-A），如果你用<code>list.length = 0</code>清空了它的内容，复制的数组也会清空它的内容。</p>\n<p>考虑一下将会输出什么：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> foo = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> bar = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> foo2 = foo;</div><div class=\"line\"><span class=\"keyword\">var</span> bar2 = bar;</div><div class=\"line\">foo = [];</div><div class=\"line\">bar.length = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo, bar, foo2, bar2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//[] [] [1, 2, 3] []</span></div></pre></td></tr></table></figure>\n<p>更多内容请看Stackoverflow：<br><a href=\"http://stackoverflow.com/questions/4804235/difference-between-array-length-0-and-array\" target=\"_blank\" rel=\"external\">difference-between-array-length-0-and-array</a></p>\n"},{"layout":"post","title":"转换为数字的更快方法","tip-number":23,"tip-username":"sonnyt","tip-username-profile":"http://twitter.com/sonnyt","tip-tldr":"将字符串转换为数字是极为常见的。最简单和快速的方法是使用`+`(加号) 来实现。","redirect_from":["/zh_cn/converting-to-number-fast-way/"],"_content":"\n将字符串转换为数字是极为常见的。最简单和快速的方法([jsPref](https://jsperf.com/number-vs-parseint-vs-plus/29))`+`(加号) 来实现。\n\n```javascript\nvar one = '1';\n\nvar numberOne = +one; // Number 1\n```\n\n你也可以用`-`(减号)将其转化为负数值。\n\n```javascript\nvar one = '1';\n\nvar negativeNumberOne = -one; // Number -1\n```\n","source":"_posts/javascript/2016-01-23-converting-to-number-fast-way.md","raw":"---\nlayout: post\n\ntitle: 转换为数字的更快方法\ntip-number: 23\ntip-username: sonnyt\ntip-username-profile: http://twitter.com/sonnyt\ntip-tldr: 将字符串转换为数字是极为常见的。最简单和快速的方法是使用`+`(加号) 来实现。\n\nredirect_from:\n  - /zh_cn/converting-to-number-fast-way/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n将字符串转换为数字是极为常见的。最简单和快速的方法([jsPref](https://jsperf.com/number-vs-parseint-vs-plus/29))`+`(加号) 来实现。\n\n```javascript\nvar one = '1';\n\nvar numberOne = +one; // Number 1\n```\n\n你也可以用`-`(减号)将其转化为负数值。\n\n```javascript\nvar one = '1';\n\nvar negativeNumberOne = -one; // Number -1\n```\n","slug":"javascript/2016-01-23-converting-to-number-fast-way","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqda003dlyfy179y0jej","content":"<p>将字符串转换为数字是极为常见的。最简单和快速的方法(<a href=\"https://jsperf.com/number-vs-parseint-vs-plus/29\" target=\"_blank\" rel=\"external\">jsPref</a>)<code>+</code>(加号) 来实现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> one = <span class=\"string\">'1'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> numberOne = +one; <span class=\"comment\">// Number 1</span></div></pre></td></tr></table></figure>\n<p>你也可以用<code>-</code>(减号)将其转化为负数值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> one = <span class=\"string\">'1'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> negativeNumberOne = -one; <span class=\"comment\">// Number -1</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>将字符串转换为数字是极为常见的。最简单和快速的方法(<a href=\"https://jsperf.com/number-vs-parseint-vs-plus/29\" target=\"_blank\" rel=\"external\">jsPref</a>)<code>+</code>(加号) 来实现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> one = <span class=\"string\">'1'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> numberOne = +one; <span class=\"comment\">// Number 1</span></div></pre></td></tr></table></figure>\n<p>你也可以用<code>-</code>(减号)将其转化为负数值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> one = <span class=\"string\">'1'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> negativeNumberOne = -one; <span class=\"comment\">// Number -1</span></div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"使用 === 而不是 ==","tip-number":24,"tip-username":"bhaskarmelkani","tip-username-profile":"https://www.twitter.com/bhaskarmelkani","tip-tldr":"== (或者 `!=`) 操作在需要的情况下自动进行了类型转换。`===` (或 `!==`)操作不会执行任何转换。`===`在比较值和类型时，可以说比`==`更快。","redirect_from":["/zh_cn/use_===_instead_of_==/"],"_content":"\n`==` (或者 `!=`) 操作在需要的情况下自动进行了类型转换。`===` (或 `!==`)操作不会执行任何转换。`===`在比较值和类型时，可以说比`==`更快([jsPref](http://jsperf.com/strictcompare))。 \n\n```js\n[10] ==  10      // 为 true\n[10] === 10      // 为 false\n\n'10' ==  10      // 为 true\n'10' === 10      // 为 false\n\n []  ==  0       // 为 true\n []  === 0       // 为 false\n\n ''  ==  false   // 为 true 但 true == \"a\" 为false\n ''  === false   // 为 false \n\n```\n","source":"_posts/javascript/2016-01-24-use_===_instead_of_==.md","raw":"---\nlayout: post\n\ntitle: 使用 === 而不是 ==\ntip-number: 24\ntip-username: bhaskarmelkani\ntip-username-profile: https://www.twitter.com/bhaskarmelkani\ntip-tldr: == (或者 `!=`) 操作在需要的情况下自动进行了类型转换。`===` (或 `!==`)操作不会执行任何转换。`===`在比较值和类型时，可以说比`==`更快。\n\nredirect_from:\n  - /zh_cn/use_===_instead_of_==/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n`==` (或者 `!=`) 操作在需要的情况下自动进行了类型转换。`===` (或 `!==`)操作不会执行任何转换。`===`在比较值和类型时，可以说比`==`更快([jsPref](http://jsperf.com/strictcompare))。 \n\n```js\n[10] ==  10      // 为 true\n[10] === 10      // 为 false\n\n'10' ==  10      // 为 true\n'10' === 10      // 为 false\n\n []  ==  0       // 为 true\n []  === 0       // 为 false\n\n ''  ==  false   // 为 true 但 true == \"a\" 为false\n ''  === false   // 为 false \n\n```\n","slug":"javascript/2016-01-24-use_===_instead_of_==","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqdb003flyfyfsoe8qe7","content":"<p><code>==</code> (或者 <code>!=</code>) 操作在需要的情况下自动进行了类型转换。<code>===</code> (或 <code>!==</code>)操作不会执行任何转换。<code>===</code>在比较值和类型时，可以说比<code>==</code>更快(<a href=\"http://jsperf.com/strictcompare\" target=\"_blank\" rel=\"external\">jsPref</a>)。 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">10</span>] ==  <span class=\"number\">10</span>      <span class=\"comment\">// 为 true</span></div><div class=\"line\">[<span class=\"number\">10</span>] === <span class=\"number\">10</span>      <span class=\"comment\">// 为 false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">'10'</span> ==  <span class=\"number\">10</span>      <span class=\"comment\">// 为 true</span></div><div class=\"line\"><span class=\"string\">'10'</span> === <span class=\"number\">10</span>      <span class=\"comment\">// 为 false</span></div><div class=\"line\"></div><div class=\"line\"> []  ==  <span class=\"number\">0</span>       <span class=\"comment\">// 为 true</span></div><div class=\"line\"> []  === <span class=\"number\">0</span>       <span class=\"comment\">// 为 false</span></div><div class=\"line\"></div><div class=\"line\"> <span class=\"string\">''</span>  ==  <span class=\"literal\">false</span>   <span class=\"comment\">// 为 true 但 true == \"a\" 为false</span></div><div class=\"line\"> <span class=\"string\">''</span>  === <span class=\"literal\">false</span>   <span class=\"comment\">// 为 false</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><code>==</code> (或者 <code>!=</code>) 操作在需要的情况下自动进行了类型转换。<code>===</code> (或 <code>!==</code>)操作不会执行任何转换。<code>===</code>在比较值和类型时，可以说比<code>==</code>更快(<a href=\"http://jsperf.com/strictcompare\" target=\"_blank\" rel=\"external\">jsPref</a>)。 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">10</span>] ==  <span class=\"number\">10</span>      <span class=\"comment\">// 为 true</span></div><div class=\"line\">[<span class=\"number\">10</span>] === <span class=\"number\">10</span>      <span class=\"comment\">// 为 false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">'10'</span> ==  <span class=\"number\">10</span>      <span class=\"comment\">// 为 true</span></div><div class=\"line\"><span class=\"string\">'10'</span> === <span class=\"number\">10</span>      <span class=\"comment\">// 为 false</span></div><div class=\"line\"></div><div class=\"line\"> []  ==  <span class=\"number\">0</span>       <span class=\"comment\">// 为 true</span></div><div class=\"line\"> []  === <span class=\"number\">0</span>       <span class=\"comment\">// 为 false</span></div><div class=\"line\"></div><div class=\"line\"> <span class=\"string\">''</span>  ==  <span class=\"literal\">false</span>   <span class=\"comment\">// 为 true 但 true == \"a\" 为false</span></div><div class=\"line\"> <span class=\"string\">''</span>  === <span class=\"literal\">false</span>   <span class=\"comment\">// 为 false</span></div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"使用立即执行函数表达式","tip-number":25,"tip-username":"rishantagarwal","tip-username-profile":"https://github.com/rishantagarwal","tip-tldr":"立即执行函数表达式( IIFE - immediately invoked function expression)是一个立即执行的匿名函数表达式，它在Javascript中有一些很重要的用途。","redirect_from":["/zh_cn/Using-immediately-invoked-function-expression/"],"_content":"\n立即执行函数表达式( IIFE - immediately invoked function expression)是一个立即执行的匿名函数表达式，它在Javascript中有一些很重要的用途。\n\n```javascript\n\n(function() {\n // Do something​\n }\n)()\n\n```\n\n这是一个立即执行的匿名函数表达式，它在有JavaScript一些特别重要的用途。\n\n两对括号包裹着一个匿名函数，使匿名函数变成了一个函数表达式。于是，我们现在拥有了一个未命名的函数表达式，而不是一个全局作用域下或在任何地方定义的的简单函数。\n\n类似地，我们也可以创建一个命名过的立即执行函数表达式：\n\n```javascript\n(someNamedFunction = function(msg) {\n\tconsole.log(msg || \"Nothing for today !!\")\n\t}) (); // 输出 --> Nothing for today !!​\n​\nsomeNamedFunction(\"Javascript rocks !!\"); // 输出 --> Javascript rocks !!\nsomeNamedFunction(); // 输出 --> Nothing for today !!​\n```\n\n更多内容, 请参考下面链接 - \n1. [链接 1](https://blog.mariusschulz.com/2016/01/13/disassembling-javascripts-iife-syntax) \n2. [链接 2](http://javascriptissexy.com/12-simple-yet-powerful-javascript-tips/) \n\n效率:\n[jsPerf](http://jsperf.com/iife-with-call)","source":"_posts/javascript/2016-01-25-Using-immediately-invoked-function-expression.md","raw":"---\nlayout: post\n\ntitle: 使用立即执行函数表达式\ntip-number: 25\ntip-username: rishantagarwal \ntip-username-profile: https://github.com/rishantagarwal\ntip-tldr: 立即执行函数表达式( IIFE - immediately invoked function expression)是一个立即执行的匿名函数表达式，它在Javascript中有一些很重要的用途。\n\n\nredirect_from:\n  - /zh_cn/Using-immediately-invoked-function-expression/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n立即执行函数表达式( IIFE - immediately invoked function expression)是一个立即执行的匿名函数表达式，它在Javascript中有一些很重要的用途。\n\n```javascript\n\n(function() {\n // Do something​\n }\n)()\n\n```\n\n这是一个立即执行的匿名函数表达式，它在有JavaScript一些特别重要的用途。\n\n两对括号包裹着一个匿名函数，使匿名函数变成了一个函数表达式。于是，我们现在拥有了一个未命名的函数表达式，而不是一个全局作用域下或在任何地方定义的的简单函数。\n\n类似地，我们也可以创建一个命名过的立即执行函数表达式：\n\n```javascript\n(someNamedFunction = function(msg) {\n\tconsole.log(msg || \"Nothing for today !!\")\n\t}) (); // 输出 --> Nothing for today !!​\n​\nsomeNamedFunction(\"Javascript rocks !!\"); // 输出 --> Javascript rocks !!\nsomeNamedFunction(); // 输出 --> Nothing for today !!​\n```\n\n更多内容, 请参考下面链接 - \n1. [链接 1](https://blog.mariusschulz.com/2016/01/13/disassembling-javascripts-iife-syntax) \n2. [链接 2](http://javascriptissexy.com/12-simple-yet-powerful-javascript-tips/) \n\n效率:\n[jsPerf](http://jsperf.com/iife-with-call)","slug":"javascript/2016-01-25-Using-immediately-invoked-function-expression","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqdd003hlyfyysst3pdx","content":"<p>立即执行函数表达式( IIFE - immediately invoked function expression)是一个立即执行的匿名函数表达式，它在Javascript中有一些很重要的用途。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"> <span class=\"comment\">// Do something​</span></div><div class=\"line\"> &#125;</div><div class=\"line\">)()</div></pre></td></tr></table></figure>\n<p>这是一个立即执行的匿名函数表达式，它在有JavaScript一些特别重要的用途。</p>\n<p>两对括号包裹着一个匿名函数，使匿名函数变成了一个函数表达式。于是，我们现在拥有了一个未命名的函数表达式，而不是一个全局作用域下或在任何地方定义的的简单函数。</p>\n<p>类似地，我们也可以创建一个命名过的立即执行函数表达式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">(someNamedFunction = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(msg || <span class=\"string\">\"Nothing for today !!\"</span>)</div><div class=\"line\">\t&#125;) (); <span class=\"comment\">// 输出 --&gt; Nothing for today !!​</span></div><div class=\"line\">​</div><div class=\"line\">someNamedFunction(<span class=\"string\">\"Javascript rocks !!\"</span>); <span class=\"comment\">// 输出 --&gt; Javascript rocks !!</span></div><div class=\"line\">someNamedFunction(); <span class=\"comment\">// 输出 --&gt; Nothing for today !!​</span></div></pre></td></tr></table></figure>\n<p>更多内容, 请参考下面链接 - </p>\n<ol>\n<li><a href=\"https://blog.mariusschulz.com/2016/01/13/disassembling-javascripts-iife-syntax\" target=\"_blank\" rel=\"external\">链接 1</a> </li>\n<li><a href=\"http://javascriptissexy.com/12-simple-yet-powerful-javascript-tips/\" target=\"_blank\" rel=\"external\">链接 2</a> </li>\n</ol>\n<p>效率:<br><a href=\"http://jsperf.com/iife-with-call\" target=\"_blank\" rel=\"external\">jsPerf</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>立即执行函数表达式( IIFE - immediately invoked function expression)是一个立即执行的匿名函数表达式，它在Javascript中有一些很重要的用途。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"> <span class=\"comment\">// Do something​</span></div><div class=\"line\"> &#125;</div><div class=\"line\">)()</div></pre></td></tr></table></figure>\n<p>这是一个立即执行的匿名函数表达式，它在有JavaScript一些特别重要的用途。</p>\n<p>两对括号包裹着一个匿名函数，使匿名函数变成了一个函数表达式。于是，我们现在拥有了一个未命名的函数表达式，而不是一个全局作用域下或在任何地方定义的的简单函数。</p>\n<p>类似地，我们也可以创建一个命名过的立即执行函数表达式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">(someNamedFunction = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(msg || <span class=\"string\">\"Nothing for today !!\"</span>)</div><div class=\"line\">\t&#125;) (); <span class=\"comment\">// 输出 --&gt; Nothing for today !!​</span></div><div class=\"line\">​</div><div class=\"line\">someNamedFunction(<span class=\"string\">\"Javascript rocks !!\"</span>); <span class=\"comment\">// 输出 --&gt; Javascript rocks !!</span></div><div class=\"line\">someNamedFunction(); <span class=\"comment\">// 输出 --&gt; Nothing for today !!​</span></div></pre></td></tr></table></figure>\n<p>更多内容, 请参考下面链接 - </p>\n<ol>\n<li><a href=\"https://blog.mariusschulz.com/2016/01/13/disassembling-javascripts-iife-syntax\" target=\"_blank\" rel=\"external\">链接 1</a> </li>\n<li><a href=\"http://javascriptissexy.com/12-simple-yet-powerful-javascript-tips/\" target=\"_blank\" rel=\"external\">链接 2</a> </li>\n</ol>\n<p>效率:<br><a href=\"http://jsperf.com/iife-with-call\" target=\"_blank\" rel=\"external\">jsPerf</a></p>\n"},{"layout":"post","title":"过滤并排序字符串列表","tip-number":26,"tip-username":"davegomez","tip-username-profile":"https://github.com/davegomez","tip-tldr":"你可能有一个很多名字组成的列表，需要过滤掉重复的名字并按字母表将其排序。","redirect_from":["/zh_cn/filtering-and-sorting-a-list-of-strings/"],"_content":"\n你可能有一个很多名字组成的列表，需要过滤掉重复的名字并按字母表将其排序。\n\n在我们的例子里准备用不同版本语言的**JavaScript 保留字**的列表，但是你能发现，有很多重复的关键字而且它们并没有按字母表顺序排列。所以这是一个完美的字符串列表([数组](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array))来测试我们的JavaScript小知识。\n\n```js\nvar keywords = ['do', 'if', 'in', 'for', 'new', 'try', 'var', 'case', 'else', 'enum', 'null', 'this', 'true', 'void', 'with', 'break', 'catch', 'class', 'const', 'false', 'super', 'throw', 'while', 'delete', 'export', 'import', 'return', 'switch', 'typeof', 'default', 'extends', 'finally', 'continue', 'debugger', 'function', 'do', 'if', 'in', 'for', 'int', 'new', 'try', 'var', 'byte', 'case', 'char', 'else', 'enum', 'goto', 'long', 'null', 'this', 'true', 'void', 'with', 'break', 'catch', 'class', 'const', 'false', 'final', 'float', 'short', 'super', 'throw', 'while', 'delete', 'double', 'export', 'import', 'native', 'public', 'return', 'static', 'switch', 'throws', 'typeof', 'boolean', 'default', 'extends', 'finally', 'package', 'private', 'abstract', 'continue', 'debugger', 'function', 'volatile', 'interface', 'protected', 'transient', 'implements', 'instanceof', 'synchronized', 'do', 'if', 'in', 'for', 'let', 'new', 'try', 'var', 'case', 'else', 'enum', 'eval', 'null', 'this', 'true', 'void', 'with', 'break', 'catch', 'class', 'const', 'false', 'super', 'throw', 'while', 'yield', 'delete', 'export', 'import', 'public', 'return', 'static', 'switch', 'typeof', 'default', 'extends', 'finally', 'package', 'private', 'continue', 'debugger', 'function', 'arguments', 'interface', 'protected', 'implements', 'instanceof', 'do', 'if', 'in', 'for', 'let', 'new', 'try', 'var', 'case', 'else', 'enum', 'eval', 'null', 'this', 'true', 'void', 'with', 'await', 'break', 'catch', 'class', 'const', 'false', 'super', 'throw', 'while', 'yield', 'delete', 'export', 'import', 'public', 'return', 'static', 'switch', 'typeof', 'default', 'extends', 'finally', 'package', 'private', 'continue', 'debugger', 'function', 'arguments', 'interface', 'protected', 'implements', 'instanceof'];\n```\n\n因为我们不想改变我们的原始列表，所以我们准备用高阶函数叫做[`filter`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)，它将基于我们传递的回调方法返回一个新的过滤后的数组。回调方法将比较当前关键字在原始列表里的索引和新列表中的索引，仅当索引匹配时将当前关键字push到新数组。\n\n最后我们准备使用[`sort`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)方法排序过滤后的列表，`sort`只接受一个比较方法作为参数，并返回按字母表排序后的列表。\n\n```js\nvar filteredAndSortedKeywords = keywords\n  .filter(function (keyword, index) {\n      return keywords.lastIndexOf(keyword) === index;\n    })\n  .sort(function (a, b) {\n      return a < b ? -1 : 1;\n    });\n```\n\n在**ES6** (ECMAScript 2015)版本下使用[箭头函数](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions)看起来更简单:\n\n```js\nconst filteredAndSortedKeywords = keywords\n  .filter((keyword, index) => keywords.lastIndexOf(keyword) === index)\n  .sort((a, b) => a < b ? -1 : 1);\n```\n\n这是最后过滤和排序后的JavaScript保留字列表：\n\n```js\nconsole.log(filteredAndSortedKeywords);\n\n// ['abstract', 'arguments', 'await', 'boolean', 'break', 'byte', 'case', 'catch', 'char', 'class', 'const', 'continue', 'debugger', 'default', 'delete', 'do', 'double', 'else', 'enum', 'eval', 'export', 'extends', 'false', 'final', 'finally', 'float', 'for', 'function', 'goto', 'if', 'implements', 'import', 'in', 'instanceof', 'int', 'interface', 'let', 'long', 'native', 'new', 'null', 'package', 'private', 'protected', 'public', 'return', 'short', 'static', 'super', 'switch', 'synchronized', 'this', 'throw', 'throws', 'transient', 'true', 'try', 'typeof', 'var', 'void', 'volatile', 'while', 'with', 'yield']\n```\n\n*感谢[@nikshulipa](https://github.com/nikshulipa)、[@kirilloid](https://twitter.com/kirilloid)、[@lesterzone](https://twitter.com/lesterzone)、[@tracker1](https://twitter.com/tracker1)、[@manuel_del_pozo](https://twitter.com/manuel_del_pozo)所有的回复与建议！*\n","source":"_posts/javascript/2016-01-26-filtering-and-sorting-a-list-of-strings.md","raw":"---\nlayout: post\n\ntitle: 过滤并排序字符串列表\ntip-number: 26\ntip-username: davegomez\ntip-username-profile: https://github.com/davegomez\ntip-tldr: 你可能有一个很多名字组成的列表，需要过滤掉重复的名字并按字母表将其排序。\n\nredirect_from:\n  - /zh_cn/filtering-and-sorting-a-list-of-strings/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n你可能有一个很多名字组成的列表，需要过滤掉重复的名字并按字母表将其排序。\n\n在我们的例子里准备用不同版本语言的**JavaScript 保留字**的列表，但是你能发现，有很多重复的关键字而且它们并没有按字母表顺序排列。所以这是一个完美的字符串列表([数组](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array))来测试我们的JavaScript小知识。\n\n```js\nvar keywords = ['do', 'if', 'in', 'for', 'new', 'try', 'var', 'case', 'else', 'enum', 'null', 'this', 'true', 'void', 'with', 'break', 'catch', 'class', 'const', 'false', 'super', 'throw', 'while', 'delete', 'export', 'import', 'return', 'switch', 'typeof', 'default', 'extends', 'finally', 'continue', 'debugger', 'function', 'do', 'if', 'in', 'for', 'int', 'new', 'try', 'var', 'byte', 'case', 'char', 'else', 'enum', 'goto', 'long', 'null', 'this', 'true', 'void', 'with', 'break', 'catch', 'class', 'const', 'false', 'final', 'float', 'short', 'super', 'throw', 'while', 'delete', 'double', 'export', 'import', 'native', 'public', 'return', 'static', 'switch', 'throws', 'typeof', 'boolean', 'default', 'extends', 'finally', 'package', 'private', 'abstract', 'continue', 'debugger', 'function', 'volatile', 'interface', 'protected', 'transient', 'implements', 'instanceof', 'synchronized', 'do', 'if', 'in', 'for', 'let', 'new', 'try', 'var', 'case', 'else', 'enum', 'eval', 'null', 'this', 'true', 'void', 'with', 'break', 'catch', 'class', 'const', 'false', 'super', 'throw', 'while', 'yield', 'delete', 'export', 'import', 'public', 'return', 'static', 'switch', 'typeof', 'default', 'extends', 'finally', 'package', 'private', 'continue', 'debugger', 'function', 'arguments', 'interface', 'protected', 'implements', 'instanceof', 'do', 'if', 'in', 'for', 'let', 'new', 'try', 'var', 'case', 'else', 'enum', 'eval', 'null', 'this', 'true', 'void', 'with', 'await', 'break', 'catch', 'class', 'const', 'false', 'super', 'throw', 'while', 'yield', 'delete', 'export', 'import', 'public', 'return', 'static', 'switch', 'typeof', 'default', 'extends', 'finally', 'package', 'private', 'continue', 'debugger', 'function', 'arguments', 'interface', 'protected', 'implements', 'instanceof'];\n```\n\n因为我们不想改变我们的原始列表，所以我们准备用高阶函数叫做[`filter`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)，它将基于我们传递的回调方法返回一个新的过滤后的数组。回调方法将比较当前关键字在原始列表里的索引和新列表中的索引，仅当索引匹配时将当前关键字push到新数组。\n\n最后我们准备使用[`sort`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)方法排序过滤后的列表，`sort`只接受一个比较方法作为参数，并返回按字母表排序后的列表。\n\n```js\nvar filteredAndSortedKeywords = keywords\n  .filter(function (keyword, index) {\n      return keywords.lastIndexOf(keyword) === index;\n    })\n  .sort(function (a, b) {\n      return a < b ? -1 : 1;\n    });\n```\n\n在**ES6** (ECMAScript 2015)版本下使用[箭头函数](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions)看起来更简单:\n\n```js\nconst filteredAndSortedKeywords = keywords\n  .filter((keyword, index) => keywords.lastIndexOf(keyword) === index)\n  .sort((a, b) => a < b ? -1 : 1);\n```\n\n这是最后过滤和排序后的JavaScript保留字列表：\n\n```js\nconsole.log(filteredAndSortedKeywords);\n\n// ['abstract', 'arguments', 'await', 'boolean', 'break', 'byte', 'case', 'catch', 'char', 'class', 'const', 'continue', 'debugger', 'default', 'delete', 'do', 'double', 'else', 'enum', 'eval', 'export', 'extends', 'false', 'final', 'finally', 'float', 'for', 'function', 'goto', 'if', 'implements', 'import', 'in', 'instanceof', 'int', 'interface', 'let', 'long', 'native', 'new', 'null', 'package', 'private', 'protected', 'public', 'return', 'short', 'static', 'super', 'switch', 'synchronized', 'this', 'throw', 'throws', 'transient', 'true', 'try', 'typeof', 'var', 'void', 'volatile', 'while', 'with', 'yield']\n```\n\n*感谢[@nikshulipa](https://github.com/nikshulipa)、[@kirilloid](https://twitter.com/kirilloid)、[@lesterzone](https://twitter.com/lesterzone)、[@tracker1](https://twitter.com/tracker1)、[@manuel_del_pozo](https://twitter.com/manuel_del_pozo)所有的回复与建议！*\n","slug":"javascript/2016-01-26-filtering-and-sorting-a-list-of-strings","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqdg003jlyfykov7lbb9","content":"<p>你可能有一个很多名字组成的列表，需要过滤掉重复的名字并按字母表将其排序。</p>\n<p>在我们的例子里准备用不同版本语言的<strong>JavaScript 保留字</strong>的列表，但是你能发现，有很多重复的关键字而且它们并没有按字母表顺序排列。所以这是一个完美的字符串列表(<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"external\">数组</a>)来测试我们的JavaScript小知识。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> keywords = [<span class=\"string\">'do'</span>, <span class=\"string\">'if'</span>, <span class=\"string\">'in'</span>, <span class=\"string\">'for'</span>, <span class=\"string\">'new'</span>, <span class=\"string\">'try'</span>, <span class=\"string\">'var'</span>, <span class=\"string\">'case'</span>, <span class=\"string\">'else'</span>, <span class=\"string\">'enum'</span>, <span class=\"string\">'null'</span>, <span class=\"string\">'this'</span>, <span class=\"string\">'true'</span>, <span class=\"string\">'void'</span>, <span class=\"string\">'with'</span>, <span class=\"string\">'break'</span>, <span class=\"string\">'catch'</span>, <span class=\"string\">'class'</span>, <span class=\"string\">'const'</span>, <span class=\"string\">'false'</span>, <span class=\"string\">'super'</span>, <span class=\"string\">'throw'</span>, <span class=\"string\">'while'</span>, <span class=\"string\">'delete'</span>, <span class=\"string\">'export'</span>, <span class=\"string\">'import'</span>, <span class=\"string\">'return'</span>, <span class=\"string\">'switch'</span>, <span class=\"string\">'typeof'</span>, <span class=\"string\">'default'</span>, <span class=\"string\">'extends'</span>, <span class=\"string\">'finally'</span>, <span class=\"string\">'continue'</span>, <span class=\"string\">'debugger'</span>, <span class=\"string\">'function'</span>, <span class=\"string\">'do'</span>, <span class=\"string\">'if'</span>, <span class=\"string\">'in'</span>, <span class=\"string\">'for'</span>, <span class=\"string\">'int'</span>, <span class=\"string\">'new'</span>, <span class=\"string\">'try'</span>, <span class=\"string\">'var'</span>, <span class=\"string\">'byte'</span>, <span class=\"string\">'case'</span>, <span class=\"string\">'char'</span>, <span class=\"string\">'else'</span>, <span class=\"string\">'enum'</span>, <span class=\"string\">'goto'</span>, <span class=\"string\">'long'</span>, <span class=\"string\">'null'</span>, <span class=\"string\">'this'</span>, <span class=\"string\">'true'</span>, <span class=\"string\">'void'</span>, <span class=\"string\">'with'</span>, <span class=\"string\">'break'</span>, <span class=\"string\">'catch'</span>, <span class=\"string\">'class'</span>, <span class=\"string\">'const'</span>, <span class=\"string\">'false'</span>, <span class=\"string\">'final'</span>, <span class=\"string\">'float'</span>, <span class=\"string\">'short'</span>, <span class=\"string\">'super'</span>, <span class=\"string\">'throw'</span>, <span class=\"string\">'while'</span>, <span class=\"string\">'delete'</span>, <span class=\"string\">'double'</span>, <span class=\"string\">'export'</span>, <span class=\"string\">'import'</span>, <span class=\"string\">'native'</span>, <span class=\"string\">'public'</span>, <span class=\"string\">'return'</span>, <span class=\"string\">'static'</span>, <span class=\"string\">'switch'</span>, <span class=\"string\">'throws'</span>, <span class=\"string\">'typeof'</span>, <span class=\"string\">'boolean'</span>, <span class=\"string\">'default'</span>, <span class=\"string\">'extends'</span>, <span class=\"string\">'finally'</span>, <span class=\"string\">'package'</span>, <span class=\"string\">'private'</span>, <span class=\"string\">'abstract'</span>, <span class=\"string\">'continue'</span>, <span class=\"string\">'debugger'</span>, <span class=\"string\">'function'</span>, <span class=\"string\">'volatile'</span>, <span class=\"string\">'interface'</span>, <span class=\"string\">'protected'</span>, <span class=\"string\">'transient'</span>, <span class=\"string\">'implements'</span>, <span class=\"string\">'instanceof'</span>, <span class=\"string\">'synchronized'</span>, <span class=\"string\">'do'</span>, <span class=\"string\">'if'</span>, <span class=\"string\">'in'</span>, <span class=\"string\">'for'</span>, <span class=\"string\">'let'</span>, <span class=\"string\">'new'</span>, <span class=\"string\">'try'</span>, <span class=\"string\">'var'</span>, <span class=\"string\">'case'</span>, <span class=\"string\">'else'</span>, <span class=\"string\">'enum'</span>, <span class=\"string\">'eval'</span>, <span class=\"string\">'null'</span>, <span class=\"string\">'this'</span>, <span class=\"string\">'true'</span>, <span class=\"string\">'void'</span>, <span class=\"string\">'with'</span>, <span class=\"string\">'break'</span>, <span class=\"string\">'catch'</span>, <span class=\"string\">'class'</span>, <span class=\"string\">'const'</span>, <span class=\"string\">'false'</span>, <span class=\"string\">'super'</span>, <span class=\"string\">'throw'</span>, <span class=\"string\">'while'</span>, <span class=\"string\">'yield'</span>, <span class=\"string\">'delete'</span>, <span class=\"string\">'export'</span>, <span class=\"string\">'import'</span>, <span class=\"string\">'public'</span>, <span class=\"string\">'return'</span>, <span class=\"string\">'static'</span>, <span class=\"string\">'switch'</span>, <span class=\"string\">'typeof'</span>, <span class=\"string\">'default'</span>, <span class=\"string\">'extends'</span>, <span class=\"string\">'finally'</span>, <span class=\"string\">'package'</span>, <span class=\"string\">'private'</span>, <span class=\"string\">'continue'</span>, <span class=\"string\">'debugger'</span>, <span class=\"string\">'function'</span>, <span class=\"string\">'arguments'</span>, <span class=\"string\">'interface'</span>, <span class=\"string\">'protected'</span>, <span class=\"string\">'implements'</span>, <span class=\"string\">'instanceof'</span>, <span class=\"string\">'do'</span>, <span class=\"string\">'if'</span>, <span class=\"string\">'in'</span>, <span class=\"string\">'for'</span>, <span class=\"string\">'let'</span>, <span class=\"string\">'new'</span>, <span class=\"string\">'try'</span>, <span class=\"string\">'var'</span>, <span class=\"string\">'case'</span>, <span class=\"string\">'else'</span>, <span class=\"string\">'enum'</span>, <span class=\"string\">'eval'</span>, <span class=\"string\">'null'</span>, <span class=\"string\">'this'</span>, <span class=\"string\">'true'</span>, <span class=\"string\">'void'</span>, <span class=\"string\">'with'</span>, <span class=\"string\">'await'</span>, <span class=\"string\">'break'</span>, <span class=\"string\">'catch'</span>, <span class=\"string\">'class'</span>, <span class=\"string\">'const'</span>, <span class=\"string\">'false'</span>, <span class=\"string\">'super'</span>, <span class=\"string\">'throw'</span>, <span class=\"string\">'while'</span>, <span class=\"string\">'yield'</span>, <span class=\"string\">'delete'</span>, <span class=\"string\">'export'</span>, <span class=\"string\">'import'</span>, <span class=\"string\">'public'</span>, <span class=\"string\">'return'</span>, <span class=\"string\">'static'</span>, <span class=\"string\">'switch'</span>, <span class=\"string\">'typeof'</span>, <span class=\"string\">'default'</span>, <span class=\"string\">'extends'</span>, <span class=\"string\">'finally'</span>, <span class=\"string\">'package'</span>, <span class=\"string\">'private'</span>, <span class=\"string\">'continue'</span>, <span class=\"string\">'debugger'</span>, <span class=\"string\">'function'</span>, <span class=\"string\">'arguments'</span>, <span class=\"string\">'interface'</span>, <span class=\"string\">'protected'</span>, <span class=\"string\">'implements'</span>, <span class=\"string\">'instanceof'</span>];</div></pre></td></tr></table></figure>\n<p>因为我们不想改变我们的原始列表，所以我们准备用高阶函数叫做<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" target=\"_blank\" rel=\"external\"><code>filter</code></a>，它将基于我们传递的回调方法返回一个新的过滤后的数组。回调方法将比较当前关键字在原始列表里的索引和新列表中的索引，仅当索引匹配时将当前关键字push到新数组。</p>\n<p>最后我们准备使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\" target=\"_blank\" rel=\"external\"><code>sort</code></a>方法排序过滤后的列表，<code>sort</code>只接受一个比较方法作为参数，并返回按字母表排序后的列表。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> filteredAndSortedKeywords = keywords</div><div class=\"line\">  .filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">keyword, index</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> keywords.lastIndexOf(keyword) === index;</div><div class=\"line\">    &#125;)</div><div class=\"line\">  .sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> a &lt; b ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<p>在<strong>ES6</strong> (ECMAScript 2015)版本下使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"external\">箭头函数</a>看起来更简单:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> filteredAndSortedKeywords = keywords</div><div class=\"line\">  .filter(<span class=\"function\">(<span class=\"params\">keyword, index</span>) =&gt;</span> keywords.lastIndexOf(keyword) === index)</div><div class=\"line\">  .sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a &lt; b ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>);</div></pre></td></tr></table></figure>\n<p>这是最后过滤和排序后的JavaScript保留字列表：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(filteredAndSortedKeywords);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ['abstract', 'arguments', 'await', 'boolean', 'break', 'byte', 'case', 'catch', 'char', 'class', 'const', 'continue', 'debugger', 'default', 'delete', 'do', 'double', 'else', 'enum', 'eval', 'export', 'extends', 'false', 'final', 'finally', 'float', 'for', 'function', 'goto', 'if', 'implements', 'import', 'in', 'instanceof', 'int', 'interface', 'let', 'long', 'native', 'new', 'null', 'package', 'private', 'protected', 'public', 'return', 'short', 'static', 'super', 'switch', 'synchronized', 'this', 'throw', 'throws', 'transient', 'true', 'try', 'typeof', 'var', 'void', 'volatile', 'while', 'with', 'yield']</span></div></pre></td></tr></table></figure>\n<p><em>感谢<a href=\"https://github.com/nikshulipa\" target=\"_blank\" rel=\"external\">@nikshulipa</a>、<a href=\"https://twitter.com/kirilloid\" target=\"_blank\" rel=\"external\">@kirilloid</a>、<a href=\"https://twitter.com/lesterzone\" target=\"_blank\" rel=\"external\">@lesterzone</a>、<a href=\"https://twitter.com/tracker1\" target=\"_blank\" rel=\"external\">@tracker1</a>、<a href=\"https://twitter.com/manuel_del_pozo\" target=\"_blank\" rel=\"external\">@manuel_del_pozo</a>所有的回复与建议！</em></p>\n","site":{"data":{}},"excerpt":"","more":"<p>你可能有一个很多名字组成的列表，需要过滤掉重复的名字并按字母表将其排序。</p>\n<p>在我们的例子里准备用不同版本语言的<strong>JavaScript 保留字</strong>的列表，但是你能发现，有很多重复的关键字而且它们并没有按字母表顺序排列。所以这是一个完美的字符串列表(<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"external\">数组</a>)来测试我们的JavaScript小知识。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> keywords = [<span class=\"string\">'do'</span>, <span class=\"string\">'if'</span>, <span class=\"string\">'in'</span>, <span class=\"string\">'for'</span>, <span class=\"string\">'new'</span>, <span class=\"string\">'try'</span>, <span class=\"string\">'var'</span>, <span class=\"string\">'case'</span>, <span class=\"string\">'else'</span>, <span class=\"string\">'enum'</span>, <span class=\"string\">'null'</span>, <span class=\"string\">'this'</span>, <span class=\"string\">'true'</span>, <span class=\"string\">'void'</span>, <span class=\"string\">'with'</span>, <span class=\"string\">'break'</span>, <span class=\"string\">'catch'</span>, <span class=\"string\">'class'</span>, <span class=\"string\">'const'</span>, <span class=\"string\">'false'</span>, <span class=\"string\">'super'</span>, <span class=\"string\">'throw'</span>, <span class=\"string\">'while'</span>, <span class=\"string\">'delete'</span>, <span class=\"string\">'export'</span>, <span class=\"string\">'import'</span>, <span class=\"string\">'return'</span>, <span class=\"string\">'switch'</span>, <span class=\"string\">'typeof'</span>, <span class=\"string\">'default'</span>, <span class=\"string\">'extends'</span>, <span class=\"string\">'finally'</span>, <span class=\"string\">'continue'</span>, <span class=\"string\">'debugger'</span>, <span class=\"string\">'function'</span>, <span class=\"string\">'do'</span>, <span class=\"string\">'if'</span>, <span class=\"string\">'in'</span>, <span class=\"string\">'for'</span>, <span class=\"string\">'int'</span>, <span class=\"string\">'new'</span>, <span class=\"string\">'try'</span>, <span class=\"string\">'var'</span>, <span class=\"string\">'byte'</span>, <span class=\"string\">'case'</span>, <span class=\"string\">'char'</span>, <span class=\"string\">'else'</span>, <span class=\"string\">'enum'</span>, <span class=\"string\">'goto'</span>, <span class=\"string\">'long'</span>, <span class=\"string\">'null'</span>, <span class=\"string\">'this'</span>, <span class=\"string\">'true'</span>, <span class=\"string\">'void'</span>, <span class=\"string\">'with'</span>, <span class=\"string\">'break'</span>, <span class=\"string\">'catch'</span>, <span class=\"string\">'class'</span>, <span class=\"string\">'const'</span>, <span class=\"string\">'false'</span>, <span class=\"string\">'final'</span>, <span class=\"string\">'float'</span>, <span class=\"string\">'short'</span>, <span class=\"string\">'super'</span>, <span class=\"string\">'throw'</span>, <span class=\"string\">'while'</span>, <span class=\"string\">'delete'</span>, <span class=\"string\">'double'</span>, <span class=\"string\">'export'</span>, <span class=\"string\">'import'</span>, <span class=\"string\">'native'</span>, <span class=\"string\">'public'</span>, <span class=\"string\">'return'</span>, <span class=\"string\">'static'</span>, <span class=\"string\">'switch'</span>, <span class=\"string\">'throws'</span>, <span class=\"string\">'typeof'</span>, <span class=\"string\">'boolean'</span>, <span class=\"string\">'default'</span>, <span class=\"string\">'extends'</span>, <span class=\"string\">'finally'</span>, <span class=\"string\">'package'</span>, <span class=\"string\">'private'</span>, <span class=\"string\">'abstract'</span>, <span class=\"string\">'continue'</span>, <span class=\"string\">'debugger'</span>, <span class=\"string\">'function'</span>, <span class=\"string\">'volatile'</span>, <span class=\"string\">'interface'</span>, <span class=\"string\">'protected'</span>, <span class=\"string\">'transient'</span>, <span class=\"string\">'implements'</span>, <span class=\"string\">'instanceof'</span>, <span class=\"string\">'synchronized'</span>, <span class=\"string\">'do'</span>, <span class=\"string\">'if'</span>, <span class=\"string\">'in'</span>, <span class=\"string\">'for'</span>, <span class=\"string\">'let'</span>, <span class=\"string\">'new'</span>, <span class=\"string\">'try'</span>, <span class=\"string\">'var'</span>, <span class=\"string\">'case'</span>, <span class=\"string\">'else'</span>, <span class=\"string\">'enum'</span>, <span class=\"string\">'eval'</span>, <span class=\"string\">'null'</span>, <span class=\"string\">'this'</span>, <span class=\"string\">'true'</span>, <span class=\"string\">'void'</span>, <span class=\"string\">'with'</span>, <span class=\"string\">'break'</span>, <span class=\"string\">'catch'</span>, <span class=\"string\">'class'</span>, <span class=\"string\">'const'</span>, <span class=\"string\">'false'</span>, <span class=\"string\">'super'</span>, <span class=\"string\">'throw'</span>, <span class=\"string\">'while'</span>, <span class=\"string\">'yield'</span>, <span class=\"string\">'delete'</span>, <span class=\"string\">'export'</span>, <span class=\"string\">'import'</span>, <span class=\"string\">'public'</span>, <span class=\"string\">'return'</span>, <span class=\"string\">'static'</span>, <span class=\"string\">'switch'</span>, <span class=\"string\">'typeof'</span>, <span class=\"string\">'default'</span>, <span class=\"string\">'extends'</span>, <span class=\"string\">'finally'</span>, <span class=\"string\">'package'</span>, <span class=\"string\">'private'</span>, <span class=\"string\">'continue'</span>, <span class=\"string\">'debugger'</span>, <span class=\"string\">'function'</span>, <span class=\"string\">'arguments'</span>, <span class=\"string\">'interface'</span>, <span class=\"string\">'protected'</span>, <span class=\"string\">'implements'</span>, <span class=\"string\">'instanceof'</span>, <span class=\"string\">'do'</span>, <span class=\"string\">'if'</span>, <span class=\"string\">'in'</span>, <span class=\"string\">'for'</span>, <span class=\"string\">'let'</span>, <span class=\"string\">'new'</span>, <span class=\"string\">'try'</span>, <span class=\"string\">'var'</span>, <span class=\"string\">'case'</span>, <span class=\"string\">'else'</span>, <span class=\"string\">'enum'</span>, <span class=\"string\">'eval'</span>, <span class=\"string\">'null'</span>, <span class=\"string\">'this'</span>, <span class=\"string\">'true'</span>, <span class=\"string\">'void'</span>, <span class=\"string\">'with'</span>, <span class=\"string\">'await'</span>, <span class=\"string\">'break'</span>, <span class=\"string\">'catch'</span>, <span class=\"string\">'class'</span>, <span class=\"string\">'const'</span>, <span class=\"string\">'false'</span>, <span class=\"string\">'super'</span>, <span class=\"string\">'throw'</span>, <span class=\"string\">'while'</span>, <span class=\"string\">'yield'</span>, <span class=\"string\">'delete'</span>, <span class=\"string\">'export'</span>, <span class=\"string\">'import'</span>, <span class=\"string\">'public'</span>, <span class=\"string\">'return'</span>, <span class=\"string\">'static'</span>, <span class=\"string\">'switch'</span>, <span class=\"string\">'typeof'</span>, <span class=\"string\">'default'</span>, <span class=\"string\">'extends'</span>, <span class=\"string\">'finally'</span>, <span class=\"string\">'package'</span>, <span class=\"string\">'private'</span>, <span class=\"string\">'continue'</span>, <span class=\"string\">'debugger'</span>, <span class=\"string\">'function'</span>, <span class=\"string\">'arguments'</span>, <span class=\"string\">'interface'</span>, <span class=\"string\">'protected'</span>, <span class=\"string\">'implements'</span>, <span class=\"string\">'instanceof'</span>];</div></pre></td></tr></table></figure>\n<p>因为我们不想改变我们的原始列表，所以我们准备用高阶函数叫做<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" target=\"_blank\" rel=\"external\"><code>filter</code></a>，它将基于我们传递的回调方法返回一个新的过滤后的数组。回调方法将比较当前关键字在原始列表里的索引和新列表中的索引，仅当索引匹配时将当前关键字push到新数组。</p>\n<p>最后我们准备使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\" target=\"_blank\" rel=\"external\"><code>sort</code></a>方法排序过滤后的列表，<code>sort</code>只接受一个比较方法作为参数，并返回按字母表排序后的列表。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> filteredAndSortedKeywords = keywords</div><div class=\"line\">  .filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">keyword, index</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> keywords.lastIndexOf(keyword) === index;</div><div class=\"line\">    &#125;)</div><div class=\"line\">  .sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> a &lt; b ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<p>在<strong>ES6</strong> (ECMAScript 2015)版本下使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"external\">箭头函数</a>看起来更简单:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> filteredAndSortedKeywords = keywords</div><div class=\"line\">  .filter(<span class=\"function\">(<span class=\"params\">keyword, index</span>) =&gt;</span> keywords.lastIndexOf(keyword) === index)</div><div class=\"line\">  .sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a &lt; b ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>);</div></pre></td></tr></table></figure>\n<p>这是最后过滤和排序后的JavaScript保留字列表：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(filteredAndSortedKeywords);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ['abstract', 'arguments', 'await', 'boolean', 'break', 'byte', 'case', 'catch', 'char', 'class', 'const', 'continue', 'debugger', 'default', 'delete', 'do', 'double', 'else', 'enum', 'eval', 'export', 'extends', 'false', 'final', 'finally', 'float', 'for', 'function', 'goto', 'if', 'implements', 'import', 'in', 'instanceof', 'int', 'interface', 'let', 'long', 'native', 'new', 'null', 'package', 'private', 'protected', 'public', 'return', 'short', 'static', 'super', 'switch', 'synchronized', 'this', 'throw', 'throws', 'transient', 'true', 'try', 'typeof', 'var', 'void', 'volatile', 'while', 'with', 'yield']</span></div></pre></td></tr></table></figure>\n<p><em>感谢<a href=\"https://github.com/nikshulipa\" target=\"_blank\" rel=\"external\">@nikshulipa</a>、<a href=\"https://twitter.com/kirilloid\" target=\"_blank\" rel=\"external\">@kirilloid</a>、<a href=\"https://twitter.com/lesterzone\" target=\"_blank\" rel=\"external\">@lesterzone</a>、<a href=\"https://twitter.com/tracker1\" target=\"_blank\" rel=\"external\">@tracker1</a>、<a href=\"https://twitter.com/manuel_del_pozo\" target=\"_blank\" rel=\"external\">@manuel_del_pozo</a>所有的回复与建议！</em></p>\n"},{"layout":"post","title":"JS中的短路求值","tip-number":27,"tip-username":"bhaskarmelkani","tip-username-profile":"https://www.twitter.com/bhaskarmelkani","tip-tldr":"短路求值是说, 只有当第一个运算数的值无法确定逻辑运算的结果时，才对第二个运算数进行求值：当AND(`&&`)的第一个运算数的值为false时，其结果必定为false；当OR(`||`)的第一个运算数为true时，最后结果必定为true。","redirect_from":["/zh_cn/short-circuit-evaluation-in-js/"],"_content":"\n[短路求值](https://zh.wikipedia.org/wiki/%E7%9F%AD%E8%B7%AF%E6%B1%82%E5%80%BC)是说, 只有当第一个运算数的值无法确定逻辑运算的结果时，才对第二个运算数进行求值：当AND(`&&`)的第一个运算数的值为false时，其结果必定为false；当OR(`||`)的第一个运算数为true时，最后结果必定为true。\n\n对于下面的`test`条件和`isTrue`与`isFalse`方法\n\n```js\nvar test = true;\nvar isTrue = function(){\n  console.log('Test is true.');\n};\nvar isFalse = function(){\n  console.log('Test is false.');\n};\n\n```\n\n使用逻辑与 - `&&`.\n\n```js\n// 普通的if语句\nif(test){\n  isTrue();    // Test is true\n}\n\n// 上面的语句可以使用 '&&' 写为：\n\n( test && isTrue() );  // Test is true\n```\n\n使用逻辑或 - `||`.\n\n```js\ntest = false;\nif(!test){\n  isFalse();    // Test is false.\n}\n\n( test || isFalse());  // Test is false.\n```\n\n逻辑或可以用来给参数设置默认值。\n\n```js\nfunction theSameOldFoo(name){\n    name = name || 'Bar' ;\n    console.log(\"My best friend's name is \" + name);\n}\ntheSameOldFoo();  // My best friend's name is Bar\ntheSameOldFoo('Bhaskar');  // My best friend's name is Bhaskar\n```\n\n逻辑与可以用来避免调用undefined参数的属性时报错\n例如:-\n\n```js\nvar dog = {\n  bark: function(){\n     console.log('Woof Woof');\n   }\n};\n\n// 调用 dog.bark();\ndog.bark(); // Woof Woof.\n\n// 但是当dog未定义时，dog.bark() 将会抛出\"Cannot read property 'bark' of undefined.\" 错误\n// 防止这种情况，我们可以使用 &&.\n\ndog&&dog.bark();   // This will only call dog.bark(), if dog is defined.\n\n```\n","source":"_posts/javascript/2016-01-27-short-circuit-evaluation-in-js.md","raw":"---\nlayout: post\n\ntitle: JS中的短路求值\ntip-number: 27\ntip-username: bhaskarmelkani\ntip-username-profile: https://www.twitter.com/bhaskarmelkani\ntip-tldr: 短路求值是说, 只有当第一个运算数的值无法确定逻辑运算的结果时，才对第二个运算数进行求值：当AND(`&&`)的第一个运算数的值为false时，其结果必定为false；当OR(`||`)的第一个运算数为true时，最后结果必定为true。\n\nredirect_from:\n  - /zh_cn/short-circuit-evaluation-in-js/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n[短路求值](https://zh.wikipedia.org/wiki/%E7%9F%AD%E8%B7%AF%E6%B1%82%E5%80%BC)是说, 只有当第一个运算数的值无法确定逻辑运算的结果时，才对第二个运算数进行求值：当AND(`&&`)的第一个运算数的值为false时，其结果必定为false；当OR(`||`)的第一个运算数为true时，最后结果必定为true。\n\n对于下面的`test`条件和`isTrue`与`isFalse`方法\n\n```js\nvar test = true;\nvar isTrue = function(){\n  console.log('Test is true.');\n};\nvar isFalse = function(){\n  console.log('Test is false.');\n};\n\n```\n\n使用逻辑与 - `&&`.\n\n```js\n// 普通的if语句\nif(test){\n  isTrue();    // Test is true\n}\n\n// 上面的语句可以使用 '&&' 写为：\n\n( test && isTrue() );  // Test is true\n```\n\n使用逻辑或 - `||`.\n\n```js\ntest = false;\nif(!test){\n  isFalse();    // Test is false.\n}\n\n( test || isFalse());  // Test is false.\n```\n\n逻辑或可以用来给参数设置默认值。\n\n```js\nfunction theSameOldFoo(name){\n    name = name || 'Bar' ;\n    console.log(\"My best friend's name is \" + name);\n}\ntheSameOldFoo();  // My best friend's name is Bar\ntheSameOldFoo('Bhaskar');  // My best friend's name is Bhaskar\n```\n\n逻辑与可以用来避免调用undefined参数的属性时报错\n例如:-\n\n```js\nvar dog = {\n  bark: function(){\n     console.log('Woof Woof');\n   }\n};\n\n// 调用 dog.bark();\ndog.bark(); // Woof Woof.\n\n// 但是当dog未定义时，dog.bark() 将会抛出\"Cannot read property 'bark' of undefined.\" 错误\n// 防止这种情况，我们可以使用 &&.\n\ndog&&dog.bark();   // This will only call dog.bark(), if dog is defined.\n\n```\n","slug":"javascript/2016-01-27-short-circuit-evaluation-in-js","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqdh003llyfy8mcliosx","content":"<p><a href=\"https://zh.wikipedia.org/wiki/%E7%9F%AD%E8%B7%AF%E6%B1%82%E5%80%BC\" target=\"_blank\" rel=\"external\">短路求值</a>是说, 只有当第一个运算数的值无法确定逻辑运算的结果时，才对第二个运算数进行求值：当AND(<code>&amp;&amp;</code>)的第一个运算数的值为false时，其结果必定为false；当OR(<code>||</code>)的第一个运算数为true时，最后结果必定为true。</p>\n<p>对于下面的<code>test</code>条件和<code>isTrue</code>与<code>isFalse</code>方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"literal\">true</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> isTrue = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Test is true.'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> isFalse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Test is false.'</span>);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>使用逻辑与 - <code>&amp;&amp;</code>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 普通的if语句</span></div><div class=\"line\"><span class=\"keyword\">if</span>(test)&#123;</div><div class=\"line\">  isTrue();    <span class=\"comment\">// Test is true</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 上面的语句可以使用 '&amp;&amp;' 写为：</span></div><div class=\"line\"></div><div class=\"line\">( test &amp;&amp; isTrue() );  <span class=\"comment\">// Test is true</span></div></pre></td></tr></table></figure>\n<p>使用逻辑或 - <code>||</code>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">test = <span class=\"literal\">false</span>;</div><div class=\"line\"><span class=\"keyword\">if</span>(!test)&#123;</div><div class=\"line\">  isFalse();    <span class=\"comment\">// Test is false.</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">( test || isFalse());  <span class=\"comment\">// Test is false.</span></div></pre></td></tr></table></figure>\n<p>逻辑或可以用来给参数设置默认值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">theSameOldFoo</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">    name = name || <span class=\"string\">'Bar'</span> ;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"My best friend's name is \"</span> + name);</div><div class=\"line\">&#125;</div><div class=\"line\">theSameOldFoo();  <span class=\"comment\">// My best friend's name is Bar</span></div><div class=\"line\">theSameOldFoo(<span class=\"string\">'Bhaskar'</span>);  <span class=\"comment\">// My best friend's name is Bhaskar</span></div></pre></td></tr></table></figure>\n<p>逻辑与可以用来避免调用undefined参数的属性时报错<br>例如:-</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dog = &#123;</div><div class=\"line\">  <span class=\"attr\">bark</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">'Woof Woof'</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 调用 dog.bark();</span></div><div class=\"line\">dog.bark(); <span class=\"comment\">// Woof Woof.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 但是当dog未定义时，dog.bark() 将会抛出\"Cannot read property 'bark' of undefined.\" 错误</span></div><div class=\"line\"><span class=\"comment\">// 防止这种情况，我们可以使用 &amp;&amp;.</span></div><div class=\"line\"></div><div class=\"line\">dog&amp;&amp;dog.bark();   <span class=\"comment\">// This will only call dog.bark(), if dog is defined.</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://zh.wikipedia.org/wiki/%E7%9F%AD%E8%B7%AF%E6%B1%82%E5%80%BC\" target=\"_blank\" rel=\"external\">短路求值</a>是说, 只有当第一个运算数的值无法确定逻辑运算的结果时，才对第二个运算数进行求值：当AND(<code>&amp;&amp;</code>)的第一个运算数的值为false时，其结果必定为false；当OR(<code>||</code>)的第一个运算数为true时，最后结果必定为true。</p>\n<p>对于下面的<code>test</code>条件和<code>isTrue</code>与<code>isFalse</code>方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"literal\">true</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> isTrue = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Test is true.'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> isFalse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Test is false.'</span>);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>使用逻辑与 - <code>&amp;&amp;</code>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 普通的if语句</span></div><div class=\"line\"><span class=\"keyword\">if</span>(test)&#123;</div><div class=\"line\">  isTrue();    <span class=\"comment\">// Test is true</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 上面的语句可以使用 '&amp;&amp;' 写为：</span></div><div class=\"line\"></div><div class=\"line\">( test &amp;&amp; isTrue() );  <span class=\"comment\">// Test is true</span></div></pre></td></tr></table></figure>\n<p>使用逻辑或 - <code>||</code>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">test = <span class=\"literal\">false</span>;</div><div class=\"line\"><span class=\"keyword\">if</span>(!test)&#123;</div><div class=\"line\">  isFalse();    <span class=\"comment\">// Test is false.</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">( test || isFalse());  <span class=\"comment\">// Test is false.</span></div></pre></td></tr></table></figure>\n<p>逻辑或可以用来给参数设置默认值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">theSameOldFoo</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">    name = name || <span class=\"string\">'Bar'</span> ;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"My best friend's name is \"</span> + name);</div><div class=\"line\">&#125;</div><div class=\"line\">theSameOldFoo();  <span class=\"comment\">// My best friend's name is Bar</span></div><div class=\"line\">theSameOldFoo(<span class=\"string\">'Bhaskar'</span>);  <span class=\"comment\">// My best friend's name is Bhaskar</span></div></pre></td></tr></table></figure>\n<p>逻辑与可以用来避免调用undefined参数的属性时报错<br>例如:-</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dog = &#123;</div><div class=\"line\">  <span class=\"attr\">bark</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">'Woof Woof'</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 调用 dog.bark();</span></div><div class=\"line\">dog.bark(); <span class=\"comment\">// Woof Woof.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 但是当dog未定义时，dog.bark() 将会抛出\"Cannot read property 'bark' of undefined.\" 错误</span></div><div class=\"line\"><span class=\"comment\">// 防止这种情况，我们可以使用 &amp;&amp;.</span></div><div class=\"line\"></div><div class=\"line\">dog&amp;&amp;dog.bark();   <span class=\"comment\">// This will only call dog.bark(), if dog is defined.</span></div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"柯里化(currying)与部分应用(partial application)","tip-number":28,"tip-username":"bhaskarmelkani","tip-username-profile":"https://www.twitter.com/bhaskarmelkani","tip-tldr":"柯里化(currying)与部分应用(partial application)是两种将一个函数转换为另一个有着较小普通参数个数的函数的方法。","redirect_from":["/zh_cn/curry-vs-partial-application/"],"_content":"\n**柯里化(currying)**\n\n柯里化是使一个函数\n\nf: X * Y -> R\n\n转变为\n\nf': X -> (Y -> R)\n\n与用两个参数调用f不同，我们用一个参数运行f'。返回的结果是一个函数，然后用第二个参数调用此函数，得到结果。\n\n如此，如果未柯里化的函数f这样调用\n\nf(3,5)\n\n柯里化后的函数f'是这样调用的\n\nf(3)(5)\n\n比如:\n未柯里化的函数add()\n\n```javascript\n\nfunction add(x, y) {\n  return x + y;\n}\n\nadd(3, 5);   // returns 8\n```\n\n柯里化后的add()\n\n```javascript\nfunction addC(x) {\n  return function (y) {\n    return x + y;\n  }\n}\n\naddC(3)(5);   // returns 8\n```\n\n**柯里化的规则** \n\n柯里化将一个二元函数，转变为一元函数，这个函数将返回另一个一元函数。\n\ncurry: (X × Y → R) → (X → (Y → R))\n\nJavascript Code:\n\n```javascript\nfunction curry(f) {\n  return function(x) {\n    return function(y) {\n      return f(x, y);\n    }\n  }\n}\n```\n\n**部分应用(partial application)**\n\n部分应用将一个函数\n\nf: X * Y -> R\n\n的第一个参数固定而产生一个新的函数\n\nf`: Y -> R\n\nf'与f不同，只需要填写第二个参数，这也是f'比f少一个参数的原因。\n\n比如：将函数add的第一个参数绑定为5来产生函数plus5。\n\n```javascript\nfunction plus5(y) {\n  return 5 + y;\n}\n\nplus5(3);  // returns 8\n```\n\n**部分应用的规则** \n\n部分应用使用一个二元函数和一个值产生了一个一元函数。\n\npartApply : ((X × Y → R) × X) → (Y → R)\n\nJavascript Code:\n\n```javascript\nfunction partApply(f, x) {\n  return function(y) {\n    return f(x, y);\n  }\n}\n```\n","source":"_posts/javascript/2016-01-28-curry-vs-partial-application.md","raw":"---\nlayout: post\n\ntitle: 柯里化(currying)与部分应用(partial application)\ntip-number: 28\ntip-username: bhaskarmelkani\ntip-username-profile: https://www.twitter.com/bhaskarmelkani\ntip-tldr: 柯里化(currying)与部分应用(partial application)是两种将一个函数转换为另一个有着较小普通参数个数的函数的方法。\n\nredirect_from:\n  - /zh_cn/curry-vs-partial-application/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n**柯里化(currying)**\n\n柯里化是使一个函数\n\nf: X * Y -> R\n\n转变为\n\nf': X -> (Y -> R)\n\n与用两个参数调用f不同，我们用一个参数运行f'。返回的结果是一个函数，然后用第二个参数调用此函数，得到结果。\n\n如此，如果未柯里化的函数f这样调用\n\nf(3,5)\n\n柯里化后的函数f'是这样调用的\n\nf(3)(5)\n\n比如:\n未柯里化的函数add()\n\n```javascript\n\nfunction add(x, y) {\n  return x + y;\n}\n\nadd(3, 5);   // returns 8\n```\n\n柯里化后的add()\n\n```javascript\nfunction addC(x) {\n  return function (y) {\n    return x + y;\n  }\n}\n\naddC(3)(5);   // returns 8\n```\n\n**柯里化的规则** \n\n柯里化将一个二元函数，转变为一元函数，这个函数将返回另一个一元函数。\n\ncurry: (X × Y → R) → (X → (Y → R))\n\nJavascript Code:\n\n```javascript\nfunction curry(f) {\n  return function(x) {\n    return function(y) {\n      return f(x, y);\n    }\n  }\n}\n```\n\n**部分应用(partial application)**\n\n部分应用将一个函数\n\nf: X * Y -> R\n\n的第一个参数固定而产生一个新的函数\n\nf`: Y -> R\n\nf'与f不同，只需要填写第二个参数，这也是f'比f少一个参数的原因。\n\n比如：将函数add的第一个参数绑定为5来产生函数plus5。\n\n```javascript\nfunction plus5(y) {\n  return 5 + y;\n}\n\nplus5(3);  // returns 8\n```\n\n**部分应用的规则** \n\n部分应用使用一个二元函数和一个值产生了一个一元函数。\n\npartApply : ((X × Y → R) × X) → (Y → R)\n\nJavascript Code:\n\n```javascript\nfunction partApply(f, x) {\n  return function(y) {\n    return f(x, y);\n  }\n}\n```\n","slug":"javascript/2016-01-28-curry-vs-partial-application","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqdj003nlyfyf7sw2csv","content":"<p><strong>柯里化(currying)</strong></p>\n<p>柯里化是使一个函数</p>\n<p>f: X * Y -&gt; R</p>\n<p>转变为</p>\n<p>f’: X -&gt; (Y -&gt; R)</p>\n<p>与用两个参数调用f不同，我们用一个参数运行f’。返回的结果是一个函数，然后用第二个参数调用此函数，得到结果。</p>\n<p>如此，如果未柯里化的函数f这样调用</p>\n<p>f(3,5)</p>\n<p>柯里化后的函数f’是这样调用的</p>\n<p>f(3)(5)</p>\n<p>比如:<br>未柯里化的函数add()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">add(<span class=\"number\">3</span>, <span class=\"number\">5</span>);   <span class=\"comment\">// returns 8</span></div></pre></td></tr></table></figure>\n<p>柯里化后的add()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addC</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">y</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">addC(<span class=\"number\">3</span>)(<span class=\"number\">5</span>);   <span class=\"comment\">// returns 8</span></div></pre></td></tr></table></figure>\n<p><strong>柯里化的规则</strong> </p>\n<p>柯里化将一个二元函数，转变为一元函数，这个函数将返回另一个一元函数。</p>\n<p>curry: (X × Y → R) → (X → (Y → R))</p>\n<p>Javascript Code:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\">f</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> f(x, y);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>部分应用(partial application)</strong></p>\n<p>部分应用将一个函数</p>\n<p>f: X * Y -&gt; R</p>\n<p>的第一个参数固定而产生一个新的函数</p>\n<p>f`: Y -&gt; R</p>\n<p>f’与f不同，只需要填写第二个参数，这也是f’比f少一个参数的原因。</p>\n<p>比如：将函数add的第一个参数绑定为5来产生函数plus5。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">plus5</span>(<span class=\"params\">y</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">5</span> + y;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">plus5(<span class=\"number\">3</span>);  <span class=\"comment\">// returns 8</span></div></pre></td></tr></table></figure>\n<p><strong>部分应用的规则</strong> </p>\n<p>部分应用使用一个二元函数和一个值产生了一个一元函数。</p>\n<p>partApply : ((X × Y → R) × X) → (Y → R)</p>\n<p>Javascript Code:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">partApply</span>(<span class=\"params\">f, x</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> f(x, y);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>柯里化(currying)</strong></p>\n<p>柯里化是使一个函数</p>\n<p>f: X * Y -&gt; R</p>\n<p>转变为</p>\n<p>f’: X -&gt; (Y -&gt; R)</p>\n<p>与用两个参数调用f不同，我们用一个参数运行f’。返回的结果是一个函数，然后用第二个参数调用此函数，得到结果。</p>\n<p>如此，如果未柯里化的函数f这样调用</p>\n<p>f(3,5)</p>\n<p>柯里化后的函数f’是这样调用的</p>\n<p>f(3)(5)</p>\n<p>比如:<br>未柯里化的函数add()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">add(<span class=\"number\">3</span>, <span class=\"number\">5</span>);   <span class=\"comment\">// returns 8</span></div></pre></td></tr></table></figure>\n<p>柯里化后的add()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addC</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">y</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">addC(<span class=\"number\">3</span>)(<span class=\"number\">5</span>);   <span class=\"comment\">// returns 8</span></div></pre></td></tr></table></figure>\n<p><strong>柯里化的规则</strong> </p>\n<p>柯里化将一个二元函数，转变为一元函数，这个函数将返回另一个一元函数。</p>\n<p>curry: (X × Y → R) → (X → (Y → R))</p>\n<p>Javascript Code:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\">f</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> f(x, y);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>部分应用(partial application)</strong></p>\n<p>部分应用将一个函数</p>\n<p>f: X * Y -&gt; R</p>\n<p>的第一个参数固定而产生一个新的函数</p>\n<p>f`: Y -&gt; R</p>\n<p>f’与f不同，只需要填写第二个参数，这也是f’比f少一个参数的原因。</p>\n<p>比如：将函数add的第一个参数绑定为5来产生函数plus5。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">plus5</span>(<span class=\"params\">y</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">5</span> + y;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">plus5(<span class=\"number\">3</span>);  <span class=\"comment\">// returns 8</span></div></pre></td></tr></table></figure>\n<p><strong>部分应用的规则</strong> </p>\n<p>部分应用使用一个二元函数和一个值产生了一个一元函数。</p>\n<p>partApply : ((X × Y → R) × X) → (Y → R)</p>\n<p>Javascript Code:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">partApply</span>(<span class=\"params\">f, x</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> f(x, y);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"运用存储加速递归 Speed up recursive functions with memoization","tip-number":29,"tip-username":"hingsir","tip-username-profile":"https://github.com/hingsir","tip-tldr":"大家对斐波那契(Fibonacci)数列都很熟悉。我们可以再20秒内写出下面这样一个方法，它可以运行，但并不高效。它做了太多重复的运算，我们可以通过存储这些运算结果来使其加速。","redirect_from":["/zh_cn/speed-up-recursive-functions-with-memoization/"],"_content":"\n大家对斐波那契(Fibonacci)数列都很熟悉。我们可以再20秒内写出下面这样一个方法。\n\n```js\nvar fibonacci = function(n){\n    return n < 2 ? n : fibonacci(n-1) + fibonacci(n-2);\n}\n```\n\n它可以运行，但并不高效。它做了太多重复的运算，我们可以通过存储这些运算结果来使其加速。\n\n```js\nvar fibonacci = (function() {\n  var cache = [0, 1]; // cache the value at the n index\n  return function(n) {\n    if (cache[n] === undefined) {\n      for (var i = cache.length; i <= n; ++i) {\n        cache[i] = cache[i-1] + cache[i-2];\n      }\n    }\n    return cache[n];\n  }\n})()\n```\n\n我们也可以定义一个高阶函数，它接收一个方法作为参数，返回一个该方法运用存储后的新方法。\n\n```js\nvar memoize = function(func){\n    var cache = {};\n    return function(){\n        var key = Array.prototype.slice.call(arguments).toString();\n        return key in cache ? cache[key] : (cache[key] = func.apply(this,arguments));\n    }\n}\nfibonacci = memoize(fibonacci);\n```\n\nES6版本的memoize函数如下：\n\n```js\nvar memoize = function(func){\n    const cache = {};\n    return (...args) => {\n        const key = [...args].toString();\n        return key in cache ? cache[key] : (cache[key] = func(...args));\n    }\n}\nfibonacci = memoize(fibonacci);\n```\n\n我们可以将`memoize()`用在很多其他地方\n\n* GCD(最大公约数)\n\n```js\nvar gcd = memoize(function(a,b){\n    var t;\n    if (a < b) t=b, b=a, a=t;\n    while(b != 0) t=b, b = a%b, a=t;\n    return a;\n})\ngcd(27,183); //=> 3\n```\n\n* 阶乘运算\n\n```js\nvar factorial = memoize(function(n) {\n    return (n <= 1) ? 1 : n * factorial(n-1);\n})\nfactorial(5); //=> 120\n```\n","source":"_posts/javascript/2016-01-29-speed-up-recursive-functions-with-memoization.md","raw":"---\nlayout: post\n\ntitle: 运用存储加速递归 Speed up recursive functions with memoization\ntip-number: 29\ntip-username: hingsir\ntip-username-profile: https://github.com/hingsir\ntip-tldr: 大家对斐波那契(Fibonacci)数列都很熟悉。我们可以再20秒内写出下面这样一个方法，它可以运行，但并不高效。它做了太多重复的运算，我们可以通过存储这些运算结果来使其加速。\n\n\nredirect_from:\n  - /zh_cn/speed-up-recursive-functions-with-memoization/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n大家对斐波那契(Fibonacci)数列都很熟悉。我们可以再20秒内写出下面这样一个方法。\n\n```js\nvar fibonacci = function(n){\n    return n < 2 ? n : fibonacci(n-1) + fibonacci(n-2);\n}\n```\n\n它可以运行，但并不高效。它做了太多重复的运算，我们可以通过存储这些运算结果来使其加速。\n\n```js\nvar fibonacci = (function() {\n  var cache = [0, 1]; // cache the value at the n index\n  return function(n) {\n    if (cache[n] === undefined) {\n      for (var i = cache.length; i <= n; ++i) {\n        cache[i] = cache[i-1] + cache[i-2];\n      }\n    }\n    return cache[n];\n  }\n})()\n```\n\n我们也可以定义一个高阶函数，它接收一个方法作为参数，返回一个该方法运用存储后的新方法。\n\n```js\nvar memoize = function(func){\n    var cache = {};\n    return function(){\n        var key = Array.prototype.slice.call(arguments).toString();\n        return key in cache ? cache[key] : (cache[key] = func.apply(this,arguments));\n    }\n}\nfibonacci = memoize(fibonacci);\n```\n\nES6版本的memoize函数如下：\n\n```js\nvar memoize = function(func){\n    const cache = {};\n    return (...args) => {\n        const key = [...args].toString();\n        return key in cache ? cache[key] : (cache[key] = func(...args));\n    }\n}\nfibonacci = memoize(fibonacci);\n```\n\n我们可以将`memoize()`用在很多其他地方\n\n* GCD(最大公约数)\n\n```js\nvar gcd = memoize(function(a,b){\n    var t;\n    if (a < b) t=b, b=a, a=t;\n    while(b != 0) t=b, b = a%b, a=t;\n    return a;\n})\ngcd(27,183); //=> 3\n```\n\n* 阶乘运算\n\n```js\nvar factorial = memoize(function(n) {\n    return (n <= 1) ? 1 : n * factorial(n-1);\n})\nfactorial(5); //=> 120\n```\n","slug":"javascript/2016-01-29-speed-up-recursive-functions-with-memoization","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqdm003plyfyctu95tlq","content":"<p>大家对斐波那契(Fibonacci)数列都很熟悉。我们可以再20秒内写出下面这样一个方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fibonacci = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> n &lt; <span class=\"number\">2</span> ? n : fibonacci(n<span class=\"number\">-1</span>) + fibonacci(n<span class=\"number\">-2</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>它可以运行，但并不高效。它做了太多重复的运算，我们可以通过存储这些运算结果来使其加速。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fibonacci = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> cache = [<span class=\"number\">0</span>, <span class=\"number\">1</span>]; <span class=\"comment\">// cache the value at the n index</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (cache[n] === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = cache.length; i &lt;= n; ++i) &#123;</div><div class=\"line\">        cache[i] = cache[i<span class=\"number\">-1</span>] + cache[i<span class=\"number\">-2</span>];</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> cache[n];</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)()</div></pre></td></tr></table></figure>\n<p>我们也可以定义一个高阶函数，它接收一个方法作为参数，返回一个该方法运用存储后的新方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> memoize = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> cache = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> key = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>).toString();</div><div class=\"line\">        <span class=\"keyword\">return</span> key <span class=\"keyword\">in</span> cache ? cache[key] : (cache[key] = func.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">fibonacci = memoize(fibonacci);</div></pre></td></tr></table></figure>\n<p>ES6版本的memoize函数如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> memoize = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> cache = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> key = [...args].toString();</div><div class=\"line\">        <span class=\"keyword\">return</span> key <span class=\"keyword\">in</span> cache ? cache[key] : (cache[key] = func(...args));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">fibonacci = memoize(fibonacci);</div></pre></td></tr></table></figure>\n<p>我们可以将<code>memoize()</code>用在很多其他地方</p>\n<ul>\n<li>GCD(最大公约数)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gcd = memoize(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> t;</div><div class=\"line\">    <span class=\"keyword\">if</span> (a &lt; b) t=b, b=a, a=t;</div><div class=\"line\">    <span class=\"keyword\">while</span>(b != <span class=\"number\">0</span>) t=b, b = a%b, a=t;</div><div class=\"line\">    <span class=\"keyword\">return</span> a;</div><div class=\"line\">&#125;)</div><div class=\"line\">gcd(<span class=\"number\">27</span>,<span class=\"number\">183</span>); <span class=\"comment\">//=&gt; 3</span></div></pre></td></tr></table></figure>\n<ul>\n<li>阶乘运算</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> factorial = memoize(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (n &lt;= <span class=\"number\">1</span>) ? <span class=\"number\">1</span> : n * factorial(n<span class=\"number\">-1</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\">factorial(<span class=\"number\">5</span>); <span class=\"comment\">//=&gt; 120</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>大家对斐波那契(Fibonacci)数列都很熟悉。我们可以再20秒内写出下面这样一个方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fibonacci = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> n &lt; <span class=\"number\">2</span> ? n : fibonacci(n<span class=\"number\">-1</span>) + fibonacci(n<span class=\"number\">-2</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>它可以运行，但并不高效。它做了太多重复的运算，我们可以通过存储这些运算结果来使其加速。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fibonacci = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> cache = [<span class=\"number\">0</span>, <span class=\"number\">1</span>]; <span class=\"comment\">// cache the value at the n index</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (cache[n] === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = cache.length; i &lt;= n; ++i) &#123;</div><div class=\"line\">        cache[i] = cache[i<span class=\"number\">-1</span>] + cache[i<span class=\"number\">-2</span>];</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> cache[n];</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)()</div></pre></td></tr></table></figure>\n<p>我们也可以定义一个高阶函数，它接收一个方法作为参数，返回一个该方法运用存储后的新方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> memoize = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> cache = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> key = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>).toString();</div><div class=\"line\">        <span class=\"keyword\">return</span> key <span class=\"keyword\">in</span> cache ? cache[key] : (cache[key] = func.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">fibonacci = memoize(fibonacci);</div></pre></td></tr></table></figure>\n<p>ES6版本的memoize函数如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> memoize = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> cache = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> key = [...args].toString();</div><div class=\"line\">        <span class=\"keyword\">return</span> key <span class=\"keyword\">in</span> cache ? cache[key] : (cache[key] = func(...args));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">fibonacci = memoize(fibonacci);</div></pre></td></tr></table></figure>\n<p>我们可以将<code>memoize()</code>用在很多其他地方</p>\n<ul>\n<li>GCD(最大公约数)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gcd = memoize(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> t;</div><div class=\"line\">    <span class=\"keyword\">if</span> (a &lt; b) t=b, b=a, a=t;</div><div class=\"line\">    <span class=\"keyword\">while</span>(b != <span class=\"number\">0</span>) t=b, b = a%b, a=t;</div><div class=\"line\">    <span class=\"keyword\">return</span> a;</div><div class=\"line\">&#125;)</div><div class=\"line\">gcd(<span class=\"number\">27</span>,<span class=\"number\">183</span>); <span class=\"comment\">//=&gt; 3</span></div></pre></td></tr></table></figure>\n<ul>\n<li>阶乘运算</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> factorial = memoize(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (n &lt;= <span class=\"number\">1</span>) ? <span class=\"number\">1</span> : n * factorial(n<span class=\"number\">-1</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\">factorial(<span class=\"number\">5</span>); <span class=\"comment\">//=&gt; 120</span></div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"将truthy/falsy转换为布尔值","tip-number":30,"tip-username":"hakhag","tip-username-profile":"https://github.com/hakhag","tip-tldr":"逻辑运算符是JavaScript的核心之一，在这里你将看到一种无论你传什么值都可以总是得到true或false的方法。","redirect_from":["/zh_cn/converting-truthy-falsy-values-to-boolean/"],"_content":"\n你可以使用`!!`操作符将[truthy](https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy)或[falsy](https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy)值转换为布尔值。\n\n```js\n!!\"\" // false\n!!0 // false\n!!null // false\n!!undefined // false\n!!NaN // false\n\n!!\"hello\" // true\n!!1 // true\n!!{} // true\n!![] // true\n```\n\n","source":"_posts/javascript/2016-01-30-converting-truthy-falsy-values-to-boolean.md","raw":"---\nlayout: post\n\ntitle: 将truthy/falsy转换为布尔值\ntip-number: 30\ntip-username: hakhag\ntip-username-profile: https://github.com/hakhag\ntip-tldr: 逻辑运算符是JavaScript的核心之一，在这里你将看到一种无论你传什么值都可以总是得到true或false的方法。\n\n\nredirect_from:\n  - /zh_cn/converting-truthy-falsy-values-to-boolean/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n你可以使用`!!`操作符将[truthy](https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy)或[falsy](https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy)值转换为布尔值。\n\n```js\n!!\"\" // false\n!!0 // false\n!!null // false\n!!undefined // false\n!!NaN // false\n\n!!\"hello\" // true\n!!1 // true\n!!{} // true\n!![] // true\n```\n\n","slug":"javascript/2016-01-30-converting-truthy-falsy-values-to-boolean","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqdn003rlyfyq4owwdsl","content":"<p>你可以使用<code>!!</code>操作符将<a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy\" target=\"_blank\" rel=\"external\">truthy</a>或<a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy\" target=\"_blank\" rel=\"external\">falsy</a>值转换为布尔值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">!!<span class=\"string\">\"\"</span> <span class=\"comment\">// false</span></div><div class=\"line\">!!<span class=\"number\">0</span> <span class=\"comment\">// false</span></div><div class=\"line\">!!<span class=\"literal\">null</span> <span class=\"comment\">// false</span></div><div class=\"line\">!!<span class=\"literal\">undefined</span> <span class=\"comment\">// false</span></div><div class=\"line\">!!<span class=\"literal\">NaN</span> <span class=\"comment\">// false</span></div><div class=\"line\"></div><div class=\"line\">!!<span class=\"string\">\"hello\"</span> <span class=\"comment\">// true</span></div><div class=\"line\">!!<span class=\"number\">1</span> <span class=\"comment\">// true</span></div><div class=\"line\">!!&#123;&#125; <span class=\"comment\">// true</span></div><div class=\"line\">!![] <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>你可以使用<code>!!</code>操作符将<a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy\" target=\"_blank\" rel=\"external\">truthy</a>或<a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy\" target=\"_blank\" rel=\"external\">falsy</a>值转换为布尔值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">!!<span class=\"string\">\"\"</span> <span class=\"comment\">// false</span></div><div class=\"line\">!!<span class=\"number\">0</span> <span class=\"comment\">// false</span></div><div class=\"line\">!!<span class=\"literal\">null</span> <span class=\"comment\">// false</span></div><div class=\"line\">!!<span class=\"literal\">undefined</span> <span class=\"comment\">// false</span></div><div class=\"line\">!!<span class=\"literal\">NaN</span> <span class=\"comment\">// false</span></div><div class=\"line\"></div><div class=\"line\">!!<span class=\"string\">\"hello\"</span> <span class=\"comment\">// true</span></div><div class=\"line\">!!<span class=\"number\">1</span> <span class=\"comment\">// true</span></div><div class=\"line\">!!&#123;&#125; <span class=\"comment\">// true</span></div><div class=\"line\">!![] <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"避免修改和传递`arguments`给其他方法 — 影响优化","tip-number":31,"tip-username":"berkana","tip-username-profile":"https://github.com/berkana","tip-tldr":"在JavaScript的方法里，`arguments`参数可以让你访问传递给该方法的所有参数。`arguments`是一个*类数组对象*；`arguments`可是使用数组标记访问，而且它有*length*参数，但是它没有`filter`、`map`和`forEach`这样内建到数组内的方法。因此，如下代码是一个非常常见的将`arguments`转换为数组的办法","redirect_from":["/zh_cn/avoid-modifying-or-passing-arguments-into-other-functions-it-kills-optimization/"],"_content":"\n### 背景\n\n在JavaScript的方法里，[`arguments`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments)参数可以让你访问传递给该方法的所有参数。`arguments`是一个*类数组对象*；`arguments`可是使用数组标记访问，而且它有*length*参数，但是它没有`filter`、`map`和`forEach`这样内建到数组内的方法。因此，如下代码是一个非常常见的将`arguments`转换为数组的办法：\n\n```js\nvar args = Array.prototype.slice.call(arguments);\n```\n\n将`arguments`传递给`Array`原型(prototype)上的`slice`方法；`slice`方法返回一个对`arguments`浅复制后的数组对象。更短的写法：\n\n```js\nvar args = [].slice.call(arguments);\n```\n\n在这里，简单的调用了空数组的`slice`方法，而没有从`Array`的原型(prototype)上调用。\n\n### 系统优化\n\n不幸的是，传递`arguments`给任何参数，将导致Chrome和Node中使用的V8引擎跳过对其的优化，这也将使性能相当慢。看一下这篇文章[optimization killers](https://github.com/petkaantonov/bluebird/wiki/Optimization-killers)。传递`arguments`给任何方法被称为*leaking `arguments`*。\n\n如果你想用一个包含参数(arguments)的数组，你需要求助于这个办法：\n\n```js\nvar args = new Array(arguments.length);\nfor(var i = 0; i < args.length; ++i) {\n  args[i] = arguments[i];\n}\n```\n\n没错，这很啰嗦，但是在生产环境中的代码里，为了系统性能优化，这是值得的。","source":"_posts/javascript/2016-01-31-avoid-modifying-or-passing-arguments-into-other-functions—it-kills-optimization.md","raw":"---\nlayout: post\n\ntitle: 避免修改和传递`arguments`给其他方法 — 影响优化\ntip-number: 31\ntip-username: berkana\ntip-username-profile: https://github.com/berkana\ntip-tldr: 在JavaScript的方法里，`arguments`参数可以让你访问传递给该方法的所有参数。`arguments`是一个*类数组对象*；`arguments`可是使用数组标记访问，而且它有*length*参数，但是它没有`filter`、`map`和`forEach`这样内建到数组内的方法。因此，如下代码是一个非常常见的将`arguments`转换为数组的办法\n\n\nredirect_from:\n  - /zh_cn/avoid-modifying-or-passing-arguments-into-other-functions-it-kills-optimization/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n### 背景\n\n在JavaScript的方法里，[`arguments`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments)参数可以让你访问传递给该方法的所有参数。`arguments`是一个*类数组对象*；`arguments`可是使用数组标记访问，而且它有*length*参数，但是它没有`filter`、`map`和`forEach`这样内建到数组内的方法。因此，如下代码是一个非常常见的将`arguments`转换为数组的办法：\n\n```js\nvar args = Array.prototype.slice.call(arguments);\n```\n\n将`arguments`传递给`Array`原型(prototype)上的`slice`方法；`slice`方法返回一个对`arguments`浅复制后的数组对象。更短的写法：\n\n```js\nvar args = [].slice.call(arguments);\n```\n\n在这里，简单的调用了空数组的`slice`方法，而没有从`Array`的原型(prototype)上调用。\n\n### 系统优化\n\n不幸的是，传递`arguments`给任何参数，将导致Chrome和Node中使用的V8引擎跳过对其的优化，这也将使性能相当慢。看一下这篇文章[optimization killers](https://github.com/petkaantonov/bluebird/wiki/Optimization-killers)。传递`arguments`给任何方法被称为*leaking `arguments`*。\n\n如果你想用一个包含参数(arguments)的数组，你需要求助于这个办法：\n\n```js\nvar args = new Array(arguments.length);\nfor(var i = 0; i < args.length; ++i) {\n  args[i] = arguments[i];\n}\n```\n\n没错，这很啰嗦，但是在生产环境中的代码里，为了系统性能优化，这是值得的。","slug":"javascript/2016-01-31-avoid-modifying-or-passing-arguments-into-other-functions—it-kills-optimization","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqdo003tlyfyidl877oc","content":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>在JavaScript的方法里，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments\" target=\"_blank\" rel=\"external\"><code>arguments</code></a>参数可以让你访问传递给该方法的所有参数。<code>arguments</code>是一个<em>类数组对象</em>；<code>arguments</code>可是使用数组标记访问，而且它有<em>length</em>参数，但是它没有<code>filter</code>、<code>map</code>和<code>forEach</code>这样内建到数组内的方法。因此，如下代码是一个非常常见的将<code>arguments</code>转换为数组的办法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</div></pre></td></tr></table></figure>\n<p>将<code>arguments</code>传递给<code>Array</code>原型(prototype)上的<code>slice</code>方法；<code>slice</code>方法返回一个对<code>arguments</code>浅复制后的数组对象。更短的写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> args = [].slice.call(<span class=\"built_in\">arguments</span>);</div></pre></td></tr></table></figure>\n<p>在这里，简单的调用了空数组的<code>slice</code>方法，而没有从<code>Array</code>的原型(prototype)上调用。</p>\n<h3 id=\"系统优化\"><a href=\"#系统优化\" class=\"headerlink\" title=\"系统优化\"></a>系统优化</h3><p>不幸的是，传递<code>arguments</code>给任何参数，将导致Chrome和Node中使用的V8引擎跳过对其的优化，这也将使性能相当慢。看一下这篇文章<a href=\"https://github.com/petkaantonov/bluebird/wiki/Optimization-killers\" target=\"_blank\" rel=\"external\">optimization killers</a>。传递<code>arguments</code>给任何方法被称为<em>leaking <code>arguments</code></em>。</p>\n<p>如果你想用一个包含参数(arguments)的数组，你需要求助于这个办法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> args = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"built_in\">arguments</span>.length);</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; args.length; ++i) &#123;</div><div class=\"line\">  args[i] = <span class=\"built_in\">arguments</span>[i];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>没错，这很啰嗦，但是在生产环境中的代码里，为了系统性能优化，这是值得的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>在JavaScript的方法里，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments\" target=\"_blank\" rel=\"external\"><code>arguments</code></a>参数可以让你访问传递给该方法的所有参数。<code>arguments</code>是一个<em>类数组对象</em>；<code>arguments</code>可是使用数组标记访问，而且它有<em>length</em>参数，但是它没有<code>filter</code>、<code>map</code>和<code>forEach</code>这样内建到数组内的方法。因此，如下代码是一个非常常见的将<code>arguments</code>转换为数组的办法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</div></pre></td></tr></table></figure>\n<p>将<code>arguments</code>传递给<code>Array</code>原型(prototype)上的<code>slice</code>方法；<code>slice</code>方法返回一个对<code>arguments</code>浅复制后的数组对象。更短的写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> args = [].slice.call(<span class=\"built_in\">arguments</span>);</div></pre></td></tr></table></figure>\n<p>在这里，简单的调用了空数组的<code>slice</code>方法，而没有从<code>Array</code>的原型(prototype)上调用。</p>\n<h3 id=\"系统优化\"><a href=\"#系统优化\" class=\"headerlink\" title=\"系统优化\"></a>系统优化</h3><p>不幸的是，传递<code>arguments</code>给任何参数，将导致Chrome和Node中使用的V8引擎跳过对其的优化，这也将使性能相当慢。看一下这篇文章<a href=\"https://github.com/petkaantonov/bluebird/wiki/Optimization-killers\" target=\"_blank\" rel=\"external\">optimization killers</a>。传递<code>arguments</code>给任何方法被称为<em>leaking <code>arguments</code></em>。</p>\n<p>如果你想用一个包含参数(arguments)的数组，你需要求助于这个办法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> args = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"built_in\">arguments</span>.length);</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; args.length; ++i) &#123;</div><div class=\"line\">  args[i] = <span class=\"built_in\">arguments</span>[i];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>没错，这很啰嗦，但是在生产环境中的代码里，为了系统性能优化，这是值得的。</p>\n"},{"layout":"post","title":"Map()的营救；使对象属性有顺序","tip-number":32,"tip-username":"loverajoel","tip-username-profile":"https://twitter.com/loverajoel","tip-tldr":"对象是一个无序的对象集合。这意味着如果你想在对象里保存有序的数据，你需要重新处理它，因为对象里的数据不保证是有序的。","tip-writer-support":"https://www.coinbase.com/loverajoel","redirect_from":["/zh_cn/map-to-the-rescue-adding-order-to-object-properties/"],"_content":"\n## 对象属性顺序\n\n> 一个对象是一个`Object`类型的实例。它是由一些未排序的元素组成的集合，其中包含了原始变量，对象，和函数。一个对象的属性所对应的函数被称为方法。[ECMAScript](http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf)\n\n实际看一下\n\n```js\nvar myObject = {\n\tz: 1,\n\t'@': 2,\n\tb: 3,\n\t1: 4,\n\t5: 5\n};\nconsole.log(myObject) // Object {1: 4, 5: 5, z: 1, @: 2, b: 3}\n\nfor (item in myObject) {...\n// 1\n// 5\n// z\n// @\n// b\n```\n\n因为技术实现，每个浏览器在排序时都有自己的规则，顺序是不确定的。\n\n## 怎么解决呢?\n\n### Map\n\n使用ES6的新特性Map。[Map](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map) 对象以插入的顺序遍历元素。`for...of`循环为每一次循环返回一个[key, value]数组。\n\n```js\nvar myObject = new Map();\nmyObject.set('z', 1);\nmyObject.set('@', 2);\nmyObject.set('b', 3);\nfor (var [key, value] of myObject) {\n  console.log(key, value);\n...\n// z 1\n// @ 2\n// b 3\n```\n\n### 攻克老浏览器\n\nMozilla 建议:\n> 所以，如果过你想在跨浏览器环境中模拟一个有序的关联数组，你要么使用两个分开的数组（一个保存key，另一个保存value）,要么构建一个单属性对象(single-property objects)的数组。\n\n```js\n// 使用分开的数组\nvar objectKeys = [z, @, b, 1, 5];\nfor (item in objectKeys) {\n\tmyObject[item]\n...\n\n// 构建一个单属性对象(single-property objects)的数组\nvar myData = [{z: 1}, {'@': 2}, {b: 3}, {1: 4}, {5: 5}];\n```","source":"_posts/javascript/2016-02-01-map-to-the-rescue-adding-order-to-object-properties.md","raw":"---\nlayout: post\n\ntitle: Map()的营救；使对象属性有顺序\ntip-number: 32\ntip-username: loverajoel\ntip-username-profile: https://twitter.com/loverajoel\ntip-tldr: 对象是一个无序的对象集合。这意味着如果你想在对象里保存有序的数据，你需要重新处理它，因为对象里的数据不保证是有序的。\ntip-writer-support: https://www.coinbase.com/loverajoel\n\nredirect_from:\n  - /zh_cn/map-to-the-rescue-adding-order-to-object-properties/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n## 对象属性顺序\n\n> 一个对象是一个`Object`类型的实例。它是由一些未排序的元素组成的集合，其中包含了原始变量，对象，和函数。一个对象的属性所对应的函数被称为方法。[ECMAScript](http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf)\n\n实际看一下\n\n```js\nvar myObject = {\n\tz: 1,\n\t'@': 2,\n\tb: 3,\n\t1: 4,\n\t5: 5\n};\nconsole.log(myObject) // Object {1: 4, 5: 5, z: 1, @: 2, b: 3}\n\nfor (item in myObject) {...\n// 1\n// 5\n// z\n// @\n// b\n```\n\n因为技术实现，每个浏览器在排序时都有自己的规则，顺序是不确定的。\n\n## 怎么解决呢?\n\n### Map\n\n使用ES6的新特性Map。[Map](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map) 对象以插入的顺序遍历元素。`for...of`循环为每一次循环返回一个[key, value]数组。\n\n```js\nvar myObject = new Map();\nmyObject.set('z', 1);\nmyObject.set('@', 2);\nmyObject.set('b', 3);\nfor (var [key, value] of myObject) {\n  console.log(key, value);\n...\n// z 1\n// @ 2\n// b 3\n```\n\n### 攻克老浏览器\n\nMozilla 建议:\n> 所以，如果过你想在跨浏览器环境中模拟一个有序的关联数组，你要么使用两个分开的数组（一个保存key，另一个保存value）,要么构建一个单属性对象(single-property objects)的数组。\n\n```js\n// 使用分开的数组\nvar objectKeys = [z, @, b, 1, 5];\nfor (item in objectKeys) {\n\tmyObject[item]\n...\n\n// 构建一个单属性对象(single-property objects)的数组\nvar myData = [{z: 1}, {'@': 2}, {b: 3}, {1: 4}, {5: 5}];\n```","slug":"javascript/2016-02-01-map-to-the-rescue-adding-order-to-object-properties","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqdp003vlyfyc70to03y","content":"<h2 id=\"对象属性顺序\"><a href=\"#对象属性顺序\" class=\"headerlink\" title=\"对象属性顺序\"></a>对象属性顺序</h2><blockquote>\n<p>一个对象是一个<code>Object</code>类型的实例。它是由一些未排序的元素组成的集合，其中包含了原始变量，对象，和函数。一个对象的属性所对应的函数被称为方法。<a href=\"http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf\" target=\"_blank\" rel=\"external\">ECMAScript</a></p>\n</blockquote>\n<p>实际看一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;</div><div class=\"line\">\t<span class=\"attr\">z</span>: <span class=\"number\">1</span>,</div><div class=\"line\">\t<span class=\"string\">'@'</span>: <span class=\"number\">2</span>,</div><div class=\"line\">\t<span class=\"attr\">b</span>: <span class=\"number\">3</span>,</div><div class=\"line\">\t<span class=\"number\">1</span>: <span class=\"number\">4</span>,</div><div class=\"line\">\t<span class=\"number\">5</span>: <span class=\"number\">5</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(myObject) <span class=\"comment\">// Object &#123;1: 4, 5: 5, z: 1, @: 2, b: 3&#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (item <span class=\"keyword\">in</span> myObject) &#123;...</div><div class=\"line\"><span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"comment\">// 5</span></div><div class=\"line\"><span class=\"comment\">// z</span></div><div class=\"line\"><span class=\"comment\">// @</span></div><div class=\"line\"><span class=\"comment\">// b</span></div></pre></td></tr></table></figure>\n<p>因为技术实现，每个浏览器在排序时都有自己的规则，顺序是不确定的。</p>\n<h2 id=\"怎么解决呢\"><a href=\"#怎么解决呢\" class=\"headerlink\" title=\"怎么解决呢?\"></a>怎么解决呢?</h2><h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><p>使用ES6的新特性Map。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map\" target=\"_blank\" rel=\"external\">Map</a> 对象以插入的顺序遍历元素。<code>for...of</code>循环为每一次循环返回一个[key, value]数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myObject = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</div><div class=\"line\">myObject.set(<span class=\"string\">'z'</span>, <span class=\"number\">1</span>);</div><div class=\"line\">myObject.set(<span class=\"string\">'@'</span>, <span class=\"number\">2</span>);</div><div class=\"line\">myObject.set(<span class=\"string\">'b'</span>, <span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> [key, value] <span class=\"keyword\">of</span> myObject) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(key, value);</div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">// z 1</span></div><div class=\"line\"><span class=\"comment\">// @ 2</span></div><div class=\"line\"><span class=\"comment\">// b 3</span></div></pre></td></tr></table></figure>\n<h3 id=\"攻克老浏览器\"><a href=\"#攻克老浏览器\" class=\"headerlink\" title=\"攻克老浏览器\"></a>攻克老浏览器</h3><p>Mozilla 建议:</p>\n<blockquote>\n<p>所以，如果过你想在跨浏览器环境中模拟一个有序的关联数组，你要么使用两个分开的数组（一个保存key，另一个保存value）,要么构建一个单属性对象(single-property objects)的数组。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 使用分开的数组</span></div><div class=\"line\"><span class=\"keyword\">var</span> objectKeys = [z, @, b, <span class=\"number\">1</span>, <span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">for</span> (item <span class=\"keyword\">in</span> objectKeys) &#123;</div><div class=\"line\">\tmyObject[item]</div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 构建一个单属性对象(single-property objects)的数组</span></div><div class=\"line\"><span class=\"keyword\">var</span> myData = [&#123;<span class=\"attr\">z</span>: <span class=\"number\">1</span>&#125;, &#123;<span class=\"string\">'@'</span>: <span class=\"number\">2</span>&#125;, &#123;<span class=\"attr\">b</span>: <span class=\"number\">3</span>&#125;, &#123;<span class=\"number\">1</span>: <span class=\"number\">4</span>&#125;, &#123;<span class=\"number\">5</span>: <span class=\"number\">5</span>&#125;];</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"对象属性顺序\"><a href=\"#对象属性顺序\" class=\"headerlink\" title=\"对象属性顺序\"></a>对象属性顺序</h2><blockquote>\n<p>一个对象是一个<code>Object</code>类型的实例。它是由一些未排序的元素组成的集合，其中包含了原始变量，对象，和函数。一个对象的属性所对应的函数被称为方法。<a href=\"http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf\" target=\"_blank\" rel=\"external\">ECMAScript</a></p>\n</blockquote>\n<p>实际看一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;</div><div class=\"line\">\t<span class=\"attr\">z</span>: <span class=\"number\">1</span>,</div><div class=\"line\">\t<span class=\"string\">'@'</span>: <span class=\"number\">2</span>,</div><div class=\"line\">\t<span class=\"attr\">b</span>: <span class=\"number\">3</span>,</div><div class=\"line\">\t<span class=\"number\">1</span>: <span class=\"number\">4</span>,</div><div class=\"line\">\t<span class=\"number\">5</span>: <span class=\"number\">5</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(myObject) <span class=\"comment\">// Object &#123;1: 4, 5: 5, z: 1, @: 2, b: 3&#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (item <span class=\"keyword\">in</span> myObject) &#123;...</div><div class=\"line\"><span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"comment\">// 5</span></div><div class=\"line\"><span class=\"comment\">// z</span></div><div class=\"line\"><span class=\"comment\">// @</span></div><div class=\"line\"><span class=\"comment\">// b</span></div></pre></td></tr></table></figure>\n<p>因为技术实现，每个浏览器在排序时都有自己的规则，顺序是不确定的。</p>\n<h2 id=\"怎么解决呢\"><a href=\"#怎么解决呢\" class=\"headerlink\" title=\"怎么解决呢?\"></a>怎么解决呢?</h2><h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><p>使用ES6的新特性Map。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map\" target=\"_blank\" rel=\"external\">Map</a> 对象以插入的顺序遍历元素。<code>for...of</code>循环为每一次循环返回一个[key, value]数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myObject = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</div><div class=\"line\">myObject.set(<span class=\"string\">'z'</span>, <span class=\"number\">1</span>);</div><div class=\"line\">myObject.set(<span class=\"string\">'@'</span>, <span class=\"number\">2</span>);</div><div class=\"line\">myObject.set(<span class=\"string\">'b'</span>, <span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> [key, value] <span class=\"keyword\">of</span> myObject) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(key, value);</div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">// z 1</span></div><div class=\"line\"><span class=\"comment\">// @ 2</span></div><div class=\"line\"><span class=\"comment\">// b 3</span></div></pre></td></tr></table></figure>\n<h3 id=\"攻克老浏览器\"><a href=\"#攻克老浏览器\" class=\"headerlink\" title=\"攻克老浏览器\"></a>攻克老浏览器</h3><p>Mozilla 建议:</p>\n<blockquote>\n<p>所以，如果过你想在跨浏览器环境中模拟一个有序的关联数组，你要么使用两个分开的数组（一个保存key，另一个保存value）,要么构建一个单属性对象(single-property objects)的数组。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 使用分开的数组</span></div><div class=\"line\"><span class=\"keyword\">var</span> objectKeys = [z, @, b, <span class=\"number\">1</span>, <span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">for</span> (item <span class=\"keyword\">in</span> objectKeys) &#123;</div><div class=\"line\">\tmyObject[item]</div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 构建一个单属性对象(single-property objects)的数组</span></div><div class=\"line\"><span class=\"keyword\">var</span> myData = [&#123;<span class=\"attr\">z</span>: <span class=\"number\">1</span>&#125;, &#123;<span class=\"string\">'@'</span>: <span class=\"number\">2</span>&#125;, &#123;<span class=\"attr\">b</span>: <span class=\"number\">3</span>&#125;, &#123;<span class=\"number\">1</span>: <span class=\"number\">4</span>&#125;, &#123;<span class=\"number\">5</span>: <span class=\"number\">5</span>&#125;];</div></pre></td></tr></table></figure>"},{"layout":"post","title":"仅用一行生成`[0, 1, ..., N-1]`数列","tip-number":33,"tip-username":"SarjuHansaliya","tip-username-profile":"https://github.com/SarjuHansaliya","tip-tldr":"我们可以创建一个函数，它可以仅用一行代码生成0...(N-1)数列。","redirect_from":["/zh_cn/create-range-0...n-easily-using-one-line/"],"_content":"\n使用下面一行代码，我们就可以生成0...(N-1)数列。\n\n### 方法1 (需要 ES5)\n\n```js\nArray.apply(null, {length: N}).map(Function.call, Number);\n```\n\n#### 简要说明\n\n1. `Array.apply(null, {length: N})` 返回一个由`undefined`填充的长度为`N`的数组(例如 `A = [undefined, undefined, ...]`)。\n2. `A.map(Function.call, Number)` 返回一个长度为`N`的数组，它的索引为`I`的元素为`Function.call.call(Number, undefined, I, A)`的结果。\n3. `Function.call.call(Number, undefined, I, A)`可转化为`Number(I)`，正好就是`I`。\n4. 结果为：`[0, 1, ..., N-1]`。\n\n更全面的介绍，请看[这里](https://github.com/gromgit/jstips-xe/blob/master/tips/33.md).\n\n### 方法2 (需要 ES6)\n\n这里用到了`Array.from` [https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from)\n\n```js\n Array.from(new Array(N),(val,index)=>index);\n```\n\n#### 简要说明\n\n1. `A = new Array(N)` 返回一个有`N`个_小孔_的数组 (例如 `A = [,,,...]`, 但是对于`x` in `0...N-1`时`A[x] = undefined`)。\n2. `F = (val,index)=>index` 即 `function F (val, index) { return index; }`。\n3. `Array.from(A, F)` 返回一个长度为`N`的数组，它的索引为`I`的元素为`F(A[I], I)`的结果，也就是`I`。\n4. 结果为：`[0, 1, ..., N-1]`。\n\n### One More Thing\n\n如果你需要[1, 2, ..., N]序列， **方法1** 可改为：\n\n```js\nArray.apply(null, {length: N}).map(function(value, index){\n  return index + 1;\n});\n```\n\n**方法2**可改为：\n\n```js\nArray.from(new Array(N),(val,index)=>index+1);\n```","source":"_posts/javascript/2016-02-02-create-range-0...n-easily-using-one-line.md","raw":"---\nlayout: post\n\ntitle: 仅用一行生成`[0, 1, ..., N-1]`数列\ntip-number: 33\ntip-username: SarjuHansaliya\ntip-username-profile: https://github.com/SarjuHansaliya\ntip-tldr: 我们可以创建一个函数，它可以仅用一行代码生成0...(N-1)数列。\n\n\nredirect_from:\n  - /zh_cn/create-range-0...n-easily-using-one-line/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n使用下面一行代码，我们就可以生成0...(N-1)数列。\n\n### 方法1 (需要 ES5)\n\n```js\nArray.apply(null, {length: N}).map(Function.call, Number);\n```\n\n#### 简要说明\n\n1. `Array.apply(null, {length: N})` 返回一个由`undefined`填充的长度为`N`的数组(例如 `A = [undefined, undefined, ...]`)。\n2. `A.map(Function.call, Number)` 返回一个长度为`N`的数组，它的索引为`I`的元素为`Function.call.call(Number, undefined, I, A)`的结果。\n3. `Function.call.call(Number, undefined, I, A)`可转化为`Number(I)`，正好就是`I`。\n4. 结果为：`[0, 1, ..., N-1]`。\n\n更全面的介绍，请看[这里](https://github.com/gromgit/jstips-xe/blob/master/tips/33.md).\n\n### 方法2 (需要 ES6)\n\n这里用到了`Array.from` [https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from)\n\n```js\n Array.from(new Array(N),(val,index)=>index);\n```\n\n#### 简要说明\n\n1. `A = new Array(N)` 返回一个有`N`个_小孔_的数组 (例如 `A = [,,,...]`, 但是对于`x` in `0...N-1`时`A[x] = undefined`)。\n2. `F = (val,index)=>index` 即 `function F (val, index) { return index; }`。\n3. `Array.from(A, F)` 返回一个长度为`N`的数组，它的索引为`I`的元素为`F(A[I], I)`的结果，也就是`I`。\n4. 结果为：`[0, 1, ..., N-1]`。\n\n### One More Thing\n\n如果你需要[1, 2, ..., N]序列， **方法1** 可改为：\n\n```js\nArray.apply(null, {length: N}).map(function(value, index){\n  return index + 1;\n});\n```\n\n**方法2**可改为：\n\n```js\nArray.from(new Array(N),(val,index)=>index+1);\n```","slug":"javascript/2016-02-02-create-range-0...n-easily-using-one-line","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqdu003xlyfy8hvhci96","content":"<p>使用下面一行代码，我们就可以生成0…(N-1)数列。</p>\n<h3 id=\"方法1-需要-ES5\"><a href=\"#方法1-需要-ES5\" class=\"headerlink\" title=\"方法1 (需要 ES5)\"></a>方法1 (需要 ES5)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.apply(<span class=\"literal\">null</span>, &#123;<span class=\"attr\">length</span>: N&#125;).map(<span class=\"built_in\">Function</span>.call, <span class=\"built_in\">Number</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"简要说明\"><a href=\"#简要说明\" class=\"headerlink\" title=\"简要说明\"></a>简要说明</h4><ol>\n<li><code>Array.apply(null, {length: N})</code> 返回一个由<code>undefined</code>填充的长度为<code>N</code>的数组(例如 <code>A = [undefined, undefined, ...]</code>)。</li>\n<li><code>A.map(Function.call, Number)</code> 返回一个长度为<code>N</code>的数组，它的索引为<code>I</code>的元素为<code>Function.call.call(Number, undefined, I, A)</code>的结果。</li>\n<li><code>Function.call.call(Number, undefined, I, A)</code>可转化为<code>Number(I)</code>，正好就是<code>I</code>。</li>\n<li>结果为：<code>[0, 1, ..., N-1]</code>。</li>\n</ol>\n<p>更全面的介绍，请看<a href=\"https://github.com/gromgit/jstips-xe/blob/master/tips/33.md\" target=\"_blank\" rel=\"external\">这里</a>.</p>\n<h3 id=\"方法2-需要-ES6\"><a href=\"#方法2-需要-ES6\" class=\"headerlink\" title=\"方法2 (需要 ES6)\"></a>方法2 (需要 ES6)</h3><p>这里用到了<code>Array.from</code> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(N),(val,index)=&gt;index);</div></pre></td></tr></table></figure>\n<h4 id=\"简要说明-1\"><a href=\"#简要说明-1\" class=\"headerlink\" title=\"简要说明\"></a>简要说明</h4><ol>\n<li><code>A = new Array(N)</code> 返回一个有<code>N</code>个<em>小孔</em>的数组 (例如 <code>A = [,,,...]</code>, 但是对于<code>x</code> in <code>0...N-1</code>时<code>A[x] = undefined</code>)。</li>\n<li><code>F = (val,index)=&gt;index</code> 即 <code>function F (val, index) { return index; }</code>。</li>\n<li><code>Array.from(A, F)</code> 返回一个长度为<code>N</code>的数组，它的索引为<code>I</code>的元素为<code>F(A[I], I)</code>的结果，也就是<code>I</code>。</li>\n<li>结果为：<code>[0, 1, ..., N-1]</code>。</li>\n</ol>\n<h3 id=\"One-More-Thing\"><a href=\"#One-More-Thing\" class=\"headerlink\" title=\"One More Thing\"></a>One More Thing</h3><p>如果你需要[1, 2, …, N]序列， <strong>方法1</strong> 可改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.apply(<span class=\"literal\">null</span>, &#123;<span class=\"attr\">length</span>: N&#125;).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> index + <span class=\"number\">1</span>;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>方法2</strong>可改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(N),(val,index)=&gt;index+<span class=\"number\">1</span>);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>使用下面一行代码，我们就可以生成0…(N-1)数列。</p>\n<h3 id=\"方法1-需要-ES5\"><a href=\"#方法1-需要-ES5\" class=\"headerlink\" title=\"方法1 (需要 ES5)\"></a>方法1 (需要 ES5)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.apply(<span class=\"literal\">null</span>, &#123;<span class=\"attr\">length</span>: N&#125;).map(<span class=\"built_in\">Function</span>.call, <span class=\"built_in\">Number</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"简要说明\"><a href=\"#简要说明\" class=\"headerlink\" title=\"简要说明\"></a>简要说明</h4><ol>\n<li><code>Array.apply(null, {length: N})</code> 返回一个由<code>undefined</code>填充的长度为<code>N</code>的数组(例如 <code>A = [undefined, undefined, ...]</code>)。</li>\n<li><code>A.map(Function.call, Number)</code> 返回一个长度为<code>N</code>的数组，它的索引为<code>I</code>的元素为<code>Function.call.call(Number, undefined, I, A)</code>的结果。</li>\n<li><code>Function.call.call(Number, undefined, I, A)</code>可转化为<code>Number(I)</code>，正好就是<code>I</code>。</li>\n<li>结果为：<code>[0, 1, ..., N-1]</code>。</li>\n</ol>\n<p>更全面的介绍，请看<a href=\"https://github.com/gromgit/jstips-xe/blob/master/tips/33.md\" target=\"_blank\" rel=\"external\">这里</a>.</p>\n<h3 id=\"方法2-需要-ES6\"><a href=\"#方法2-需要-ES6\" class=\"headerlink\" title=\"方法2 (需要 ES6)\"></a>方法2 (需要 ES6)</h3><p>这里用到了<code>Array.from</code> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(N),(val,index)=&gt;index);</div></pre></td></tr></table></figure>\n<h4 id=\"简要说明-1\"><a href=\"#简要说明-1\" class=\"headerlink\" title=\"简要说明\"></a>简要说明</h4><ol>\n<li><code>A = new Array(N)</code> 返回一个有<code>N</code>个<em>小孔</em>的数组 (例如 <code>A = [,,,...]</code>, 但是对于<code>x</code> in <code>0...N-1</code>时<code>A[x] = undefined</code>)。</li>\n<li><code>F = (val,index)=&gt;index</code> 即 <code>function F (val, index) { return index; }</code>。</li>\n<li><code>Array.from(A, F)</code> 返回一个长度为<code>N</code>的数组，它的索引为<code>I</code>的元素为<code>F(A[I], I)</code>的结果，也就是<code>I</code>。</li>\n<li>结果为：<code>[0, 1, ..., N-1]</code>。</li>\n</ol>\n<h3 id=\"One-More-Thing\"><a href=\"#One-More-Thing\" class=\"headerlink\" title=\"One More Thing\"></a>One More Thing</h3><p>如果你需要[1, 2, …, N]序列， <strong>方法1</strong> 可改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.apply(<span class=\"literal\">null</span>, &#123;<span class=\"attr\">length</span>: N&#125;).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> index + <span class=\"number\">1</span>;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>方法2</strong>可改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(N),(val,index)=&gt;index+<span class=\"number\">1</span>);</div></pre></td></tr></table></figure>"},{"layout":"post","title":"实现异步循环","tip-number":34,"tip-username":"madmantalking","tip-username-profile":"https://github.com/madmantalking","tip-tldr":"实现异步循环时，你可能会遇到问题。","redirect_from":["/zh_cn/implementing-asynchronous-loops/"],"_content":"\n让我们试着写一个异步方法，每秒打印一次循环的索引值。\n\n```js\nfor (var i=0; i<5; i++) {\n\tsetTimeout(function(){\n\t\tconsole.log(i); \n\t}, 1000 * (i+1));\n}  \n```\n\n如上程序的输出为：\n\n```js\n> 5\n> 5\n> 5\n> 5\n> 5\n```\n\n这明显是有问题的。\n\n**原因**\n\n每次时间结束(timeout)都指向原始的`i`，而并非它的拷贝。所以，for循环使`i`增长到5，之后`timeout`运行并调用了当前`i`的值（也就是5）。\n\n好吧，这个问题看起来很简单。最直接的解决方法是将循环的索引缓存在一个临时变量里。\n\n```js\nfor (var i=0; i<5; i++) {\n\tvar temp = i;\n \tsetTimeout(function(){\n\t\tconsole.log(temp); \n\t}, 1000 * (i+1));\n}  \n```\n\n但是再次运行，如上的程序输出为：\n\n```js\n> 4\n> 4\n> 4\n> 4\n> 4\n```\n\n这仍然有问题，这是因为并不存在块作用域，而且变量的声明被提升到了作用域顶端。实际上，如上代码和下面是一样的：\n\n```js\nvar temp;\nfor (var i=0; i<5; i++) {\n \ttemp = i;\n\tsetTimeout(function(){\n\t\tconsole.log(temp); \n  \t}, 1000 * (i+1));\n}  \n```\n\n**解决方法**\n\n有几个不同的方式可以拷贝`i`。最普通且常用方法是通过声明函数来建立一个闭包，并将`i`传给此函数。我们这里使用了自调用函数。\n\n```js\nfor (var i=0; i<5; i++) {\n\t(function(num){\n\t\tsetTimeout(function(){\n\t\t\tconsole.log(num); \n\t\t}, 1000 * (i+1)); \n\t})(i);  \n}  \n```\n\n在JavaScript里，参数是按值传递给函数的。像`Number`、`Date`和`String`这些原始类型为基本复制。当你们在一个函数内改变它的值，并不影响外面的作用域。但`Object`类型不一样：如果你在函数内部修改了它的参数，将会影响到所有包含该`Object`的作用域内它的参数。\n\n另一种方法是使用`let`。在ES6中的`let`关键字是可以实现的，它和`var`不一样，因为它支持块作用域的。\n\n```js\nfor (let i=0; i<5; i++) {\n\tvar temp = i;\n \tsetTimeout(function(){\n\t\tconsole.log(i); \n\t}, 1000 * (i+1));\n}  \n```","source":"_posts/javascript/2016-02-03-implementing-asynchronous-loops.md","raw":"---\nlayout: post\n\ntitle: 实现异步循环\ntip-number: 34\ntip-username: madmantalking\ntip-username-profile: https://github.com/madmantalking\ntip-tldr: 实现异步循环时，你可能会遇到问题。 \n\nredirect_from:\n  - /zh_cn/implementing-asynchronous-loops/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n让我们试着写一个异步方法，每秒打印一次循环的索引值。\n\n```js\nfor (var i=0; i<5; i++) {\n\tsetTimeout(function(){\n\t\tconsole.log(i); \n\t}, 1000 * (i+1));\n}  \n```\n\n如上程序的输出为：\n\n```js\n> 5\n> 5\n> 5\n> 5\n> 5\n```\n\n这明显是有问题的。\n\n**原因**\n\n每次时间结束(timeout)都指向原始的`i`，而并非它的拷贝。所以，for循环使`i`增长到5，之后`timeout`运行并调用了当前`i`的值（也就是5）。\n\n好吧，这个问题看起来很简单。最直接的解决方法是将循环的索引缓存在一个临时变量里。\n\n```js\nfor (var i=0; i<5; i++) {\n\tvar temp = i;\n \tsetTimeout(function(){\n\t\tconsole.log(temp); \n\t}, 1000 * (i+1));\n}  \n```\n\n但是再次运行，如上的程序输出为：\n\n```js\n> 4\n> 4\n> 4\n> 4\n> 4\n```\n\n这仍然有问题，这是因为并不存在块作用域，而且变量的声明被提升到了作用域顶端。实际上，如上代码和下面是一样的：\n\n```js\nvar temp;\nfor (var i=0; i<5; i++) {\n \ttemp = i;\n\tsetTimeout(function(){\n\t\tconsole.log(temp); \n  \t}, 1000 * (i+1));\n}  \n```\n\n**解决方法**\n\n有几个不同的方式可以拷贝`i`。最普通且常用方法是通过声明函数来建立一个闭包，并将`i`传给此函数。我们这里使用了自调用函数。\n\n```js\nfor (var i=0; i<5; i++) {\n\t(function(num){\n\t\tsetTimeout(function(){\n\t\t\tconsole.log(num); \n\t\t}, 1000 * (i+1)); \n\t})(i);  \n}  \n```\n\n在JavaScript里，参数是按值传递给函数的。像`Number`、`Date`和`String`这些原始类型为基本复制。当你们在一个函数内改变它的值，并不影响外面的作用域。但`Object`类型不一样：如果你在函数内部修改了它的参数，将会影响到所有包含该`Object`的作用域内它的参数。\n\n另一种方法是使用`let`。在ES6中的`let`关键字是可以实现的，它和`var`不一样，因为它支持块作用域的。\n\n```js\nfor (let i=0; i<5; i++) {\n\tvar temp = i;\n \tsetTimeout(function(){\n\t\tconsole.log(i); \n\t}, 1000 * (i+1));\n}  \n```","slug":"javascript/2016-02-03-implementing-asynchronous-loops","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqdw003zlyfyrne87k2i","content":"<p>让我们试着写一个异步方法，每秒打印一次循环的索引值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(i); </div><div class=\"line\">\t&#125;, <span class=\"number\">1000</span> * (i+<span class=\"number\">1</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如上程序的输出为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"number\">5</span></div><div class=\"line\">&gt; <span class=\"number\">5</span></div><div class=\"line\">&gt; <span class=\"number\">5</span></div><div class=\"line\">&gt; <span class=\"number\">5</span></div><div class=\"line\">&gt; <span class=\"number\">5</span></div></pre></td></tr></table></figure>\n<p>这明显是有问题的。</p>\n<p><strong>原因</strong></p>\n<p>每次时间结束(timeout)都指向原始的<code>i</code>，而并非它的拷贝。所以，for循环使<code>i</code>增长到5，之后<code>timeout</code>运行并调用了当前<code>i</code>的值（也就是5）。</p>\n<p>好吧，这个问题看起来很简单。最直接的解决方法是将循环的索引缓存在一个临时变量里。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> temp = i;</div><div class=\"line\"> \tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(temp); </div><div class=\"line\">\t&#125;, <span class=\"number\">1000</span> * (i+<span class=\"number\">1</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是再次运行，如上的程序输出为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"number\">4</span></div><div class=\"line\">&gt; <span class=\"number\">4</span></div><div class=\"line\">&gt; <span class=\"number\">4</span></div><div class=\"line\">&gt; <span class=\"number\">4</span></div><div class=\"line\">&gt; <span class=\"number\">4</span></div></pre></td></tr></table></figure>\n<p>这仍然有问题，这是因为并不存在块作用域，而且变量的声明被提升到了作用域顶端。实际上，如上代码和下面是一样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> temp;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\"> \ttemp = i;</div><div class=\"line\">\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(temp); </div><div class=\"line\">  \t&#125;, <span class=\"number\">1000</span> * (i+<span class=\"number\">1</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>解决方法</strong></p>\n<p>有几个不同的方式可以拷贝<code>i</code>。最普通且常用方法是通过声明函数来建立一个闭包，并将<code>i</code>传给此函数。我们这里使用了自调用函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\t(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(num); </div><div class=\"line\">\t\t&#125;, <span class=\"number\">1000</span> * (i+<span class=\"number\">1</span>)); </div><div class=\"line\">\t&#125;)(i);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在JavaScript里，参数是按值传递给函数的。像<code>Number</code>、<code>Date</code>和<code>String</code>这些原始类型为基本复制。当你们在一个函数内改变它的值，并不影响外面的作用域。但<code>Object</code>类型不一样：如果你在函数内部修改了它的参数，将会影响到所有包含该<code>Object</code>的作用域内它的参数。</p>\n<p>另一种方法是使用<code>let</code>。在ES6中的<code>let</code>关键字是可以实现的，它和<code>var</code>不一样，因为它支持块作用域的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> temp = i;</div><div class=\"line\"> \tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(i); </div><div class=\"line\">\t&#125;, <span class=\"number\">1000</span> * (i+<span class=\"number\">1</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>让我们试着写一个异步方法，每秒打印一次循环的索引值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(i); </div><div class=\"line\">\t&#125;, <span class=\"number\">1000</span> * (i+<span class=\"number\">1</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如上程序的输出为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"number\">5</span></div><div class=\"line\">&gt; <span class=\"number\">5</span></div><div class=\"line\">&gt; <span class=\"number\">5</span></div><div class=\"line\">&gt; <span class=\"number\">5</span></div><div class=\"line\">&gt; <span class=\"number\">5</span></div></pre></td></tr></table></figure>\n<p>这明显是有问题的。</p>\n<p><strong>原因</strong></p>\n<p>每次时间结束(timeout)都指向原始的<code>i</code>，而并非它的拷贝。所以，for循环使<code>i</code>增长到5，之后<code>timeout</code>运行并调用了当前<code>i</code>的值（也就是5）。</p>\n<p>好吧，这个问题看起来很简单。最直接的解决方法是将循环的索引缓存在一个临时变量里。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> temp = i;</div><div class=\"line\"> \tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(temp); </div><div class=\"line\">\t&#125;, <span class=\"number\">1000</span> * (i+<span class=\"number\">1</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是再次运行，如上的程序输出为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"number\">4</span></div><div class=\"line\">&gt; <span class=\"number\">4</span></div><div class=\"line\">&gt; <span class=\"number\">4</span></div><div class=\"line\">&gt; <span class=\"number\">4</span></div><div class=\"line\">&gt; <span class=\"number\">4</span></div></pre></td></tr></table></figure>\n<p>这仍然有问题，这是因为并不存在块作用域，而且变量的声明被提升到了作用域顶端。实际上，如上代码和下面是一样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> temp;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\"> \ttemp = i;</div><div class=\"line\">\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(temp); </div><div class=\"line\">  \t&#125;, <span class=\"number\">1000</span> * (i+<span class=\"number\">1</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>解决方法</strong></p>\n<p>有几个不同的方式可以拷贝<code>i</code>。最普通且常用方法是通过声明函数来建立一个闭包，并将<code>i</code>传给此函数。我们这里使用了自调用函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\t(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(num); </div><div class=\"line\">\t\t&#125;, <span class=\"number\">1000</span> * (i+<span class=\"number\">1</span>)); </div><div class=\"line\">\t&#125;)(i);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在JavaScript里，参数是按值传递给函数的。像<code>Number</code>、<code>Date</code>和<code>String</code>这些原始类型为基本复制。当你们在一个函数内改变它的值，并不影响外面的作用域。但<code>Object</code>类型不一样：如果你在函数内部修改了它的参数，将会影响到所有包含该<code>Object</code>的作用域内它的参数。</p>\n<p>另一种方法是使用<code>let</code>。在ES6中的<code>let</code>关键字是可以实现的，它和<code>var</code>不一样，因为它支持块作用域的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> temp = i;</div><div class=\"line\"> \tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(i); </div><div class=\"line\">\t&#125;, <span class=\"number\">1000</span> * (i+<span class=\"number\">1</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"layout":"post","title":"赋值技巧","tip-number":35,"tip-username":"hsleonis","tip-username-profile":"https://github.com/hsleonis","tip-tldr":"赋值是很常见的。有时候打字对于我们这些“懒惰的程序员”来说是很费时间的。所以，我们可以使用一些小把戏来使我们的代码更清楚更简单。","redirect_from":["/zh_cn/assignment-shorthands/"],"_content":"\n赋值是很常见的。有时候打字对于我们这些“懒惰的程序员”来说是很费时间的。\n所以，我们可以使用一些小把戏来使我们的代码更清楚更简单。\n\n这类似于使用：\n\n```js\nx += 23; // x = x + 23;\ny -= 15; // y = y - 15;\nz *= 10; // z = z * 10;\nk /= 7; // k = k / 7;\np %= 3; // p = p % 3;\nd **= 2; // d = d ** 2;\nm >>= 2; // m = m >> 2;\nn <<= 2; // n = n << 2;\nn ++; // n = n + 1;\nn --; n = n - 1;\n\n```\n\n### `++` 与 `--` 操作符\n\n对于`++`操作符有些特殊。最好用下面的例子解释一下：\n\n```js\nvar a = 2;\nvar b = a++;\n// 现在 a == 3  b == 2\n```\n\n`a++`做了如下工作：\n  1. 返回`a`的值\n  2. `a`增加1\n\n但是如果我们想让值先增加呢？这也很容易：\n\n```js\nvar a = 2;\nvar b = ++a;\n// 现在a和b都是3\n```\n\n看明白了吗？我将操作符放在了参数_前面_。\n\n`--`操作符除了使值减小外，其他功能是类似的。\n\n### If-else (使用三元运算符)\n\n我们平时会这样写：\n\n```js\nvar newValue;\nif(value > 10) \n  newValue = 5;\nelse\n  newValue = 2;\n```\n\n我们可以使用三元运算符是它更简便：\n\n```js\nvar newValue = (value > 10) ? 5 : 2;\n```\n\n### 检测Null、Undefined、空\n\n```js\nif (variable1 !== null || variable1 !== undefined || variable1 !== '') {\n     var variable2 = variable1;\n}\n```\n\n简便写法：\n\n```js\nvar variable2 = variable1  || '';\n```\n\nP.S.：如果`variable1`是一个数字，则先检查他是否为0。\n\n### 对象数组表示法\n\n不要用：\n\n```js\nvar a = new Array();\na[0] = \"myString1\";\na[1] = \"myString2\";\n```\n\n使用：\n\n```js\nvar a = [\"myString1\", \"myString2\"];\n```\n\n### 关联数组\n\n不要用：\n\n```js\nvar skillSet = new Array();\nskillSet['Document language'] = 'HTML5';\nskillSet['Styling language'] = 'CSS3';\n```\n\n使用：\n\n```js\nvar skillSet = {\n    'Document language' : 'HTML5', \n    'Styling language' : 'CSS3'\n};\n```\n","source":"_posts/javascript/2016-02-04-assignment-shorthands.md","raw":"---\nlayout: post\n\ntitle: 赋值技巧\ntip-number: 35\ntip-username: hsleonis\ntip-username-profile: https://github.com/hsleonis\ntip-tldr: 赋值是很常见的。有时候打字对于我们这些“懒惰的程序员”来说是很费时间的。所以，我们可以使用一些小把戏来使我们的代码更清楚更简单。\n\nredirect_from:\n  - /zh_cn/assignment-shorthands/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n赋值是很常见的。有时候打字对于我们这些“懒惰的程序员”来说是很费时间的。\n所以，我们可以使用一些小把戏来使我们的代码更清楚更简单。\n\n这类似于使用：\n\n```js\nx += 23; // x = x + 23;\ny -= 15; // y = y - 15;\nz *= 10; // z = z * 10;\nk /= 7; // k = k / 7;\np %= 3; // p = p % 3;\nd **= 2; // d = d ** 2;\nm >>= 2; // m = m >> 2;\nn <<= 2; // n = n << 2;\nn ++; // n = n + 1;\nn --; n = n - 1;\n\n```\n\n### `++` 与 `--` 操作符\n\n对于`++`操作符有些特殊。最好用下面的例子解释一下：\n\n```js\nvar a = 2;\nvar b = a++;\n// 现在 a == 3  b == 2\n```\n\n`a++`做了如下工作：\n  1. 返回`a`的值\n  2. `a`增加1\n\n但是如果我们想让值先增加呢？这也很容易：\n\n```js\nvar a = 2;\nvar b = ++a;\n// 现在a和b都是3\n```\n\n看明白了吗？我将操作符放在了参数_前面_。\n\n`--`操作符除了使值减小外，其他功能是类似的。\n\n### If-else (使用三元运算符)\n\n我们平时会这样写：\n\n```js\nvar newValue;\nif(value > 10) \n  newValue = 5;\nelse\n  newValue = 2;\n```\n\n我们可以使用三元运算符是它更简便：\n\n```js\nvar newValue = (value > 10) ? 5 : 2;\n```\n\n### 检测Null、Undefined、空\n\n```js\nif (variable1 !== null || variable1 !== undefined || variable1 !== '') {\n     var variable2 = variable1;\n}\n```\n\n简便写法：\n\n```js\nvar variable2 = variable1  || '';\n```\n\nP.S.：如果`variable1`是一个数字，则先检查他是否为0。\n\n### 对象数组表示法\n\n不要用：\n\n```js\nvar a = new Array();\na[0] = \"myString1\";\na[1] = \"myString2\";\n```\n\n使用：\n\n```js\nvar a = [\"myString1\", \"myString2\"];\n```\n\n### 关联数组\n\n不要用：\n\n```js\nvar skillSet = new Array();\nskillSet['Document language'] = 'HTML5';\nskillSet['Styling language'] = 'CSS3';\n```\n\n使用：\n\n```js\nvar skillSet = {\n    'Document language' : 'HTML5', \n    'Styling language' : 'CSS3'\n};\n```\n","slug":"javascript/2016-02-04-assignment-shorthands","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqdx0041lyfyqhq07num","content":"<p>赋值是很常见的。有时候打字对于我们这些“懒惰的程序员”来说是很费时间的。<br>所以，我们可以使用一些小把戏来使我们的代码更清楚更简单。</p>\n<p>这类似于使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">x += <span class=\"number\">23</span>; <span class=\"comment\">// x = x + 23;</span></div><div class=\"line\">y -= <span class=\"number\">15</span>; <span class=\"comment\">// y = y - 15;</span></div><div class=\"line\">z *= <span class=\"number\">10</span>; <span class=\"comment\">// z = z * 10;</span></div><div class=\"line\">k /= <span class=\"number\">7</span>; <span class=\"comment\">// k = k / 7;</span></div><div class=\"line\">p %= <span class=\"number\">3</span>; <span class=\"comment\">// p = p % 3;</span></div><div class=\"line\">d **= <span class=\"number\">2</span>; <span class=\"comment\">// d = d ** 2;</span></div><div class=\"line\">m &gt;&gt;= <span class=\"number\">2</span>; <span class=\"comment\">// m = m &gt;&gt; 2;</span></div><div class=\"line\">n &lt;&lt;= <span class=\"number\">2</span>; <span class=\"comment\">// n = n &lt;&lt; 2;</span></div><div class=\"line\">n ++; <span class=\"comment\">// n = n + 1;</span></div><div class=\"line\">n --; n = n - <span class=\"number\">1</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"与-操作符\"><a href=\"#与-操作符\" class=\"headerlink\" title=\"++ 与 -- 操作符\"></a><code>++</code> 与 <code>--</code> 操作符</h3><p>对于<code>++</code>操作符有些特殊。最好用下面的例子解释一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> b = a++;</div><div class=\"line\"><span class=\"comment\">// 现在 a == 3  b == 2</span></div></pre></td></tr></table></figure>\n<p><code>a++</code>做了如下工作：</p>\n<ol>\n<li>返回<code>a</code>的值</li>\n<li><code>a</code>增加1</li>\n</ol>\n<p>但是如果我们想让值先增加呢？这也很容易：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> b = ++a;</div><div class=\"line\"><span class=\"comment\">// 现在a和b都是3</span></div></pre></td></tr></table></figure>\n<p>看明白了吗？我将操作符放在了参数<em>前面</em>。</p>\n<p><code>--</code>操作符除了使值减小外，其他功能是类似的。</p>\n<h3 id=\"If-else-使用三元运算符\"><a href=\"#If-else-使用三元运算符\" class=\"headerlink\" title=\"If-else (使用三元运算符)\"></a>If-else (使用三元运算符)</h3><p>我们平时会这样写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> newValue;</div><div class=\"line\"><span class=\"keyword\">if</span>(value &gt; <span class=\"number\">10</span>) </div><div class=\"line\">  newValue = <span class=\"number\">5</span>;</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">  newValue = <span class=\"number\">2</span>;</div></pre></td></tr></table></figure>\n<p>我们可以使用三元运算符是它更简便：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> newValue = (value &gt; <span class=\"number\">10</span>) ? <span class=\"number\">5</span> : <span class=\"number\">2</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"检测Null、Undefined、空\"><a href=\"#检测Null、Undefined、空\" class=\"headerlink\" title=\"检测Null、Undefined、空\"></a>检测Null、Undefined、空</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (variable1 !== <span class=\"literal\">null</span> || variable1 !== <span class=\"literal\">undefined</span> || variable1 !== <span class=\"string\">''</span>) &#123;</div><div class=\"line\">     <span class=\"keyword\">var</span> variable2 = variable1;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>简便写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> variable2 = variable1  || <span class=\"string\">''</span>;</div></pre></td></tr></table></figure>\n<p>P.S.：如果<code>variable1</code>是一个数字，则先检查他是否为0。</p>\n<h3 id=\"对象数组表示法\"><a href=\"#对象数组表示法\" class=\"headerlink\" title=\"对象数组表示法\"></a>对象数组表示法</h3><p>不要用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\">a[<span class=\"number\">0</span>] = <span class=\"string\">\"myString1\"</span>;</div><div class=\"line\">a[<span class=\"number\">1</span>] = <span class=\"string\">\"myString2\"</span>;</div></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">\"myString1\"</span>, <span class=\"string\">\"myString2\"</span>];</div></pre></td></tr></table></figure>\n<h3 id=\"关联数组\"><a href=\"#关联数组\" class=\"headerlink\" title=\"关联数组\"></a>关联数组</h3><p>不要用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> skillSet = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\">skillSet[<span class=\"string\">'Document language'</span>] = <span class=\"string\">'HTML5'</span>;</div><div class=\"line\">skillSet[<span class=\"string\">'Styling language'</span>] = <span class=\"string\">'CSS3'</span>;</div></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> skillSet = &#123;</div><div class=\"line\">    <span class=\"string\">'Document language'</span> : <span class=\"string\">'HTML5'</span>, </div><div class=\"line\">    <span class=\"string\">'Styling language'</span> : <span class=\"string\">'CSS3'</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>赋值是很常见的。有时候打字对于我们这些“懒惰的程序员”来说是很费时间的。<br>所以，我们可以使用一些小把戏来使我们的代码更清楚更简单。</p>\n<p>这类似于使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">x += <span class=\"number\">23</span>; <span class=\"comment\">// x = x + 23;</span></div><div class=\"line\">y -= <span class=\"number\">15</span>; <span class=\"comment\">// y = y - 15;</span></div><div class=\"line\">z *= <span class=\"number\">10</span>; <span class=\"comment\">// z = z * 10;</span></div><div class=\"line\">k /= <span class=\"number\">7</span>; <span class=\"comment\">// k = k / 7;</span></div><div class=\"line\">p %= <span class=\"number\">3</span>; <span class=\"comment\">// p = p % 3;</span></div><div class=\"line\">d **= <span class=\"number\">2</span>; <span class=\"comment\">// d = d ** 2;</span></div><div class=\"line\">m &gt;&gt;= <span class=\"number\">2</span>; <span class=\"comment\">// m = m &gt;&gt; 2;</span></div><div class=\"line\">n &lt;&lt;= <span class=\"number\">2</span>; <span class=\"comment\">// n = n &lt;&lt; 2;</span></div><div class=\"line\">n ++; <span class=\"comment\">// n = n + 1;</span></div><div class=\"line\">n --; n = n - <span class=\"number\">1</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"与-操作符\"><a href=\"#与-操作符\" class=\"headerlink\" title=\"++ 与 -- 操作符\"></a><code>++</code> 与 <code>--</code> 操作符</h3><p>对于<code>++</code>操作符有些特殊。最好用下面的例子解释一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> b = a++;</div><div class=\"line\"><span class=\"comment\">// 现在 a == 3  b == 2</span></div></pre></td></tr></table></figure>\n<p><code>a++</code>做了如下工作：</p>\n<ol>\n<li>返回<code>a</code>的值</li>\n<li><code>a</code>增加1</li>\n</ol>\n<p>但是如果我们想让值先增加呢？这也很容易：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> b = ++a;</div><div class=\"line\"><span class=\"comment\">// 现在a和b都是3</span></div></pre></td></tr></table></figure>\n<p>看明白了吗？我将操作符放在了参数<em>前面</em>。</p>\n<p><code>--</code>操作符除了使值减小外，其他功能是类似的。</p>\n<h3 id=\"If-else-使用三元运算符\"><a href=\"#If-else-使用三元运算符\" class=\"headerlink\" title=\"If-else (使用三元运算符)\"></a>If-else (使用三元运算符)</h3><p>我们平时会这样写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> newValue;</div><div class=\"line\"><span class=\"keyword\">if</span>(value &gt; <span class=\"number\">10</span>) </div><div class=\"line\">  newValue = <span class=\"number\">5</span>;</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">  newValue = <span class=\"number\">2</span>;</div></pre></td></tr></table></figure>\n<p>我们可以使用三元运算符是它更简便：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> newValue = (value &gt; <span class=\"number\">10</span>) ? <span class=\"number\">5</span> : <span class=\"number\">2</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"检测Null、Undefined、空\"><a href=\"#检测Null、Undefined、空\" class=\"headerlink\" title=\"检测Null、Undefined、空\"></a>检测Null、Undefined、空</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (variable1 !== <span class=\"literal\">null</span> || variable1 !== <span class=\"literal\">undefined</span> || variable1 !== <span class=\"string\">''</span>) &#123;</div><div class=\"line\">     <span class=\"keyword\">var</span> variable2 = variable1;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>简便写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> variable2 = variable1  || <span class=\"string\">''</span>;</div></pre></td></tr></table></figure>\n<p>P.S.：如果<code>variable1</code>是一个数字，则先检查他是否为0。</p>\n<h3 id=\"对象数组表示法\"><a href=\"#对象数组表示法\" class=\"headerlink\" title=\"对象数组表示法\"></a>对象数组表示法</h3><p>不要用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\">a[<span class=\"number\">0</span>] = <span class=\"string\">\"myString1\"</span>;</div><div class=\"line\">a[<span class=\"number\">1</span>] = <span class=\"string\">\"myString2\"</span>;</div></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">\"myString1\"</span>, <span class=\"string\">\"myString2\"</span>];</div></pre></td></tr></table></figure>\n<h3 id=\"关联数组\"><a href=\"#关联数组\" class=\"headerlink\" title=\"关联数组\"></a>关联数组</h3><p>不要用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> skillSet = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\">skillSet[<span class=\"string\">'Document language'</span>] = <span class=\"string\">'HTML5'</span>;</div><div class=\"line\">skillSet[<span class=\"string\">'Styling language'</span>] = <span class=\"string\">'CSS3'</span>;</div></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> skillSet = &#123;</div><div class=\"line\">    <span class=\"string\">'Document language'</span> : <span class=\"string\">'HTML5'</span>, </div><div class=\"line\">    <span class=\"string\">'Styling language'</span> : <span class=\"string\">'CSS3'</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"扩展插件中观察DOM的变化","tip-number":36,"tip-username":"beyondns","tip-username-profile":"https://github.com/beyondns","tip-tldr":"当你为存在的网站开发扩展插件时，由于现代的动态Javascript，操作DOM并不是很容易。","redirect_from":["/zh_cn/observe-dom-changes/"],"_content":"[MutationObserver](https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver)是监听DOM变化与当元素变化时做适当操作的一个解决方法。在下面的例子中我们使用计时器模拟了内容的动态加载，第一个元素\"target\"创建后，创建\"subTarget\"。\n在扩展中的代码，`rootObserver`首先开始工作，直到`targetElement`被创建后`rootObserver`停止，然后`elementObserver`开始工作。这个级联观测可以在发现`subTargetElement`时提醒你。\n这个方法在为动态加载内容的网站开发扩展插件时，是很有用的。\n\n```js\nconst observeConfig = {\n    attributes: true,\n    childList: true,\n    characterData: true,\n    subtree: true\n};\n\nfunction initExtension(rootElement, targetSelector, subTargetSelector) {\n    var rootObserver = new MutationObserver(function(mutations) {\n        console.log(\"Inside root observer\");\n        targetElement = rootElement.querySelector(targetSelector);\n        if (targetElement) {\n            rootObserver.disconnect();\n            var elementObserver = new MutationObserver(function(mutations) {\n                console.log(\"Inside element observer\")\n                subTargetElement = targetElement.querySelector(subTargetSelector);\n                if (subTargetElement) {\n                    elementObserver.disconnect();\n                    console.log(\"subTargetElement found!\")\n                }\n            })\n            elementObserver.observe(targetElement, observeConfig);\n        }\n    })\n    rootObserver.observe(rootElement, observeConfig);\n}\n\n(function() {\n\n    initExtension(document.body, \"div.target\", \"div.subtarget\")\n\n    setTimeout(function() {\n        del = document.createElement(\"div\");\n        del.innerHTML = \"<div class='target'>target</div>\"\n        document.body.appendChild(del)\n    }, 3000);\n\n\n    setTimeout(function() {\n        var el = document.body.querySelector('div.target')\n        if (el) {\n            del = document.createElement(\"div\");\n            del.innerHTML = \"<div class='subtarget'>subtarget</div>\"\n            el.appendChild(del)\n        }\n    }, 5000);\n\n})()\n```\n\n","source":"_posts/javascript/2016-02-05-observe-dom-changes.md","raw":"---\nlayout: post\n\ntitle: 扩展插件中观察DOM的变化\ntip-number: 36\ntip-username: beyondns\ntip-username-profile: https://github.com/beyondns\ntip-tldr: 当你为存在的网站开发扩展插件时，由于现代的动态Javascript，操作DOM并不是很容易。\n\n\nredirect_from:\n  - /zh_cn/observe-dom-changes/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n[MutationObserver](https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver)是监听DOM变化与当元素变化时做适当操作的一个解决方法。在下面的例子中我们使用计时器模拟了内容的动态加载，第一个元素\"target\"创建后，创建\"subTarget\"。\n在扩展中的代码，`rootObserver`首先开始工作，直到`targetElement`被创建后`rootObserver`停止，然后`elementObserver`开始工作。这个级联观测可以在发现`subTargetElement`时提醒你。\n这个方法在为动态加载内容的网站开发扩展插件时，是很有用的。\n\n```js\nconst observeConfig = {\n    attributes: true,\n    childList: true,\n    characterData: true,\n    subtree: true\n};\n\nfunction initExtension(rootElement, targetSelector, subTargetSelector) {\n    var rootObserver = new MutationObserver(function(mutations) {\n        console.log(\"Inside root observer\");\n        targetElement = rootElement.querySelector(targetSelector);\n        if (targetElement) {\n            rootObserver.disconnect();\n            var elementObserver = new MutationObserver(function(mutations) {\n                console.log(\"Inside element observer\")\n                subTargetElement = targetElement.querySelector(subTargetSelector);\n                if (subTargetElement) {\n                    elementObserver.disconnect();\n                    console.log(\"subTargetElement found!\")\n                }\n            })\n            elementObserver.observe(targetElement, observeConfig);\n        }\n    })\n    rootObserver.observe(rootElement, observeConfig);\n}\n\n(function() {\n\n    initExtension(document.body, \"div.target\", \"div.subtarget\")\n\n    setTimeout(function() {\n        del = document.createElement(\"div\");\n        del.innerHTML = \"<div class='target'>target</div>\"\n        document.body.appendChild(del)\n    }, 3000);\n\n\n    setTimeout(function() {\n        var el = document.body.querySelector('div.target')\n        if (el) {\n            del = document.createElement(\"div\");\n            del.innerHTML = \"<div class='subtarget'>subtarget</div>\"\n            el.appendChild(del)\n        }\n    }, 5000);\n\n})()\n```\n\n","slug":"javascript/2016-02-05-observe-dom-changes","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqdz0043lyfysvnqqo32","content":"<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver\" target=\"_blank\" rel=\"external\">MutationObserver</a>是监听DOM变化与当元素变化时做适当操作的一个解决方法。在下面的例子中我们使用计时器模拟了内容的动态加载，第一个元素”target”创建后，创建”subTarget”。<br>在扩展中的代码，<code>rootObserver</code>首先开始工作，直到<code>targetElement</code>被创建后<code>rootObserver</code>停止，然后<code>elementObserver</code>开始工作。这个级联观测可以在发现<code>subTargetElement</code>时提醒你。<br>这个方法在为动态加载内容的网站开发扩展插件时，是很有用的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> observeConfig = &#123;</div><div class=\"line\">    <span class=\"attr\">attributes</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">childList</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">characterData</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">subtree</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initExtension</span>(<span class=\"params\">rootElement, targetSelector, subTargetSelector</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> rootObserver = <span class=\"keyword\">new</span> MutationObserver(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mutations</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Inside root observer\"</span>);</div><div class=\"line\">        targetElement = rootElement.querySelector(targetSelector);</div><div class=\"line\">        <span class=\"keyword\">if</span> (targetElement) &#123;</div><div class=\"line\">            rootObserver.disconnect();</div><div class=\"line\">            <span class=\"keyword\">var</span> elementObserver = <span class=\"keyword\">new</span> MutationObserver(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mutations</span>) </span>&#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Inside element observer\"</span>)</div><div class=\"line\">                subTargetElement = targetElement.querySelector(subTargetSelector);</div><div class=\"line\">                <span class=\"keyword\">if</span> (subTargetElement) &#123;</div><div class=\"line\">                    elementObserver.disconnect();</div><div class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"subTargetElement found!\"</span>)</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;)</div><div class=\"line\">            elementObserver.observe(targetElement, observeConfig);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    rootObserver.observe(rootElement, observeConfig);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    initExtension(<span class=\"built_in\">document</span>.body, <span class=\"string\">\"div.target\"</span>, <span class=\"string\">\"div.subtarget\"</span>)</div><div class=\"line\"></div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        del = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</div><div class=\"line\">        del.innerHTML = <span class=\"string\">\"&lt;div class='target'&gt;target&lt;/div&gt;\"</span></div><div class=\"line\">        <span class=\"built_in\">document</span>.body.appendChild(del)</div><div class=\"line\">    &#125;, <span class=\"number\">3000</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.body.querySelector(<span class=\"string\">'div.target'</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> (el) &#123;</div><div class=\"line\">            del = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</div><div class=\"line\">            del.innerHTML = <span class=\"string\">\"&lt;div class='subtarget'&gt;subtarget&lt;/div&gt;\"</span></div><div class=\"line\">            el.appendChild(del)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;, <span class=\"number\">5000</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;)()</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver\" target=\"_blank\" rel=\"external\">MutationObserver</a>是监听DOM变化与当元素变化时做适当操作的一个解决方法。在下面的例子中我们使用计时器模拟了内容的动态加载，第一个元素”target”创建后，创建”subTarget”。<br>在扩展中的代码，<code>rootObserver</code>首先开始工作，直到<code>targetElement</code>被创建后<code>rootObserver</code>停止，然后<code>elementObserver</code>开始工作。这个级联观测可以在发现<code>subTargetElement</code>时提醒你。<br>这个方法在为动态加载内容的网站开发扩展插件时，是很有用的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> observeConfig = &#123;</div><div class=\"line\">    <span class=\"attr\">attributes</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">childList</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">characterData</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">subtree</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initExtension</span>(<span class=\"params\">rootElement, targetSelector, subTargetSelector</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> rootObserver = <span class=\"keyword\">new</span> MutationObserver(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mutations</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Inside root observer\"</span>);</div><div class=\"line\">        targetElement = rootElement.querySelector(targetSelector);</div><div class=\"line\">        <span class=\"keyword\">if</span> (targetElement) &#123;</div><div class=\"line\">            rootObserver.disconnect();</div><div class=\"line\">            <span class=\"keyword\">var</span> elementObserver = <span class=\"keyword\">new</span> MutationObserver(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mutations</span>) </span>&#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Inside element observer\"</span>)</div><div class=\"line\">                subTargetElement = targetElement.querySelector(subTargetSelector);</div><div class=\"line\">                <span class=\"keyword\">if</span> (subTargetElement) &#123;</div><div class=\"line\">                    elementObserver.disconnect();</div><div class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"subTargetElement found!\"</span>)</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;)</div><div class=\"line\">            elementObserver.observe(targetElement, observeConfig);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    rootObserver.observe(rootElement, observeConfig);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    initExtension(<span class=\"built_in\">document</span>.body, <span class=\"string\">\"div.target\"</span>, <span class=\"string\">\"div.subtarget\"</span>)</div><div class=\"line\"></div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        del = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</div><div class=\"line\">        del.innerHTML = <span class=\"string\">\"&lt;div class='target'&gt;target&lt;/div&gt;\"</span></div><div class=\"line\">        <span class=\"built_in\">document</span>.body.appendChild(del)</div><div class=\"line\">    &#125;, <span class=\"number\">3000</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.body.querySelector(<span class=\"string\">'div.target'</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> (el) &#123;</div><div class=\"line\">            del = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</div><div class=\"line\">            del.innerHTML = <span class=\"string\">\"&lt;div class='subtarget'&gt;subtarget&lt;/div&gt;\"</span></div><div class=\"line\">            el.appendChild(del)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;, <span class=\"number\">5000</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;)()</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Javascript多维数组扁平化","tip-number":38,"tip-username":"loverajoel","tip-username-profile":"https://www.twitter.com/loverajoel","tip-tldr":"将多位数组转化为单一数组的三种不同方法。","tip-writer-support":"https://www.coinbase.com/loverajoel","redirect_from":["/zh_cn/flattening-multidimensional-arrays-in-javascript/"],"_content":"\n下面是将多位数组转化为单一数组的三种不同方法。\n\n对于此数组：\n\n```js\nvar myArray = [[1, 2],[3, 4, 5], [6, 7, 8, 9]];\n```\n\n我们需要的结果是：\n\n```js\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n### 解决方案1：使用[`concat()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat)和[`apply()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)\n\n```js\nvar myNewArray = [].concat.apply([], myArray);\n// [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n### 解决方案2：使用[`reduce()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#Flatten_an_array_of_arrays)\n\n```js\nvar myNewArray = myArray.reduce(function(prev, curr) {\n  return prev.concat(curr);\n});\n// [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n### 解决方案3：\n\n```js\nvar myNewArray3 = [];\nfor (var i = 0; i < myArray.length; ++i) {\n  for (var j = 0; j < myArray[i].length; ++j)\n    myNewArray3.push(myArray[i][j]);\n}\nconsole.log(myNewArray3);\n// [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n在[这里](https://jsbin.com/qeqicu/edit?js,console)看一下三种逻辑的实际作用。\n\n### 方案四：使用 ES6 的[展开运算符](https://developer.mozilla.org/zh－CN/docs/Web/JavaScript/Reference/Operators/Spread_operator)\n\n```js\nvar myNewArray4 = [].concat(...myArray);\nconsole.log(myNewArray4);\n// [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n在[这里](https://jsbin.com/janana/edit?js,console) 查看这四种方法\n\n对于无限嵌套的数组请使用 Lodash 的 [flattenDeep()](https://lodash.com/docs#flattenDeep)。\n\n如果你担心性能问题的话，[这里](http://jsperf.com/flatten-an-array-loop-vs-reduce/6) 有一个测试让你确认他们是如何执行的。\n\n对于较大的数组试一下Underscore的[flatten()](https://github.com/jashkenas/underscore/blob/master/underscore.js#L501).\n\n如果你对性能好奇，[这里](http://jsperf.com/flatten-an-array-loop-vs-reduce/6)有一个测试。","source":"_posts/javascript/2016-02-07-flattening-multidimensional-arrays-in-javascript.md","raw":"---\nlayout: post\n\ntitle: Javascript多维数组扁平化\ntip-number: 38\ntip-username: loverajoel\ntip-username-profile: https://www.twitter.com/loverajoel\ntip-tldr: 将多位数组转化为单一数组的三种不同方法。\ntip-writer-support: https://www.coinbase.com/loverajoel\n\n\nredirect_from:\n  - /zh_cn/flattening-multidimensional-arrays-in-javascript/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n下面是将多位数组转化为单一数组的三种不同方法。\n\n对于此数组：\n\n```js\nvar myArray = [[1, 2],[3, 4, 5], [6, 7, 8, 9]];\n```\n\n我们需要的结果是：\n\n```js\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n### 解决方案1：使用[`concat()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat)和[`apply()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)\n\n```js\nvar myNewArray = [].concat.apply([], myArray);\n// [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n### 解决方案2：使用[`reduce()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#Flatten_an_array_of_arrays)\n\n```js\nvar myNewArray = myArray.reduce(function(prev, curr) {\n  return prev.concat(curr);\n});\n// [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n### 解决方案3：\n\n```js\nvar myNewArray3 = [];\nfor (var i = 0; i < myArray.length; ++i) {\n  for (var j = 0; j < myArray[i].length; ++j)\n    myNewArray3.push(myArray[i][j]);\n}\nconsole.log(myNewArray3);\n// [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n在[这里](https://jsbin.com/qeqicu/edit?js,console)看一下三种逻辑的实际作用。\n\n### 方案四：使用 ES6 的[展开运算符](https://developer.mozilla.org/zh－CN/docs/Web/JavaScript/Reference/Operators/Spread_operator)\n\n```js\nvar myNewArray4 = [].concat(...myArray);\nconsole.log(myNewArray4);\n// [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n在[这里](https://jsbin.com/janana/edit?js,console) 查看这四种方法\n\n对于无限嵌套的数组请使用 Lodash 的 [flattenDeep()](https://lodash.com/docs#flattenDeep)。\n\n如果你担心性能问题的话，[这里](http://jsperf.com/flatten-an-array-loop-vs-reduce/6) 有一个测试让你确认他们是如何执行的。\n\n对于较大的数组试一下Underscore的[flatten()](https://github.com/jashkenas/underscore/blob/master/underscore.js#L501).\n\n如果你对性能好奇，[这里](http://jsperf.com/flatten-an-array-loop-vs-reduce/6)有一个测试。","slug":"javascript/2016-02-07-flattening-multidimensional-arrays-in-javascript","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqe00045lyfy5gwc8g42","content":"<p>下面是将多位数组转化为单一数组的三种不同方法。</p>\n<p>对于此数组：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myArray = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>],[<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]];</div></pre></td></tr></table></figure>\n<p>我们需要的结果是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</div></pre></td></tr></table></figure>\n<h3 id=\"解决方案1：使用concat-和apply\"><a href=\"#解决方案1：使用concat-和apply\" class=\"headerlink\" title=\"解决方案1：使用concat()和apply()\"></a>解决方案1：使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\" target=\"_blank\" rel=\"external\"><code>concat()</code></a>和<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"external\"><code>apply()</code></a></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myNewArray = [].concat.apply([], myArray);</div><div class=\"line\"><span class=\"comment\">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></div></pre></td></tr></table></figure>\n<h3 id=\"解决方案2：使用reduce\"><a href=\"#解决方案2：使用reduce\" class=\"headerlink\" title=\"解决方案2：使用reduce()\"></a>解决方案2：使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#Flatten_an_array_of_arrays\" target=\"_blank\" rel=\"external\"><code>reduce()</code></a></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myNewArray = myArray.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev, curr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> prev.concat(curr);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></div></pre></td></tr></table></figure>\n<h3 id=\"解决方案3：\"><a href=\"#解决方案3：\" class=\"headerlink\" title=\"解决方案3：\"></a>解决方案3：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myNewArray3 = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; myArray.length; ++i) &#123;</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; myArray[i].length; ++j)</div><div class=\"line\">    myNewArray3.push(myArray[i][j]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(myNewArray3);</div><div class=\"line\"><span class=\"comment\">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></div></pre></td></tr></table></figure>\n<p>在<a href=\"https://jsbin.com/qeqicu/edit?js,console\" target=\"_blank\" rel=\"external\">这里</a>看一下三种逻辑的实际作用。</p>\n<h3 id=\"方案四：使用-ES6-的展开运算符\"><a href=\"#方案四：使用-ES6-的展开运算符\" class=\"headerlink\" title=\"方案四：使用 ES6 的展开运算符\"></a>方案四：使用 ES6 的<a href=\"https://developer.mozilla.org/zh－CN/docs/Web/JavaScript/Reference/Operators/Spread_operator\" target=\"_blank\" rel=\"external\">展开运算符</a></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myNewArray4 = [].concat(...myArray);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(myNewArray4);</div><div class=\"line\"><span class=\"comment\">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></div></pre></td></tr></table></figure>\n<p>在<a href=\"https://jsbin.com/janana/edit?js,console\" target=\"_blank\" rel=\"external\">这里</a> 查看这四种方法</p>\n<p>对于无限嵌套的数组请使用 Lodash 的 <a href=\"https://lodash.com/docs#flattenDeep\" target=\"_blank\" rel=\"external\">flattenDeep()</a>。</p>\n<p>如果你担心性能问题的话，<a href=\"http://jsperf.com/flatten-an-array-loop-vs-reduce/6\" target=\"_blank\" rel=\"external\">这里</a> 有一个测试让你确认他们是如何执行的。</p>\n<p>对于较大的数组试一下Underscore的<a href=\"https://github.com/jashkenas/underscore/blob/master/underscore.js#L501\" target=\"_blank\" rel=\"external\">flatten()</a>.</p>\n<p>如果你对性能好奇，<a href=\"http://jsperf.com/flatten-an-array-loop-vs-reduce/6\" target=\"_blank\" rel=\"external\">这里</a>有一个测试。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>下面是将多位数组转化为单一数组的三种不同方法。</p>\n<p>对于此数组：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myArray = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>],[<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]];</div></pre></td></tr></table></figure>\n<p>我们需要的结果是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</div></pre></td></tr></table></figure>\n<h3 id=\"解决方案1：使用concat-和apply\"><a href=\"#解决方案1：使用concat-和apply\" class=\"headerlink\" title=\"解决方案1：使用concat()和apply()\"></a>解决方案1：使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\" target=\"_blank\" rel=\"external\"><code>concat()</code></a>和<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"external\"><code>apply()</code></a></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myNewArray = [].concat.apply([], myArray);</div><div class=\"line\"><span class=\"comment\">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></div></pre></td></tr></table></figure>\n<h3 id=\"解决方案2：使用reduce\"><a href=\"#解决方案2：使用reduce\" class=\"headerlink\" title=\"解决方案2：使用reduce()\"></a>解决方案2：使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#Flatten_an_array_of_arrays\" target=\"_blank\" rel=\"external\"><code>reduce()</code></a></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myNewArray = myArray.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev, curr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> prev.concat(curr);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></div></pre></td></tr></table></figure>\n<h3 id=\"解决方案3：\"><a href=\"#解决方案3：\" class=\"headerlink\" title=\"解决方案3：\"></a>解决方案3：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myNewArray3 = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; myArray.length; ++i) &#123;</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; myArray[i].length; ++j)</div><div class=\"line\">    myNewArray3.push(myArray[i][j]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(myNewArray3);</div><div class=\"line\"><span class=\"comment\">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></div></pre></td></tr></table></figure>\n<p>在<a href=\"https://jsbin.com/qeqicu/edit?js,console\" target=\"_blank\" rel=\"external\">这里</a>看一下三种逻辑的实际作用。</p>\n<h3 id=\"方案四：使用-ES6-的展开运算符\"><a href=\"#方案四：使用-ES6-的展开运算符\" class=\"headerlink\" title=\"方案四：使用 ES6 的展开运算符\"></a>方案四：使用 ES6 的<a href=\"https://developer.mozilla.org/zh－CN/docs/Web/JavaScript/Reference/Operators/Spread_operator\" target=\"_blank\" rel=\"external\">展开运算符</a></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myNewArray4 = [].concat(...myArray);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(myNewArray4);</div><div class=\"line\"><span class=\"comment\">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></div></pre></td></tr></table></figure>\n<p>在<a href=\"https://jsbin.com/janana/edit?js,console\" target=\"_blank\" rel=\"external\">这里</a> 查看这四种方法</p>\n<p>对于无限嵌套的数组请使用 Lodash 的 <a href=\"https://lodash.com/docs#flattenDeep\" target=\"_blank\" rel=\"external\">flattenDeep()</a>。</p>\n<p>如果你担心性能问题的话，<a href=\"http://jsperf.com/flatten-an-array-loop-vs-reduce/6\" target=\"_blank\" rel=\"external\">这里</a> 有一个测试让你确认他们是如何执行的。</p>\n<p>对于较大的数组试一下Underscore的<a href=\"https://github.com/jashkenas/underscore/blob/master/underscore.js#L501\" target=\"_blank\" rel=\"external\">flatten()</a>.</p>\n<p>如果你对性能好奇，<a href=\"http://jsperf.com/flatten-an-array-loop-vs-reduce/6\" target=\"_blank\" rel=\"external\">这里</a>有一个测试。</p>\n"},{"layout":"post","title":"数组去重","tip-number":37,"tip-username":"danillouz","tip-username-profile":"https://www.twitter.com/danillouz","tip-tldr":"移除包含不同类型数据的数组中重复的元素。","redirect_from":["/zh_cn/deduplicate-an-array/"],"_content":"\n# 原始变量\n如果一个数组只包含原始变量，我们可以使用[`filter`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)和[`indexOf`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf)方法将其去重：\n\n```javascript\nvar deduped = [ 1, 1, 'a', 'a' ].filter(function (el, i, arr) {\n\treturn arr.indexOf(el) === i;\n});\n\nconsole.log(deduped); // [ 1, 'a' ]\n```\n\n## ES2015\n我们可以使用[箭头函数](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions)使写法更简明：\n\n```javascript\nvar deduped = [ 1, 1, 'a', 'a' ].filter( (el, i, arr) => arr.indexOf(el) === i);\n\nconsole.log(deduped); // [ 1, 'a' ]\n```\n\n但是根据[Sets](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set)和[`from`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from)方法的介绍，我们可以更简明的实现。\n\n```javascript\nvar deduped = Array.from( new Set([ 1, 1, 'a', 'a' ]) );\n\nconsole.log(deduped); // [ 1, 'a' ]\n```\n\n# Objects\n当元素为对象(Object)时，我们就不能用这种办法了，\n因为对象存储的是引用而原始变量存储的是值。\n\n```javascript\n1 === 1 // true\n\n'a' === 'a' // true\n\n{ a: 1 } === { a: 1 } // false\n```\n\n因此我们需要改变一下我们的实现方法，使用哈希表。\n\n```javascript\nfunction dedup(arr) {\n\tvar hashTable = {};\n\n\treturn arr.filter(function (el) {\n\t\tvar key = JSON.stringify(el);\n\t\tvar match = Boolean(hashTable[key]);\n\n\t\treturn (match ? false : hashTable[key] = true);\n\t});\n}\n\nvar deduped = dedup([\n\t{ a: 1 },\n\t{ a: 1 },\n\t[ 1, 2 ],\n\t[ 1, 2 ]\n]);\n\nconsole.log(deduped); // [ {a: 1}, [1, 2] ]\n```\n\n因为哈希表在Javascript里是一个简单的`Object`，它的`key`永远是`String`类型。这意味着我们不能区分字符串和数字表示的相同的值，如`1`和`'1'`。\n\n```javascript\nvar hashTable = {};\n\nhashTable[1] = true;\nhashTable['1'] = true;\n\nconsole.log(hashTable); // { '1': true }\n```\n\n然而，因为我们使用的[`JSON.stringify`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify)，`String`类型的`key`\n将会被存储为一个字符串值，这样`hashTable`的`key`就唯一了。\n\n```javascript\nvar hashTable = {};\n\nhashTable[JSON.stringify(1)] = true;\nhashTable[JSON.stringify('1')] = true;\n\nconsole.log(hashTable); // { '1': true, '\\'1\\'': true }\n```\n\n这意味着相同的值，但不同类型的元素，将以原来的格式保留。\n\n```javascript\nvar deduped = dedup([\n\t{ a: 1 },\n\t{ a: 1 },\n\t[ 1, 2 ],\n\t[ 1, 2 ],\n\t1,\n\t1,\n\t'1',\n\t'1'\n]);\n\nconsole.log(deduped); // [ {a: 1}, [1, 2], 1, '1' ]\n```\n\n# 阅读材料\n## 函数\n* [`filter`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n* [`indexOf`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf)\n* [`from`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from)\n* [`JSON.stringify`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify)\n\n## ES2015\n* [箭头函数](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions)\n* [Set](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set)\n\n## Stack overflow\n* [remove duplicates from array](http://stackoverflow.com/questions/9229645/remove-duplicates-from-javascript-array/9229821#9229821)\n","source":"_posts/javascript/2016-02-06-deduplicate-an-array.md","raw":"---\nlayout: post\n\ntitle: 数组去重\ntip-number: 37\ntip-username: danillouz\ntip-username-profile: https://www.twitter.com/danillouz\ntip-tldr: 移除包含不同类型数据的数组中重复的元素。\n\n\nredirect_from:\n  - /zh_cn/deduplicate-an-array/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n# 原始变量\n如果一个数组只包含原始变量，我们可以使用[`filter`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)和[`indexOf`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf)方法将其去重：\n\n```javascript\nvar deduped = [ 1, 1, 'a', 'a' ].filter(function (el, i, arr) {\n\treturn arr.indexOf(el) === i;\n});\n\nconsole.log(deduped); // [ 1, 'a' ]\n```\n\n## ES2015\n我们可以使用[箭头函数](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions)使写法更简明：\n\n```javascript\nvar deduped = [ 1, 1, 'a', 'a' ].filter( (el, i, arr) => arr.indexOf(el) === i);\n\nconsole.log(deduped); // [ 1, 'a' ]\n```\n\n但是根据[Sets](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set)和[`from`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from)方法的介绍，我们可以更简明的实现。\n\n```javascript\nvar deduped = Array.from( new Set([ 1, 1, 'a', 'a' ]) );\n\nconsole.log(deduped); // [ 1, 'a' ]\n```\n\n# Objects\n当元素为对象(Object)时，我们就不能用这种办法了，\n因为对象存储的是引用而原始变量存储的是值。\n\n```javascript\n1 === 1 // true\n\n'a' === 'a' // true\n\n{ a: 1 } === { a: 1 } // false\n```\n\n因此我们需要改变一下我们的实现方法，使用哈希表。\n\n```javascript\nfunction dedup(arr) {\n\tvar hashTable = {};\n\n\treturn arr.filter(function (el) {\n\t\tvar key = JSON.stringify(el);\n\t\tvar match = Boolean(hashTable[key]);\n\n\t\treturn (match ? false : hashTable[key] = true);\n\t});\n}\n\nvar deduped = dedup([\n\t{ a: 1 },\n\t{ a: 1 },\n\t[ 1, 2 ],\n\t[ 1, 2 ]\n]);\n\nconsole.log(deduped); // [ {a: 1}, [1, 2] ]\n```\n\n因为哈希表在Javascript里是一个简单的`Object`，它的`key`永远是`String`类型。这意味着我们不能区分字符串和数字表示的相同的值，如`1`和`'1'`。\n\n```javascript\nvar hashTable = {};\n\nhashTable[1] = true;\nhashTable['1'] = true;\n\nconsole.log(hashTable); // { '1': true }\n```\n\n然而，因为我们使用的[`JSON.stringify`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify)，`String`类型的`key`\n将会被存储为一个字符串值，这样`hashTable`的`key`就唯一了。\n\n```javascript\nvar hashTable = {};\n\nhashTable[JSON.stringify(1)] = true;\nhashTable[JSON.stringify('1')] = true;\n\nconsole.log(hashTable); // { '1': true, '\\'1\\'': true }\n```\n\n这意味着相同的值，但不同类型的元素，将以原来的格式保留。\n\n```javascript\nvar deduped = dedup([\n\t{ a: 1 },\n\t{ a: 1 },\n\t[ 1, 2 ],\n\t[ 1, 2 ],\n\t1,\n\t1,\n\t'1',\n\t'1'\n]);\n\nconsole.log(deduped); // [ {a: 1}, [1, 2], 1, '1' ]\n```\n\n# 阅读材料\n## 函数\n* [`filter`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n* [`indexOf`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf)\n* [`from`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from)\n* [`JSON.stringify`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify)\n\n## ES2015\n* [箭头函数](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions)\n* [Set](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set)\n\n## Stack overflow\n* [remove duplicates from array](http://stackoverflow.com/questions/9229645/remove-duplicates-from-javascript-array/9229821#9229821)\n","slug":"javascript/2016-02-06-deduplicate-an-array","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqe20047lyfydvfw8oam","content":"<h1 id=\"原始变量\"><a href=\"#原始变量\" class=\"headerlink\" title=\"原始变量\"></a>原始变量</h1><p>如果一个数组只包含原始变量，我们可以使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" target=\"_blank\" rel=\"external\"><code>filter</code></a>和<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\" target=\"_blank\" rel=\"external\"><code>indexOf</code></a>方法将其去重：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> deduped = [ <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'a'</span> ].filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, i, arr</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> arr.indexOf(el) === i;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(deduped); <span class=\"comment\">// [ 1, 'a' ]</span></div></pre></td></tr></table></figure>\n<h2 id=\"ES2015\"><a href=\"#ES2015\" class=\"headerlink\" title=\"ES2015\"></a>ES2015</h2><p>我们可以使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"external\">箭头函数</a>使写法更简明：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> deduped = [ <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'a'</span> ].filter( <span class=\"function\">(<span class=\"params\">el, i, arr</span>) =&gt;</span> arr.indexOf(el) === i);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(deduped); <span class=\"comment\">// [ 1, 'a' ]</span></div></pre></td></tr></table></figure>\n<p>但是根据<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set\" target=\"_blank\" rel=\"external\">Sets</a>和<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from\" target=\"_blank\" rel=\"external\"><code>from</code></a>方法的介绍，我们可以更简明的实现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> deduped = <span class=\"built_in\">Array</span>.from( <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([ <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'a'</span> ]) );</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(deduped); <span class=\"comment\">// [ 1, 'a' ]</span></div></pre></td></tr></table></figure>\n<h1 id=\"Objects\"><a href=\"#Objects\" class=\"headerlink\" title=\"Objects\"></a>Objects</h1><p>当元素为对象(Object)时，我们就不能用这种办法了，<br>因为对象存储的是引用而原始变量存储的是值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span> === <span class=\"number\">1</span> <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">'a'</span> === <span class=\"string\">'a'</span> <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">&#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125; === &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125; <span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n<p>因此我们需要改变一下我们的实现方法，使用哈希表。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dedup</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> hashTable = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> arr.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> key = <span class=\"built_in\">JSON</span>.stringify(el);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> match = <span class=\"built_in\">Boolean</span>(hashTable[key]);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (match ? <span class=\"literal\">false</span> : hashTable[key] = <span class=\"literal\">true</span>);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> deduped = dedup([</div><div class=\"line\">\t&#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;,</div><div class=\"line\">\t&#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;,</div><div class=\"line\">\t[ <span class=\"number\">1</span>, <span class=\"number\">2</span> ],</div><div class=\"line\">\t[ <span class=\"number\">1</span>, <span class=\"number\">2</span> ]</div><div class=\"line\">]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(deduped); <span class=\"comment\">// [ &#123;a: 1&#125;, [1, 2] ]</span></div></pre></td></tr></table></figure>\n<p>因为哈希表在Javascript里是一个简单的<code>Object</code>，它的<code>key</code>永远是<code>String</code>类型。这意味着我们不能区分字符串和数字表示的相同的值，如<code>1</code>和<code>&#39;1&#39;</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hashTable = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">hashTable[<span class=\"number\">1</span>] = <span class=\"literal\">true</span>;</div><div class=\"line\">hashTable[<span class=\"string\">'1'</span>] = <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(hashTable); <span class=\"comment\">// &#123; '1': true &#125;</span></div></pre></td></tr></table></figure>\n<p>然而，因为我们使用的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\" target=\"_blank\" rel=\"external\"><code>JSON.stringify</code></a>，<code>String</code>类型的<code>key</code><br>将会被存储为一个字符串值，这样<code>hashTable</code>的<code>key</code>就唯一了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hashTable = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">hashTable[<span class=\"built_in\">JSON</span>.stringify(<span class=\"number\">1</span>)] = <span class=\"literal\">true</span>;</div><div class=\"line\">hashTable[<span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">'1'</span>)] = <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(hashTable); <span class=\"comment\">// &#123; '1': true, '\\'1\\'': true &#125;</span></div></pre></td></tr></table></figure>\n<p>这意味着相同的值，但不同类型的元素，将以原来的格式保留。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> deduped = dedup([</div><div class=\"line\">\t&#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;,</div><div class=\"line\">\t&#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;,</div><div class=\"line\">\t[ <span class=\"number\">1</span>, <span class=\"number\">2</span> ],</div><div class=\"line\">\t[ <span class=\"number\">1</span>, <span class=\"number\">2</span> ],</div><div class=\"line\">\t<span class=\"number\">1</span>,</div><div class=\"line\">\t<span class=\"number\">1</span>,</div><div class=\"line\">\t<span class=\"string\">'1'</span>,</div><div class=\"line\">\t<span class=\"string\">'1'</span></div><div class=\"line\">]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(deduped); <span class=\"comment\">// [ &#123;a: 1&#125;, [1, 2], 1, '1' ]</span></div></pre></td></tr></table></figure>\n<h1 id=\"阅读材料\"><a href=\"#阅读材料\" class=\"headerlink\" title=\"阅读材料\"></a>阅读材料</h1><h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" target=\"_blank\" rel=\"external\"><code>filter</code></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\" target=\"_blank\" rel=\"external\"><code>indexOf</code></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from\" target=\"_blank\" rel=\"external\"><code>from</code></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\" target=\"_blank\" rel=\"external\"><code>JSON.stringify</code></a></li>\n</ul>\n<h2 id=\"ES2015-1\"><a href=\"#ES2015-1\" class=\"headerlink\" title=\"ES2015\"></a>ES2015</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"external\">箭头函数</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set\" target=\"_blank\" rel=\"external\">Set</a></li>\n</ul>\n<h2 id=\"Stack-overflow\"><a href=\"#Stack-overflow\" class=\"headerlink\" title=\"Stack overflow\"></a>Stack overflow</h2><ul>\n<li><a href=\"http://stackoverflow.com/questions/9229645/remove-duplicates-from-javascript-array/9229821#9229821\" target=\"_blank\" rel=\"external\">remove duplicates from array</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"原始变量\"><a href=\"#原始变量\" class=\"headerlink\" title=\"原始变量\"></a>原始变量</h1><p>如果一个数组只包含原始变量，我们可以使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" target=\"_blank\" rel=\"external\"><code>filter</code></a>和<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\" target=\"_blank\" rel=\"external\"><code>indexOf</code></a>方法将其去重：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> deduped = [ <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'a'</span> ].filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, i, arr</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> arr.indexOf(el) === i;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(deduped); <span class=\"comment\">// [ 1, 'a' ]</span></div></pre></td></tr></table></figure>\n<h2 id=\"ES2015\"><a href=\"#ES2015\" class=\"headerlink\" title=\"ES2015\"></a>ES2015</h2><p>我们可以使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"external\">箭头函数</a>使写法更简明：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> deduped = [ <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'a'</span> ].filter( <span class=\"function\">(<span class=\"params\">el, i, arr</span>) =&gt;</span> arr.indexOf(el) === i);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(deduped); <span class=\"comment\">// [ 1, 'a' ]</span></div></pre></td></tr></table></figure>\n<p>但是根据<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set\" target=\"_blank\" rel=\"external\">Sets</a>和<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from\" target=\"_blank\" rel=\"external\"><code>from</code></a>方法的介绍，我们可以更简明的实现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> deduped = <span class=\"built_in\">Array</span>.from( <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([ <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'a'</span> ]) );</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(deduped); <span class=\"comment\">// [ 1, 'a' ]</span></div></pre></td></tr></table></figure>\n<h1 id=\"Objects\"><a href=\"#Objects\" class=\"headerlink\" title=\"Objects\"></a>Objects</h1><p>当元素为对象(Object)时，我们就不能用这种办法了，<br>因为对象存储的是引用而原始变量存储的是值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span> === <span class=\"number\">1</span> <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">'a'</span> === <span class=\"string\">'a'</span> <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">&#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125; === &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125; <span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n<p>因此我们需要改变一下我们的实现方法，使用哈希表。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dedup</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> hashTable = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> arr.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> key = <span class=\"built_in\">JSON</span>.stringify(el);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> match = <span class=\"built_in\">Boolean</span>(hashTable[key]);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (match ? <span class=\"literal\">false</span> : hashTable[key] = <span class=\"literal\">true</span>);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> deduped = dedup([</div><div class=\"line\">\t&#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;,</div><div class=\"line\">\t&#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;,</div><div class=\"line\">\t[ <span class=\"number\">1</span>, <span class=\"number\">2</span> ],</div><div class=\"line\">\t[ <span class=\"number\">1</span>, <span class=\"number\">2</span> ]</div><div class=\"line\">]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(deduped); <span class=\"comment\">// [ &#123;a: 1&#125;, [1, 2] ]</span></div></pre></td></tr></table></figure>\n<p>因为哈希表在Javascript里是一个简单的<code>Object</code>，它的<code>key</code>永远是<code>String</code>类型。这意味着我们不能区分字符串和数字表示的相同的值，如<code>1</code>和<code>&#39;1&#39;</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hashTable = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">hashTable[<span class=\"number\">1</span>] = <span class=\"literal\">true</span>;</div><div class=\"line\">hashTable[<span class=\"string\">'1'</span>] = <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(hashTable); <span class=\"comment\">// &#123; '1': true &#125;</span></div></pre></td></tr></table></figure>\n<p>然而，因为我们使用的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\" target=\"_blank\" rel=\"external\"><code>JSON.stringify</code></a>，<code>String</code>类型的<code>key</code><br>将会被存储为一个字符串值，这样<code>hashTable</code>的<code>key</code>就唯一了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hashTable = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">hashTable[<span class=\"built_in\">JSON</span>.stringify(<span class=\"number\">1</span>)] = <span class=\"literal\">true</span>;</div><div class=\"line\">hashTable[<span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">'1'</span>)] = <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(hashTable); <span class=\"comment\">// &#123; '1': true, '\\'1\\'': true &#125;</span></div></pre></td></tr></table></figure>\n<p>这意味着相同的值，但不同类型的元素，将以原来的格式保留。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> deduped = dedup([</div><div class=\"line\">\t&#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;,</div><div class=\"line\">\t&#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;,</div><div class=\"line\">\t[ <span class=\"number\">1</span>, <span class=\"number\">2</span> ],</div><div class=\"line\">\t[ <span class=\"number\">1</span>, <span class=\"number\">2</span> ],</div><div class=\"line\">\t<span class=\"number\">1</span>,</div><div class=\"line\">\t<span class=\"number\">1</span>,</div><div class=\"line\">\t<span class=\"string\">'1'</span>,</div><div class=\"line\">\t<span class=\"string\">'1'</span></div><div class=\"line\">]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(deduped); <span class=\"comment\">// [ &#123;a: 1&#125;, [1, 2], 1, '1' ]</span></div></pre></td></tr></table></figure>\n<h1 id=\"阅读材料\"><a href=\"#阅读材料\" class=\"headerlink\" title=\"阅读材料\"></a>阅读材料</h1><h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" target=\"_blank\" rel=\"external\"><code>filter</code></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\" target=\"_blank\" rel=\"external\"><code>indexOf</code></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from\" target=\"_blank\" rel=\"external\"><code>from</code></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\" target=\"_blank\" rel=\"external\"><code>JSON.stringify</code></a></li>\n</ul>\n<h2 id=\"ES2015-1\"><a href=\"#ES2015-1\" class=\"headerlink\" title=\"ES2015\"></a>ES2015</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"external\">箭头函数</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set\" target=\"_blank\" rel=\"external\">Set</a></li>\n</ul>\n<h2 id=\"Stack-overflow\"><a href=\"#Stack-overflow\" class=\"headerlink\" title=\"Stack overflow\"></a>Stack overflow</h2><ul>\n<li><a href=\"http://stackoverflow.com/questions/9229645/remove-duplicates-from-javascript-array/9229821#9229821\" target=\"_blank\" rel=\"external\">remove duplicates from array</a></li>\n</ul>\n"},{"layout":"post","title":"使用JSON.Stringify","tip-number":40,"tip-username":"vamshisuram","tip-username-profile":"https://github.com/vamshisuram","tip-tldr":"将JSON对象的参数选择性地生成字符串。","redirect_from":["/zh_cn/using-json-stringify/"],"_content":"\n假如有一个对象具有参数\"prop1\", \"prop2\", \"prop3\"。\n我们可以通过传递 __附加参数__ 给 __JSON.stringify__ 来选择性地将参数生成字符串，像这样：\n\n```javascript\nvar obj = {\n    'prop1': 'value1',\n    'prop2': 'value2',\n    'prop3': 'value3'\n};\n\nvar selectedProperties = ['prop1', 'prop2'];\n\nvar str = JSON.stringify(obj, selectedProperties);\n\n// str\n// {\"prop1\":\"value1\",\"prop2\":\"value2\"}\n\n```\n\n __\"str\"__ 将只包含选择的参数。\n\n除了传递数组，我们也可以传递函数。\n\n```javascript\n\nfunction selectedProperties(key, val) {\n    // the first val will be the entire object, key is empty string\n    if (!key) {\n        return val;\n    }\n\n    if (key === 'prop1' || key === 'prop2') {\n        return val;\n    }\n\n    return;\n}\n```\n\n最后一个参数，可以修改生成字符串的方式。\n\n```javascript\nvar str = JSON.stringify(obj, selectedProperties, '\\t\\t');\n\n/* str output with double tabs in every line.\n{\n        \"prop1\": \"value1\",\n        \"prop2\": \"value2\"\n}\n*/\n\n```\n\n","source":"_posts/javascript/2016-02-09-using-json-stringify.md","raw":"---\nlayout: post\n\ntitle: 使用JSON.Stringify\ntip-number: 40\ntip-username: vamshisuram\ntip-username-profile: https://github.com/vamshisuram\ntip-tldr: 将JSON对象的参数选择性地生成字符串。\n\n\nredirect_from:\n  - /zh_cn/using-json-stringify/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n假如有一个对象具有参数\"prop1\", \"prop2\", \"prop3\"。\n我们可以通过传递 __附加参数__ 给 __JSON.stringify__ 来选择性地将参数生成字符串，像这样：\n\n```javascript\nvar obj = {\n    'prop1': 'value1',\n    'prop2': 'value2',\n    'prop3': 'value3'\n};\n\nvar selectedProperties = ['prop1', 'prop2'];\n\nvar str = JSON.stringify(obj, selectedProperties);\n\n// str\n// {\"prop1\":\"value1\",\"prop2\":\"value2\"}\n\n```\n\n __\"str\"__ 将只包含选择的参数。\n\n除了传递数组，我们也可以传递函数。\n\n```javascript\n\nfunction selectedProperties(key, val) {\n    // the first val will be the entire object, key is empty string\n    if (!key) {\n        return val;\n    }\n\n    if (key === 'prop1' || key === 'prop2') {\n        return val;\n    }\n\n    return;\n}\n```\n\n最后一个参数，可以修改生成字符串的方式。\n\n```javascript\nvar str = JSON.stringify(obj, selectedProperties, '\\t\\t');\n\n/* str output with double tabs in every line.\n{\n        \"prop1\": \"value1\",\n        \"prop2\": \"value2\"\n}\n*/\n\n```\n\n","slug":"javascript/2016-02-09-using-json-stringify","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqe30049lyfy21oxal19","content":"<p>假如有一个对象具有参数”prop1”, “prop2”, “prop3”。<br>我们可以通过传递 <strong>附加参数</strong> 给 <strong>JSON.stringify</strong> 来选择性地将参数生成字符串，像这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"string\">'prop1'</span>: <span class=\"string\">'value1'</span>,</div><div class=\"line\">    <span class=\"string\">'prop2'</span>: <span class=\"string\">'value2'</span>,</div><div class=\"line\">    <span class=\"string\">'prop3'</span>: <span class=\"string\">'value3'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> selectedProperties = [<span class=\"string\">'prop1'</span>, <span class=\"string\">'prop2'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"built_in\">JSON</span>.stringify(obj, selectedProperties);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// str</span></div><div class=\"line\"><span class=\"comment\">// &#123;\"prop1\":\"value1\",\"prop2\":\"value2\"&#125;</span></div></pre></td></tr></table></figure>\n<p> <strong>“str”</strong> 将只包含选择的参数。</p>\n<p>除了传递数组，我们也可以传递函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selectedProperties</span>(<span class=\"params\">key, val</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// the first val will be the entire object, key is empty string</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!key) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> val;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (key === <span class=\"string\">'prop1'</span> || key === <span class=\"string\">'prop2'</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> val;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后一个参数，可以修改生成字符串的方式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"built_in\">JSON</span>.stringify(obj, selectedProperties, <span class=\"string\">'\\t\\t'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* str output with double tabs in every line.</span></div><div class=\"line\">&#123;</div><div class=\"line\">        \"prop1\": \"value1\",</div><div class=\"line\">        \"prop2\": \"value2\"</div><div class=\"line\">&#125;</div><div class=\"line\">*/</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>假如有一个对象具有参数”prop1”, “prop2”, “prop3”。<br>我们可以通过传递 <strong>附加参数</strong> 给 <strong>JSON.stringify</strong> 来选择性地将参数生成字符串，像这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"string\">'prop1'</span>: <span class=\"string\">'value1'</span>,</div><div class=\"line\">    <span class=\"string\">'prop2'</span>: <span class=\"string\">'value2'</span>,</div><div class=\"line\">    <span class=\"string\">'prop3'</span>: <span class=\"string\">'value3'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> selectedProperties = [<span class=\"string\">'prop1'</span>, <span class=\"string\">'prop2'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"built_in\">JSON</span>.stringify(obj, selectedProperties);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// str</span></div><div class=\"line\"><span class=\"comment\">// &#123;\"prop1\":\"value1\",\"prop2\":\"value2\"&#125;</span></div></pre></td></tr></table></figure>\n<p> <strong>“str”</strong> 将只包含选择的参数。</p>\n<p>除了传递数组，我们也可以传递函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selectedProperties</span>(<span class=\"params\">key, val</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// the first val will be the entire object, key is empty string</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!key) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> val;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (key === <span class=\"string\">'prop1'</span> || key === <span class=\"string\">'prop2'</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> val;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后一个参数，可以修改生成字符串的方式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"built_in\">JSON</span>.stringify(obj, selectedProperties, <span class=\"string\">'\\t\\t'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* str output with double tabs in every line.</span></div><div class=\"line\">&#123;</div><div class=\"line\">        \"prop1\": \"value1\",</div><div class=\"line\">        \"prop2\": \"value2\"</div><div class=\"line\">&#125;</div><div class=\"line\">*/</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Javascript高级特性","tip-number":39,"tip-username":"mallowigi","tip-username-profile":"https://github.com/mallowigi","tip-tldr":"怎样给一个对象添加私有参数、`getter`或`setter`。","redirect_from":["/zh_cn/advanced-properties/"],"_content":"\n在Javascript里配置对象属性是可以实现的，比如将一个参数设为伪私有或者只读。这个特性从ECMAScript 5.1开始就可以使用了，因此近来的浏览器都是支持的。\n要实现这些功能，你需要使用`Object`的原型方法`defineProperty`，像这样：\n\n```js\nvar a = {};\nObject.defineProperty(a, 'readonly', {\n  value: 15,\n  writable: false\n});\n\na.readonly = 20;\nconsole.log(a.readonly); // 15\n```\n\n语法如下：\n\n```js\nObject.defineProperty(dest, propName, options);\n```\n\n或者定义多个：\n\n```js\nObject.defineProperties(dest, {\n  propA: optionsA,\n  propB: optionsB, //...\n});\n```\n\n`options`包含如下的属性：\n- *value*: 如果参数不是`getter`（请看下文），`value`是必须的。`{a: 12}` === `Object.defineProperty(obj, 'a', {value: 12})`\n- *writable*: 将参数设为只读。需要注意的是如果参数是嵌套对象，它的元素仍是能可修改的。\n- *enumerable*: 将参数设为隐藏。这意味着`for ... of`循环和`stringify`的结果里不会包含这些参数，但是这个参数还是存在的。提示：这并不意味着参数是私有的！他依旧可以从外界访问，只是意味着不会被打印。\n- *configurable*: 将属性设置为不能更改，比如：防止参数被删除或重新定义。如果此对象是一个嵌套对象，他的参数依旧是可配置的。\n\n\n所以如果想创建私有静态变量，你可以这样定义：\n\n```js\nObject.defineProperty(obj, 'myPrivateProp', {value: val, enumerable: false, writable: false, configurable: false});\n```\n\n除了配置属性，由于`defineProperty`第二个参数是字符串，所以允许我们定义*动态变量(defineProperty)*。例如，我们可以说我们要根据一些外部配置创建一个属性：\n\n```js\n\nvar obj = {\n  getTypeFromExternal(): true // illegal in ES5.1\n};\n\nObject.defineProperty(obj, getTypeFromExternal(), {value: true}); // ok\n\n// For the example sake, ES6 introduced a new syntax:\nvar obj = {\n  [getTypeFromExternal()]: true\n};\n```\n\n还没有结束！高级特性允许我们创建**getter**和**setter**，就像其他面向对象(OOP)语言！这种情况下，我们不能使用`writable`、`enumerable`和`configurable`参数，而是：\n\n```js\nfunction Foobar () {\n  var _foo; //  true private property\n\n  Object.defineProperty(obj, 'foo', {\n    get: function () { return _foo; }\n    set: function (value) { _foo = value }\n  });\n\n};\n\nvar foobar = new Foobar();\nfoobar.foo; // 15\nfoobar.foo = 20; // _foo = 20\n```\n\n除了封装与先进的访问器这些明显的优点，你还发现我们并没有“调用”`getter`，而是不需要使用小括号直接“取得”了属性！这太棒了！例如，我们可以想象我们有一个多层嵌套对象，像这样：\n\n```js\nvar obj = {a: {b: {c: [{d: 10}, {d: 20}] } } };\n```\n\n现在我们不需要调用`a.b.c[0].d`（其中某个属性可能是`undefined`且抛出错误），我们可以创建一个别名：\n\n```js\nObject.defineProperty(obj, 'firstD', {\n  get: function () { return a && a.b && a.b.c && a.b.c[0] && a.b.c[0].d }\n});\n\nconsole.log(obj.firstD); // 10\n```\n\n### 提示\n\n如果你定义了`getter`而没有定义`setter`却仍要给它赋值，你将会得到一个错误。这在使用像`$.extend`或`_.merge`这样的辅助方法时是尤为重要的。要小心！\n\n### 链接\n\n- [defineProperty](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)\n- [Defining properties in JavaScript](http://bdadam.com/blog/defining-properties-in-javascript.html)\n","source":"_posts/javascript/2016-02-08-advanced-properties.md","raw":"---\nlayout: post\n\ntitle: Javascript高级特性\ntip-number: 39\ntip-username: mallowigi\ntip-username-profile: https://github.com/mallowigi\ntip-tldr: 怎样给一个对象添加私有参数、`getter`或`setter`。\n\n\nredirect_from:\n  - /zh_cn/advanced-properties/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n在Javascript里配置对象属性是可以实现的，比如将一个参数设为伪私有或者只读。这个特性从ECMAScript 5.1开始就可以使用了，因此近来的浏览器都是支持的。\n要实现这些功能，你需要使用`Object`的原型方法`defineProperty`，像这样：\n\n```js\nvar a = {};\nObject.defineProperty(a, 'readonly', {\n  value: 15,\n  writable: false\n});\n\na.readonly = 20;\nconsole.log(a.readonly); // 15\n```\n\n语法如下：\n\n```js\nObject.defineProperty(dest, propName, options);\n```\n\n或者定义多个：\n\n```js\nObject.defineProperties(dest, {\n  propA: optionsA,\n  propB: optionsB, //...\n});\n```\n\n`options`包含如下的属性：\n- *value*: 如果参数不是`getter`（请看下文），`value`是必须的。`{a: 12}` === `Object.defineProperty(obj, 'a', {value: 12})`\n- *writable*: 将参数设为只读。需要注意的是如果参数是嵌套对象，它的元素仍是能可修改的。\n- *enumerable*: 将参数设为隐藏。这意味着`for ... of`循环和`stringify`的结果里不会包含这些参数，但是这个参数还是存在的。提示：这并不意味着参数是私有的！他依旧可以从外界访问，只是意味着不会被打印。\n- *configurable*: 将属性设置为不能更改，比如：防止参数被删除或重新定义。如果此对象是一个嵌套对象，他的参数依旧是可配置的。\n\n\n所以如果想创建私有静态变量，你可以这样定义：\n\n```js\nObject.defineProperty(obj, 'myPrivateProp', {value: val, enumerable: false, writable: false, configurable: false});\n```\n\n除了配置属性，由于`defineProperty`第二个参数是字符串，所以允许我们定义*动态变量(defineProperty)*。例如，我们可以说我们要根据一些外部配置创建一个属性：\n\n```js\n\nvar obj = {\n  getTypeFromExternal(): true // illegal in ES5.1\n};\n\nObject.defineProperty(obj, getTypeFromExternal(), {value: true}); // ok\n\n// For the example sake, ES6 introduced a new syntax:\nvar obj = {\n  [getTypeFromExternal()]: true\n};\n```\n\n还没有结束！高级特性允许我们创建**getter**和**setter**，就像其他面向对象(OOP)语言！这种情况下，我们不能使用`writable`、`enumerable`和`configurable`参数，而是：\n\n```js\nfunction Foobar () {\n  var _foo; //  true private property\n\n  Object.defineProperty(obj, 'foo', {\n    get: function () { return _foo; }\n    set: function (value) { _foo = value }\n  });\n\n};\n\nvar foobar = new Foobar();\nfoobar.foo; // 15\nfoobar.foo = 20; // _foo = 20\n```\n\n除了封装与先进的访问器这些明显的优点，你还发现我们并没有“调用”`getter`，而是不需要使用小括号直接“取得”了属性！这太棒了！例如，我们可以想象我们有一个多层嵌套对象，像这样：\n\n```js\nvar obj = {a: {b: {c: [{d: 10}, {d: 20}] } } };\n```\n\n现在我们不需要调用`a.b.c[0].d`（其中某个属性可能是`undefined`且抛出错误），我们可以创建一个别名：\n\n```js\nObject.defineProperty(obj, 'firstD', {\n  get: function () { return a && a.b && a.b.c && a.b.c[0] && a.b.c[0].d }\n});\n\nconsole.log(obj.firstD); // 10\n```\n\n### 提示\n\n如果你定义了`getter`而没有定义`setter`却仍要给它赋值，你将会得到一个错误。这在使用像`$.extend`或`_.merge`这样的辅助方法时是尤为重要的。要小心！\n\n### 链接\n\n- [defineProperty](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)\n- [Defining properties in JavaScript](http://bdadam.com/blog/defining-properties-in-javascript.html)\n","slug":"javascript/2016-02-08-advanced-properties","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqe6004blyfycpnhs5u0","content":"<p>在Javascript里配置对象属性是可以实现的，比如将一个参数设为伪私有或者只读。这个特性从ECMAScript 5.1开始就可以使用了，因此近来的浏览器都是支持的。<br>要实现这些功能，你需要使用<code>Object</code>的原型方法<code>defineProperty</code>，像这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(a, <span class=\"string\">'readonly'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">value</span>: <span class=\"number\">15</span>,</div><div class=\"line\">  <span class=\"attr\">writable</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">a.readonly = <span class=\"number\">20</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a.readonly); <span class=\"comment\">// 15</span></div></pre></td></tr></table></figure>\n<p>语法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(dest, propName, options);</div></pre></td></tr></table></figure>\n<p>或者定义多个：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperties(dest, &#123;</div><div class=\"line\">  <span class=\"attr\">propA</span>: optionsA,</div><div class=\"line\">  <span class=\"attr\">propB</span>: optionsB, <span class=\"comment\">//...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><code>options</code>包含如下的属性：</p>\n<ul>\n<li><em>value</em>: 如果参数不是<code>getter</code>（请看下文），<code>value</code>是必须的。<code>{a: 12}</code> === <code>Object.defineProperty(obj, &#39;a&#39;, {value: 12})</code></li>\n<li><em>writable</em>: 将参数设为只读。需要注意的是如果参数是嵌套对象，它的元素仍是能可修改的。</li>\n<li><em>enumerable</em>: 将参数设为隐藏。这意味着<code>for ... of</code>循环和<code>stringify</code>的结果里不会包含这些参数，但是这个参数还是存在的。提示：这并不意味着参数是私有的！他依旧可以从外界访问，只是意味着不会被打印。</li>\n<li><em>configurable</em>: 将属性设置为不能更改，比如：防止参数被删除或重新定义。如果此对象是一个嵌套对象，他的参数依旧是可配置的。</li>\n</ul>\n<p>所以如果想创建私有静态变量，你可以这样定义：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'myPrivateProp'</span>, &#123;<span class=\"attr\">value</span>: val, <span class=\"attr\">enumerable</span>: <span class=\"literal\">false</span>, <span class=\"attr\">writable</span>: <span class=\"literal\">false</span>, <span class=\"attr\">configurable</span>: <span class=\"literal\">false</span>&#125;);</div></pre></td></tr></table></figure>\n<p>除了配置属性，由于<code>defineProperty</code>第二个参数是字符串，所以允许我们定义<em>动态变量(defineProperty)</em>。例如，我们可以说我们要根据一些外部配置创建一个属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">  getTypeFromExternal(): <span class=\"literal\">true</span> <span class=\"comment\">// illegal in ES5.1</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, getTypeFromExternal(), &#123;<span class=\"attr\">value</span>: <span class=\"literal\">true</span>&#125;); <span class=\"comment\">// ok</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// For the example sake, ES6 introduced a new syntax:</span></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">  [getTypeFromExternal()]: <span class=\"literal\">true</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>还没有结束！高级特性允许我们创建<strong>getter</strong>和<strong>setter</strong>，就像其他面向对象(OOP)语言！这种情况下，我们不能使用<code>writable</code>、<code>enumerable</code>和<code>configurable</code>参数，而是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foobar</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> _foo; <span class=\"comment\">//  true private property</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'foo'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> _foo; &#125;</div><div class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123; _foo = value &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> foobar = <span class=\"keyword\">new</span> Foobar();</div><div class=\"line\">foobar.foo; <span class=\"comment\">// 15</span></div><div class=\"line\">foobar.foo = <span class=\"number\">20</span>; <span class=\"comment\">// _foo = 20</span></div></pre></td></tr></table></figure>\n<p>除了封装与先进的访问器这些明显的优点，你还发现我们并没有“调用”<code>getter</code>，而是不需要使用小括号直接“取得”了属性！这太棒了！例如，我们可以想象我们有一个多层嵌套对象，像这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">a</span>: &#123;<span class=\"attr\">b</span>: &#123;<span class=\"attr\">c</span>: [&#123;<span class=\"attr\">d</span>: <span class=\"number\">10</span>&#125;, &#123;<span class=\"attr\">d</span>: <span class=\"number\">20</span>&#125;] &#125; &#125; &#125;;</div></pre></td></tr></table></figure>\n<p>现在我们不需要调用<code>a.b.c[0].d</code>（其中某个属性可能是<code>undefined</code>且抛出错误），我们可以创建一个别名：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'firstD'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> a &amp;&amp; a.b &amp;&amp; a.b.c &amp;&amp; a.b.c[<span class=\"number\">0</span>] &amp;&amp; a.b.c[<span class=\"number\">0</span>].d &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj.firstD); <span class=\"comment\">// 10</span></div></pre></td></tr></table></figure>\n<h3 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h3><p>如果你定义了<code>getter</code>而没有定义<code>setter</code>却仍要给它赋值，你将会得到一个错误。这在使用像<code>$.extend</code>或<code>_.merge</code>这样的辅助方法时是尤为重要的。要小心！</p>\n<h3 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h3><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"external\">defineProperty</a></li>\n<li><a href=\"http://bdadam.com/blog/defining-properties-in-javascript.html\" target=\"_blank\" rel=\"external\">Defining properties in JavaScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>在Javascript里配置对象属性是可以实现的，比如将一个参数设为伪私有或者只读。这个特性从ECMAScript 5.1开始就可以使用了，因此近来的浏览器都是支持的。<br>要实现这些功能，你需要使用<code>Object</code>的原型方法<code>defineProperty</code>，像这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(a, <span class=\"string\">'readonly'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">value</span>: <span class=\"number\">15</span>,</div><div class=\"line\">  <span class=\"attr\">writable</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">a.readonly = <span class=\"number\">20</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a.readonly); <span class=\"comment\">// 15</span></div></pre></td></tr></table></figure>\n<p>语法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(dest, propName, options);</div></pre></td></tr></table></figure>\n<p>或者定义多个：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperties(dest, &#123;</div><div class=\"line\">  <span class=\"attr\">propA</span>: optionsA,</div><div class=\"line\">  <span class=\"attr\">propB</span>: optionsB, <span class=\"comment\">//...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><code>options</code>包含如下的属性：</p>\n<ul>\n<li><em>value</em>: 如果参数不是<code>getter</code>（请看下文），<code>value</code>是必须的。<code>{a: 12}</code> === <code>Object.defineProperty(obj, &#39;a&#39;, {value: 12})</code></li>\n<li><em>writable</em>: 将参数设为只读。需要注意的是如果参数是嵌套对象，它的元素仍是能可修改的。</li>\n<li><em>enumerable</em>: 将参数设为隐藏。这意味着<code>for ... of</code>循环和<code>stringify</code>的结果里不会包含这些参数，但是这个参数还是存在的。提示：这并不意味着参数是私有的！他依旧可以从外界访问，只是意味着不会被打印。</li>\n<li><em>configurable</em>: 将属性设置为不能更改，比如：防止参数被删除或重新定义。如果此对象是一个嵌套对象，他的参数依旧是可配置的。</li>\n</ul>\n<p>所以如果想创建私有静态变量，你可以这样定义：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'myPrivateProp'</span>, &#123;<span class=\"attr\">value</span>: val, <span class=\"attr\">enumerable</span>: <span class=\"literal\">false</span>, <span class=\"attr\">writable</span>: <span class=\"literal\">false</span>, <span class=\"attr\">configurable</span>: <span class=\"literal\">false</span>&#125;);</div></pre></td></tr></table></figure>\n<p>除了配置属性，由于<code>defineProperty</code>第二个参数是字符串，所以允许我们定义<em>动态变量(defineProperty)</em>。例如，我们可以说我们要根据一些外部配置创建一个属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">  getTypeFromExternal(): <span class=\"literal\">true</span> <span class=\"comment\">// illegal in ES5.1</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, getTypeFromExternal(), &#123;<span class=\"attr\">value</span>: <span class=\"literal\">true</span>&#125;); <span class=\"comment\">// ok</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// For the example sake, ES6 introduced a new syntax:</span></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">  [getTypeFromExternal()]: <span class=\"literal\">true</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>还没有结束！高级特性允许我们创建<strong>getter</strong>和<strong>setter</strong>，就像其他面向对象(OOP)语言！这种情况下，我们不能使用<code>writable</code>、<code>enumerable</code>和<code>configurable</code>参数，而是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foobar</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> _foo; <span class=\"comment\">//  true private property</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'foo'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> _foo; &#125;</div><div class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123; _foo = value &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> foobar = <span class=\"keyword\">new</span> Foobar();</div><div class=\"line\">foobar.foo; <span class=\"comment\">// 15</span></div><div class=\"line\">foobar.foo = <span class=\"number\">20</span>; <span class=\"comment\">// _foo = 20</span></div></pre></td></tr></table></figure>\n<p>除了封装与先进的访问器这些明显的优点，你还发现我们并没有“调用”<code>getter</code>，而是不需要使用小括号直接“取得”了属性！这太棒了！例如，我们可以想象我们有一个多层嵌套对象，像这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">a</span>: &#123;<span class=\"attr\">b</span>: &#123;<span class=\"attr\">c</span>: [&#123;<span class=\"attr\">d</span>: <span class=\"number\">10</span>&#125;, &#123;<span class=\"attr\">d</span>: <span class=\"number\">20</span>&#125;] &#125; &#125; &#125;;</div></pre></td></tr></table></figure>\n<p>现在我们不需要调用<code>a.b.c[0].d</code>（其中某个属性可能是<code>undefined</code>且抛出错误），我们可以创建一个别名：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'firstD'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> a &amp;&amp; a.b &amp;&amp; a.b.c &amp;&amp; a.b.c[<span class=\"number\">0</span>] &amp;&amp; a.b.c[<span class=\"number\">0</span>].d &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj.firstD); <span class=\"comment\">// 10</span></div></pre></td></tr></table></figure>\n<h3 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h3><p>如果你定义了<code>getter</code>而没有定义<code>setter</code>却仍要给它赋值，你将会得到一个错误。这在使用像<code>$.extend</code>或<code>_.merge</code>这样的辅助方法时是尤为重要的。要小心！</p>\n<h3 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h3><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"external\">defineProperty</a></li>\n<li><a href=\"http://bdadam.com/blog/defining-properties-in-javascript.html\" target=\"_blank\" rel=\"external\">Defining properties in JavaScript</a></li>\n</ul>\n"},{"layout":"post","title":"数组平均值与中值","tip-number":41,"tip-username":"soyuka","tip-username-profile":"https://github.com/soyuka","tip-tldr":"计算数组的平均值与中位数","redirect_from":["/zh_cn/array-average-and-median/"],"_content":"\n下面的例子都基于如下数组：\n\n```javascript\nlet values = [2, 56, 3, 41, 0, 4, 100, 23];\n```\n\n要取得平均值，我们需要将数字求和，然后除以`values`的数目，步骤如下：\n- 取得数组长度(length)\n- 求和(sum)\n- 取得平均值(`sum/length`)\n\n```javascript\nlet values = [2, 56, 3, 41, 0, 4, 100, 23];\nlet sum = values.reduce((previous, current) => current += previous);\nlet avg = sum / values.length;\n// avg = 28\n```\n\n或者：\n\n```javascript\nlet values = [2, 56, 3, 41, 0, 4, 100, 23];\nlet count = values.length;\nvalues = values.reduce((previous, current) => current += previous);\nvalues /= count;\n// avg = 28\n```\n\n取得中值的步骤是：\n- 将数组排序\n- 取得中位数\n\n```javascript\nlet values = [2, 56, 3, 41, 0, 4, 100, 23];\nvalues.sort((a, b) => a - b);\nlet lowMiddle = Math.floor((values.length - 1) / 2);\nlet highMiddle = Math.ceil((values.length - 1) / 2);\nlet median = (values[lowMiddle] + values[highMiddle]) / 2;\n// median = 13,5\n```\n\n或者使用[无符号右移](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Right_shift)操作符：\n\n```javascript\nlet values = [2, 56, 3, 41, 0, 4, 100, 23];\nvalues.sort((a, b) => a - b);\nlet median = (values[(values.length - 1) >> 1] + values[values.length >> 1]) / 2\n// median = 23\n```\n","source":"_posts/javascript/2016-02-10-array-average-and-median.md","raw":"---\nlayout: post\n\ntitle: 数组平均值与中值\ntip-number: 41\ntip-username: soyuka\ntip-username-profile: https://github.com/soyuka\ntip-tldr: 计算数组的平均值与中位数\n\n\nredirect_from:\n  - /zh_cn/array-average-and-median/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n下面的例子都基于如下数组：\n\n```javascript\nlet values = [2, 56, 3, 41, 0, 4, 100, 23];\n```\n\n要取得平均值，我们需要将数字求和，然后除以`values`的数目，步骤如下：\n- 取得数组长度(length)\n- 求和(sum)\n- 取得平均值(`sum/length`)\n\n```javascript\nlet values = [2, 56, 3, 41, 0, 4, 100, 23];\nlet sum = values.reduce((previous, current) => current += previous);\nlet avg = sum / values.length;\n// avg = 28\n```\n\n或者：\n\n```javascript\nlet values = [2, 56, 3, 41, 0, 4, 100, 23];\nlet count = values.length;\nvalues = values.reduce((previous, current) => current += previous);\nvalues /= count;\n// avg = 28\n```\n\n取得中值的步骤是：\n- 将数组排序\n- 取得中位数\n\n```javascript\nlet values = [2, 56, 3, 41, 0, 4, 100, 23];\nvalues.sort((a, b) => a - b);\nlet lowMiddle = Math.floor((values.length - 1) / 2);\nlet highMiddle = Math.ceil((values.length - 1) / 2);\nlet median = (values[lowMiddle] + values[highMiddle]) / 2;\n// median = 13,5\n```\n\n或者使用[无符号右移](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Right_shift)操作符：\n\n```javascript\nlet values = [2, 56, 3, 41, 0, 4, 100, 23];\nvalues.sort((a, b) => a - b);\nlet median = (values[(values.length - 1) >> 1] + values[values.length >> 1]) / 2\n// median = 23\n```\n","slug":"javascript/2016-02-10-array-average-and-median","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqe8004dlyfy8p5mm88k","content":"<p>下面的例子都基于如下数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> values = [<span class=\"number\">2</span>, <span class=\"number\">56</span>, <span class=\"number\">3</span>, <span class=\"number\">41</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">100</span>, <span class=\"number\">23</span>];</div></pre></td></tr></table></figure>\n<p>要取得平均值，我们需要将数字求和，然后除以<code>values</code>的数目，步骤如下：</p>\n<ul>\n<li>取得数组长度(length)</li>\n<li>求和(sum)</li>\n<li>取得平均值(<code>sum/length</code>)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> values = [<span class=\"number\">2</span>, <span class=\"number\">56</span>, <span class=\"number\">3</span>, <span class=\"number\">41</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">100</span>, <span class=\"number\">23</span>];</div><div class=\"line\"><span class=\"keyword\">let</span> sum = values.reduce(<span class=\"function\">(<span class=\"params\">previous, current</span>) =&gt;</span> current += previous);</div><div class=\"line\"><span class=\"keyword\">let</span> avg = sum / values.length;</div><div class=\"line\"><span class=\"comment\">// avg = 28</span></div></pre></td></tr></table></figure>\n<p>或者：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> values = [<span class=\"number\">2</span>, <span class=\"number\">56</span>, <span class=\"number\">3</span>, <span class=\"number\">41</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">100</span>, <span class=\"number\">23</span>];</div><div class=\"line\"><span class=\"keyword\">let</span> count = values.length;</div><div class=\"line\">values = values.reduce(<span class=\"function\">(<span class=\"params\">previous, current</span>) =&gt;</span> current += previous);</div><div class=\"line\">values /= count;</div><div class=\"line\"><span class=\"comment\">// avg = 28</span></div></pre></td></tr></table></figure>\n<p>取得中值的步骤是：</p>\n<ul>\n<li>将数组排序</li>\n<li>取得中位数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> values = [<span class=\"number\">2</span>, <span class=\"number\">56</span>, <span class=\"number\">3</span>, <span class=\"number\">41</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">100</span>, <span class=\"number\">23</span>];</div><div class=\"line\">values.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b);</div><div class=\"line\"><span class=\"keyword\">let</span> lowMiddle = <span class=\"built_in\">Math</span>.floor((values.length - <span class=\"number\">1</span>) / <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> highMiddle = <span class=\"built_in\">Math</span>.ceil((values.length - <span class=\"number\">1</span>) / <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> median = (values[lowMiddle] + values[highMiddle]) / <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"comment\">// median = 13,5</span></div></pre></td></tr></table></figure>\n<p>或者使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Right_shift\" target=\"_blank\" rel=\"external\">无符号右移</a>操作符：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> values = [<span class=\"number\">2</span>, <span class=\"number\">56</span>, <span class=\"number\">3</span>, <span class=\"number\">41</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">100</span>, <span class=\"number\">23</span>];</div><div class=\"line\">values.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b);</div><div class=\"line\"><span class=\"keyword\">let</span> median = (values[(values.length - <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">1</span>] + values[values.length &gt;&gt; <span class=\"number\">1</span>]) / <span class=\"number\">2</span></div><div class=\"line\"><span class=\"comment\">// median = 23</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>下面的例子都基于如下数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> values = [<span class=\"number\">2</span>, <span class=\"number\">56</span>, <span class=\"number\">3</span>, <span class=\"number\">41</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">100</span>, <span class=\"number\">23</span>];</div></pre></td></tr></table></figure>\n<p>要取得平均值，我们需要将数字求和，然后除以<code>values</code>的数目，步骤如下：</p>\n<ul>\n<li>取得数组长度(length)</li>\n<li>求和(sum)</li>\n<li>取得平均值(<code>sum/length</code>)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> values = [<span class=\"number\">2</span>, <span class=\"number\">56</span>, <span class=\"number\">3</span>, <span class=\"number\">41</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">100</span>, <span class=\"number\">23</span>];</div><div class=\"line\"><span class=\"keyword\">let</span> sum = values.reduce(<span class=\"function\">(<span class=\"params\">previous, current</span>) =&gt;</span> current += previous);</div><div class=\"line\"><span class=\"keyword\">let</span> avg = sum / values.length;</div><div class=\"line\"><span class=\"comment\">// avg = 28</span></div></pre></td></tr></table></figure>\n<p>或者：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> values = [<span class=\"number\">2</span>, <span class=\"number\">56</span>, <span class=\"number\">3</span>, <span class=\"number\">41</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">100</span>, <span class=\"number\">23</span>];</div><div class=\"line\"><span class=\"keyword\">let</span> count = values.length;</div><div class=\"line\">values = values.reduce(<span class=\"function\">(<span class=\"params\">previous, current</span>) =&gt;</span> current += previous);</div><div class=\"line\">values /= count;</div><div class=\"line\"><span class=\"comment\">// avg = 28</span></div></pre></td></tr></table></figure>\n<p>取得中值的步骤是：</p>\n<ul>\n<li>将数组排序</li>\n<li>取得中位数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> values = [<span class=\"number\">2</span>, <span class=\"number\">56</span>, <span class=\"number\">3</span>, <span class=\"number\">41</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">100</span>, <span class=\"number\">23</span>];</div><div class=\"line\">values.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b);</div><div class=\"line\"><span class=\"keyword\">let</span> lowMiddle = <span class=\"built_in\">Math</span>.floor((values.length - <span class=\"number\">1</span>) / <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> highMiddle = <span class=\"built_in\">Math</span>.ceil((values.length - <span class=\"number\">1</span>) / <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> median = (values[lowMiddle] + values[highMiddle]) / <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"comment\">// median = 13,5</span></div></pre></td></tr></table></figure>\n<p>或者使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Right_shift\" target=\"_blank\" rel=\"external\">无符号右移</a>操作符：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> values = [<span class=\"number\">2</span>, <span class=\"number\">56</span>, <span class=\"number\">3</span>, <span class=\"number\">41</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">100</span>, <span class=\"number\">23</span>];</div><div class=\"line\">values.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b);</div><div class=\"line\"><span class=\"keyword\">let</span> median = (values[(values.length - <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">1</span>] + values[values.length &gt;&gt; <span class=\"number\">1</span>]) / <span class=\"number\">2</span></div><div class=\"line\"><span class=\"comment\">// median = 23</span></div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"预防unapply攻击","tip-number":42,"tip-username":"emars","tip-username-profile":"https://twitter.com/marseltov","tip-tldr":"冻结内置对象的原型方法。","redirect_from":["/zh_cn/preventing-unapply-attacks/"],"_content":"\n重写内置对象的原型方法，外部代码可以通过重写代码达到暴漏和修改已绑定参数的函数。这在es5的方法下使用`polyfill`时是一个严重的安全问题。\n\n```js\n// bind polyfill 示例\nfunction bind(fn) {\n  var prev = Array.prototype.slice.call(arguments, 1);\n  return function bound() {\n    var curr = Array.prototype.slice.call(arguments, 0);\n    var args = Array.prototype.concat.apply(prev, curr);\n    return fn.apply(null, args);\n  };\n}\n\n\n// unapply攻击\nfunction unapplyAttack() {\n  var concat = Array.prototype.concat;\n  Array.prototype.concat = function replaceAll() {\n    Array.prototype.concat = concat; // restore the correct version\n    var curr = Array.prototype.slice.call(arguments, 0);\n    var result = concat.apply([], curr);\n    return result;\n  };\n}\n```\n\n上面的函数声明忽略了函数bind的`prev`参数，意味着调用`unapplyAttack`之后首次调用`.concat`将会抛出错误。\n\n使用[Object.freeze](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze)，可以使对象不可变，你可以防止任何内置对象原型方法被重写。\n\n\n```js\n(function freezePrototypes() {\n  if (typeof Object.freeze !== 'function') {\n    throw new Error('Missing Object.freeze');\n  }\n  Object.freeze(Object.prototype);\n  Object.freeze(Array.prototype);\n  Object.freeze(Function.prototype);\n}());\n```\n\n你可以[在这里](https://glebbahmutov.com/blog/unapply-attack/)阅读更多关于unapply攻击。","source":"_posts/javascript/2016-02-11-preventing-unapply-attacks.md","raw":"---\nlayout: post\n\ntitle: 预防unapply攻击\ntip-number: 42\ntip-username: emars \ntip-username-profile: https://twitter.com/marseltov\ntip-tldr: 冻结内置对象的原型方法。\n\nredirect_from:\n  - /zh_cn/preventing-unapply-attacks/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n重写内置对象的原型方法，外部代码可以通过重写代码达到暴漏和修改已绑定参数的函数。这在es5的方法下使用`polyfill`时是一个严重的安全问题。\n\n```js\n// bind polyfill 示例\nfunction bind(fn) {\n  var prev = Array.prototype.slice.call(arguments, 1);\n  return function bound() {\n    var curr = Array.prototype.slice.call(arguments, 0);\n    var args = Array.prototype.concat.apply(prev, curr);\n    return fn.apply(null, args);\n  };\n}\n\n\n// unapply攻击\nfunction unapplyAttack() {\n  var concat = Array.prototype.concat;\n  Array.prototype.concat = function replaceAll() {\n    Array.prototype.concat = concat; // restore the correct version\n    var curr = Array.prototype.slice.call(arguments, 0);\n    var result = concat.apply([], curr);\n    return result;\n  };\n}\n```\n\n上面的函数声明忽略了函数bind的`prev`参数，意味着调用`unapplyAttack`之后首次调用`.concat`将会抛出错误。\n\n使用[Object.freeze](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze)，可以使对象不可变，你可以防止任何内置对象原型方法被重写。\n\n\n```js\n(function freezePrototypes() {\n  if (typeof Object.freeze !== 'function') {\n    throw new Error('Missing Object.freeze');\n  }\n  Object.freeze(Object.prototype);\n  Object.freeze(Array.prototype);\n  Object.freeze(Function.prototype);\n}());\n```\n\n你可以[在这里](https://glebbahmutov.com/blog/unapply-attack/)阅读更多关于unapply攻击。","slug":"javascript/2016-02-11-preventing-unapply-attacks","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqe9004flyfywy7mqr30","content":"<p>重写内置对象的原型方法，外部代码可以通过重写代码达到暴漏和修改已绑定参数的函数。这在es5的方法下使用<code>polyfill</code>时是一个严重的安全问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bind polyfill 示例</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bind</span>(<span class=\"params\">fn</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> prev = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bound</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> curr = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.concat.apply(prev, curr);</div><div class=\"line\">    <span class=\"keyword\">return</span> fn.apply(<span class=\"literal\">null</span>, args);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// unapply攻击</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unapplyAttack</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> concat = <span class=\"built_in\">Array</span>.prototype.concat;</div><div class=\"line\">  <span class=\"built_in\">Array</span>.prototype.concat = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replaceAll</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">Array</span>.prototype.concat = concat; <span class=\"comment\">// restore the correct version</span></div><div class=\"line\">    <span class=\"keyword\">var</span> curr = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> result = concat.apply([], curr);</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的函数声明忽略了函数bind的<code>prev</code>参数，意味着调用<code>unapplyAttack</code>之后首次调用<code>.concat</code>将会抛出错误。</p>\n<p>使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\" target=\"_blank\" rel=\"external\">Object.freeze</a>，可以使对象不可变，你可以防止任何内置对象原型方法被重写。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">freezePrototypes</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Object</span>.freeze !== <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Missing Object.freeze'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">Object</span>.freeze(<span class=\"built_in\">Object</span>.prototype);</div><div class=\"line\">  <span class=\"built_in\">Object</span>.freeze(<span class=\"built_in\">Array</span>.prototype);</div><div class=\"line\">  <span class=\"built_in\">Object</span>.freeze(<span class=\"built_in\">Function</span>.prototype);</div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<p>你可以<a href=\"https://glebbahmutov.com/blog/unapply-attack/\" target=\"_blank\" rel=\"external\">在这里</a>阅读更多关于unapply攻击。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>重写内置对象的原型方法，外部代码可以通过重写代码达到暴漏和修改已绑定参数的函数。这在es5的方法下使用<code>polyfill</code>时是一个严重的安全问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bind polyfill 示例</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bind</span>(<span class=\"params\">fn</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> prev = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bound</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> curr = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.concat.apply(prev, curr);</div><div class=\"line\">    <span class=\"keyword\">return</span> fn.apply(<span class=\"literal\">null</span>, args);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// unapply攻击</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unapplyAttack</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> concat = <span class=\"built_in\">Array</span>.prototype.concat;</div><div class=\"line\">  <span class=\"built_in\">Array</span>.prototype.concat = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replaceAll</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">Array</span>.prototype.concat = concat; <span class=\"comment\">// restore the correct version</span></div><div class=\"line\">    <span class=\"keyword\">var</span> curr = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> result = concat.apply([], curr);</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的函数声明忽略了函数bind的<code>prev</code>参数，意味着调用<code>unapplyAttack</code>之后首次调用<code>.concat</code>将会抛出错误。</p>\n<p>使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\" target=\"_blank\" rel=\"external\">Object.freeze</a>，可以使对象不可变，你可以防止任何内置对象原型方法被重写。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">freezePrototypes</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Object</span>.freeze !== <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Missing Object.freeze'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">Object</span>.freeze(<span class=\"built_in\">Object</span>.prototype);</div><div class=\"line\">  <span class=\"built_in\">Object</span>.freeze(<span class=\"built_in\">Array</span>.prototype);</div><div class=\"line\">  <span class=\"built_in\">Object</span>.freeze(<span class=\"built_in\">Function</span>.prototype);</div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<p>你可以<a href=\"https://glebbahmutov.com/blog/unapply-attack/\" target=\"_blank\" rel=\"external\">在这里</a>阅读更多关于unapply攻击。</p>\n"},{"layout":"post","title":"函数参数内使用解构","tip-number":43,"tip-username":"dislick","tip-username-profile":"https://github.com/dislick","tip-tldr":"你知道在函数参数内也可以使用解构吗？","redirect_from":["/zh_cn/use-destructuring-in-function-parameters/"],"_content":"\n大家一定对[ES6解构赋值](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)非常熟悉。但是你知道在函数参数里也可以使用它吗？\n\n```js\nvar sayHello = function({ name, surname }) {\n  console.log(`Hello ${name} ${surname}! How are you?`);\n};\n\nsayHello({ name: 'John', surname: 'Smith' })\n// -> Hello John Smith! How are you?\n```\n\n这对于接收可选参数的函数，是很棒的。对于这种用法，你也可以添加[默认参数值](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Default_parameters)来填充调用者没有传递或忘记传递的参数值：\n\n```js\nvar sayHello2 = function({ name = \"Anony\", surname = \"Moose\" } = {}) {\n  console.log(`Hello ${name} ${surname}! How are you?`);\n};\n```\n\n`= {}`表示此参数需要解构的默认对象是一个`{}`，以防调用者忘记传值，或传递了一个错误类型（大多情况为后者）。\n\n```js\nsayHello2()\n// -> Hello Anony Moose! How are you?\nsayHello2({ name: \"Bull\" })\n// -> Hello Bull Moose! How are you?\n```\n\n##### 参数处理\n\n对于普通的解构，如果输入的参数与函数指定的对象参数不符，所有不符的参数都将为`undefined`，所以你需要增加代码来正确的处理这些情况：\n\n```js\nvar sayHelloTimes = function({ name, surname }, times) {\n  console.log(`Hello ${name} ${surname}! I've seen you ${times} times before.`);\n}\n\nsayHelloTimes({ name: \"Pam\" }, 5678)\n// -> Hello Pam undefined! I've seen you 5678 times before.\nsayHelloTimes(5678)\n// -> Hello undefined undefined! I've seen you undefined times before.\n```\n\n更糟糕的，如果没有传递需要解构的的参数，将会抛出错误，这可能使你的应用崩溃：\n\n```js\nsayHelloTimes()\n// -> Uncaught TypeError: Cannot match against 'undefined' or 'null'...\n```\n\n这与访问一个未定义对象的参数基本相似，只是错误类型不太一样。\n\n为解构增加默认参数基本上解决了上面的所有问题：\n\n```js\nvar sayHelloTimes2 = function({ name = \"Anony\", surname = \"Moose\" } = {}, times) {\n  console.log(`Hello ${name} ${surname}! I've seen you ${times} times before.`);\n};\n\nsayHelloTimes2({ name: \"Pam\" }, 5678)\n// -> Hello Pam Moose! I've seen you 5678 times before.\nsayHelloTimes2(5678)\n// -> Hello Anony Moose! I've seen you undefined times before.\nsayHelloTimes2()\n// -> Hello Anony Moose! I've seen you undefined times before.\n```\n\n对于`= {}`，它掩盖了_object_未传递时的情况，但对于个别属性默认值的情形下会抛出异常：\n\n```js\nvar sayHelloTimes2a = function({ name = \"Anony\", surname = \"Moose\" }, times) {\n  console.log(`Hello ${name} ${surname}! I've seen you ${times} times before.`);\n};\n\nsayHelloTimes2a({ name: \"Pam\" }, 5678)\n// -> Hello Pam Moose! I've seen you 5678 times before.\nsayHelloTimes2a(5678)\n// -> Hello Anony Moose! I've seen you undefined times before.\nsayHelloTimes2a()\n// -> Uncaught TypeError: Cannot match against 'undefined' or 'null'.\n```\n\n##### 可用性\n\n需要注意解构赋值可能在你正在使用的Node.js或浏览器中默认情况下并不可用。对于Node.js，你可以在启动时使用`--harmony-destructuring`标记开启此特性。\n","source":"_posts/javascript/2016-02-12-use-destructuring-in-function-parameters.md","raw":"---\nlayout: post\n\ntitle: 函数参数内使用解构\ntip-number: 43\ntip-username: dislick \ntip-username-profile: https://github.com/dislick\ntip-tldr: 你知道在函数参数内也可以使用解构吗？\n\nredirect_from:\n  - /zh_cn/use-destructuring-in-function-parameters/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n大家一定对[ES6解构赋值](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)非常熟悉。但是你知道在函数参数里也可以使用它吗？\n\n```js\nvar sayHello = function({ name, surname }) {\n  console.log(`Hello ${name} ${surname}! How are you?`);\n};\n\nsayHello({ name: 'John', surname: 'Smith' })\n// -> Hello John Smith! How are you?\n```\n\n这对于接收可选参数的函数，是很棒的。对于这种用法，你也可以添加[默认参数值](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Default_parameters)来填充调用者没有传递或忘记传递的参数值：\n\n```js\nvar sayHello2 = function({ name = \"Anony\", surname = \"Moose\" } = {}) {\n  console.log(`Hello ${name} ${surname}! How are you?`);\n};\n```\n\n`= {}`表示此参数需要解构的默认对象是一个`{}`，以防调用者忘记传值，或传递了一个错误类型（大多情况为后者）。\n\n```js\nsayHello2()\n// -> Hello Anony Moose! How are you?\nsayHello2({ name: \"Bull\" })\n// -> Hello Bull Moose! How are you?\n```\n\n##### 参数处理\n\n对于普通的解构，如果输入的参数与函数指定的对象参数不符，所有不符的参数都将为`undefined`，所以你需要增加代码来正确的处理这些情况：\n\n```js\nvar sayHelloTimes = function({ name, surname }, times) {\n  console.log(`Hello ${name} ${surname}! I've seen you ${times} times before.`);\n}\n\nsayHelloTimes({ name: \"Pam\" }, 5678)\n// -> Hello Pam undefined! I've seen you 5678 times before.\nsayHelloTimes(5678)\n// -> Hello undefined undefined! I've seen you undefined times before.\n```\n\n更糟糕的，如果没有传递需要解构的的参数，将会抛出错误，这可能使你的应用崩溃：\n\n```js\nsayHelloTimes()\n// -> Uncaught TypeError: Cannot match against 'undefined' or 'null'...\n```\n\n这与访问一个未定义对象的参数基本相似，只是错误类型不太一样。\n\n为解构增加默认参数基本上解决了上面的所有问题：\n\n```js\nvar sayHelloTimes2 = function({ name = \"Anony\", surname = \"Moose\" } = {}, times) {\n  console.log(`Hello ${name} ${surname}! I've seen you ${times} times before.`);\n};\n\nsayHelloTimes2({ name: \"Pam\" }, 5678)\n// -> Hello Pam Moose! I've seen you 5678 times before.\nsayHelloTimes2(5678)\n// -> Hello Anony Moose! I've seen you undefined times before.\nsayHelloTimes2()\n// -> Hello Anony Moose! I've seen you undefined times before.\n```\n\n对于`= {}`，它掩盖了_object_未传递时的情况，但对于个别属性默认值的情形下会抛出异常：\n\n```js\nvar sayHelloTimes2a = function({ name = \"Anony\", surname = \"Moose\" }, times) {\n  console.log(`Hello ${name} ${surname}! I've seen you ${times} times before.`);\n};\n\nsayHelloTimes2a({ name: \"Pam\" }, 5678)\n// -> Hello Pam Moose! I've seen you 5678 times before.\nsayHelloTimes2a(5678)\n// -> Hello Anony Moose! I've seen you undefined times before.\nsayHelloTimes2a()\n// -> Uncaught TypeError: Cannot match against 'undefined' or 'null'.\n```\n\n##### 可用性\n\n需要注意解构赋值可能在你正在使用的Node.js或浏览器中默认情况下并不可用。对于Node.js，你可以在启动时使用`--harmony-destructuring`标记开启此特性。\n","slug":"javascript/2016-02-12-use-destructuring-in-function-parameters","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqea004hlyfyiav75nnn","content":"<p>大家一定对<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\" target=\"_blank\" rel=\"external\">ES6解构赋值</a>非常熟悉。但是你知道在函数参数里也可以使用它吗？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123; name, surname &#125;</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span> <span class=\"subst\">$&#123;surname&#125;</span>! How are you?`</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">sayHello(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'John'</span>, <span class=\"attr\">surname</span>: <span class=\"string\">'Smith'</span> &#125;)</div><div class=\"line\"><span class=\"comment\">// -&gt; Hello John Smith! How are you?</span></div></pre></td></tr></table></figure>\n<p>这对于接收可选参数的函数，是很棒的。对于这种用法，你也可以添加<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Default_parameters\" target=\"_blank\" rel=\"external\">默认参数值</a>来填充调用者没有传递或忘记传递的参数值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sayHello2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123; name = <span class=\"string\">\"Anony\"</span>, surname = <span class=\"string\">\"Moose\"</span> &#125; = &#123;&#125;</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span> <span class=\"subst\">$&#123;surname&#125;</span>! How are you?`</span>);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p><code>= {}</code>表示此参数需要解构的默认对象是一个<code>{}</code>，以防调用者忘记传值，或传递了一个错误类型（大多情况为后者）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sayHello2()</div><div class=\"line\"><span class=\"comment\">// -&gt; Hello Anony Moose! How are you?</span></div><div class=\"line\">sayHello2(&#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Bull\"</span> &#125;)</div><div class=\"line\"><span class=\"comment\">// -&gt; Hello Bull Moose! How are you?</span></div></pre></td></tr></table></figure>\n<h5 id=\"参数处理\"><a href=\"#参数处理\" class=\"headerlink\" title=\"参数处理\"></a>参数处理</h5><p>对于普通的解构，如果输入的参数与函数指定的对象参数不符，所有不符的参数都将为<code>undefined</code>，所以你需要增加代码来正确的处理这些情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sayHelloTimes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123; name, surname &#125;, times</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span> <span class=\"subst\">$&#123;surname&#125;</span>! I've seen you <span class=\"subst\">$&#123;times&#125;</span> times before.`</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">sayHelloTimes(&#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Pam\"</span> &#125;, <span class=\"number\">5678</span>)</div><div class=\"line\"><span class=\"comment\">// -&gt; Hello Pam undefined! I've seen you 5678 times before.</span></div><div class=\"line\">sayHelloTimes(<span class=\"number\">5678</span>)</div><div class=\"line\"><span class=\"comment\">// -&gt; Hello undefined undefined! I've seen you undefined times before.</span></div></pre></td></tr></table></figure>\n<p>更糟糕的，如果没有传递需要解构的的参数，将会抛出错误，这可能使你的应用崩溃：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sayHelloTimes()</div><div class=\"line\"><span class=\"comment\">// -&gt; Uncaught TypeError: Cannot match against 'undefined' or 'null'...</span></div></pre></td></tr></table></figure>\n<p>这与访问一个未定义对象的参数基本相似，只是错误类型不太一样。</p>\n<p>为解构增加默认参数基本上解决了上面的所有问题：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sayHelloTimes2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123; name = <span class=\"string\">\"Anony\"</span>, surname = <span class=\"string\">\"Moose\"</span> &#125; = &#123;&#125;, times</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span> <span class=\"subst\">$&#123;surname&#125;</span>! I've seen you <span class=\"subst\">$&#123;times&#125;</span> times before.`</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">sayHelloTimes2(&#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Pam\"</span> &#125;, <span class=\"number\">5678</span>)</div><div class=\"line\"><span class=\"comment\">// -&gt; Hello Pam Moose! I've seen you 5678 times before.</span></div><div class=\"line\">sayHelloTimes2(<span class=\"number\">5678</span>)</div><div class=\"line\"><span class=\"comment\">// -&gt; Hello Anony Moose! I've seen you undefined times before.</span></div><div class=\"line\">sayHelloTimes2()</div><div class=\"line\"><span class=\"comment\">// -&gt; Hello Anony Moose! I've seen you undefined times before.</span></div></pre></td></tr></table></figure>\n<p>对于<code>= {}</code>，它掩盖了<em>object</em>未传递时的情况，但对于个别属性默认值的情形下会抛出异常：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sayHelloTimes2a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123; name = <span class=\"string\">\"Anony\"</span>, surname = <span class=\"string\">\"Moose\"</span> &#125;, times</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span> <span class=\"subst\">$&#123;surname&#125;</span>! I've seen you <span class=\"subst\">$&#123;times&#125;</span> times before.`</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">sayHelloTimes2a(&#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Pam\"</span> &#125;, <span class=\"number\">5678</span>)</div><div class=\"line\"><span class=\"comment\">// -&gt; Hello Pam Moose! I've seen you 5678 times before.</span></div><div class=\"line\">sayHelloTimes2a(<span class=\"number\">5678</span>)</div><div class=\"line\"><span class=\"comment\">// -&gt; Hello Anony Moose! I've seen you undefined times before.</span></div><div class=\"line\">sayHelloTimes2a()</div><div class=\"line\"><span class=\"comment\">// -&gt; Uncaught TypeError: Cannot match against 'undefined' or 'null'.</span></div></pre></td></tr></table></figure>\n<h5 id=\"可用性\"><a href=\"#可用性\" class=\"headerlink\" title=\"可用性\"></a>可用性</h5><p>需要注意解构赋值可能在你正在使用的Node.js或浏览器中默认情况下并不可用。对于Node.js，你可以在启动时使用<code>--harmony-destructuring</code>标记开启此特性。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>大家一定对<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\" target=\"_blank\" rel=\"external\">ES6解构赋值</a>非常熟悉。但是你知道在函数参数里也可以使用它吗？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123; name, surname &#125;</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span> <span class=\"subst\">$&#123;surname&#125;</span>! How are you?`</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">sayHello(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'John'</span>, <span class=\"attr\">surname</span>: <span class=\"string\">'Smith'</span> &#125;)</div><div class=\"line\"><span class=\"comment\">// -&gt; Hello John Smith! How are you?</span></div></pre></td></tr></table></figure>\n<p>这对于接收可选参数的函数，是很棒的。对于这种用法，你也可以添加<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Default_parameters\" target=\"_blank\" rel=\"external\">默认参数值</a>来填充调用者没有传递或忘记传递的参数值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sayHello2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123; name = <span class=\"string\">\"Anony\"</span>, surname = <span class=\"string\">\"Moose\"</span> &#125; = &#123;&#125;</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span> <span class=\"subst\">$&#123;surname&#125;</span>! How are you?`</span>);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p><code>= {}</code>表示此参数需要解构的默认对象是一个<code>{}</code>，以防调用者忘记传值，或传递了一个错误类型（大多情况为后者）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sayHello2()</div><div class=\"line\"><span class=\"comment\">// -&gt; Hello Anony Moose! How are you?</span></div><div class=\"line\">sayHello2(&#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Bull\"</span> &#125;)</div><div class=\"line\"><span class=\"comment\">// -&gt; Hello Bull Moose! How are you?</span></div></pre></td></tr></table></figure>\n<h5 id=\"参数处理\"><a href=\"#参数处理\" class=\"headerlink\" title=\"参数处理\"></a>参数处理</h5><p>对于普通的解构，如果输入的参数与函数指定的对象参数不符，所有不符的参数都将为<code>undefined</code>，所以你需要增加代码来正确的处理这些情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sayHelloTimes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123; name, surname &#125;, times</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span> <span class=\"subst\">$&#123;surname&#125;</span>! I've seen you <span class=\"subst\">$&#123;times&#125;</span> times before.`</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">sayHelloTimes(&#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Pam\"</span> &#125;, <span class=\"number\">5678</span>)</div><div class=\"line\"><span class=\"comment\">// -&gt; Hello Pam undefined! I've seen you 5678 times before.</span></div><div class=\"line\">sayHelloTimes(<span class=\"number\">5678</span>)</div><div class=\"line\"><span class=\"comment\">// -&gt; Hello undefined undefined! I've seen you undefined times before.</span></div></pre></td></tr></table></figure>\n<p>更糟糕的，如果没有传递需要解构的的参数，将会抛出错误，这可能使你的应用崩溃：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sayHelloTimes()</div><div class=\"line\"><span class=\"comment\">// -&gt; Uncaught TypeError: Cannot match against 'undefined' or 'null'...</span></div></pre></td></tr></table></figure>\n<p>这与访问一个未定义对象的参数基本相似，只是错误类型不太一样。</p>\n<p>为解构增加默认参数基本上解决了上面的所有问题：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sayHelloTimes2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123; name = <span class=\"string\">\"Anony\"</span>, surname = <span class=\"string\">\"Moose\"</span> &#125; = &#123;&#125;, times</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span> <span class=\"subst\">$&#123;surname&#125;</span>! I've seen you <span class=\"subst\">$&#123;times&#125;</span> times before.`</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">sayHelloTimes2(&#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Pam\"</span> &#125;, <span class=\"number\">5678</span>)</div><div class=\"line\"><span class=\"comment\">// -&gt; Hello Pam Moose! I've seen you 5678 times before.</span></div><div class=\"line\">sayHelloTimes2(<span class=\"number\">5678</span>)</div><div class=\"line\"><span class=\"comment\">// -&gt; Hello Anony Moose! I've seen you undefined times before.</span></div><div class=\"line\">sayHelloTimes2()</div><div class=\"line\"><span class=\"comment\">// -&gt; Hello Anony Moose! I've seen you undefined times before.</span></div></pre></td></tr></table></figure>\n<p>对于<code>= {}</code>，它掩盖了<em>object</em>未传递时的情况，但对于个别属性默认值的情形下会抛出异常：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sayHelloTimes2a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123; name = <span class=\"string\">\"Anony\"</span>, surname = <span class=\"string\">\"Moose\"</span> &#125;, times</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span> <span class=\"subst\">$&#123;surname&#125;</span>! I've seen you <span class=\"subst\">$&#123;times&#125;</span> times before.`</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">sayHelloTimes2a(&#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Pam\"</span> &#125;, <span class=\"number\">5678</span>)</div><div class=\"line\"><span class=\"comment\">// -&gt; Hello Pam Moose! I've seen you 5678 times before.</span></div><div class=\"line\">sayHelloTimes2a(<span class=\"number\">5678</span>)</div><div class=\"line\"><span class=\"comment\">// -&gt; Hello Anony Moose! I've seen you undefined times before.</span></div><div class=\"line\">sayHelloTimes2a()</div><div class=\"line\"><span class=\"comment\">// -&gt; Uncaught TypeError: Cannot match against 'undefined' or 'null'.</span></div></pre></td></tr></table></figure>\n<h5 id=\"可用性\"><a href=\"#可用性\" class=\"headerlink\" title=\"可用性\"></a>可用性</h5><p>需要注意解构赋值可能在你正在使用的Node.js或浏览器中默认情况下并不可用。对于Node.js，你可以在启动时使用<code>--harmony-destructuring</code>标记开启此特性。</p>\n"},{"layout":"post","title":"了解传值机制","tip-number":44,"tip-username":"bmkmanoj","tip-username-profile":"https://github.com/bmkmanoj","tip-tldr":"JavaScript理论上说只传递原始类型和对象（或引用）类型的值。在引用类型的情况下引用值本身通过值传递。","redirect_from":["/zh_cn/know-the-passing-mechanism/"],"_content":"\n理论上，JavaScript通过值传递。它既不是值传递也不是引用传递，具体取决于它的真实场景。要理解传值机制，看一下下面两个实例代码和解释。\n\n### 实例 1\n\n```js\n\nvar me = {\t\t\t\t\t// 1\n\t'partOf' : 'A Team'\n}; \n\nfunction myTeam(me) {\t\t// 2\n\n\tme = {\t\t\t\t\t// 3\n\t\t'belongsTo' : 'A Group'\n\t}; \n} \t\n\nmyTeam(me);\t\t\nconsole.log(me);\t\t\t// 4  : {'partOf' : 'A Team'}\n\n```\n\n在上面的实例里`myTeam`被调用的时候，JavaScript *传递*`me`*对象的引用值，因为它是一个对象*。而且调用本身建立了同一个对象的两个独立的引用，（虽然在这里的的命名都是相同的，比如`me`, 这有些无调行，而且给我们一个这是单个引用的印象）因此，引用变量本身是独立的。\n\n当我们在#`3`定义了一个新的对象，我们完全改变了`myTeam`函数内的引用值，这对此函数作用域外的原始对象是没有任何影响的，外作用域的引用仍保留在原始对象上，因此从#`4`输出去了。 \n\n\n### 实例 2\n\n```js\n\nvar me = {\t\t\t\t\t// 1\n\t'partOf' : 'A Team'\n}; \n\nfunction myGroup(me) { \t\t// 2\n\tme.partOf = 'A Group';  // 3\n} \n\nmyGroup(me);\nconsole.log(me);\t\t\t// 4  : {'partOf' : 'A Group'}\n\t\n```\n\n当`myGroup`调用时，我们将对象`me`传给函数。但是与实例1的情况不同，我们没有指派`me`变量到任何新对象，有效的说明了`myGroup`函数作用域内的对象引用值依旧是原始对象的引用值，而且我们在作用域内修改对象的参数值同样有效的修改了原始对象的参数。因此你得到了#`7`的输出结果。\n\n所以后面的例子是否说明javascript是引用传递呢？不，并没有。请记住，*如果是对象的话，JavaScript将引用按值传递*。这种混乱往往发生在我们没有完全理解什么通过引用传递的情况下。这就是确切的原因，有些人更愿意称它为*call-by-sharing*。\n\n\n*此文最初被作者发表在[js-by-examples](https://github.com/bmkmanoj/js-by-examples/blob/master/examples/js_pass_by_value_or_reference.md)*","source":"_posts/javascript/2016-02-13-know-the-passing-mechanism.md","raw":"---\nlayout: post\n\ntitle: 了解传值机制\ntip-number: 44\ntip-username: bmkmanoj\ntip-username-profile: https://github.com/bmkmanoj\ntip-tldr: JavaScript理论上说只传递原始类型和对象（或引用）类型的值。在引用类型的情况下引用值本身通过值传递。\n\nredirect_from:\n  - /zh_cn/know-the-passing-mechanism/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n理论上，JavaScript通过值传递。它既不是值传递也不是引用传递，具体取决于它的真实场景。要理解传值机制，看一下下面两个实例代码和解释。\n\n### 实例 1\n\n```js\n\nvar me = {\t\t\t\t\t// 1\n\t'partOf' : 'A Team'\n}; \n\nfunction myTeam(me) {\t\t// 2\n\n\tme = {\t\t\t\t\t// 3\n\t\t'belongsTo' : 'A Group'\n\t}; \n} \t\n\nmyTeam(me);\t\t\nconsole.log(me);\t\t\t// 4  : {'partOf' : 'A Team'}\n\n```\n\n在上面的实例里`myTeam`被调用的时候，JavaScript *传递*`me`*对象的引用值，因为它是一个对象*。而且调用本身建立了同一个对象的两个独立的引用，（虽然在这里的的命名都是相同的，比如`me`, 这有些无调行，而且给我们一个这是单个引用的印象）因此，引用变量本身是独立的。\n\n当我们在#`3`定义了一个新的对象，我们完全改变了`myTeam`函数内的引用值，这对此函数作用域外的原始对象是没有任何影响的，外作用域的引用仍保留在原始对象上，因此从#`4`输出去了。 \n\n\n### 实例 2\n\n```js\n\nvar me = {\t\t\t\t\t// 1\n\t'partOf' : 'A Team'\n}; \n\nfunction myGroup(me) { \t\t// 2\n\tme.partOf = 'A Group';  // 3\n} \n\nmyGroup(me);\nconsole.log(me);\t\t\t// 4  : {'partOf' : 'A Group'}\n\t\n```\n\n当`myGroup`调用时，我们将对象`me`传给函数。但是与实例1的情况不同，我们没有指派`me`变量到任何新对象，有效的说明了`myGroup`函数作用域内的对象引用值依旧是原始对象的引用值，而且我们在作用域内修改对象的参数值同样有效的修改了原始对象的参数。因此你得到了#`7`的输出结果。\n\n所以后面的例子是否说明javascript是引用传递呢？不，并没有。请记住，*如果是对象的话，JavaScript将引用按值传递*。这种混乱往往发生在我们没有完全理解什么通过引用传递的情况下。这就是确切的原因，有些人更愿意称它为*call-by-sharing*。\n\n\n*此文最初被作者发表在[js-by-examples](https://github.com/bmkmanoj/js-by-examples/blob/master/examples/js_pass_by_value_or_reference.md)*","slug":"javascript/2016-02-13-know-the-passing-mechanism","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqec004jlyfy0drxitbk","content":"<p>理论上，JavaScript通过值传递。它既不是值传递也不是引用传递，具体取决于它的真实场景。要理解传值机制，看一下下面两个实例代码和解释。</p>\n<h3 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例 1\"></a>实例 1</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> me = &#123;\t\t\t\t\t<span class=\"comment\">// 1</span></div><div class=\"line\">\t<span class=\"string\">'partOf'</span> : <span class=\"string\">'A Team'</span></div><div class=\"line\">&#125;; </div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myTeam</span>(<span class=\"params\">me</span>) </span>&#123;\t\t<span class=\"comment\">// 2</span></div><div class=\"line\"></div><div class=\"line\">\tme = &#123;\t\t\t\t\t<span class=\"comment\">// 3</span></div><div class=\"line\">\t\t<span class=\"string\">'belongsTo'</span> : <span class=\"string\">'A Group'</span></div><div class=\"line\">\t&#125;; </div><div class=\"line\">&#125; \t</div><div class=\"line\"></div><div class=\"line\">myTeam(me);\t\t</div><div class=\"line\"><span class=\"built_in\">console</span>.log(me);\t\t\t<span class=\"comment\">// 4  : &#123;'partOf' : 'A Team'&#125;</span></div></pre></td></tr></table></figure>\n<p>在上面的实例里<code>myTeam</code>被调用的时候，JavaScript <em>传递</em><code>me</code><em>对象的引用值，因为它是一个对象</em>。而且调用本身建立了同一个对象的两个独立的引用，（虽然在这里的的命名都是相同的，比如<code>me</code>, 这有些无调行，而且给我们一个这是单个引用的印象）因此，引用变量本身是独立的。</p>\n<p>当我们在#<code>3</code>定义了一个新的对象，我们完全改变了<code>myTeam</code>函数内的引用值，这对此函数作用域外的原始对象是没有任何影响的，外作用域的引用仍保留在原始对象上，因此从#<code>4</code>输出去了。 </p>\n<h3 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例 2\"></a>实例 2</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> me = &#123;\t\t\t\t\t<span class=\"comment\">// 1</span></div><div class=\"line\">\t<span class=\"string\">'partOf'</span> : <span class=\"string\">'A Team'</span></div><div class=\"line\">&#125;; </div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myGroup</span>(<span class=\"params\">me</span>) </span>&#123; \t\t<span class=\"comment\">// 2</span></div><div class=\"line\">\tme.partOf = <span class=\"string\">'A Group'</span>;  <span class=\"comment\">// 3</span></div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">myGroup(me);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(me);\t\t\t<span class=\"comment\">// 4  : &#123;'partOf' : 'A Group'&#125;</span></div></pre></td></tr></table></figure>\n<p>当<code>myGroup</code>调用时，我们将对象<code>me</code>传给函数。但是与实例1的情况不同，我们没有指派<code>me</code>变量到任何新对象，有效的说明了<code>myGroup</code>函数作用域内的对象引用值依旧是原始对象的引用值，而且我们在作用域内修改对象的参数值同样有效的修改了原始对象的参数。因此你得到了#<code>7</code>的输出结果。</p>\n<p>所以后面的例子是否说明javascript是引用传递呢？不，并没有。请记住，<em>如果是对象的话，JavaScript将引用按值传递</em>。这种混乱往往发生在我们没有完全理解什么通过引用传递的情况下。这就是确切的原因，有些人更愿意称它为<em>call-by-sharing</em>。</p>\n<p><em>此文最初被作者发表在<a href=\"https://github.com/bmkmanoj/js-by-examples/blob/master/examples/js_pass_by_value_or_reference.md\" target=\"_blank\" rel=\"external\">js-by-examples</a></em></p>\n","site":{"data":{}},"excerpt":"","more":"<p>理论上，JavaScript通过值传递。它既不是值传递也不是引用传递，具体取决于它的真实场景。要理解传值机制，看一下下面两个实例代码和解释。</p>\n<h3 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例 1\"></a>实例 1</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> me = &#123;\t\t\t\t\t<span class=\"comment\">// 1</span></div><div class=\"line\">\t<span class=\"string\">'partOf'</span> : <span class=\"string\">'A Team'</span></div><div class=\"line\">&#125;; </div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myTeam</span>(<span class=\"params\">me</span>) </span>&#123;\t\t<span class=\"comment\">// 2</span></div><div class=\"line\"></div><div class=\"line\">\tme = &#123;\t\t\t\t\t<span class=\"comment\">// 3</span></div><div class=\"line\">\t\t<span class=\"string\">'belongsTo'</span> : <span class=\"string\">'A Group'</span></div><div class=\"line\">\t&#125;; </div><div class=\"line\">&#125; \t</div><div class=\"line\"></div><div class=\"line\">myTeam(me);\t\t</div><div class=\"line\"><span class=\"built_in\">console</span>.log(me);\t\t\t<span class=\"comment\">// 4  : &#123;'partOf' : 'A Team'&#125;</span></div></pre></td></tr></table></figure>\n<p>在上面的实例里<code>myTeam</code>被调用的时候，JavaScript <em>传递</em><code>me</code><em>对象的引用值，因为它是一个对象</em>。而且调用本身建立了同一个对象的两个独立的引用，（虽然在这里的的命名都是相同的，比如<code>me</code>, 这有些无调行，而且给我们一个这是单个引用的印象）因此，引用变量本身是独立的。</p>\n<p>当我们在#<code>3</code>定义了一个新的对象，我们完全改变了<code>myTeam</code>函数内的引用值，这对此函数作用域外的原始对象是没有任何影响的，外作用域的引用仍保留在原始对象上，因此从#<code>4</code>输出去了。 </p>\n<h3 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例 2\"></a>实例 2</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> me = &#123;\t\t\t\t\t<span class=\"comment\">// 1</span></div><div class=\"line\">\t<span class=\"string\">'partOf'</span> : <span class=\"string\">'A Team'</span></div><div class=\"line\">&#125;; </div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myGroup</span>(<span class=\"params\">me</span>) </span>&#123; \t\t<span class=\"comment\">// 2</span></div><div class=\"line\">\tme.partOf = <span class=\"string\">'A Group'</span>;  <span class=\"comment\">// 3</span></div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">myGroup(me);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(me);\t\t\t<span class=\"comment\">// 4  : &#123;'partOf' : 'A Group'&#125;</span></div></pre></td></tr></table></figure>\n<p>当<code>myGroup</code>调用时，我们将对象<code>me</code>传给函数。但是与实例1的情况不同，我们没有指派<code>me</code>变量到任何新对象，有效的说明了<code>myGroup</code>函数作用域内的对象引用值依旧是原始对象的引用值，而且我们在作用域内修改对象的参数值同样有效的修改了原始对象的参数。因此你得到了#<code>7</code>的输出结果。</p>\n<p>所以后面的例子是否说明javascript是引用传递呢？不，并没有。请记住，<em>如果是对象的话，JavaScript将引用按值传递</em>。这种混乱往往发生在我们没有完全理解什么通过引用传递的情况下。这就是确切的原因，有些人更愿意称它为<em>call-by-sharing</em>。</p>\n<p><em>此文最初被作者发表在<a href=\"https://github.com/bmkmanoj/js-by-examples/blob/master/examples/js_pass_by_value_or_reference.md\" target=\"_blank\" rel=\"external\">js-by-examples</a></em></p>\n"},{"layout":"post","title":"计算数组中的最大值/最小值","tip-number":45,"tip-username":"loverajoel","tip-username-profile":"https://www.twitter.com/loverajoel","tip-tldr":"对于纯数字数组，使用内置函数Math.max()和Math.min()的方法。","tip-writer-support":"https://www.coinbase.com/loverajoel","redirect_from":["/zh_cn/calculate-the-max-min-value-from-an-array/"],"_content":"\n内置函数[Math.max()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/max)和[Math.min()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/min)可以分别找出参数中的最大值和最小值。\n\n```js\nMath.max(1, 2, 3, 4); // 4\nMath.min(1, 2, 3, 4); // 1\n```\n\n这些函数对于数字组成的数组是不能用的。但是，这有一些类似地方法。\n\n[`Function.prototype.apply()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)让你可以使用提供的`this`与参数组成的_数组(array)_来调用函数。\n\n```js\nvar numbers = [1, 2, 3, 4];\nMath.max.apply(null, numbers) // 4\nMath.min.apply(null, numbers) // 1\n```\n\n给`apply()`第二个参数传递`numbers`数组，等于使用数组中的所有值作为函数的参数。\n\n一个更简单的，基于ES2015的方法来实现此功能，是使用[展开运算符](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_operator).\n\n```js\nvar numbers = [1, 2, 3, 4];\nMath.max(...numbers) // 4\nMath.min(...numbers) // 1\n```\n\n此运算符使数组中的值在函数调用的位置展开。\n","source":"_posts/javascript/2016-02-14-calculate-the-max-min-value-from-an-array.md","raw":"---\nlayout: post\n\ntitle: 计算数组中的最大值/最小值\ntip-number: 45\ntip-username: loverajoel\ntip-username-profile: https://www.twitter.com/loverajoel\ntip-tldr: 对于纯数字数组，使用内置函数Math.max()和Math.min()的方法。\ntip-writer-support: https://www.coinbase.com/loverajoel\n\nredirect_from:\n  - /zh_cn/calculate-the-max-min-value-from-an-array/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n内置函数[Math.max()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/max)和[Math.min()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/min)可以分别找出参数中的最大值和最小值。\n\n```js\nMath.max(1, 2, 3, 4); // 4\nMath.min(1, 2, 3, 4); // 1\n```\n\n这些函数对于数字组成的数组是不能用的。但是，这有一些类似地方法。\n\n[`Function.prototype.apply()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)让你可以使用提供的`this`与参数组成的_数组(array)_来调用函数。\n\n```js\nvar numbers = [1, 2, 3, 4];\nMath.max.apply(null, numbers) // 4\nMath.min.apply(null, numbers) // 1\n```\n\n给`apply()`第二个参数传递`numbers`数组，等于使用数组中的所有值作为函数的参数。\n\n一个更简单的，基于ES2015的方法来实现此功能，是使用[展开运算符](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_operator).\n\n```js\nvar numbers = [1, 2, 3, 4];\nMath.max(...numbers) // 4\nMath.min(...numbers) // 1\n```\n\n此运算符使数组中的值在函数调用的位置展开。\n","slug":"javascript/2016-02-14-calculate-the-max-min-value-from-an-array","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqed004llyfyv5921hsa","content":"<p>内置函数<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/max\" target=\"_blank\" rel=\"external\">Math.max()</a>和<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/min\" target=\"_blank\" rel=\"external\">Math.min()</a>可以分别找出参数中的最大值和最小值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Math</span>.max(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>); <span class=\"comment\">// 4</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.min(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>); <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n<p>这些函数对于数字组成的数组是不能用的。但是，这有一些类似地方法。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"external\"><code>Function.prototype.apply()</code></a>让你可以使用提供的<code>this</code>与参数组成的<em>数组(array)</em>来调用函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, numbers) <span class=\"comment\">// 4</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.min.apply(<span class=\"literal\">null</span>, numbers) <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n<p>给<code>apply()</code>第二个参数传递<code>numbers</code>数组，等于使用数组中的所有值作为函数的参数。</p>\n<p>一个更简单的，基于ES2015的方法来实现此功能，是使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_operator\" target=\"_blank\" rel=\"external\">展开运算符</a>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"built_in\">Math</span>.max(...numbers) <span class=\"comment\">// 4</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.min(...numbers) <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n<p>此运算符使数组中的值在函数调用的位置展开。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>内置函数<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/max\" target=\"_blank\" rel=\"external\">Math.max()</a>和<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/min\" target=\"_blank\" rel=\"external\">Math.min()</a>可以分别找出参数中的最大值和最小值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Math</span>.max(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>); <span class=\"comment\">// 4</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.min(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>); <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n<p>这些函数对于数字组成的数组是不能用的。但是，这有一些类似地方法。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"external\"><code>Function.prototype.apply()</code></a>让你可以使用提供的<code>this</code>与参数组成的<em>数组(array)</em>来调用函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, numbers) <span class=\"comment\">// 4</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.min.apply(<span class=\"literal\">null</span>, numbers) <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n<p>给<code>apply()</code>第二个参数传递<code>numbers</code>数组，等于使用数组中的所有值作为函数的参数。</p>\n<p>一个更简单的，基于ES2015的方法来实现此功能，是使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_operator\" target=\"_blank\" rel=\"external\">展开运算符</a>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"built_in\">Math</span>.max(...numbers) <span class=\"comment\">// 4</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.min(...numbers) <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n<p>此运算符使数组中的值在函数调用的位置展开。</p>\n"},{"layout":"post","title":"纯JS监听document是否加载完成","tip-number":46,"tip-username":"loverajoel","tip-username-profile":"https://www.twitter.com/loverajoel","tip-tldr":"跨浏览器且纯JavaScript检测document是否加载完成。","tip-writer-support":"https://www.coinbase.com/loverajoel","redirect_from":["/zh_cn/detect-document-ready-in-pure-js/"],"_content":"\n跨浏览器且纯JavaScript检测document是否加载完成的方法是使用[`readyState`](https://developer.mozilla.org/zh-CN/docs/Web/API/Document/readyState).\n\n```js\nif (document.readyState === 'complete') {\n  // 页面已完全加载\n}\n```\n\n这样可以在document完全加载时监测到……\n\n\n```js\nlet stateCheck = setInterval(() => {\n  if (document.readyState === 'complete') {\n\tclearInterval(stateCheck);\n\t// document ready\n  }\n}, 100);\n```\n\n或者使用[onreadystatechange](https://developer.mozilla.org/zh-CN/docs/Web/Events/readystatechange)\n\n\n```js\ndocument.onreadystatechange = () => {\n  if (document.readyState === 'complete') {\n\t// document ready\n  }\n};\n```\n\n使用`document.readyState === 'interactive'`监听DOM是否加载完成。\n","source":"_posts/javascript/2016-02-15-detect-document-ready-in-pure-js.md","raw":"---\nlayout: post\n\ntitle: 纯JS监听document是否加载完成\ntip-number: 46\ntip-username: loverajoel\ntip-username-profile: https://www.twitter.com/loverajoel\ntip-tldr: 跨浏览器且纯JavaScript检测document是否加载完成。\ntip-writer-support: https://www.coinbase.com/loverajoel\n\nredirect_from:\n  - /zh_cn/detect-document-ready-in-pure-js/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n跨浏览器且纯JavaScript检测document是否加载完成的方法是使用[`readyState`](https://developer.mozilla.org/zh-CN/docs/Web/API/Document/readyState).\n\n```js\nif (document.readyState === 'complete') {\n  // 页面已完全加载\n}\n```\n\n这样可以在document完全加载时监测到……\n\n\n```js\nlet stateCheck = setInterval(() => {\n  if (document.readyState === 'complete') {\n\tclearInterval(stateCheck);\n\t// document ready\n  }\n}, 100);\n```\n\n或者使用[onreadystatechange](https://developer.mozilla.org/zh-CN/docs/Web/Events/readystatechange)\n\n\n```js\ndocument.onreadystatechange = () => {\n  if (document.readyState === 'complete') {\n\t// document ready\n  }\n};\n```\n\n使用`document.readyState === 'interactive'`监听DOM是否加载完成。\n","slug":"javascript/2016-02-15-detect-document-ready-in-pure-js","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqef004nlyfyvogn1qmz","content":"<p>跨浏览器且纯JavaScript检测document是否加载完成的方法是使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/readyState\" target=\"_blank\" rel=\"external\"><code>readyState</code></a>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.readyState === <span class=\"string\">'complete'</span>) &#123;</div><div class=\"line\">  <span class=\"comment\">// 页面已完全加载</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样可以在document完全加载时监测到……</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> stateCheck = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.readyState === <span class=\"string\">'complete'</span>) &#123;</div><div class=\"line\">\tclearInterval(stateCheck);</div><div class=\"line\">\t<span class=\"comment\">// document ready</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;, <span class=\"number\">100</span>);</div></pre></td></tr></table></figure>\n<p>或者使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/readystatechange\" target=\"_blank\" rel=\"external\">onreadystatechange</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.onreadystatechange = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.readyState === <span class=\"string\">'complete'</span>) &#123;</div><div class=\"line\">\t<span class=\"comment\">// document ready</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>使用<code>document.readyState === &#39;interactive&#39;</code>监听DOM是否加载完成。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>跨浏览器且纯JavaScript检测document是否加载完成的方法是使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/readyState\" target=\"_blank\" rel=\"external\"><code>readyState</code></a>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.readyState === <span class=\"string\">'complete'</span>) &#123;</div><div class=\"line\">  <span class=\"comment\">// 页面已完全加载</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样可以在document完全加载时监测到……</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> stateCheck = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.readyState === <span class=\"string\">'complete'</span>) &#123;</div><div class=\"line\">\tclearInterval(stateCheck);</div><div class=\"line\">\t<span class=\"comment\">// document ready</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;, <span class=\"number\">100</span>);</div></pre></td></tr></table></figure>\n<p>或者使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/readystatechange\" target=\"_blank\" rel=\"external\">onreadystatechange</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.onreadystatechange = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.readyState === <span class=\"string\">'complete'</span>) &#123;</div><div class=\"line\">\t<span class=\"comment\">// document ready</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>使用<code>document.readyState === &#39;interactive&#39;</code>监听DOM是否加载完成。</p>\n"},{"layout":"post","title":"变量声明","tip-number":47,"tip-username":"adaniloff","tip-username-profile":"https://github.com/adaniloff","tip-tldr":"理解并应用变量的声明。","redirect_from":["/zh_cn/basics-declarations/"],"_content":"\n下文是JavaScript中声明变量的不同方法。 \n注释与`console.log`足够说明这里发生了什么：\n\n```js\nvar y, x = y = 1 //== var x; var y; x = y = 1\nconsole.log('--> 1:', `x = ${x}, y = ${y}`)\n\n// 将会输出\n//--> 1: x = 1, y = 1\n```\n\n首先，我们只设置了两个变量。并没有很多。\n\n```js\n;(() => { \n  var x = y = 2 // == var x; y = 2;\n  console.log('2.0:', `x = ${x}, y = ${y}`)\n})()\nconsole.log('--> 2.1:', `x = ${x}, y = ${y}`)\n\n// 将会输出\n//2.0: x = 2, y = 2\n//--> 2.1: x = 1, y = 2\n```\n\n正如你所看到的，代码只改变了全局的`y`，因为我们在闭包里并没有声明此变量。\n\n```js\n;(() => { \n  var x, y = 3 // == var x; var y = 3;\n  console.log('3.0:', `x = ${x}, y = ${y}`)\n})()\nconsole.log('--> 3.1:', `x = ${x}, y = ${y}`)\n\n// 将会输出\n//3.0: x = undefined, y = 3\n//--> 3.1: x = 1, y = 2\n```\n\n现在我们用`var`声明了两个变量。意味着他们仅在闭包内有作用。\n\n```js\n;(() => { \n  var y, x = y = 4 // == var x; var y; x = y = 4\n  console.log('4.0:', `x = ${x}, y = ${y}`)\n})()\nconsole.log('--> 4.1:', `x = ${x}, y = ${y}`)\n\n// 将会输出\n//4.0: x = 4, y = 4\n//--> 4.1: x = 1, y = 2\n```\n\n两个变量都使用`var`声明了而且在之后又给它们赋值。由于`local > global`，闭包内声明了`x`和`y`，意味着闭包内是无法访问全局的`x`和`y`的。\n\n```js\nx = 5 // == x = 5\nconsole.log('--> 5:', `x = ${x}, y = ${y}`)\n\n// 将会输出\n//--> 5: x = 5, y = 2\n```\n\n最后一行的结果是很明显的。\n\n你可以在这里测试并看到结果 [感谢babel](https://babeljs.io/repl/#?experimental=false&evaluate=true&loose=false&spec=false&code=var%20y%2C%20x%20%3D%20y%20%3D%201%20%2F%2F%3D%3D%20var%20x%3B%20var%20y%3B%20x%20%3D%20y%20%3D%201%0Aconsole.log('--%3E%201%3A'%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%0A%2F%2F%20Will%20print%0A%2F%2F--%3E%201%3A%20x%20%3D%201%2C%20y%20%3D%201%0A%0A%3B(()%20%3D%3E%20%7B%20%0A%20%20var%20x%20%3D%20y%20%3D%202%20%2F%2F%20%3D%3D%20var%20x%3B%20y%20%3D%202%3B%0A%20%20console.log('2.0%3A'%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%7D)()%0Aconsole.log('--%3E%202.1%3A'%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%0A%2F%2F%20Will%20print%0A%2F%2F2.0%3A%20x%20%3D%202%2C%20y%20%3D%202%0A%2F%2F--%3E%202.1%3A%20x%20%3D%201%2C%20y%20%3D%202%0A%0A%3B(()%20%3D%3E%20%7B%20%0A%20%20var%20x%2C%20y%20%3D%203%20%2F%2F%20%3D%3D%20var%20x%3B%20var%20y%20%3D%203%3B%0A%20%20console.log('3.0%3A'%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%7D)()%0Aconsole.log('--%3E%203.1%3A'%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%0A%2F%2F%20Will%20print%0A%2F%2F3.0%3A%20x%20%3D%20undefined%2C%20y%20%3D%203%0A%2F%2F--%3E%203.1%3A%20x%20%3D%201%2C%20y%20%3D%202%0A%0A%3B(()%20%3D%3E%20%7B%20%0A%20%20var%20y%2C%20x%20%3D%20y%20%3D%204%20%2F%2F%20%3D%3D%20var%20x%3B%20var%20y%3B%20x%20%3D%20y%20%3D%203%0A%20%20console.log('4.0%3A'%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%7D)()%0Aconsole.log('--%3E%204.1%3A'%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%0A%2F%2F%20Will%20print%0A%2F%2F4.0%3A%20x%20%3D%204%2C%20y%20%3D%204%0A%2F%2F--%3E%204.1%3A%20x%20%3D%201%2C%20y%20%3D%202%0A%0Ax%20%3D%205%20%2F%2F%20%3D%3D%20x%20%3D%205%0Aconsole.log('--%3E%205%3A'%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%0A%2F%2F%20Will%20print%0A%2F%2F--%3E%205%3A%20x%20%3D%205%2C%20y%20%3D%202).\n\n更多相关内容请看[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/var).\n\n特别感谢@kurtextrem的合作 :)!\n","source":"_posts/javascript/2016-02-16-basics-declarations.md","raw":"---\nlayout: post\n\ntitle: 变量声明\ntip-number: 47\ntip-username: adaniloff \ntip-username-profile: https://github.com/adaniloff\ntip-tldr: 理解并应用变量的声明。\n\nredirect_from:\n  - /zh_cn/basics-declarations/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n下文是JavaScript中声明变量的不同方法。 \n注释与`console.log`足够说明这里发生了什么：\n\n```js\nvar y, x = y = 1 //== var x; var y; x = y = 1\nconsole.log('--> 1:', `x = ${x}, y = ${y}`)\n\n// 将会输出\n//--> 1: x = 1, y = 1\n```\n\n首先，我们只设置了两个变量。并没有很多。\n\n```js\n;(() => { \n  var x = y = 2 // == var x; y = 2;\n  console.log('2.0:', `x = ${x}, y = ${y}`)\n})()\nconsole.log('--> 2.1:', `x = ${x}, y = ${y}`)\n\n// 将会输出\n//2.0: x = 2, y = 2\n//--> 2.1: x = 1, y = 2\n```\n\n正如你所看到的，代码只改变了全局的`y`，因为我们在闭包里并没有声明此变量。\n\n```js\n;(() => { \n  var x, y = 3 // == var x; var y = 3;\n  console.log('3.0:', `x = ${x}, y = ${y}`)\n})()\nconsole.log('--> 3.1:', `x = ${x}, y = ${y}`)\n\n// 将会输出\n//3.0: x = undefined, y = 3\n//--> 3.1: x = 1, y = 2\n```\n\n现在我们用`var`声明了两个变量。意味着他们仅在闭包内有作用。\n\n```js\n;(() => { \n  var y, x = y = 4 // == var x; var y; x = y = 4\n  console.log('4.0:', `x = ${x}, y = ${y}`)\n})()\nconsole.log('--> 4.1:', `x = ${x}, y = ${y}`)\n\n// 将会输出\n//4.0: x = 4, y = 4\n//--> 4.1: x = 1, y = 2\n```\n\n两个变量都使用`var`声明了而且在之后又给它们赋值。由于`local > global`，闭包内声明了`x`和`y`，意味着闭包内是无法访问全局的`x`和`y`的。\n\n```js\nx = 5 // == x = 5\nconsole.log('--> 5:', `x = ${x}, y = ${y}`)\n\n// 将会输出\n//--> 5: x = 5, y = 2\n```\n\n最后一行的结果是很明显的。\n\n你可以在这里测试并看到结果 [感谢babel](https://babeljs.io/repl/#?experimental=false&evaluate=true&loose=false&spec=false&code=var%20y%2C%20x%20%3D%20y%20%3D%201%20%2F%2F%3D%3D%20var%20x%3B%20var%20y%3B%20x%20%3D%20y%20%3D%201%0Aconsole.log('--%3E%201%3A'%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%0A%2F%2F%20Will%20print%0A%2F%2F--%3E%201%3A%20x%20%3D%201%2C%20y%20%3D%201%0A%0A%3B(()%20%3D%3E%20%7B%20%0A%20%20var%20x%20%3D%20y%20%3D%202%20%2F%2F%20%3D%3D%20var%20x%3B%20y%20%3D%202%3B%0A%20%20console.log('2.0%3A'%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%7D)()%0Aconsole.log('--%3E%202.1%3A'%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%0A%2F%2F%20Will%20print%0A%2F%2F2.0%3A%20x%20%3D%202%2C%20y%20%3D%202%0A%2F%2F--%3E%202.1%3A%20x%20%3D%201%2C%20y%20%3D%202%0A%0A%3B(()%20%3D%3E%20%7B%20%0A%20%20var%20x%2C%20y%20%3D%203%20%2F%2F%20%3D%3D%20var%20x%3B%20var%20y%20%3D%203%3B%0A%20%20console.log('3.0%3A'%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%7D)()%0Aconsole.log('--%3E%203.1%3A'%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%0A%2F%2F%20Will%20print%0A%2F%2F3.0%3A%20x%20%3D%20undefined%2C%20y%20%3D%203%0A%2F%2F--%3E%203.1%3A%20x%20%3D%201%2C%20y%20%3D%202%0A%0A%3B(()%20%3D%3E%20%7B%20%0A%20%20var%20y%2C%20x%20%3D%20y%20%3D%204%20%2F%2F%20%3D%3D%20var%20x%3B%20var%20y%3B%20x%20%3D%20y%20%3D%203%0A%20%20console.log('4.0%3A'%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%7D)()%0Aconsole.log('--%3E%204.1%3A'%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%0A%2F%2F%20Will%20print%0A%2F%2F4.0%3A%20x%20%3D%204%2C%20y%20%3D%204%0A%2F%2F--%3E%204.1%3A%20x%20%3D%201%2C%20y%20%3D%202%0A%0Ax%20%3D%205%20%2F%2F%20%3D%3D%20x%20%3D%205%0Aconsole.log('--%3E%205%3A'%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%0A%2F%2F%20Will%20print%0A%2F%2F--%3E%205%3A%20x%20%3D%205%2C%20y%20%3D%202).\n\n更多相关内容请看[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/var).\n\n特别感谢@kurtextrem的合作 :)!\n","slug":"javascript/2016-02-16-basics-declarations","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqei004plyfyfreas9ts","content":"<p>下文是JavaScript中声明变量的不同方法。<br>注释与<code>console.log</code>足够说明这里发生了什么：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> y, x = y = <span class=\"number\">1</span> <span class=\"comment\">//== var x; var y; x = y = 1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'--&gt; 1:'</span>, <span class=\"string\">`x = <span class=\"subst\">$&#123;x&#125;</span>, y = <span class=\"subst\">$&#123;y&#125;</span>`</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 将会输出</span></div><div class=\"line\"><span class=\"comment\">//--&gt; 1: x = 1, y = 1</span></div></pre></td></tr></table></figure>\n<p>首先，我们只设置了两个变量。并没有很多。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">;<span class=\"function\">(<span class=\"params\">(</span>) =&gt;</span> &#123; </div><div class=\"line\">  <span class=\"keyword\">var</span> x = y = <span class=\"number\">2</span> <span class=\"comment\">// == var x; y = 2;</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'2.0:'</span>, <span class=\"string\">`x = <span class=\"subst\">$&#123;x&#125;</span>, y = <span class=\"subst\">$&#123;y&#125;</span>`</span>)</div><div class=\"line\">&#125;)()</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'--&gt; 2.1:'</span>, <span class=\"string\">`x = <span class=\"subst\">$&#123;x&#125;</span>, y = <span class=\"subst\">$&#123;y&#125;</span>`</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 将会输出</span></div><div class=\"line\"><span class=\"comment\">//2.0: x = 2, y = 2</span></div><div class=\"line\"><span class=\"comment\">//--&gt; 2.1: x = 1, y = 2</span></div></pre></td></tr></table></figure>\n<p>正如你所看到的，代码只改变了全局的<code>y</code>，因为我们在闭包里并没有声明此变量。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">;<span class=\"function\">(<span class=\"params\">(</span>) =&gt;</span> &#123; </div><div class=\"line\">  <span class=\"keyword\">var</span> x, y = <span class=\"number\">3</span> <span class=\"comment\">// == var x; var y = 3;</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'3.0:'</span>, <span class=\"string\">`x = <span class=\"subst\">$&#123;x&#125;</span>, y = <span class=\"subst\">$&#123;y&#125;</span>`</span>)</div><div class=\"line\">&#125;)()</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'--&gt; 3.1:'</span>, <span class=\"string\">`x = <span class=\"subst\">$&#123;x&#125;</span>, y = <span class=\"subst\">$&#123;y&#125;</span>`</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 将会输出</span></div><div class=\"line\"><span class=\"comment\">//3.0: x = undefined, y = 3</span></div><div class=\"line\"><span class=\"comment\">//--&gt; 3.1: x = 1, y = 2</span></div></pre></td></tr></table></figure>\n<p>现在我们用<code>var</code>声明了两个变量。意味着他们仅在闭包内有作用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">;<span class=\"function\">(<span class=\"params\">(</span>) =&gt;</span> &#123; </div><div class=\"line\">  <span class=\"keyword\">var</span> y, x = y = <span class=\"number\">4</span> <span class=\"comment\">// == var x; var y; x = y = 4</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'4.0:'</span>, <span class=\"string\">`x = <span class=\"subst\">$&#123;x&#125;</span>, y = <span class=\"subst\">$&#123;y&#125;</span>`</span>)</div><div class=\"line\">&#125;)()</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'--&gt; 4.1:'</span>, <span class=\"string\">`x = <span class=\"subst\">$&#123;x&#125;</span>, y = <span class=\"subst\">$&#123;y&#125;</span>`</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 将会输出</span></div><div class=\"line\"><span class=\"comment\">//4.0: x = 4, y = 4</span></div><div class=\"line\"><span class=\"comment\">//--&gt; 4.1: x = 1, y = 2</span></div></pre></td></tr></table></figure>\n<p>两个变量都使用<code>var</code>声明了而且在之后又给它们赋值。由于<code>local &gt; global</code>，闭包内声明了<code>x</code>和<code>y</code>，意味着闭包内是无法访问全局的<code>x</code>和<code>y</code>的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = <span class=\"number\">5</span> <span class=\"comment\">// == x = 5</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'--&gt; 5:'</span>, <span class=\"string\">`x = <span class=\"subst\">$&#123;x&#125;</span>, y = <span class=\"subst\">$&#123;y&#125;</span>`</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 将会输出</span></div><div class=\"line\"><span class=\"comment\">//--&gt; 5: x = 5, y = 2</span></div></pre></td></tr></table></figure>\n<p>最后一行的结果是很明显的。</p>\n<p>你可以在这里测试并看到结果 <a href=\"https://babeljs.io/repl/#?experimental=false&amp;evaluate=true&amp;loose=false&amp;spec=false&amp;code=var%20y%2C%20x%20%3D%20y%20%3D%201%20%2F%2F%3D%3D%20var%20x%3B%20var%20y%3B%20x%20%3D%20y%20%3D%201%0Aconsole.log(&#39;--%3E%201%3A&#39;%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60\" target=\"_blank\" rel=\"external\">感谢babel</a>%0A%0A%2F%2F%20Will%20print%0A%2F%2F–%3E%201%3A%20x%20%3D%201%2C%20y%20%3D%201%0A%0A%3B(()%20%3D%3E%20%7B%20%0A%20%20var%20x%20%3D%20y%20%3D%202%20%2F%2F%20%3D%3D%20var%20x%3B%20y%20%3D%202%3B%0A%20%20console.log(‘2.0%3A’%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%7D)()%0Aconsole.log(‘–%3E%202.1%3A’%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%0A%2F%2F%20Will%20print%0A%2F%2F2.0%3A%20x%20%3D%202%2C%20y%20%3D%202%0A%2F%2F–%3E%202.1%3A%20x%20%3D%201%2C%20y%20%3D%202%0A%0A%3B(()%20%3D%3E%20%7B%20%0A%20%20var%20x%2C%20y%20%3D%203%20%2F%2F%20%3D%3D%20var%20x%3B%20var%20y%20%3D%203%3B%0A%20%20console.log(‘3.0%3A’%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%7D)()%0Aconsole.log(‘–%3E%203.1%3A’%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%0A%2F%2F%20Will%20print%0A%2F%2F3.0%3A%20x%20%3D%20undefined%2C%20y%20%3D%203%0A%2F%2F–%3E%203.1%3A%20x%20%3D%201%2C%20y%20%3D%202%0A%0A%3B(()%20%3D%3E%20%7B%20%0A%20%20var%20y%2C%20x%20%3D%20y%20%3D%204%20%2F%2F%20%3D%3D%20var%20x%3B%20var%20y%3B%20x%20%3D%20y%20%3D%203%0A%20%20console.log(‘4.0%3A’%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%7D)()%0Aconsole.log(‘–%3E%204.1%3A’%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%0A%2F%2F%20Will%20print%0A%2F%2F4.0%3A%20x%20%3D%204%2C%20y%20%3D%204%0A%2F%2F–%3E%204.1%3A%20x%20%3D%201%2C%20y%20%3D%202%0A%0Ax%20%3D%205%20%2F%2F%20%3D%3D%20x%20%3D%205%0Aconsole.log(‘–%3E%205%3A’%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%0A%2F%2F%20Will%20print%0A%2F%2F–%3E%205%3A%20x%20%3D%205%2C%20y%20%3D%202).</p>\n<p>更多相关内容请看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/var\" target=\"_blank\" rel=\"external\">MDN</a>.</p>\n<p>特别感谢@kurtextrem的合作 :)!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>下文是JavaScript中声明变量的不同方法。<br>注释与<code>console.log</code>足够说明这里发生了什么：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> y, x = y = <span class=\"number\">1</span> <span class=\"comment\">//== var x; var y; x = y = 1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'--&gt; 1:'</span>, <span class=\"string\">`x = <span class=\"subst\">$&#123;x&#125;</span>, y = <span class=\"subst\">$&#123;y&#125;</span>`</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 将会输出</span></div><div class=\"line\"><span class=\"comment\">//--&gt; 1: x = 1, y = 1</span></div></pre></td></tr></table></figure>\n<p>首先，我们只设置了两个变量。并没有很多。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">;<span class=\"function\">(<span class=\"params\">(</span>) =&gt;</span> &#123; </div><div class=\"line\">  <span class=\"keyword\">var</span> x = y = <span class=\"number\">2</span> <span class=\"comment\">// == var x; y = 2;</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'2.0:'</span>, <span class=\"string\">`x = <span class=\"subst\">$&#123;x&#125;</span>, y = <span class=\"subst\">$&#123;y&#125;</span>`</span>)</div><div class=\"line\">&#125;)()</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'--&gt; 2.1:'</span>, <span class=\"string\">`x = <span class=\"subst\">$&#123;x&#125;</span>, y = <span class=\"subst\">$&#123;y&#125;</span>`</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 将会输出</span></div><div class=\"line\"><span class=\"comment\">//2.0: x = 2, y = 2</span></div><div class=\"line\"><span class=\"comment\">//--&gt; 2.1: x = 1, y = 2</span></div></pre></td></tr></table></figure>\n<p>正如你所看到的，代码只改变了全局的<code>y</code>，因为我们在闭包里并没有声明此变量。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">;<span class=\"function\">(<span class=\"params\">(</span>) =&gt;</span> &#123; </div><div class=\"line\">  <span class=\"keyword\">var</span> x, y = <span class=\"number\">3</span> <span class=\"comment\">// == var x; var y = 3;</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'3.0:'</span>, <span class=\"string\">`x = <span class=\"subst\">$&#123;x&#125;</span>, y = <span class=\"subst\">$&#123;y&#125;</span>`</span>)</div><div class=\"line\">&#125;)()</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'--&gt; 3.1:'</span>, <span class=\"string\">`x = <span class=\"subst\">$&#123;x&#125;</span>, y = <span class=\"subst\">$&#123;y&#125;</span>`</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 将会输出</span></div><div class=\"line\"><span class=\"comment\">//3.0: x = undefined, y = 3</span></div><div class=\"line\"><span class=\"comment\">//--&gt; 3.1: x = 1, y = 2</span></div></pre></td></tr></table></figure>\n<p>现在我们用<code>var</code>声明了两个变量。意味着他们仅在闭包内有作用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">;<span class=\"function\">(<span class=\"params\">(</span>) =&gt;</span> &#123; </div><div class=\"line\">  <span class=\"keyword\">var</span> y, x = y = <span class=\"number\">4</span> <span class=\"comment\">// == var x; var y; x = y = 4</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'4.0:'</span>, <span class=\"string\">`x = <span class=\"subst\">$&#123;x&#125;</span>, y = <span class=\"subst\">$&#123;y&#125;</span>`</span>)</div><div class=\"line\">&#125;)()</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'--&gt; 4.1:'</span>, <span class=\"string\">`x = <span class=\"subst\">$&#123;x&#125;</span>, y = <span class=\"subst\">$&#123;y&#125;</span>`</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 将会输出</span></div><div class=\"line\"><span class=\"comment\">//4.0: x = 4, y = 4</span></div><div class=\"line\"><span class=\"comment\">//--&gt; 4.1: x = 1, y = 2</span></div></pre></td></tr></table></figure>\n<p>两个变量都使用<code>var</code>声明了而且在之后又给它们赋值。由于<code>local &gt; global</code>，闭包内声明了<code>x</code>和<code>y</code>，意味着闭包内是无法访问全局的<code>x</code>和<code>y</code>的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = <span class=\"number\">5</span> <span class=\"comment\">// == x = 5</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'--&gt; 5:'</span>, <span class=\"string\">`x = <span class=\"subst\">$&#123;x&#125;</span>, y = <span class=\"subst\">$&#123;y&#125;</span>`</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 将会输出</span></div><div class=\"line\"><span class=\"comment\">//--&gt; 5: x = 5, y = 2</span></div></pre></td></tr></table></figure>\n<p>最后一行的结果是很明显的。</p>\n<p>你可以在这里测试并看到结果 <a href=\"https://babeljs.io/repl/#?experimental=false&amp;evaluate=true&amp;loose=false&amp;spec=false&amp;code=var%20y%2C%20x%20%3D%20y%20%3D%201%20%2F%2F%3D%3D%20var%20x%3B%20var%20y%3B%20x%20%3D%20y%20%3D%201%0Aconsole.log(&#39;--%3E%201%3A&#39;%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60\" target=\"_blank\" rel=\"external\">感谢babel</a>%0A%0A%2F%2F%20Will%20print%0A%2F%2F–%3E%201%3A%20x%20%3D%201%2C%20y%20%3D%201%0A%0A%3B(()%20%3D%3E%20%7B%20%0A%20%20var%20x%20%3D%20y%20%3D%202%20%2F%2F%20%3D%3D%20var%20x%3B%20y%20%3D%202%3B%0A%20%20console.log(‘2.0%3A’%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%7D)()%0Aconsole.log(‘–%3E%202.1%3A’%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%0A%2F%2F%20Will%20print%0A%2F%2F2.0%3A%20x%20%3D%202%2C%20y%20%3D%202%0A%2F%2F–%3E%202.1%3A%20x%20%3D%201%2C%20y%20%3D%202%0A%0A%3B(()%20%3D%3E%20%7B%20%0A%20%20var%20x%2C%20y%20%3D%203%20%2F%2F%20%3D%3D%20var%20x%3B%20var%20y%20%3D%203%3B%0A%20%20console.log(‘3.0%3A’%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%7D)()%0Aconsole.log(‘–%3E%203.1%3A’%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%0A%2F%2F%20Will%20print%0A%2F%2F3.0%3A%20x%20%3D%20undefined%2C%20y%20%3D%203%0A%2F%2F–%3E%203.1%3A%20x%20%3D%201%2C%20y%20%3D%202%0A%0A%3B(()%20%3D%3E%20%7B%20%0A%20%20var%20y%2C%20x%20%3D%20y%20%3D%204%20%2F%2F%20%3D%3D%20var%20x%3B%20var%20y%3B%20x%20%3D%20y%20%3D%203%0A%20%20console.log(‘4.0%3A’%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%7D)()%0Aconsole.log(‘–%3E%204.1%3A’%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%0A%2F%2F%20Will%20print%0A%2F%2F4.0%3A%20x%20%3D%204%2C%20y%20%3D%204%0A%2F%2F–%3E%204.1%3A%20x%20%3D%201%2C%20y%20%3D%202%0A%0Ax%20%3D%205%20%2F%2F%20%3D%3D%20x%20%3D%205%0Aconsole.log(‘–%3E%205%3A’%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%0A%2F%2F%20Will%20print%0A%2F%2F–%3E%205%3A%20x%20%3D%205%2C%20y%20%3D%202).</p>\n<p>更多相关内容请看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/var\" target=\"_blank\" rel=\"external\">MDN</a>.</p>\n<p>特别感谢@kurtextrem的合作 :)!</p>\n"},{"layout":"post","title":"怎样`reduce()`数组","tip-number":48,"tip-username":"darul75","tip-username-profile":"https://twitter.com/darul75","tip-tldr":"使用`reduce()`函数时的一些建议","redirect_from":["/zh_cn/reminders-about-reduce-function-usage/"],"_content":"\n文档里说`reduce()`方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始合并，最终为一个值。\n\n### `reduce()`\n\n[reduce()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce) 函数接收2个参数(M: 必填, O: 可选)：\n\n- (M) 回调**reducer 函数** 处理先前的结算结果和下一个元素直到序列结束。\n- (O) **初值** 作为第一次调用回调时的第一个参数。\n\n所以，让我们先看一个普通用法，之后再看一个复杂用法。\n\n### 普通用法 (累加，关联)\n\n我们正在逛亚马逊(单价为美元$) 我们的购物车实在太满了，我们来计算一下总价吧：\n\n```javascript\n// 当前的购物清单\nvar items = [{price: 10}, {price: 120}, {price: 1000}];\n\n// reducer函数\nvar reducer = function add(sumSoFar, nextPrice) { return sumSoFar + nextPrice.price; };\n\n// 开始运行\nvar total = items.reduce(reducer, 0);\n\nconsole.log(total); // 1130\n```\n\n`reduce`函数可选的参数在第一个例子里是基本变量数字0，但是它也可以是一个对象，数组... 而不仅是基本类型，之后我们将会看到。\n\n现在，我们收到一个20$的优惠券。\n\n```javascript\nvar total = items.reduce(reducer,-20);\n\nconsole.log(total); // 1110\n```\n\n### 进阶用法(结合)\n\n第二种用法的例子是`Redux`的[combineReducers](http://redux.js.org/docs/api/combineReducers.html)函数[源码](https://github.com/reactjs/redux/blob/master/src/combineReducers.js#L93)里用到的。\n\n此创意是将`reducer`函数拆分为独立的函数，最后组合成一个新的*单一的大`reducer`函数*。 \n\n为了说明，我们创建一个单一的对象，包含一些可以计算不同货币($, €...)的总价值的`reducer`函数。\n\n```javascript\nvar reducers = {\n  totalInDollar: function(state, item) {\n    state.dollars += item.price;\n    return state;\n  },\n  totalInEuros : function(state, item) {\n    state.euros += item.price * 0.897424392;\n    return state;\n  },\n  totalInPounds : function(state, item) {\n    state.pounds += item.price * 0.692688671;\n    return state;\n  },\n  totalInYen : function(state, item) {\n    state.yens += item.price * 113.852;\n    return state;\n  }\n  // more...\n};\n```\n\n然后我们建立一个瑞士军刀函数 \n\n- 能够调用每一部分的`reduce`函数\n- 返回一个新的`reducer`回调函数\n\n```javascript\nvar combineTotalPriceReducers = function(reducers) {\n  return function(state, item) {\n    return Object.keys(reducers).reduce(\n      function(nextState, key) {\n        reducers[key](state, item);\n        return state;\n      },\n      {}      \n    );\n  }\n};\n```\n\n现在，我们来看一下如何使用它。\n\n```javascript\nvar bigTotalPriceReducer = combineTotalPriceReducers(reducers);\n\nvar initialState = {dollars: 0, euros:0, yens: 0, pounds: 0};\n\nvar totals = items.reduce(bigTotalPriceReducer, initialState);\n\nconsole.log(totals);\n\n/*\nObject {dollars: 1130, euros: 1015.11531904, yens: 127524.24, pounds: 785.81131152}\n*/\n```\n\n我希望这种方法可以使你在自己的需求内使用`reduce()`函数时有新的想法。\n\n使用`reduce`函数也可以实现保存每一次计算结果的功能。这在`Ramdajs`里的[scan](http://ramdajs.com/docs/#scan)函数已经实现了。\n\n[在JSFiddle里运行](https://jsfiddle.net/darul75/81tgt0cd/)\n","source":"_posts/javascript/2016-02-17-reminders-about-reduce-function-usage.md","raw":"---\nlayout: post\n\ntitle: 怎样`reduce()`数组\ntip-number: 48\ntip-username: darul75\ntip-username-profile: https://twitter.com/darul75\ntip-tldr: 使用`reduce()`函数时的一些建议\n\nredirect_from:\n  - /zh_cn/reminders-about-reduce-function-usage/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n文档里说`reduce()`方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始合并，最终为一个值。\n\n### `reduce()`\n\n[reduce()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce) 函数接收2个参数(M: 必填, O: 可选)：\n\n- (M) 回调**reducer 函数** 处理先前的结算结果和下一个元素直到序列结束。\n- (O) **初值** 作为第一次调用回调时的第一个参数。\n\n所以，让我们先看一个普通用法，之后再看一个复杂用法。\n\n### 普通用法 (累加，关联)\n\n我们正在逛亚马逊(单价为美元$) 我们的购物车实在太满了，我们来计算一下总价吧：\n\n```javascript\n// 当前的购物清单\nvar items = [{price: 10}, {price: 120}, {price: 1000}];\n\n// reducer函数\nvar reducer = function add(sumSoFar, nextPrice) { return sumSoFar + nextPrice.price; };\n\n// 开始运行\nvar total = items.reduce(reducer, 0);\n\nconsole.log(total); // 1130\n```\n\n`reduce`函数可选的参数在第一个例子里是基本变量数字0，但是它也可以是一个对象，数组... 而不仅是基本类型，之后我们将会看到。\n\n现在，我们收到一个20$的优惠券。\n\n```javascript\nvar total = items.reduce(reducer,-20);\n\nconsole.log(total); // 1110\n```\n\n### 进阶用法(结合)\n\n第二种用法的例子是`Redux`的[combineReducers](http://redux.js.org/docs/api/combineReducers.html)函数[源码](https://github.com/reactjs/redux/blob/master/src/combineReducers.js#L93)里用到的。\n\n此创意是将`reducer`函数拆分为独立的函数，最后组合成一个新的*单一的大`reducer`函数*。 \n\n为了说明，我们创建一个单一的对象，包含一些可以计算不同货币($, €...)的总价值的`reducer`函数。\n\n```javascript\nvar reducers = {\n  totalInDollar: function(state, item) {\n    state.dollars += item.price;\n    return state;\n  },\n  totalInEuros : function(state, item) {\n    state.euros += item.price * 0.897424392;\n    return state;\n  },\n  totalInPounds : function(state, item) {\n    state.pounds += item.price * 0.692688671;\n    return state;\n  },\n  totalInYen : function(state, item) {\n    state.yens += item.price * 113.852;\n    return state;\n  }\n  // more...\n};\n```\n\n然后我们建立一个瑞士军刀函数 \n\n- 能够调用每一部分的`reduce`函数\n- 返回一个新的`reducer`回调函数\n\n```javascript\nvar combineTotalPriceReducers = function(reducers) {\n  return function(state, item) {\n    return Object.keys(reducers).reduce(\n      function(nextState, key) {\n        reducers[key](state, item);\n        return state;\n      },\n      {}      \n    );\n  }\n};\n```\n\n现在，我们来看一下如何使用它。\n\n```javascript\nvar bigTotalPriceReducer = combineTotalPriceReducers(reducers);\n\nvar initialState = {dollars: 0, euros:0, yens: 0, pounds: 0};\n\nvar totals = items.reduce(bigTotalPriceReducer, initialState);\n\nconsole.log(totals);\n\n/*\nObject {dollars: 1130, euros: 1015.11531904, yens: 127524.24, pounds: 785.81131152}\n*/\n```\n\n我希望这种方法可以使你在自己的需求内使用`reduce()`函数时有新的想法。\n\n使用`reduce`函数也可以实现保存每一次计算结果的功能。这在`Ramdajs`里的[scan](http://ramdajs.com/docs/#scan)函数已经实现了。\n\n[在JSFiddle里运行](https://jsfiddle.net/darul75/81tgt0cd/)\n","slug":"javascript/2016-02-17-reminders-about-reduce-function-usage","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqek004rlyfydtpo9i7g","content":"<p>文档里说<code>reduce()</code>方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始合并，最终为一个值。</p>\n<h3 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce()\"></a><code>reduce()</code></h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\" target=\"_blank\" rel=\"external\">reduce()</a> 函数接收2个参数(M: 必填, O: 可选)：</p>\n<ul>\n<li>(M) 回调<strong>reducer 函数</strong> 处理先前的结算结果和下一个元素直到序列结束。</li>\n<li>(O) <strong>初值</strong> 作为第一次调用回调时的第一个参数。</li>\n</ul>\n<p>所以，让我们先看一个普通用法，之后再看一个复杂用法。</p>\n<h3 id=\"普通用法-累加，关联\"><a href=\"#普通用法-累加，关联\" class=\"headerlink\" title=\"普通用法 (累加，关联)\"></a>普通用法 (累加，关联)</h3><p>我们正在逛亚马逊(单价为美元$) 我们的购物车实在太满了，我们来计算一下总价吧：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 当前的购物清单</span></div><div class=\"line\"><span class=\"keyword\">var</span> items = [&#123;<span class=\"attr\">price</span>: <span class=\"number\">10</span>&#125;, &#123;<span class=\"attr\">price</span>: <span class=\"number\">120</span>&#125;, &#123;<span class=\"attr\">price</span>: <span class=\"number\">1000</span>&#125;];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// reducer函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> reducer = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">sumSoFar, nextPrice</span>) </span>&#123; <span class=\"keyword\">return</span> sumSoFar + nextPrice.price; &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 开始运行</span></div><div class=\"line\"><span class=\"keyword\">var</span> total = items.reduce(reducer, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(total); <span class=\"comment\">// 1130</span></div></pre></td></tr></table></figure>\n<p><code>reduce</code>函数可选的参数在第一个例子里是基本变量数字0，但是它也可以是一个对象，数组… 而不仅是基本类型，之后我们将会看到。</p>\n<p>现在，我们收到一个20$的优惠券。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> total = items.reduce(reducer,<span class=\"number\">-20</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(total); <span class=\"comment\">// 1110</span></div></pre></td></tr></table></figure>\n<h3 id=\"进阶用法-结合\"><a href=\"#进阶用法-结合\" class=\"headerlink\" title=\"进阶用法(结合)\"></a>进阶用法(结合)</h3><p>第二种用法的例子是<code>Redux</code>的<a href=\"http://redux.js.org/docs/api/combineReducers.html\" target=\"_blank\" rel=\"external\">combineReducers</a>函数<a href=\"https://github.com/reactjs/redux/blob/master/src/combineReducers.js#L93\" target=\"_blank\" rel=\"external\">源码</a>里用到的。</p>\n<p>此创意是将<code>reducer</code>函数拆分为独立的函数，最后组合成一个新的<em>单一的大<code>reducer</code>函数</em>。 </p>\n<p>为了说明，我们创建一个单一的对象，包含一些可以计算不同货币($, €…)的总价值的<code>reducer</code>函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> reducers = &#123;</div><div class=\"line\">  <span class=\"attr\">totalInDollar</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state, item</span>) </span>&#123;</div><div class=\"line\">    state.dollars += item.price;</div><div class=\"line\">    <span class=\"keyword\">return</span> state;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">totalInEuros</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state, item</span>) </span>&#123;</div><div class=\"line\">    state.euros += item.price * <span class=\"number\">0.897424392</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> state;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">totalInPounds</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state, item</span>) </span>&#123;</div><div class=\"line\">    state.pounds += item.price * <span class=\"number\">0.692688671</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> state;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">totalInYen</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state, item</span>) </span>&#123;</div><div class=\"line\">    state.yens += item.price * <span class=\"number\">113.852</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> state;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// more...</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>然后我们建立一个瑞士军刀函数 </p>\n<ul>\n<li>能够调用每一部分的<code>reduce</code>函数</li>\n<li>返回一个新的<code>reducer</code>回调函数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> combineTotalPriceReducers = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reducers</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state, item</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(reducers).reduce(</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nextState, key</span>) </span>&#123;</div><div class=\"line\">        reducers[key](state, item);</div><div class=\"line\">        <span class=\"keyword\">return</span> state;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;&#125;      </div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>现在，我们来看一下如何使用它。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> bigTotalPriceReducer = combineTotalPriceReducers(reducers);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> initialState = &#123;<span class=\"attr\">dollars</span>: <span class=\"number\">0</span>, <span class=\"attr\">euros</span>:<span class=\"number\">0</span>, <span class=\"attr\">yens</span>: <span class=\"number\">0</span>, <span class=\"attr\">pounds</span>: <span class=\"number\">0</span>&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> totals = items.reduce(bigTotalPriceReducer, initialState);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(totals);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">Object &#123;dollars: 1130, euros: 1015.11531904, yens: 127524.24, pounds: 785.81131152&#125;</div><div class=\"line\">*/</div></pre></td></tr></table></figure>\n<p>我希望这种方法可以使你在自己的需求内使用<code>reduce()</code>函数时有新的想法。</p>\n<p>使用<code>reduce</code>函数也可以实现保存每一次计算结果的功能。这在<code>Ramdajs</code>里的<a href=\"http://ramdajs.com/docs/#scan\" target=\"_blank\" rel=\"external\">scan</a>函数已经实现了。</p>\n<p><a href=\"https://jsfiddle.net/darul75/81tgt0cd/\" target=\"_blank\" rel=\"external\">在JSFiddle里运行</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>文档里说<code>reduce()</code>方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始合并，最终为一个值。</p>\n<h3 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce()\"></a><code>reduce()</code></h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\" target=\"_blank\" rel=\"external\">reduce()</a> 函数接收2个参数(M: 必填, O: 可选)：</p>\n<ul>\n<li>(M) 回调<strong>reducer 函数</strong> 处理先前的结算结果和下一个元素直到序列结束。</li>\n<li>(O) <strong>初值</strong> 作为第一次调用回调时的第一个参数。</li>\n</ul>\n<p>所以，让我们先看一个普通用法，之后再看一个复杂用法。</p>\n<h3 id=\"普通用法-累加，关联\"><a href=\"#普通用法-累加，关联\" class=\"headerlink\" title=\"普通用法 (累加，关联)\"></a>普通用法 (累加，关联)</h3><p>我们正在逛亚马逊(单价为美元$) 我们的购物车实在太满了，我们来计算一下总价吧：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 当前的购物清单</span></div><div class=\"line\"><span class=\"keyword\">var</span> items = [&#123;<span class=\"attr\">price</span>: <span class=\"number\">10</span>&#125;, &#123;<span class=\"attr\">price</span>: <span class=\"number\">120</span>&#125;, &#123;<span class=\"attr\">price</span>: <span class=\"number\">1000</span>&#125;];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// reducer函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> reducer = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">sumSoFar, nextPrice</span>) </span>&#123; <span class=\"keyword\">return</span> sumSoFar + nextPrice.price; &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 开始运行</span></div><div class=\"line\"><span class=\"keyword\">var</span> total = items.reduce(reducer, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(total); <span class=\"comment\">// 1130</span></div></pre></td></tr></table></figure>\n<p><code>reduce</code>函数可选的参数在第一个例子里是基本变量数字0，但是它也可以是一个对象，数组… 而不仅是基本类型，之后我们将会看到。</p>\n<p>现在，我们收到一个20$的优惠券。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> total = items.reduce(reducer,<span class=\"number\">-20</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(total); <span class=\"comment\">// 1110</span></div></pre></td></tr></table></figure>\n<h3 id=\"进阶用法-结合\"><a href=\"#进阶用法-结合\" class=\"headerlink\" title=\"进阶用法(结合)\"></a>进阶用法(结合)</h3><p>第二种用法的例子是<code>Redux</code>的<a href=\"http://redux.js.org/docs/api/combineReducers.html\" target=\"_blank\" rel=\"external\">combineReducers</a>函数<a href=\"https://github.com/reactjs/redux/blob/master/src/combineReducers.js#L93\" target=\"_blank\" rel=\"external\">源码</a>里用到的。</p>\n<p>此创意是将<code>reducer</code>函数拆分为独立的函数，最后组合成一个新的<em>单一的大<code>reducer</code>函数</em>。 </p>\n<p>为了说明，我们创建一个单一的对象，包含一些可以计算不同货币($, €…)的总价值的<code>reducer</code>函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> reducers = &#123;</div><div class=\"line\">  <span class=\"attr\">totalInDollar</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state, item</span>) </span>&#123;</div><div class=\"line\">    state.dollars += item.price;</div><div class=\"line\">    <span class=\"keyword\">return</span> state;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">totalInEuros</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state, item</span>) </span>&#123;</div><div class=\"line\">    state.euros += item.price * <span class=\"number\">0.897424392</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> state;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">totalInPounds</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state, item</span>) </span>&#123;</div><div class=\"line\">    state.pounds += item.price * <span class=\"number\">0.692688671</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> state;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">totalInYen</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state, item</span>) </span>&#123;</div><div class=\"line\">    state.yens += item.price * <span class=\"number\">113.852</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> state;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// more...</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>然后我们建立一个瑞士军刀函数 </p>\n<ul>\n<li>能够调用每一部分的<code>reduce</code>函数</li>\n<li>返回一个新的<code>reducer</code>回调函数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> combineTotalPriceReducers = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reducers</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state, item</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(reducers).reduce(</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nextState, key</span>) </span>&#123;</div><div class=\"line\">        reducers[key](state, item);</div><div class=\"line\">        <span class=\"keyword\">return</span> state;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;&#125;      </div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>现在，我们来看一下如何使用它。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> bigTotalPriceReducer = combineTotalPriceReducers(reducers);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> initialState = &#123;<span class=\"attr\">dollars</span>: <span class=\"number\">0</span>, <span class=\"attr\">euros</span>:<span class=\"number\">0</span>, <span class=\"attr\">yens</span>: <span class=\"number\">0</span>, <span class=\"attr\">pounds</span>: <span class=\"number\">0</span>&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> totals = items.reduce(bigTotalPriceReducer, initialState);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(totals);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">Object &#123;dollars: 1130, euros: 1015.11531904, yens: 127524.24, pounds: 785.81131152&#125;</div><div class=\"line\">*/</div></pre></td></tr></table></figure>\n<p>我希望这种方法可以使你在自己的需求内使用<code>reduce()</code>函数时有新的想法。</p>\n<p>使用<code>reduce</code>函数也可以实现保存每一次计算结果的功能。这在<code>Ramdajs</code>里的<a href=\"http://ramdajs.com/docs/#scan\" target=\"_blank\" rel=\"external\">scan</a>函数已经实现了。</p>\n<p><a href=\"https://jsfiddle.net/darul75/81tgt0cd/\" target=\"_blank\" rel=\"external\">在JSFiddle里运行</a></p>\n"},{"layout":"post","title":"简单获取unix时间戳","tip-number":49,"tip-username":"nmrony","tip-username-profile":"https://github.com/nmrony","tip-tldr":"在Javascript里，你可以简单的取得unix时间戳","redirect_from":["/zh_cn/extract-unix-timestamp-easily/"],"_content":"\n\n我们经常需要使用unix时间戳计算。有很多方法可以取得unix时间戳。目前取得unix时间戳最简单最快的方法是：\n\n```js\nconst dateTime = Date.now();\nconst timestamp = Math.floor(dateTime / 1000);\n```\n或\n\n```js\nconst dateTime = new Date().getTime();\nconst timestamp = Math.floor(dateTime / 1000);\n```\n\n要取得一个具体时间的unix时间戳，将`yyyy-mm-dd`或`YYYY-MM-DDT00:00:00Z`作为参数传递给`Date`构造函数。例如\n\n```js\nconst dateTime = new Date('2012-06-08').getTime();\nconst timestamp = Math.floor(dateTime / 1000);\n```\n\n你还可以像下面一样，在声明`Date`对象的时候添加一个`+`号\n\n```js\nconst dateTime = +new Date();\nconst timestamp = Math.floor(dateTime / 1000);\n```\n或者对于具体时间\n\n```js\nconst dateTime = +new Date('2012-06-08');\nconst timestamp = Math.floor(dateTime / 1000);\n```\n\n在底层，运行时调用了`Date`对象的`valueOf`方法。然后一元操作符`+`调用了之前返回值的`toNumber()`方法。想要了解更多内容请参考下面链接\n\n* [Date.prototype.valueOf](http://es5.github.io/#x15.9.5.8)\n* [Unary + operator](http://es5.github.io/#x11.4.6)\n* [toNumber()](http://es5.github.io/#x9.3)\n* [Date Javascript MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date)\n* [Date.parse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse)\n","source":"_posts/javascript/2016-02-26-extract-unix-timestamp-easily.md","raw":"---\nlayout: post\n\ntitle: 简单获取unix时间戳\ntip-number: 49\ntip-username: nmrony\ntip-username-profile: https://github.com/nmrony\ntip-tldr: 在Javascript里，你可以简单的取得unix时间戳\n\nredirect_from:\n  - /zh_cn/extract-unix-timestamp-easily/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n\n我们经常需要使用unix时间戳计算。有很多方法可以取得unix时间戳。目前取得unix时间戳最简单最快的方法是：\n\n```js\nconst dateTime = Date.now();\nconst timestamp = Math.floor(dateTime / 1000);\n```\n或\n\n```js\nconst dateTime = new Date().getTime();\nconst timestamp = Math.floor(dateTime / 1000);\n```\n\n要取得一个具体时间的unix时间戳，将`yyyy-mm-dd`或`YYYY-MM-DDT00:00:00Z`作为参数传递给`Date`构造函数。例如\n\n```js\nconst dateTime = new Date('2012-06-08').getTime();\nconst timestamp = Math.floor(dateTime / 1000);\n```\n\n你还可以像下面一样，在声明`Date`对象的时候添加一个`+`号\n\n```js\nconst dateTime = +new Date();\nconst timestamp = Math.floor(dateTime / 1000);\n```\n或者对于具体时间\n\n```js\nconst dateTime = +new Date('2012-06-08');\nconst timestamp = Math.floor(dateTime / 1000);\n```\n\n在底层，运行时调用了`Date`对象的`valueOf`方法。然后一元操作符`+`调用了之前返回值的`toNumber()`方法。想要了解更多内容请参考下面链接\n\n* [Date.prototype.valueOf](http://es5.github.io/#x15.9.5.8)\n* [Unary + operator](http://es5.github.io/#x11.4.6)\n* [toNumber()](http://es5.github.io/#x9.3)\n* [Date Javascript MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date)\n* [Date.parse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse)\n","slug":"javascript/2016-02-26-extract-unix-timestamp-easily","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqel004tlyfygaud871h","content":"<p>我们经常需要使用unix时间戳计算。有很多方法可以取得unix时间戳。目前取得unix时间戳最简单最快的方法是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> dateTime = <span class=\"built_in\">Date</span>.now();</div><div class=\"line\"><span class=\"keyword\">const</span> timestamp = <span class=\"built_in\">Math</span>.floor(dateTime / <span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> dateTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\"><span class=\"keyword\">const</span> timestamp = <span class=\"built_in\">Math</span>.floor(dateTime / <span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n<p>要取得一个具体时间的unix时间戳，将<code>yyyy-mm-dd</code>或<code>YYYY-MM-DDT00:00:00Z</code>作为参数传递给<code>Date</code>构造函数。例如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> dateTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">'2012-06-08'</span>).getTime();</div><div class=\"line\"><span class=\"keyword\">const</span> timestamp = <span class=\"built_in\">Math</span>.floor(dateTime / <span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n<p>你还可以像下面一样，在声明<code>Date</code>对象的时候添加一个<code>+</code>号</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> dateTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\"><span class=\"keyword\">const</span> timestamp = <span class=\"built_in\">Math</span>.floor(dateTime / <span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n<p>或者对于具体时间</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> dateTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">'2012-06-08'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> timestamp = <span class=\"built_in\">Math</span>.floor(dateTime / <span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n<p>在底层，运行时调用了<code>Date</code>对象的<code>valueOf</code>方法。然后一元操作符<code>+</code>调用了之前返回值的<code>toNumber()</code>方法。想要了解更多内容请参考下面链接</p>\n<ul>\n<li><a href=\"http://es5.github.io/#x15.9.5.8\" target=\"_blank\" rel=\"external\">Date.prototype.valueOf</a></li>\n<li><a href=\"http://es5.github.io/#x11.4.6\" target=\"_blank\" rel=\"external\">Unary + operator</a></li>\n<li><a href=\"http://es5.github.io/#x9.3\" target=\"_blank\" rel=\"external\">toNumber()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\" target=\"_blank\" rel=\"external\">Date Javascript MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse\" target=\"_blank\" rel=\"external\">Date.parse()</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>我们经常需要使用unix时间戳计算。有很多方法可以取得unix时间戳。目前取得unix时间戳最简单最快的方法是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> dateTime = <span class=\"built_in\">Date</span>.now();</div><div class=\"line\"><span class=\"keyword\">const</span> timestamp = <span class=\"built_in\">Math</span>.floor(dateTime / <span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> dateTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\"><span class=\"keyword\">const</span> timestamp = <span class=\"built_in\">Math</span>.floor(dateTime / <span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n<p>要取得一个具体时间的unix时间戳，将<code>yyyy-mm-dd</code>或<code>YYYY-MM-DDT00:00:00Z</code>作为参数传递给<code>Date</code>构造函数。例如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> dateTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">'2012-06-08'</span>).getTime();</div><div class=\"line\"><span class=\"keyword\">const</span> timestamp = <span class=\"built_in\">Math</span>.floor(dateTime / <span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n<p>你还可以像下面一样，在声明<code>Date</code>对象的时候添加一个<code>+</code>号</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> dateTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\"><span class=\"keyword\">const</span> timestamp = <span class=\"built_in\">Math</span>.floor(dateTime / <span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n<p>或者对于具体时间</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> dateTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">'2012-06-08'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> timestamp = <span class=\"built_in\">Math</span>.floor(dateTime / <span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n<p>在底层，运行时调用了<code>Date</code>对象的<code>valueOf</code>方法。然后一元操作符<code>+</code>调用了之前返回值的<code>toNumber()</code>方法。想要了解更多内容请参考下面链接</p>\n<ul>\n<li><a href=\"http://es5.github.io/#x15.9.5.8\" target=\"_blank\" rel=\"external\">Date.prototype.valueOf</a></li>\n<li><a href=\"http://es5.github.io/#x11.4.6\" target=\"_blank\" rel=\"external\">Unary + operator</a></li>\n<li><a href=\"http://es5.github.io/#x9.3\" target=\"_blank\" rel=\"external\">toNumber()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\" target=\"_blank\" rel=\"external\">Date Javascript MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse\" target=\"_blank\" rel=\"external\">Date.parse()</a></li>\n</ul>\n"},{"layout":"post","title":"实用的`log`技巧","tip-number":50,"tip-username":"zackhall","tip-username-profile":"https://twitter.com/zthall","tip-tldr":"运用`&&`与条件断点的实用的`log`技巧","redirect_from":["/zh_cn/helpful-console-log-hacks/"],"_content":"\n## 使用条件断点输出`log`\n\n如果你想当函数每次被调用时都在控制台打印一个值，你可以应用条件断点来实现。打开你的开发工具，找到你准备打印的值所在的函数然后使用如下条件设置一个条件断点：\n\n```js\nconsole.log(data.value) && false\n```\n\n条件断点只有在条件运行的结果为`true`时才会中断页面。所以使用`console.log('foo') && false`这样的条件，由于你把`false`放在了`AND`条件中，所以结果肯定是`false`。因此这并不会中断页面但是会打印`log`到控制台。这也可以应用在计算某个函数或回调被调用了多少次上面。\n\n这里有各个平台下设置条件断点的方法：[Edge](https://dev.windows.com/en-us/microsoft-edge/platform/documentation/f12-devtools-guide/debugger/#setting-and-managing-breakpoints \"Managing Breakpoints in Edge\")、[Chrome](https://developer.chrome.com/devtools/docs/javascript-debugging#breakpoints \"Managing Breakpoints in Chrome\")、[Firefox](https://developer.mozilla.org/en-US/docs/Tools/Debugger/How_to/Set_a_conditional_breakpoint \"Managing Breakpoints in Firefox\")、[Safari](https://developer.apple.com/library/mac/documentation/AppleApplications/Conceptual/Safari_Developer_Guide/Debugger/Debugger.html \"Managing Breakpoints in Safari\")。\n\n## 打印函数到控制台\n\n你曾经有过打算打印函数到控制台却不能看到函数的代码的情况吗？最快的方法查看函数的代码是将其与空字符串连接，从而将其强制转换为字符串。\n\n```js\nconsole.log(funcVariable + '');\n```","source":"_posts/javascript/2016-03-03-helpful-console-log-hacks.md","raw":"---\nlayout: post\n\ntitle: 实用的`log`技巧\ntip-number: 50\ntip-username: zackhall\ntip-username-profile: https://twitter.com/zthall\ntip-tldr: 运用`&&`与条件断点的实用的`log`技巧\n\nredirect_from:\n  - /zh_cn/helpful-console-log-hacks/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n## 使用条件断点输出`log`\n\n如果你想当函数每次被调用时都在控制台打印一个值，你可以应用条件断点来实现。打开你的开发工具，找到你准备打印的值所在的函数然后使用如下条件设置一个条件断点：\n\n```js\nconsole.log(data.value) && false\n```\n\n条件断点只有在条件运行的结果为`true`时才会中断页面。所以使用`console.log('foo') && false`这样的条件，由于你把`false`放在了`AND`条件中，所以结果肯定是`false`。因此这并不会中断页面但是会打印`log`到控制台。这也可以应用在计算某个函数或回调被调用了多少次上面。\n\n这里有各个平台下设置条件断点的方法：[Edge](https://dev.windows.com/en-us/microsoft-edge/platform/documentation/f12-devtools-guide/debugger/#setting-and-managing-breakpoints \"Managing Breakpoints in Edge\")、[Chrome](https://developer.chrome.com/devtools/docs/javascript-debugging#breakpoints \"Managing Breakpoints in Chrome\")、[Firefox](https://developer.mozilla.org/en-US/docs/Tools/Debugger/How_to/Set_a_conditional_breakpoint \"Managing Breakpoints in Firefox\")、[Safari](https://developer.apple.com/library/mac/documentation/AppleApplications/Conceptual/Safari_Developer_Guide/Debugger/Debugger.html \"Managing Breakpoints in Safari\")。\n\n## 打印函数到控制台\n\n你曾经有过打算打印函数到控制台却不能看到函数的代码的情况吗？最快的方法查看函数的代码是将其与空字符串连接，从而将其强制转换为字符串。\n\n```js\nconsole.log(funcVariable + '');\n```","slug":"javascript/2016-03-03-helpful-console-log-hacks","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqen004vlyfybfvp1d1c","content":"<h2 id=\"使用条件断点输出log\"><a href=\"#使用条件断点输出log\" class=\"headerlink\" title=\"使用条件断点输出log\"></a>使用条件断点输出<code>log</code></h2><p>如果你想当函数每次被调用时都在控制台打印一个值，你可以应用条件断点来实现。打开你的开发工具，找到你准备打印的值所在的函数然后使用如下条件设置一个条件断点：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(data.value) &amp;&amp; <span class=\"literal\">false</span></div></pre></td></tr></table></figure>\n<p>条件断点只有在条件运行的结果为<code>true</code>时才会中断页面。所以使用<code>console.log(&#39;foo&#39;) &amp;&amp; false</code>这样的条件，由于你把<code>false</code>放在了<code>AND</code>条件中，所以结果肯定是<code>false</code>。因此这并不会中断页面但是会打印<code>log</code>到控制台。这也可以应用在计算某个函数或回调被调用了多少次上面。</p>\n<p>这里有各个平台下设置条件断点的方法：<a href=\"https://dev.windows.com/en-us/microsoft-edge/platform/documentation/f12-devtools-guide/debugger/#setting-and-managing-breakpoints\" title=\"Managing Breakpoints in Edge\" target=\"_blank\" rel=\"external\">Edge</a>、<a href=\"https://developer.chrome.com/devtools/docs/javascript-debugging#breakpoints\" title=\"Managing Breakpoints in Chrome\" target=\"_blank\" rel=\"external\">Chrome</a>、<a href=\"https://developer.mozilla.org/en-US/docs/Tools/Debugger/How_to/Set_a_conditional_breakpoint\" title=\"Managing Breakpoints in Firefox\" target=\"_blank\" rel=\"external\">Firefox</a>、<a href=\"https://developer.apple.com/library/mac/documentation/AppleApplications/Conceptual/Safari_Developer_Guide/Debugger/Debugger.html\" title=\"Managing Breakpoints in Safari\" target=\"_blank\" rel=\"external\">Safari</a>。</p>\n<h2 id=\"打印函数到控制台\"><a href=\"#打印函数到控制台\" class=\"headerlink\" title=\"打印函数到控制台\"></a>打印函数到控制台</h2><p>你曾经有过打算打印函数到控制台却不能看到函数的代码的情况吗？最快的方法查看函数的代码是将其与空字符串连接，从而将其强制转换为字符串。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(funcVariable + <span class=\"string\">''</span>);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"使用条件断点输出log\"><a href=\"#使用条件断点输出log\" class=\"headerlink\" title=\"使用条件断点输出log\"></a>使用条件断点输出<code>log</code></h2><p>如果你想当函数每次被调用时都在控制台打印一个值，你可以应用条件断点来实现。打开你的开发工具，找到你准备打印的值所在的函数然后使用如下条件设置一个条件断点：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(data.value) &amp;&amp; <span class=\"literal\">false</span></div></pre></td></tr></table></figure>\n<p>条件断点只有在条件运行的结果为<code>true</code>时才会中断页面。所以使用<code>console.log(&#39;foo&#39;) &amp;&amp; false</code>这样的条件，由于你把<code>false</code>放在了<code>AND</code>条件中，所以结果肯定是<code>false</code>。因此这并不会中断页面但是会打印<code>log</code>到控制台。这也可以应用在计算某个函数或回调被调用了多少次上面。</p>\n<p>这里有各个平台下设置条件断点的方法：<a href=\"https://dev.windows.com/en-us/microsoft-edge/platform/documentation/f12-devtools-guide/debugger/#setting-and-managing-breakpoints\" title=\"Managing Breakpoints in Edge\" target=\"_blank\" rel=\"external\">Edge</a>、<a href=\"https://developer.chrome.com/devtools/docs/javascript-debugging#breakpoints\" title=\"Managing Breakpoints in Chrome\" target=\"_blank\" rel=\"external\">Chrome</a>、<a href=\"https://developer.mozilla.org/en-US/docs/Tools/Debugger/How_to/Set_a_conditional_breakpoint\" title=\"Managing Breakpoints in Firefox\" target=\"_blank\" rel=\"external\">Firefox</a>、<a href=\"https://developer.apple.com/library/mac/documentation/AppleApplications/Conceptual/Safari_Developer_Guide/Debugger/Debugger.html\" title=\"Managing Breakpoints in Safari\" target=\"_blank\" rel=\"external\">Safari</a>。</p>\n<h2 id=\"打印函数到控制台\"><a href=\"#打印函数到控制台\" class=\"headerlink\" title=\"打印函数到控制台\"></a>打印函数到控制台</h2><p>你曾经有过打算打印函数到控制台却不能看到函数的代码的情况吗？最快的方法查看函数的代码是将其与空字符串连接，从而将其强制转换为字符串。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(funcVariable + <span class=\"string\">''</span>);</div></pre></td></tr></table></figure>"},{"layout":"post","title":"简单监听DOM事件","tip-number":51,"tip-username":"octopitus","tip-username-profile":"https://github.com/octopitus","tip-tldr":"简单而优雅地操作DOM事件的方法","redirect_from":["/zh_cn/DOM-event-listening-made-easy/"],"_content":"很多人还在这样做：\n\n- `element.addEventListener('type', obj.method.bind(obj))`\n- `element.addEventListener('type', function (event) {})`\n- `element.addEventListener('type', (event) => {})`\n\n上面所有的例子都创建了一个匿名事件监控句柄，且在不需要时无法删除它。这在你不需要某句柄，而它却被用户或[事件冒泡](http://www.javascripter.net/faq/eventbubbling.htm)偶然触发时，可能会导致性能问题或不必要的逻辑问题。\n\n更安全的事件处理方式如下：\n\n使用引用：\n\n```js\nconst handler = function () {\n  console.log(\"Tada!\")\n}\nelement.addEventListener(\"click\", handler)\n// 之后\nelement.removeEventListener(\"click\", handler)\n```\n\n命名的函数移除它本身:\n\n```js\nelement.addEventListener('click', function click(e) {\n  if (someCondition) {\n    return e.currentTarget.removeEventListener('click', click);\n  }\n});\n```\n\n更好的写法：\n\n```js\nfunction handleEvent (eventName, {onElement, withCallback, useCapture = false} = {}, thisArg) {\n  const element = onElement || document.documentElement\n\n  function handler (event) {\n    if (typeof withCallback === 'function') {\n      withCallback.call(thisArg, event)\n    }\n  }\n\n  handler.destroy = function () {\n    return element.removeEventListener(eventName, handler, useCapture)\n  }\n\n  element.addEventListener(eventName, handler, useCapture)\n  return handler\n}\n\n// 你需要的时候\nconst handleClick = handleEvent('click', {\n  onElement: element,\n  withCallback: (event) => {\n    console.log('Tada!')\n  }\n})\n\n// 你想删除它的时候\nhandleClick.destroy()\n```\n","source":"_posts/javascript/2016-03-16-DOM-event-listening-made-easy.md","raw":"---\nlayout: post\n\ntitle: 简单监听DOM事件\ntip-number: 51\ntip-username: octopitus\ntip-username-profile: https://github.com/octopitus\ntip-tldr: 简单而优雅地操作DOM事件的方法\n\nredirect_from:\n  - /zh_cn/DOM-event-listening-made-easy/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n很多人还在这样做：\n\n- `element.addEventListener('type', obj.method.bind(obj))`\n- `element.addEventListener('type', function (event) {})`\n- `element.addEventListener('type', (event) => {})`\n\n上面所有的例子都创建了一个匿名事件监控句柄，且在不需要时无法删除它。这在你不需要某句柄，而它却被用户或[事件冒泡](http://www.javascripter.net/faq/eventbubbling.htm)偶然触发时，可能会导致性能问题或不必要的逻辑问题。\n\n更安全的事件处理方式如下：\n\n使用引用：\n\n```js\nconst handler = function () {\n  console.log(\"Tada!\")\n}\nelement.addEventListener(\"click\", handler)\n// 之后\nelement.removeEventListener(\"click\", handler)\n```\n\n命名的函数移除它本身:\n\n```js\nelement.addEventListener('click', function click(e) {\n  if (someCondition) {\n    return e.currentTarget.removeEventListener('click', click);\n  }\n});\n```\n\n更好的写法：\n\n```js\nfunction handleEvent (eventName, {onElement, withCallback, useCapture = false} = {}, thisArg) {\n  const element = onElement || document.documentElement\n\n  function handler (event) {\n    if (typeof withCallback === 'function') {\n      withCallback.call(thisArg, event)\n    }\n  }\n\n  handler.destroy = function () {\n    return element.removeEventListener(eventName, handler, useCapture)\n  }\n\n  element.addEventListener(eventName, handler, useCapture)\n  return handler\n}\n\n// 你需要的时候\nconst handleClick = handleEvent('click', {\n  onElement: element,\n  withCallback: (event) => {\n    console.log('Tada!')\n  }\n})\n\n// 你想删除它的时候\nhandleClick.destroy()\n```\n","slug":"javascript/2016-03-16-DOM-event-listening-made-easy","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqeo004xlyfyqwxpzi6t","content":"<p>很多人还在这样做：</p>\n<ul>\n<li><code>element.addEventListener(&#39;type&#39;, obj.method.bind(obj))</code></li>\n<li><code>element.addEventListener(&#39;type&#39;, function (event) {})</code></li>\n<li><code>element.addEventListener(&#39;type&#39;, (event) =&gt; {})</code></li>\n</ul>\n<p>上面所有的例子都创建了一个匿名事件监控句柄，且在不需要时无法删除它。这在你不需要某句柄，而它却被用户或<a href=\"http://www.javascripter.net/faq/eventbubbling.htm\" target=\"_blank\" rel=\"external\">事件冒泡</a>偶然触发时，可能会导致性能问题或不必要的逻辑问题。</p>\n<p>更安全的事件处理方式如下：</p>\n<p>使用引用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> handler = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Tada!\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">element.addEventListener(<span class=\"string\">\"click\"</span>, handler)</div><div class=\"line\"><span class=\"comment\">// 之后</span></div><div class=\"line\">element.removeEventListener(<span class=\"string\">\"click\"</span>, handler)</div></pre></td></tr></table></figure>\n<p>命名的函数移除它本身:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">element.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">click</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (someCondition) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> e.currentTarget.removeEventListener(<span class=\"string\">'click'</span>, click);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>更好的写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleEvent</span> (<span class=\"params\">eventName, &#123;onElement, withCallback, useCapture = false&#125; = &#123;&#125;, thisArg</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> element = onElement || <span class=\"built_in\">document</span>.documentElement</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handler</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> withCallback === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      withCallback.call(thisArg, event)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  handler.destroy = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> element.removeEventListener(eventName, handler, useCapture)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  element.addEventListener(eventName, handler, useCapture)</div><div class=\"line\">  <span class=\"keyword\">return</span> handler</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 你需要的时候</span></div><div class=\"line\"><span class=\"keyword\">const</span> handleClick = handleEvent(<span class=\"string\">'click'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">onElement</span>: element,</div><div class=\"line\">  <span class=\"attr\">withCallback</span>: <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Tada!'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 你想删除它的时候</span></div><div class=\"line\">handleClick.destroy()</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>很多人还在这样做：</p>\n<ul>\n<li><code>element.addEventListener(&#39;type&#39;, obj.method.bind(obj))</code></li>\n<li><code>element.addEventListener(&#39;type&#39;, function (event) {})</code></li>\n<li><code>element.addEventListener(&#39;type&#39;, (event) =&gt; {})</code></li>\n</ul>\n<p>上面所有的例子都创建了一个匿名事件监控句柄，且在不需要时无法删除它。这在你不需要某句柄，而它却被用户或<a href=\"http://www.javascripter.net/faq/eventbubbling.htm\" target=\"_blank\" rel=\"external\">事件冒泡</a>偶然触发时，可能会导致性能问题或不必要的逻辑问题。</p>\n<p>更安全的事件处理方式如下：</p>\n<p>使用引用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> handler = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Tada!\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">element.addEventListener(<span class=\"string\">\"click\"</span>, handler)</div><div class=\"line\"><span class=\"comment\">// 之后</span></div><div class=\"line\">element.removeEventListener(<span class=\"string\">\"click\"</span>, handler)</div></pre></td></tr></table></figure>\n<p>命名的函数移除它本身:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">element.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">click</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (someCondition) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> e.currentTarget.removeEventListener(<span class=\"string\">'click'</span>, click);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>更好的写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleEvent</span> (<span class=\"params\">eventName, &#123;onElement, withCallback, useCapture = false&#125; = &#123;&#125;, thisArg</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> element = onElement || <span class=\"built_in\">document</span>.documentElement</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handler</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> withCallback === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      withCallback.call(thisArg, event)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  handler.destroy = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> element.removeEventListener(eventName, handler, useCapture)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  element.addEventListener(eventName, handler, useCapture)</div><div class=\"line\">  <span class=\"keyword\">return</span> handler</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 你需要的时候</span></div><div class=\"line\"><span class=\"keyword\">const</span> handleClick = handleEvent(<span class=\"string\">'click'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">onElement</span>: element,</div><div class=\"line\">  <span class=\"attr\">withCallback</span>: <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Tada!'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 你想删除它的时候</span></div><div class=\"line\">handleClick.destroy()</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"new的返回值","tip-number":52,"tip-username":"Morklympious","tip-username-profile":"https://github.com/morklympious","tip-tldr":"理解使用new与不使用new时将返回什么值","redirect_from":["/zh_cn/return-values-with-the-new-operator/"],"_content":"\n你将会遇到在JavaScript中使用`new`来分配新对象的一些情况。这将会扰乱你的思绪，除非你阅读了这篇文章并理解在内部发生了什么。\n\nJavaScript中的`new`操作在合理的情况下然会一个新的对象实例。我们来看，我们有一个构造函数：\n\n````js\nfunction Thing() {\n  this.one = 1;\n  this.two = 2;\n}\n\nvar myThing = new Thing();\n\nmyThing.one // 1\nmyThing.two // 2\n````\n\n__提示__: `this`指向`new`产生的新对象。否则如果`Thing()`不是用`new`调用, __将不会生成新对象__, 而且`this` 将会指向全局对象，也就是`window`。这意味着：\n\n1. 你突然有两个全局变量`one`和`two`。\n2. `myThing`现在为`undefined`，因为`Thing()`中没有返回任何东西。\n\n现在我们又有一个例子，而它却有些让人搞不懂。我们看我在构造函数里加了一条语句：\n\n````js\nfunction Thing() {\n  this.one = 1;\n  this.two = 2;\n\n  return 5;\n}\n\nvar myThing = new Thing();\n````\n\n现在`myThing`等于什么呢？5？一个对象？还是我受伤的自我价值观？或许永远不知道！\n\n除了能知道：\n\n````js\nmyThing.one // 1\nmyThing.two // 2\n````\n\n很有趣，我们构造函数里`返回`的5怎么找不到了？这很奇怪不是吗？函数都做了什么？5呢？让我们再试试别的。\n\n我们返回一个非原始类型试一下，比如一个对象：\n\n````js\nfunction Thing() {\n  this.one = 1;\n  this.two = 2;\n\n  return {\n    three: 3,\n    four: 4\n  };\n}\n\nvar myThing = new Thing();\n````\n\n让我们试一试。直接`console.log`出所有内容：\n\n````js\nconsole.log(myThing);\n/*\n  Object {three: 3, four: 4}\n  this.one 和 this.two发生了什么!?\n  他们被覆盖了，朋友。\n*/\n````\n\n__我们了解到：__ 当你使用`new`关键字调用一个函数的时候，你可以使用`this`关键字给其设置参数（但这些你应该已经知道了）。使用`new`关键字调用一个返回原始变量的函数将不会返回你指定的值，而是返回函数的实例`this`（你指定参数的那个对象，像 `this.one = 1;`).\n\n然而，返回一个非原始变量像`object`、`array`或`function`将会覆盖`this`实例，并返回那个非原始变量，有效的破坏了你分配给`this`的所有工作。\n","source":"_posts/javascript/2016-04-05-return-values-with-the-new-operator.md","raw":"---\nlayout: post\n\ntitle: new的返回值\ntip-number: 52\ntip-username: Morklympious\ntip-username-profile: https://github.com/morklympious\ntip-tldr: 理解使用new与不使用new时将返回什么值\n\nredirect_from:\n  - /zh_cn/return-values-with-the-new-operator/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n你将会遇到在JavaScript中使用`new`来分配新对象的一些情况。这将会扰乱你的思绪，除非你阅读了这篇文章并理解在内部发生了什么。\n\nJavaScript中的`new`操作在合理的情况下然会一个新的对象实例。我们来看，我们有一个构造函数：\n\n````js\nfunction Thing() {\n  this.one = 1;\n  this.two = 2;\n}\n\nvar myThing = new Thing();\n\nmyThing.one // 1\nmyThing.two // 2\n````\n\n__提示__: `this`指向`new`产生的新对象。否则如果`Thing()`不是用`new`调用, __将不会生成新对象__, 而且`this` 将会指向全局对象，也就是`window`。这意味着：\n\n1. 你突然有两个全局变量`one`和`two`。\n2. `myThing`现在为`undefined`，因为`Thing()`中没有返回任何东西。\n\n现在我们又有一个例子，而它却有些让人搞不懂。我们看我在构造函数里加了一条语句：\n\n````js\nfunction Thing() {\n  this.one = 1;\n  this.two = 2;\n\n  return 5;\n}\n\nvar myThing = new Thing();\n````\n\n现在`myThing`等于什么呢？5？一个对象？还是我受伤的自我价值观？或许永远不知道！\n\n除了能知道：\n\n````js\nmyThing.one // 1\nmyThing.two // 2\n````\n\n很有趣，我们构造函数里`返回`的5怎么找不到了？这很奇怪不是吗？函数都做了什么？5呢？让我们再试试别的。\n\n我们返回一个非原始类型试一下，比如一个对象：\n\n````js\nfunction Thing() {\n  this.one = 1;\n  this.two = 2;\n\n  return {\n    three: 3,\n    four: 4\n  };\n}\n\nvar myThing = new Thing();\n````\n\n让我们试一试。直接`console.log`出所有内容：\n\n````js\nconsole.log(myThing);\n/*\n  Object {three: 3, four: 4}\n  this.one 和 this.two发生了什么!?\n  他们被覆盖了，朋友。\n*/\n````\n\n__我们了解到：__ 当你使用`new`关键字调用一个函数的时候，你可以使用`this`关键字给其设置参数（但这些你应该已经知道了）。使用`new`关键字调用一个返回原始变量的函数将不会返回你指定的值，而是返回函数的实例`this`（你指定参数的那个对象，像 `this.one = 1;`).\n\n然而，返回一个非原始变量像`object`、`array`或`function`将会覆盖`this`实例，并返回那个非原始变量，有效的破坏了你分配给`this`的所有工作。\n","slug":"javascript/2016-04-05-return-values-with-the-new-operator","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqeq004zlyfy809ohda6","content":"<p>你将会遇到在JavaScript中使用<code>new</code>来分配新对象的一些情况。这将会扰乱你的思绪，除非你阅读了这篇文章并理解在内部发生了什么。</p>\n<p>JavaScript中的<code>new</code>操作在合理的情况下然会一个新的对象实例。我们来看，我们有一个构造函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Thing</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.one = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.two = <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> myThing = <span class=\"keyword\">new</span> Thing();</div><div class=\"line\"></div><div class=\"line\">myThing.one <span class=\"comment\">// 1</span></div><div class=\"line\">myThing.two <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure>\n<p><strong>提示</strong>: <code>this</code>指向<code>new</code>产生的新对象。否则如果<code>Thing()</code>不是用<code>new</code>调用, <strong>将不会生成新对象</strong>, 而且<code>this</code> 将会指向全局对象，也就是<code>window</code>。这意味着：</p>\n<ol>\n<li>你突然有两个全局变量<code>one</code>和<code>two</code>。</li>\n<li><code>myThing</code>现在为<code>undefined</code>，因为<code>Thing()</code>中没有返回任何东西。</li>\n</ol>\n<p>现在我们又有一个例子，而它却有些让人搞不懂。我们看我在构造函数里加了一条语句：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Thing</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.one = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.two = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">5</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> myThing = <span class=\"keyword\">new</span> Thing();</div></pre></td></tr></table></figure>\n<p>现在<code>myThing</code>等于什么呢？5？一个对象？还是我受伤的自我价值观？或许永远不知道！</p>\n<p>除了能知道：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">myThing.one <span class=\"comment\">// 1</span></div><div class=\"line\">myThing.two <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure>\n<p>很有趣，我们构造函数里<code>返回</code>的5怎么找不到了？这很奇怪不是吗？函数都做了什么？5呢？让我们再试试别的。</p>\n<p>我们返回一个非原始类型试一下，比如一个对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Thing</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.one = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.two = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">three</span>: <span class=\"number\">3</span>,</div><div class=\"line\">    <span class=\"attr\">four</span>: <span class=\"number\">4</span></div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> myThing = <span class=\"keyword\">new</span> Thing();</div></pre></td></tr></table></figure>\n<p>让我们试一试。直接<code>console.log</code>出所有内容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(myThing);</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">  Object &#123;three: 3, four: 4&#125;</div><div class=\"line\">  this.one 和 this.two发生了什么!?</div><div class=\"line\">  他们被覆盖了，朋友。</div><div class=\"line\">*/</div></pre></td></tr></table></figure>\n<p><strong>我们了解到：</strong> 当你使用<code>new</code>关键字调用一个函数的时候，你可以使用<code>this</code>关键字给其设置参数（但这些你应该已经知道了）。使用<code>new</code>关键字调用一个返回原始变量的函数将不会返回你指定的值，而是返回函数的实例<code>this</code>（你指定参数的那个对象，像 <code>this.one = 1;</code>).</p>\n<p>然而，返回一个非原始变量像<code>object</code>、<code>array</code>或<code>function</code>将会覆盖<code>this</code>实例，并返回那个非原始变量，有效的破坏了你分配给<code>this</code>的所有工作。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>你将会遇到在JavaScript中使用<code>new</code>来分配新对象的一些情况。这将会扰乱你的思绪，除非你阅读了这篇文章并理解在内部发生了什么。</p>\n<p>JavaScript中的<code>new</code>操作在合理的情况下然会一个新的对象实例。我们来看，我们有一个构造函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Thing</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.one = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.two = <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> myThing = <span class=\"keyword\">new</span> Thing();</div><div class=\"line\"></div><div class=\"line\">myThing.one <span class=\"comment\">// 1</span></div><div class=\"line\">myThing.two <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure>\n<p><strong>提示</strong>: <code>this</code>指向<code>new</code>产生的新对象。否则如果<code>Thing()</code>不是用<code>new</code>调用, <strong>将不会生成新对象</strong>, 而且<code>this</code> 将会指向全局对象，也就是<code>window</code>。这意味着：</p>\n<ol>\n<li>你突然有两个全局变量<code>one</code>和<code>two</code>。</li>\n<li><code>myThing</code>现在为<code>undefined</code>，因为<code>Thing()</code>中没有返回任何东西。</li>\n</ol>\n<p>现在我们又有一个例子，而它却有些让人搞不懂。我们看我在构造函数里加了一条语句：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Thing</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.one = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.two = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">5</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> myThing = <span class=\"keyword\">new</span> Thing();</div></pre></td></tr></table></figure>\n<p>现在<code>myThing</code>等于什么呢？5？一个对象？还是我受伤的自我价值观？或许永远不知道！</p>\n<p>除了能知道：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">myThing.one <span class=\"comment\">// 1</span></div><div class=\"line\">myThing.two <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure>\n<p>很有趣，我们构造函数里<code>返回</code>的5怎么找不到了？这很奇怪不是吗？函数都做了什么？5呢？让我们再试试别的。</p>\n<p>我们返回一个非原始类型试一下，比如一个对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Thing</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.one = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.two = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">three</span>: <span class=\"number\">3</span>,</div><div class=\"line\">    <span class=\"attr\">four</span>: <span class=\"number\">4</span></div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> myThing = <span class=\"keyword\">new</span> Thing();</div></pre></td></tr></table></figure>\n<p>让我们试一试。直接<code>console.log</code>出所有内容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(myThing);</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">  Object &#123;three: 3, four: 4&#125;</div><div class=\"line\">  this.one 和 this.two发生了什么!?</div><div class=\"line\">  他们被覆盖了，朋友。</div><div class=\"line\">*/</div></pre></td></tr></table></figure>\n<p><strong>我们了解到：</strong> 当你使用<code>new</code>关键字调用一个函数的时候，你可以使用<code>this</code>关键字给其设置参数（但这些你应该已经知道了）。使用<code>new</code>关键字调用一个返回原始变量的函数将不会返回你指定的值，而是返回函数的实例<code>this</code>（你指定参数的那个对象，像 <code>this.one = 1;</code>).</p>\n<p>然而，返回一个非原始变量像<code>object</code>、<code>array</code>或<code>function</code>将会覆盖<code>this</code>实例，并返回那个非原始变量，有效的破坏了你分配给<code>this</code>的所有工作。</p>\n"},{"layout":"post","title":"取得文件扩展名","tip-number":53,"tip-username":"richzw","tip-username-profile":"https://github.com/richzw","tip-tldr":"如何更加高效的取得文件扩展名呢？","redirect_from":["/zh_cn/get-file-extension/"],"_content":"\n### 问题 1: 怎样取得文件扩展名?\n\n```javascript\nvar file1 = \"50.xsl\";\nvar file2 = \"30.doc\";\ngetFileExtension(file1); //returs xsl\ngetFileExtension(file2); //returs doc\n\nfunction getFileExtension(filename) {\n  /*TODO*/\n}\n```\n\n### 解决方法 1: 正则表达式\n\n```js\nfunction getFileExtension1(filename) {\n  return (/[.]/.exec(filename)) ? /[^.]+$/.exec(filename)[0] : undefined;\n}\n```\n\n### 解决方法 2: String的`split`方法\n\n```js\nfunction getFileExtension2(filename) {\n  return filename.split('.').pop();\n}\n```\n\n这两种解决方法不能解决一些边缘情况，这有另一个更加强大的解决方法。\n\n### 解决方法 3: String的`slice`、`lastIndexOf`方法\n\n```js\nfunction getFileExtension3(filename) {\n  return filename.slice((filename.lastIndexOf(\".\") - 1 >>> 0) + 2);\n}\n\nconsole.log(getFileExtension3(''));                            // ''\nconsole.log(getFileExtension3('filename'));                    // ''\nconsole.log(getFileExtension3('filename.txt'));                // 'txt'\nconsole.log(getFileExtension3('.hiddenfile'));                 // ''\nconsole.log(getFileExtension3('filename.with.many.dots.ext')); // 'ext'\n```\n\n_这是如何实现的呢?_\n\n- [String.lastIndexOf()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf) 方法返回指定值（本例中的`'.'`）在调用该方法的字符串中最后出现的位置，如果没找到则返回 -1。\n- 对于`'filename'`和`'.hiddenfile'`，`lastIndexOf`的返回值分别为`0`和`-1`[无符号右移操作符(>>>)](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#%3E%3E%3E_%28Zero-fill_right_shift%29) 将`-1`转换为`4294967295`，将`-2`转换为`4294967294`，这个方法可以保证边缘情况时文件名不变。\n- [String.prototype.slice()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/slice) 从上面计算的索引处提取文件的扩展名。如果索引比文件名的长度大，结果为`\"\"`。\n\n### 对比\n\n| 解决方法                                  | 参数           | 结果  |\n| ----------------------------------------- |:-------------------:|:--------:|\n| 解决方法 1: Regular Expression            | ''<br>  'filename' <br> 'filename.txt' <br> '.hiddenfile' <br> 'filename.with.many.dots.ext' | undefined <br> undefined <br> 'txt' <br> 'hiddenfile' <br> 'ext' <br> |\n| 解决方法 2: String `split`                | ''<br>  'filename' <br> 'filename.txt' <br> '.hiddenfile' <br> 'filename.with.many.dots.ext'            | '' <br> 'filename' <br> 'txt' <br> 'hiddenfile' <br> 'ext' <br> |\n| 解决方法 3: String `slice`, `lastIndexOf` | ''<br>  'filename' <br> 'filename.txt' <br> '.hiddenfile' <br> 'filename.with.many.dots.ext'            | '' <br> '' <br> 'txt' <br> '' <br> 'ext' <br> |\n\n### 实例与性能\n\n[这里](https://jsbin.com/tipofu/edit?js,console) 是上面解决方法的实例。\n\n[这里](http://jsperf.com/extract-file-extension) 是上面三种解决方法的性能测试。\n\n### 来源\n\n[How can I get file extensions with JavaScript](http://stackoverflow.com/questions/190852/how-can-i-get-file-extensions-with-javascript)\n","source":"_posts/javascript/2016-04-21-get-file-extension.md","raw":"---\nlayout: post\n\ntitle: 取得文件扩展名\ntip-number: 53\ntip-username: richzw\ntip-username-profile: https://github.com/richzw\ntip-tldr: 如何更加高效的取得文件扩展名呢？\n\nredirect_from:\n  - /zh_cn/get-file-extension/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n### 问题 1: 怎样取得文件扩展名?\n\n```javascript\nvar file1 = \"50.xsl\";\nvar file2 = \"30.doc\";\ngetFileExtension(file1); //returs xsl\ngetFileExtension(file2); //returs doc\n\nfunction getFileExtension(filename) {\n  /*TODO*/\n}\n```\n\n### 解决方法 1: 正则表达式\n\n```js\nfunction getFileExtension1(filename) {\n  return (/[.]/.exec(filename)) ? /[^.]+$/.exec(filename)[0] : undefined;\n}\n```\n\n### 解决方法 2: String的`split`方法\n\n```js\nfunction getFileExtension2(filename) {\n  return filename.split('.').pop();\n}\n```\n\n这两种解决方法不能解决一些边缘情况，这有另一个更加强大的解决方法。\n\n### 解决方法 3: String的`slice`、`lastIndexOf`方法\n\n```js\nfunction getFileExtension3(filename) {\n  return filename.slice((filename.lastIndexOf(\".\") - 1 >>> 0) + 2);\n}\n\nconsole.log(getFileExtension3(''));                            // ''\nconsole.log(getFileExtension3('filename'));                    // ''\nconsole.log(getFileExtension3('filename.txt'));                // 'txt'\nconsole.log(getFileExtension3('.hiddenfile'));                 // ''\nconsole.log(getFileExtension3('filename.with.many.dots.ext')); // 'ext'\n```\n\n_这是如何实现的呢?_\n\n- [String.lastIndexOf()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf) 方法返回指定值（本例中的`'.'`）在调用该方法的字符串中最后出现的位置，如果没找到则返回 -1。\n- 对于`'filename'`和`'.hiddenfile'`，`lastIndexOf`的返回值分别为`0`和`-1`[无符号右移操作符(>>>)](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#%3E%3E%3E_%28Zero-fill_right_shift%29) 将`-1`转换为`4294967295`，将`-2`转换为`4294967294`，这个方法可以保证边缘情况时文件名不变。\n- [String.prototype.slice()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/slice) 从上面计算的索引处提取文件的扩展名。如果索引比文件名的长度大，结果为`\"\"`。\n\n### 对比\n\n| 解决方法                                  | 参数           | 结果  |\n| ----------------------------------------- |:-------------------:|:--------:|\n| 解决方法 1: Regular Expression            | ''<br>  'filename' <br> 'filename.txt' <br> '.hiddenfile' <br> 'filename.with.many.dots.ext' | undefined <br> undefined <br> 'txt' <br> 'hiddenfile' <br> 'ext' <br> |\n| 解决方法 2: String `split`                | ''<br>  'filename' <br> 'filename.txt' <br> '.hiddenfile' <br> 'filename.with.many.dots.ext'            | '' <br> 'filename' <br> 'txt' <br> 'hiddenfile' <br> 'ext' <br> |\n| 解决方法 3: String `slice`, `lastIndexOf` | ''<br>  'filename' <br> 'filename.txt' <br> '.hiddenfile' <br> 'filename.with.many.dots.ext'            | '' <br> '' <br> 'txt' <br> '' <br> 'ext' <br> |\n\n### 实例与性能\n\n[这里](https://jsbin.com/tipofu/edit?js,console) 是上面解决方法的实例。\n\n[这里](http://jsperf.com/extract-file-extension) 是上面三种解决方法的性能测试。\n\n### 来源\n\n[How can I get file extensions with JavaScript](http://stackoverflow.com/questions/190852/how-can-i-get-file-extensions-with-javascript)\n","slug":"javascript/2016-04-21-get-file-extension","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqes0051lyfyxxtz84jx","content":"<h3 id=\"问题-1-怎样取得文件扩展名\"><a href=\"#问题-1-怎样取得文件扩展名\" class=\"headerlink\" title=\"问题 1: 怎样取得文件扩展名?\"></a>问题 1: 怎样取得文件扩展名?</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> file1 = <span class=\"string\">\"50.xsl\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> file2 = <span class=\"string\">\"30.doc\"</span>;</div><div class=\"line\">getFileExtension(file1); <span class=\"comment\">//returs xsl</span></div><div class=\"line\">getFileExtension(file2); <span class=\"comment\">//returs doc</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFileExtension</span>(<span class=\"params\">filename</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">/*TODO*/</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"解决方法-1-正则表达式\"><a href=\"#解决方法-1-正则表达式\" class=\"headerlink\" title=\"解决方法 1: 正则表达式\"></a>解决方法 1: 正则表达式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFileExtension1</span>(<span class=\"params\">filename</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"regexp\">/[.]/</span>.exec(filename)) ? <span class=\"regexp\">/[^.]+$/</span>.exec(filename)[<span class=\"number\">0</span>] : <span class=\"literal\">undefined</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"解决方法-2-String的split方法\"><a href=\"#解决方法-2-String的split方法\" class=\"headerlink\" title=\"解决方法 2: String的split方法\"></a>解决方法 2: String的<code>split</code>方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFileExtension2</span>(<span class=\"params\">filename</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> filename.split(<span class=\"string\">'.'</span>).pop();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这两种解决方法不能解决一些边缘情况，这有另一个更加强大的解决方法。</p>\n<h3 id=\"解决方法-3-String的slice、lastIndexOf方法\"><a href=\"#解决方法-3-String的slice、lastIndexOf方法\" class=\"headerlink\" title=\"解决方法 3: String的slice、lastIndexOf方法\"></a>解决方法 3: String的<code>slice</code>、<code>lastIndexOf</code>方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFileExtension3</span>(<span class=\"params\">filename</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> filename.slice((filename.lastIndexOf(<span class=\"string\">\".\"</span>) - <span class=\"number\">1</span> &gt;&gt;&gt; <span class=\"number\">0</span>) + <span class=\"number\">2</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(getFileExtension3(<span class=\"string\">''</span>));                            <span class=\"comment\">// ''</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(getFileExtension3(<span class=\"string\">'filename'</span>));                    <span class=\"comment\">// ''</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(getFileExtension3(<span class=\"string\">'filename.txt'</span>));                <span class=\"comment\">// 'txt'</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(getFileExtension3(<span class=\"string\">'.hiddenfile'</span>));                 <span class=\"comment\">// ''</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(getFileExtension3(<span class=\"string\">'filename.with.many.dots.ext'</span>)); <span class=\"comment\">// 'ext'</span></div></pre></td></tr></table></figure>\n<p><em>这是如何实现的呢?</em></p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf\" target=\"_blank\" rel=\"external\">String.lastIndexOf()</a> 方法返回指定值（本例中的<code>&#39;.&#39;</code>）在调用该方法的字符串中最后出现的位置，如果没找到则返回 -1。</li>\n<li>对于<code>&#39;filename&#39;</code>和<code>&#39;.hiddenfile&#39;</code>，<code>lastIndexOf</code>的返回值分别为<code>0</code>和<code>-1</code><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#%3E%3E%3E_%28Zero-fill_right_shift%29\" target=\"_blank\" rel=\"external\">无符号右移操作符(&gt;&gt;&gt;)</a> 将<code>-1</code>转换为<code>4294967295</code>，将<code>-2</code>转换为<code>4294967294</code>，这个方法可以保证边缘情况时文件名不变。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/slice\" target=\"_blank\" rel=\"external\">String.prototype.slice()</a> 从上面计算的索引处提取文件的扩展名。如果索引比文件名的长度大，结果为<code>&quot;&quot;</code>。</li>\n</ul>\n<h3 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h3><table>\n<thead>\n<tr>\n<th>解决方法</th>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>解决方法 1: Regular Expression</td>\n<td style=\"text-align:center\">‘’<br>  ‘filename’ <br> ‘filename.txt’ <br> ‘.hiddenfile’ <br> ‘filename.with.many.dots.ext’</td>\n<td style=\"text-align:center\">undefined <br> undefined <br> ‘txt’ <br> ‘hiddenfile’ <br> ‘ext’ <br></td>\n</tr>\n<tr>\n<td>解决方法 2: String <code>split</code></td>\n<td style=\"text-align:center\">‘’<br>  ‘filename’ <br> ‘filename.txt’ <br> ‘.hiddenfile’ <br> ‘filename.with.many.dots.ext’</td>\n<td style=\"text-align:center\">‘’ <br> ‘filename’ <br> ‘txt’ <br> ‘hiddenfile’ <br> ‘ext’ <br></td>\n</tr>\n<tr>\n<td>解决方法 3: String <code>slice</code>, <code>lastIndexOf</code></td>\n<td style=\"text-align:center\">‘’<br>  ‘filename’ <br> ‘filename.txt’ <br> ‘.hiddenfile’ <br> ‘filename.with.many.dots.ext’</td>\n<td style=\"text-align:center\">‘’ <br> ‘’ <br> ‘txt’ <br> ‘’ <br> ‘ext’ <br></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"实例与性能\"><a href=\"#实例与性能\" class=\"headerlink\" title=\"实例与性能\"></a>实例与性能</h3><p><a href=\"https://jsbin.com/tipofu/edit?js,console\" target=\"_blank\" rel=\"external\">这里</a> 是上面解决方法的实例。</p>\n<p><a href=\"http://jsperf.com/extract-file-extension\" target=\"_blank\" rel=\"external\">这里</a> 是上面三种解决方法的性能测试。</p>\n<h3 id=\"来源\"><a href=\"#来源\" class=\"headerlink\" title=\"来源\"></a>来源</h3><p><a href=\"http://stackoverflow.com/questions/190852/how-can-i-get-file-extensions-with-javascript\" target=\"_blank\" rel=\"external\">How can I get file extensions with JavaScript</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"问题-1-怎样取得文件扩展名\"><a href=\"#问题-1-怎样取得文件扩展名\" class=\"headerlink\" title=\"问题 1: 怎样取得文件扩展名?\"></a>问题 1: 怎样取得文件扩展名?</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> file1 = <span class=\"string\">\"50.xsl\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> file2 = <span class=\"string\">\"30.doc\"</span>;</div><div class=\"line\">getFileExtension(file1); <span class=\"comment\">//returs xsl</span></div><div class=\"line\">getFileExtension(file2); <span class=\"comment\">//returs doc</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFileExtension</span>(<span class=\"params\">filename</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">/*TODO*/</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"解决方法-1-正则表达式\"><a href=\"#解决方法-1-正则表达式\" class=\"headerlink\" title=\"解决方法 1: 正则表达式\"></a>解决方法 1: 正则表达式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFileExtension1</span>(<span class=\"params\">filename</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"regexp\">/[.]/</span>.exec(filename)) ? <span class=\"regexp\">/[^.]+$/</span>.exec(filename)[<span class=\"number\">0</span>] : <span class=\"literal\">undefined</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"解决方法-2-String的split方法\"><a href=\"#解决方法-2-String的split方法\" class=\"headerlink\" title=\"解决方法 2: String的split方法\"></a>解决方法 2: String的<code>split</code>方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFileExtension2</span>(<span class=\"params\">filename</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> filename.split(<span class=\"string\">'.'</span>).pop();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这两种解决方法不能解决一些边缘情况，这有另一个更加强大的解决方法。</p>\n<h3 id=\"解决方法-3-String的slice、lastIndexOf方法\"><a href=\"#解决方法-3-String的slice、lastIndexOf方法\" class=\"headerlink\" title=\"解决方法 3: String的slice、lastIndexOf方法\"></a>解决方法 3: String的<code>slice</code>、<code>lastIndexOf</code>方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFileExtension3</span>(<span class=\"params\">filename</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> filename.slice((filename.lastIndexOf(<span class=\"string\">\".\"</span>) - <span class=\"number\">1</span> &gt;&gt;&gt; <span class=\"number\">0</span>) + <span class=\"number\">2</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(getFileExtension3(<span class=\"string\">''</span>));                            <span class=\"comment\">// ''</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(getFileExtension3(<span class=\"string\">'filename'</span>));                    <span class=\"comment\">// ''</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(getFileExtension3(<span class=\"string\">'filename.txt'</span>));                <span class=\"comment\">// 'txt'</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(getFileExtension3(<span class=\"string\">'.hiddenfile'</span>));                 <span class=\"comment\">// ''</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(getFileExtension3(<span class=\"string\">'filename.with.many.dots.ext'</span>)); <span class=\"comment\">// 'ext'</span></div></pre></td></tr></table></figure>\n<p><em>这是如何实现的呢?</em></p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf\" target=\"_blank\" rel=\"external\">String.lastIndexOf()</a> 方法返回指定值（本例中的<code>&#39;.&#39;</code>）在调用该方法的字符串中最后出现的位置，如果没找到则返回 -1。</li>\n<li>对于<code>&#39;filename&#39;</code>和<code>&#39;.hiddenfile&#39;</code>，<code>lastIndexOf</code>的返回值分别为<code>0</code>和<code>-1</code><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#%3E%3E%3E_%28Zero-fill_right_shift%29\" target=\"_blank\" rel=\"external\">无符号右移操作符(&gt;&gt;&gt;)</a> 将<code>-1</code>转换为<code>4294967295</code>，将<code>-2</code>转换为<code>4294967294</code>，这个方法可以保证边缘情况时文件名不变。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/slice\" target=\"_blank\" rel=\"external\">String.prototype.slice()</a> 从上面计算的索引处提取文件的扩展名。如果索引比文件名的长度大，结果为<code>&quot;&quot;</code>。</li>\n</ul>\n<h3 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h3><table>\n<thead>\n<tr>\n<th>解决方法</th>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>解决方法 1: Regular Expression</td>\n<td style=\"text-align:center\">‘’<br>  ‘filename’ <br> ‘filename.txt’ <br> ‘.hiddenfile’ <br> ‘filename.with.many.dots.ext’</td>\n<td style=\"text-align:center\">undefined <br> undefined <br> ‘txt’ <br> ‘hiddenfile’ <br> ‘ext’ <br></td>\n</tr>\n<tr>\n<td>解决方法 2: String <code>split</code></td>\n<td style=\"text-align:center\">‘’<br>  ‘filename’ <br> ‘filename.txt’ <br> ‘.hiddenfile’ <br> ‘filename.with.many.dots.ext’</td>\n<td style=\"text-align:center\">‘’ <br> ‘filename’ <br> ‘txt’ <br> ‘hiddenfile’ <br> ‘ext’ <br></td>\n</tr>\n<tr>\n<td>解决方法 3: String <code>slice</code>, <code>lastIndexOf</code></td>\n<td style=\"text-align:center\">‘’<br>  ‘filename’ <br> ‘filename.txt’ <br> ‘.hiddenfile’ <br> ‘filename.with.many.dots.ext’</td>\n<td style=\"text-align:center\">‘’ <br> ‘’ <br> ‘txt’ <br> ‘’ <br> ‘ext’ <br></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"实例与性能\"><a href=\"#实例与性能\" class=\"headerlink\" title=\"实例与性能\"></a>实例与性能</h3><p><a href=\"https://jsbin.com/tipofu/edit?js,console\" target=\"_blank\" rel=\"external\">这里</a> 是上面解决方法的实例。</p>\n<p><a href=\"http://jsperf.com/extract-file-extension\" target=\"_blank\" rel=\"external\">这里</a> 是上面三种解决方法的性能测试。</p>\n<h3 id=\"来源\"><a href=\"#来源\" class=\"headerlink\" title=\"来源\"></a>来源</h3><p><a href=\"http://stackoverflow.com/questions/190852/how-can-i-get-file-extensions-with-javascript\" target=\"_blank\" rel=\"external\">How can I get file extensions with JavaScript</a></p>\n"},{"layout":"post","title":"函数中如何使用可选参数（包括可选回调函数）","tip-number":54,"tip-username":"alphashuro","tip-username-profile":"https://github.com/alphashuro","tip-tldr":"使函数的参数与回调函数为可选参数。","redirect_from":["/zh_cn/use-optional-arguments/"],"_content":"\n实例函数中第2个与第3个参数为可选参数\n\n```javascript\n    function example( err, optionalA, optionalB, callback ) {\n        // 使用数组取出arguments\n        var args = new Array(arguments.length);\n        for(var i = 0; i < args.length; ++i) {\n            args[i] = arguments[i];\n        };\n        \n        // 第一个参数为错误参数\n        // shift() 移除数组中第一个参数并将其返回\n        err = args.shift();\n\n        // 如果最后一个参数是函数，则它为回调函数\n        // pop() 移除数组中最后一个参数并将其返回\n        if (typeof args[args.length-1] === 'function') { \n            callback = args.pop();\n        }\n        \n        // 如果args中仍有元素，那就是你需要的可选参数\n        // 你可以像这样一个一个的将其取出：\n        if (args.length > 0) optionalA = args.shift(); else optionalA = null;\n        if (args.length > 0) optionalB = args.shift(); else optionalB = null;\n\n        // 像正常一样继续：检查是否有错误\n        if (err) { \n            return callback && callback(err);\n        }\n        \n        // 为了教程目的，打印可选参数\n        console.log('optionalA:', optionalA);\n        console.log('optionalB:', optionalB);\n        console.log('callback:', callback);\n\n        /* 你想做的逻辑 */\n\n    }\n\n    // ES6语法书写更简短\n    function example(...args) {\n        // 第一个参数为错误参数\n        const err = args.shift();\n        // 如果最后一个参数是函数，则它为回调函数\n        const callback = (typeof args[args.length-1] === 'function') ? args.pop() : null;\n\n        // 如果args中仍有元素，那就是你需要的可选参数你可以像这样一个一个的将其取出：\n        const optionalA = (args.length > 0) ? args.shift() : null;\n        const optionalB = (args.length > 0) ? args.shift() : null;\n        // ... 重复取更多参数\n\n        if (err && callback) return callback(err);\n\n        /* 你想做的逻辑 */\n    }\n\n    // 使用或不适用可选参数调用实例函数\n    \n    example(null, 'AA');\n\n    example(null, function (err) {   /* do something */    });\n\n    example(null, 'AA', function (err) {});\n\n    example(null, 'AAAA', 'BBBB', function (err) {});\n```\n\n### 如何保证optionalA和optionalB是预期的值?\n\n设计你的函数，使其在接收optionalB时optionalA为必选参数。\n","source":"_posts/javascript/2016-05-06-use-optional-arguments.md","raw":"---\nlayout: post\n\ntitle: 函数中如何使用可选参数（包括可选回调函数）\ntip-number: 54\ntip-username: alphashuro\ntip-username-profile: https://github.com/alphashuro\ntip-tldr: 使函数的参数与回调函数为可选参数。\n\nredirect_from:\n  - /zh_cn/use-optional-arguments/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n实例函数中第2个与第3个参数为可选参数\n\n```javascript\n    function example( err, optionalA, optionalB, callback ) {\n        // 使用数组取出arguments\n        var args = new Array(arguments.length);\n        for(var i = 0; i < args.length; ++i) {\n            args[i] = arguments[i];\n        };\n        \n        // 第一个参数为错误参数\n        // shift() 移除数组中第一个参数并将其返回\n        err = args.shift();\n\n        // 如果最后一个参数是函数，则它为回调函数\n        // pop() 移除数组中最后一个参数并将其返回\n        if (typeof args[args.length-1] === 'function') { \n            callback = args.pop();\n        }\n        \n        // 如果args中仍有元素，那就是你需要的可选参数\n        // 你可以像这样一个一个的将其取出：\n        if (args.length > 0) optionalA = args.shift(); else optionalA = null;\n        if (args.length > 0) optionalB = args.shift(); else optionalB = null;\n\n        // 像正常一样继续：检查是否有错误\n        if (err) { \n            return callback && callback(err);\n        }\n        \n        // 为了教程目的，打印可选参数\n        console.log('optionalA:', optionalA);\n        console.log('optionalB:', optionalB);\n        console.log('callback:', callback);\n\n        /* 你想做的逻辑 */\n\n    }\n\n    // ES6语法书写更简短\n    function example(...args) {\n        // 第一个参数为错误参数\n        const err = args.shift();\n        // 如果最后一个参数是函数，则它为回调函数\n        const callback = (typeof args[args.length-1] === 'function') ? args.pop() : null;\n\n        // 如果args中仍有元素，那就是你需要的可选参数你可以像这样一个一个的将其取出：\n        const optionalA = (args.length > 0) ? args.shift() : null;\n        const optionalB = (args.length > 0) ? args.shift() : null;\n        // ... 重复取更多参数\n\n        if (err && callback) return callback(err);\n\n        /* 你想做的逻辑 */\n    }\n\n    // 使用或不适用可选参数调用实例函数\n    \n    example(null, 'AA');\n\n    example(null, function (err) {   /* do something */    });\n\n    example(null, 'AA', function (err) {});\n\n    example(null, 'AAAA', 'BBBB', function (err) {});\n```\n\n### 如何保证optionalA和optionalB是预期的值?\n\n设计你的函数，使其在接收optionalB时optionalA为必选参数。\n","slug":"javascript/2016-05-06-use-optional-arguments","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqeu0053lyfyqhsh5nhk","content":"<p>实例函数中第2个与第3个参数为可选参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"> err, optionalA, optionalB, callback </span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 使用数组取出arguments</span></div><div class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"built_in\">arguments</span>.length);</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; args.length; ++i) &#123;</div><div class=\"line\">        args[i] = <span class=\"built_in\">arguments</span>[i];</div><div class=\"line\">    &#125;;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 第一个参数为错误参数</span></div><div class=\"line\">    <span class=\"comment\">// shift() 移除数组中第一个参数并将其返回</span></div><div class=\"line\">    err = args.shift();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 如果最后一个参数是函数，则它为回调函数</span></div><div class=\"line\">    <span class=\"comment\">// pop() 移除数组中最后一个参数并将其返回</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> args[args.length<span class=\"number\">-1</span>] === <span class=\"string\">'function'</span>) &#123; </div><div class=\"line\">        callback = args.pop();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 如果args中仍有元素，那就是你需要的可选参数</span></div><div class=\"line\">    <span class=\"comment\">// 你可以像这样一个一个的将其取出：</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (args.length &gt; <span class=\"number\">0</span>) optionalA = args.shift(); <span class=\"keyword\">else</span> optionalA = <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (args.length &gt; <span class=\"number\">0</span>) optionalB = args.shift(); <span class=\"keyword\">else</span> optionalB = <span class=\"literal\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 像正常一样继续：检查是否有错误</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123; </div><div class=\"line\">        <span class=\"keyword\">return</span> callback &amp;&amp; callback(err);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 为了教程目的，打印可选参数</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'optionalA:'</span>, optionalA);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'optionalB:'</span>, optionalB);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'callback:'</span>, callback);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* 你想做的逻辑 */</span></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ES6语法书写更简短</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\">...args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 第一个参数为错误参数</span></div><div class=\"line\">    <span class=\"keyword\">const</span> err = args.shift();</div><div class=\"line\">    <span class=\"comment\">// 如果最后一个参数是函数，则它为回调函数</span></div><div class=\"line\">    <span class=\"keyword\">const</span> callback = (<span class=\"keyword\">typeof</span> args[args.length<span class=\"number\">-1</span>] === <span class=\"string\">'function'</span>) ? args.pop() : <span class=\"literal\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 如果args中仍有元素，那就是你需要的可选参数你可以像这样一个一个的将其取出：</span></div><div class=\"line\">    <span class=\"keyword\">const</span> optionalA = (args.length &gt; <span class=\"number\">0</span>) ? args.shift() : <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">const</span> optionalB = (args.length &gt; <span class=\"number\">0</span>) ? args.shift() : <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"comment\">// ... 重复取更多参数</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (err &amp;&amp; callback) <span class=\"keyword\">return</span> callback(err);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* 你想做的逻辑 */</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用或不适用可选参数调用实例函数</span></div><div class=\"line\"></div><div class=\"line\">example(<span class=\"literal\">null</span>, <span class=\"string\">'AA'</span>);</div><div class=\"line\"></div><div class=\"line\">example(<span class=\"literal\">null</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;   <span class=\"comment\">/* do something */</span>    &#125;);</div><div class=\"line\"></div><div class=\"line\">example(<span class=\"literal\">null</span>, <span class=\"string\">'AA'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;&#125;);</div><div class=\"line\"></div><div class=\"line\">example(<span class=\"literal\">null</span>, <span class=\"string\">'AAAA'</span>, <span class=\"string\">'BBBB'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"如何保证optionalA和optionalB是预期的值\"><a href=\"#如何保证optionalA和optionalB是预期的值\" class=\"headerlink\" title=\"如何保证optionalA和optionalB是预期的值?\"></a>如何保证optionalA和optionalB是预期的值?</h3><p>设计你的函数，使其在接收optionalB时optionalA为必选参数。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>实例函数中第2个与第3个参数为可选参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"> err, optionalA, optionalB, callback </span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 使用数组取出arguments</span></div><div class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"built_in\">arguments</span>.length);</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; args.length; ++i) &#123;</div><div class=\"line\">        args[i] = <span class=\"built_in\">arguments</span>[i];</div><div class=\"line\">    &#125;;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 第一个参数为错误参数</span></div><div class=\"line\">    <span class=\"comment\">// shift() 移除数组中第一个参数并将其返回</span></div><div class=\"line\">    err = args.shift();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 如果最后一个参数是函数，则它为回调函数</span></div><div class=\"line\">    <span class=\"comment\">// pop() 移除数组中最后一个参数并将其返回</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> args[args.length<span class=\"number\">-1</span>] === <span class=\"string\">'function'</span>) &#123; </div><div class=\"line\">        callback = args.pop();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 如果args中仍有元素，那就是你需要的可选参数</span></div><div class=\"line\">    <span class=\"comment\">// 你可以像这样一个一个的将其取出：</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (args.length &gt; <span class=\"number\">0</span>) optionalA = args.shift(); <span class=\"keyword\">else</span> optionalA = <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (args.length &gt; <span class=\"number\">0</span>) optionalB = args.shift(); <span class=\"keyword\">else</span> optionalB = <span class=\"literal\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 像正常一样继续：检查是否有错误</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123; </div><div class=\"line\">        <span class=\"keyword\">return</span> callback &amp;&amp; callback(err);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 为了教程目的，打印可选参数</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'optionalA:'</span>, optionalA);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'optionalB:'</span>, optionalB);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'callback:'</span>, callback);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* 你想做的逻辑 */</span></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ES6语法书写更简短</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\">...args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 第一个参数为错误参数</span></div><div class=\"line\">    <span class=\"keyword\">const</span> err = args.shift();</div><div class=\"line\">    <span class=\"comment\">// 如果最后一个参数是函数，则它为回调函数</span></div><div class=\"line\">    <span class=\"keyword\">const</span> callback = (<span class=\"keyword\">typeof</span> args[args.length<span class=\"number\">-1</span>] === <span class=\"string\">'function'</span>) ? args.pop() : <span class=\"literal\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 如果args中仍有元素，那就是你需要的可选参数你可以像这样一个一个的将其取出：</span></div><div class=\"line\">    <span class=\"keyword\">const</span> optionalA = (args.length &gt; <span class=\"number\">0</span>) ? args.shift() : <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">const</span> optionalB = (args.length &gt; <span class=\"number\">0</span>) ? args.shift() : <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"comment\">// ... 重复取更多参数</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (err &amp;&amp; callback) <span class=\"keyword\">return</span> callback(err);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* 你想做的逻辑 */</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用或不适用可选参数调用实例函数</span></div><div class=\"line\"></div><div class=\"line\">example(<span class=\"literal\">null</span>, <span class=\"string\">'AA'</span>);</div><div class=\"line\"></div><div class=\"line\">example(<span class=\"literal\">null</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;   <span class=\"comment\">/* do something */</span>    &#125;);</div><div class=\"line\"></div><div class=\"line\">example(<span class=\"literal\">null</span>, <span class=\"string\">'AA'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;&#125;);</div><div class=\"line\"></div><div class=\"line\">example(<span class=\"literal\">null</span>, <span class=\"string\">'AAAA'</span>, <span class=\"string\">'BBBB'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"如何保证optionalA和optionalB是预期的值\"><a href=\"#如何保证optionalA和optionalB是预期的值\" class=\"headerlink\" title=\"如何保证optionalA和optionalB是预期的值?\"></a>如何保证optionalA和optionalB是预期的值?</h3><p>设计你的函数，使其在接收optionalB时optionalA为必选参数。</p>\n"},{"layout":"post","title":"用数组建立一个简单的循环","tip-number":55,"tip-username":"jamet-julien","tip-username-profile":"https://github.com/jamet-julien","tip-tldr":"有时我们需要不停的循环数组的元素，就像一组旋转的图片，或者音乐的播放列表。这里告诉你如何使一个数组拥有循环的能力。","redirect_from":["/zh_cn/make-easy-loop-on-array/"],"_content":"有时我们需要不停的循环数组的元素，就像一组旋转的图片，或者音乐的播放列表。这里告诉你如何使一个数组拥有循环的能力：\n\n```js\nvar aList = ['A','B','C','D','E'];\n\nfunction make_looper( arr ){\n\n    arr.loop_idx = 0;\n\n    // 返回当前的元素\n    arr.current = function(){\n\n      if( this.loop_idx < 0 ){// 第一次检查\n        this.loop_idx = this.length - 1;// 更新 loop_idx\n      }\n\n      if( this.loop_idx >= this.length ){// 第二次检查\n        this.loop_idx = 0;// 更新 loop_idx\n      }\n\n      return arr[ this.loop_idx ];//返回元素\n    };\n    \n    // 增加 loop_idx 然后返回新的当前元素\n    arr.next = function(){\n      this.loop_idx++;\n      return this.current();\n    };\n    // 减少 loop_idx 然后返回新的当前元素\n    arr.prev = function(){\n      this.loop_idx--;\n      return this.current();\n    };\n}\n\n\nmake_looper( aList);\n\naList.current();// -> A\naList.next();// -> B\naList.next();// -> C\naList.next();// -> D\naList.next();// -> E\naList.next();// -> A\naList.pop() ;// -> E\naList.prev();// -> D\naList.prev();// -> C\naList.prev();// -> B\naList.prev();// -> A\naList.prev();// -> D\n```\n\n使用 ```%``` ( 取模 ) 操作符更优雅。取模返回除法的余数 ( ``` 2 % 5 = 1``` and ``` 5 % 5 = 0```)：\n\n```js\n\nvar aList = ['A','B','C','D','E'];\n\n\nfunction make_looper( arr ){\n\n    arr.loop_idx = 0;\n\n    // return current item\n    arr.current = function(){\n      this.loop_idx = ( this.loop_idx ) % this.length;// 无需检查 !!\n      return arr[ this.loop_idx ];\n    };\n\n    // 增加 loop_idx 然后返回新的当前元素\n    arr.next = function(){\n      this.loop_idx++;\n      return this.current();\n    };\n    \n    // 减少 loop_idx 然后返回新的当前元素\n    arr.prev = function(){\n      this.loop_idx += this.length - 1;\n      return this.current();\n    };\n}\n\nmake_looper( aList);\n\naList.current();// -> A\naList.next();// -> B\naList.next();// -> C\naList.next();// -> D\naList.next();// -> E\naList.next();// -> A\naList.pop() ;// -> E\naList.prev();// -> D\naList.prev();// -> C\naList.prev();// -> B\naList.prev();// -> A\naList.prev();// -> D\n```\n","source":"_posts/javascript/2016-05-12-make-easy-loop-on-array.md","raw":"---\nlayout: post\n\ntitle: 用数组建立一个简单的循环\ntip-number: 55\ntip-username: jamet-julien\ntip-username-profile: https://github.com/jamet-julien\ntip-tldr: 有时我们需要不停的循环数组的元素，就像一组旋转的图片，或者音乐的播放列表。这里告诉你如何使一个数组拥有循环的能力。\n\nredirect_from:\n  - /zh_cn/make-easy-loop-on-array/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n有时我们需要不停的循环数组的元素，就像一组旋转的图片，或者音乐的播放列表。这里告诉你如何使一个数组拥有循环的能力：\n\n```js\nvar aList = ['A','B','C','D','E'];\n\nfunction make_looper( arr ){\n\n    arr.loop_idx = 0;\n\n    // 返回当前的元素\n    arr.current = function(){\n\n      if( this.loop_idx < 0 ){// 第一次检查\n        this.loop_idx = this.length - 1;// 更新 loop_idx\n      }\n\n      if( this.loop_idx >= this.length ){// 第二次检查\n        this.loop_idx = 0;// 更新 loop_idx\n      }\n\n      return arr[ this.loop_idx ];//返回元素\n    };\n    \n    // 增加 loop_idx 然后返回新的当前元素\n    arr.next = function(){\n      this.loop_idx++;\n      return this.current();\n    };\n    // 减少 loop_idx 然后返回新的当前元素\n    arr.prev = function(){\n      this.loop_idx--;\n      return this.current();\n    };\n}\n\n\nmake_looper( aList);\n\naList.current();// -> A\naList.next();// -> B\naList.next();// -> C\naList.next();// -> D\naList.next();// -> E\naList.next();// -> A\naList.pop() ;// -> E\naList.prev();// -> D\naList.prev();// -> C\naList.prev();// -> B\naList.prev();// -> A\naList.prev();// -> D\n```\n\n使用 ```%``` ( 取模 ) 操作符更优雅。取模返回除法的余数 ( ``` 2 % 5 = 1``` and ``` 5 % 5 = 0```)：\n\n```js\n\nvar aList = ['A','B','C','D','E'];\n\n\nfunction make_looper( arr ){\n\n    arr.loop_idx = 0;\n\n    // return current item\n    arr.current = function(){\n      this.loop_idx = ( this.loop_idx ) % this.length;// 无需检查 !!\n      return arr[ this.loop_idx ];\n    };\n\n    // 增加 loop_idx 然后返回新的当前元素\n    arr.next = function(){\n      this.loop_idx++;\n      return this.current();\n    };\n    \n    // 减少 loop_idx 然后返回新的当前元素\n    arr.prev = function(){\n      this.loop_idx += this.length - 1;\n      return this.current();\n    };\n}\n\nmake_looper( aList);\n\naList.current();// -> A\naList.next();// -> B\naList.next();// -> C\naList.next();// -> D\naList.next();// -> E\naList.next();// -> A\naList.pop() ;// -> E\naList.prev();// -> D\naList.prev();// -> C\naList.prev();// -> B\naList.prev();// -> A\naList.prev();// -> D\n```\n","slug":"javascript/2016-05-12-make-easy-loop-on-array","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqev0055lyfy5ztfl0yg","content":"<p>有时我们需要不停的循环数组的元素，就像一组旋转的图片，或者音乐的播放列表。这里告诉你如何使一个数组拥有循环的能力：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> aList = [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>,<span class=\"string\">'D'</span>,<span class=\"string\">'E'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">make_looper</span>(<span class=\"params\"> arr </span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    arr.loop_idx = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 返回当前的元素</span></div><div class=\"line\">    arr.current = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span>( <span class=\"keyword\">this</span>.loop_idx &lt; <span class=\"number\">0</span> )&#123;<span class=\"comment\">// 第一次检查</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.loop_idx = <span class=\"keyword\">this</span>.length - <span class=\"number\">1</span>;<span class=\"comment\">// 更新 loop_idx</span></div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span>( <span class=\"keyword\">this</span>.loop_idx &gt;= <span class=\"keyword\">this</span>.length )&#123;<span class=\"comment\">// 第二次检查</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.loop_idx = <span class=\"number\">0</span>;<span class=\"comment\">// 更新 loop_idx</span></div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> arr[ <span class=\"keyword\">this</span>.loop_idx ];<span class=\"comment\">//返回元素</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 增加 loop_idx 然后返回新的当前元素</span></div><div class=\"line\">    arr.next = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.loop_idx++;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.current();</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">// 减少 loop_idx 然后返回新的当前元素</span></div><div class=\"line\">    arr.prev = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.loop_idx--;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.current();</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">make_looper( aList);</div><div class=\"line\"></div><div class=\"line\">aList.current();<span class=\"comment\">// -&gt; A</span></div><div class=\"line\">aList.next();<span class=\"comment\">// -&gt; B</span></div><div class=\"line\">aList.next();<span class=\"comment\">// -&gt; C</span></div><div class=\"line\">aList.next();<span class=\"comment\">// -&gt; D</span></div><div class=\"line\">aList.next();<span class=\"comment\">// -&gt; E</span></div><div class=\"line\">aList.next();<span class=\"comment\">// -&gt; A</span></div><div class=\"line\">aList.pop() ;<span class=\"comment\">// -&gt; E</span></div><div class=\"line\">aList.prev();<span class=\"comment\">// -&gt; D</span></div><div class=\"line\">aList.prev();<span class=\"comment\">// -&gt; C</span></div><div class=\"line\">aList.prev();<span class=\"comment\">// -&gt; B</span></div><div class=\"line\">aList.prev();<span class=\"comment\">// -&gt; A</span></div><div class=\"line\">aList.prev();<span class=\"comment\">// -&gt; D</span></div></pre></td></tr></table></figure>\n<p>使用 <figure class=\"highlight plain\"><figcaption><span>( 取模 ) 操作符更优雅。取模返回除法的余数 ( ``` 2 % 5 = 1``` and ``` 5 % 5 = 0```)：</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">```js</div><div class=\"line\"></div><div class=\"line\">var aList = [&apos;A&apos;,&apos;B&apos;,&apos;C&apos;,&apos;D&apos;,&apos;E&apos;];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">function make_looper( arr )&#123;</div><div class=\"line\"></div><div class=\"line\">    arr.loop_idx = 0;</div><div class=\"line\"></div><div class=\"line\">    // return current item</div><div class=\"line\">    arr.current = function()&#123;</div><div class=\"line\">      this.loop_idx = ( this.loop_idx ) % this.length;// 无需检查 !!</div><div class=\"line\">      return arr[ this.loop_idx ];</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    // 增加 loop_idx 然后返回新的当前元素</div><div class=\"line\">    arr.next = function()&#123;</div><div class=\"line\">      this.loop_idx++;</div><div class=\"line\">      return this.current();</div><div class=\"line\">    &#125;;</div><div class=\"line\">    </div><div class=\"line\">    // 减少 loop_idx 然后返回新的当前元素</div><div class=\"line\">    arr.prev = function()&#123;</div><div class=\"line\">      this.loop_idx += this.length - 1;</div><div class=\"line\">      return this.current();</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">make_looper( aList);</div><div class=\"line\"></div><div class=\"line\">aList.current();// -&gt; A</div><div class=\"line\">aList.next();// -&gt; B</div><div class=\"line\">aList.next();// -&gt; C</div><div class=\"line\">aList.next();// -&gt; D</div><div class=\"line\">aList.next();// -&gt; E</div><div class=\"line\">aList.next();// -&gt; A</div><div class=\"line\">aList.pop() ;// -&gt; E</div><div class=\"line\">aList.prev();// -&gt; D</div><div class=\"line\">aList.prev();// -&gt; C</div><div class=\"line\">aList.prev();// -&gt; B</div><div class=\"line\">aList.prev();// -&gt; A</div><div class=\"line\">aList.prev();// -&gt; D</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>有时我们需要不停的循环数组的元素，就像一组旋转的图片，或者音乐的播放列表。这里告诉你如何使一个数组拥有循环的能力：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> aList = [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>,<span class=\"string\">'D'</span>,<span class=\"string\">'E'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">make_looper</span>(<span class=\"params\"> arr </span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    arr.loop_idx = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 返回当前的元素</span></div><div class=\"line\">    arr.current = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span>( <span class=\"keyword\">this</span>.loop_idx &lt; <span class=\"number\">0</span> )&#123;<span class=\"comment\">// 第一次检查</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.loop_idx = <span class=\"keyword\">this</span>.length - <span class=\"number\">1</span>;<span class=\"comment\">// 更新 loop_idx</span></div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span>( <span class=\"keyword\">this</span>.loop_idx &gt;= <span class=\"keyword\">this</span>.length )&#123;<span class=\"comment\">// 第二次检查</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.loop_idx = <span class=\"number\">0</span>;<span class=\"comment\">// 更新 loop_idx</span></div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> arr[ <span class=\"keyword\">this</span>.loop_idx ];<span class=\"comment\">//返回元素</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 增加 loop_idx 然后返回新的当前元素</span></div><div class=\"line\">    arr.next = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.loop_idx++;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.current();</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">// 减少 loop_idx 然后返回新的当前元素</span></div><div class=\"line\">    arr.prev = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.loop_idx--;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.current();</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">make_looper( aList);</div><div class=\"line\"></div><div class=\"line\">aList.current();<span class=\"comment\">// -&gt; A</span></div><div class=\"line\">aList.next();<span class=\"comment\">// -&gt; B</span></div><div class=\"line\">aList.next();<span class=\"comment\">// -&gt; C</span></div><div class=\"line\">aList.next();<span class=\"comment\">// -&gt; D</span></div><div class=\"line\">aList.next();<span class=\"comment\">// -&gt; E</span></div><div class=\"line\">aList.next();<span class=\"comment\">// -&gt; A</span></div><div class=\"line\">aList.pop() ;<span class=\"comment\">// -&gt; E</span></div><div class=\"line\">aList.prev();<span class=\"comment\">// -&gt; D</span></div><div class=\"line\">aList.prev();<span class=\"comment\">// -&gt; C</span></div><div class=\"line\">aList.prev();<span class=\"comment\">// -&gt; B</span></div><div class=\"line\">aList.prev();<span class=\"comment\">// -&gt; A</span></div><div class=\"line\">aList.prev();<span class=\"comment\">// -&gt; D</span></div></pre></td></tr></table></figure>\n<p>使用 <figure class=\"highlight plain\"><figcaption><span>( 取模 ) 操作符更优雅。取模返回除法的余数 ( ``` 2 % 5 = 1``` and ``` 5 % 5 = 0```)：</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">```js</div><div class=\"line\"></div><div class=\"line\">var aList = [&apos;A&apos;,&apos;B&apos;,&apos;C&apos;,&apos;D&apos;,&apos;E&apos;];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">function make_looper( arr )&#123;</div><div class=\"line\"></div><div class=\"line\">    arr.loop_idx = 0;</div><div class=\"line\"></div><div class=\"line\">    // return current item</div><div class=\"line\">    arr.current = function()&#123;</div><div class=\"line\">      this.loop_idx = ( this.loop_idx ) % this.length;// 无需检查 !!</div><div class=\"line\">      return arr[ this.loop_idx ];</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    // 增加 loop_idx 然后返回新的当前元素</div><div class=\"line\">    arr.next = function()&#123;</div><div class=\"line\">      this.loop_idx++;</div><div class=\"line\">      return this.current();</div><div class=\"line\">    &#125;;</div><div class=\"line\">    </div><div class=\"line\">    // 减少 loop_idx 然后返回新的当前元素</div><div class=\"line\">    arr.prev = function()&#123;</div><div class=\"line\">      this.loop_idx += this.length - 1;</div><div class=\"line\">      return this.current();</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">make_looper( aList);</div><div class=\"line\"></div><div class=\"line\">aList.current();// -&gt; A</div><div class=\"line\">aList.next();// -&gt; B</div><div class=\"line\">aList.next();// -&gt; C</div><div class=\"line\">aList.next();// -&gt; D</div><div class=\"line\">aList.next();// -&gt; E</div><div class=\"line\">aList.next();// -&gt; A</div><div class=\"line\">aList.pop() ;// -&gt; E</div><div class=\"line\">aList.prev();// -&gt; D</div><div class=\"line\">aList.prev();// -&gt; C</div><div class=\"line\">aList.prev();// -&gt; B</div><div class=\"line\">aList.prev();// -&gt; A</div><div class=\"line\">aList.prev();// -&gt; D</div></pre></td></tr></table></figure></p>\n"},{"layout":"post","title":"复制到粘贴板","tip-number":56,"tip-username":"loverajoel","tip-username-profile":"https://twitter.com/loverajoel","tip-tldr":"本周我做了一个简单的“复制到剪贴板”按钮，这是我第一次做这种功能，向大家分享一下我的实现方法。","tip-writer-support":"https://www.coinbase.com/loverajoel","redirect_from":["/zh_cn/copy-to-clipboard/"],"_content":"\n这是一个简单的小知识，本周我做了一个简单的“复制到剪贴板”按钮，这是我第一次做这种功能，向大家分享一下我的实现方法。\n\n这很简单，比较麻烦的是我们必须为需要复制的文本增加`<input/>`标签。之后我们选择要复制的内容然后调用复制命令[execCommand](https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand).\n`execCommand('copy')` 将会复制被选择的内容。\n\n此方法目前被所有最新版本的浏览器[支持](http://caniuse.com/#search=execCommand)，它可以让我们执行如`复制`、`剪切`、`粘贴`等命令，还可以改变字体颜色、大小等。\n\n```js\ndocument.querySelector('#input').select();\ndocument.execCommand('copy');\n```\n\n具体表现看[这里](https://jsbin.com/huhozu/edit?html,js,output)\n","source":"_posts/javascript/2016-08-02-copy-to-clipboard.md","raw":"---\nlayout: post\n\ntitle: 复制到粘贴板\ntip-number: 56\ntip-username: loverajoel\ntip-username-profile: https://twitter.com/loverajoel\ntip-tldr: 本周我做了一个简单的“复制到剪贴板”按钮，这是我第一次做这种功能，向大家分享一下我的实现方法。\ntip-writer-support: https://www.coinbase.com/loverajoel\n\nredirect_from:\n  - /zh_cn/copy-to-clipboard/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n这是一个简单的小知识，本周我做了一个简单的“复制到剪贴板”按钮，这是我第一次做这种功能，向大家分享一下我的实现方法。\n\n这很简单，比较麻烦的是我们必须为需要复制的文本增加`<input/>`标签。之后我们选择要复制的内容然后调用复制命令[execCommand](https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand).\n`execCommand('copy')` 将会复制被选择的内容。\n\n此方法目前被所有最新版本的浏览器[支持](http://caniuse.com/#search=execCommand)，它可以让我们执行如`复制`、`剪切`、`粘贴`等命令，还可以改变字体颜色、大小等。\n\n```js\ndocument.querySelector('#input').select();\ndocument.execCommand('copy');\n```\n\n具体表现看[这里](https://jsbin.com/huhozu/edit?html,js,output)\n","slug":"javascript/2016-08-02-copy-to-clipboard","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqex0057lyfy4v0arovs","content":"<p>这是一个简单的小知识，本周我做了一个简单的“复制到剪贴板”按钮，这是我第一次做这种功能，向大家分享一下我的实现方法。</p>\n<p>这很简单，比较麻烦的是我们必须为需要复制的文本增加<code>&lt;input/&gt;</code>标签。之后我们选择要复制的内容然后调用复制命令<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand\" target=\"_blank\" rel=\"external\">execCommand</a>.<br><code>execCommand(&#39;copy&#39;)</code> 将会复制被选择的内容。</p>\n<p>此方法目前被所有最新版本的浏览器<a href=\"http://caniuse.com/#search=execCommand\" target=\"_blank\" rel=\"external\">支持</a>，它可以让我们执行如<code>复制</code>、<code>剪切</code>、<code>粘贴</code>等命令，还可以改变字体颜色、大小等。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#input'</span>).select();</div><div class=\"line\"><span class=\"built_in\">document</span>.execCommand(<span class=\"string\">'copy'</span>);</div></pre></td></tr></table></figure>\n<p>具体表现看<a href=\"https://jsbin.com/huhozu/edit?html,js,output\" target=\"_blank\" rel=\"external\">这里</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>这是一个简单的小知识，本周我做了一个简单的“复制到剪贴板”按钮，这是我第一次做这种功能，向大家分享一下我的实现方法。</p>\n<p>这很简单，比较麻烦的是我们必须为需要复制的文本增加<code>&lt;input/&gt;</code>标签。之后我们选择要复制的内容然后调用复制命令<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand\" target=\"_blank\" rel=\"external\">execCommand</a>.<br><code>execCommand(&#39;copy&#39;)</code> 将会复制被选择的内容。</p>\n<p>此方法目前被所有最新版本的浏览器<a href=\"http://caniuse.com/#search=execCommand\" target=\"_blank\" rel=\"external\">支持</a>，它可以让我们执行如<code>复制</code>、<code>剪切</code>、<code>粘贴</code>等命令，还可以改变字体颜色、大小等。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#input'</span>).select();</div><div class=\"line\"><span class=\"built_in\">document</span>.execCommand(<span class=\"string\">'copy'</span>);</div></pre></td></tr></table></figure>\n<p>具体表现看<a href=\"https://jsbin.com/huhozu/edit?html,js,output\" target=\"_blank\" rel=\"external\">这里</a></p>\n"},{"layout":"post","title":"JavaScript 的逗号操作符","tip-number":57,"tip-username":"bhaskarmelkani","tip-username-profile":"https://www.twitter.com/bhaskarmelkani","tip-tldr":"在一个表达式中，由左到右计算每个表达式并返回最后一个。","redirect_from":["/zh_cn/comma-operaton-in-js/"],"_content":"除了分号之外，逗号允许你在同一个地方放多个语句。\n例如：\n\n```js\nfor(var i=0, j=0; i<5; i++, j++, j++){\n  console.log(\"i:\"+i+\", j:\"+j);\n}\n```\n\n輸出：\n\n```js\ni:0, j:0\ni:1, j:2\ni:2, j:4\ni:3, j:6\ni:4, j:8\n```\n\n当放一个表达式时，它由左到右计算每个表达式，并传回最右边的表达式。\n\n例如：\n\n```js\nfunction a(){console.log('a'); return 'a';}\nfunction b(){console.log('b'); return 'b';}\nfunction c(){console.log('c'); return 'c';}\n\nvar x = (a(), b(), c());\n\nconsole.log(x);      // 输出「c」\n```\n输出：\n\n```js\n\"a\"\n\"b\"\n\"c\"\n\n\"c\"\n```\n\n* 注意：逗号（`,`）操作符在 JavaScript 中所有的操作符里是最低的优先顺序，所以没有括号表达式将变为：`(x = a()), b(), c();`。\n\n##### 实验\n<div>\n  <a class=\"jsbin-embed\" href=\"http://jsbin.com/vimogap/embed?js,console\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.39.11\"></script>\n</div>\n","source":"_posts/javascript/2016-08-10-comma-operaton-in-js.md","raw":"---\nlayout: post\n\ntitle: JavaScript 的逗号操作符\ntip-number: 57\ntip-username: bhaskarmelkani\ntip-username-profile: https://www.twitter.com/bhaskarmelkani\ntip-tldr: 在一个表达式中，由左到右计算每个表达式并返回最后一个。\n\nredirect_from:\n  - /zh_cn/comma-operaton-in-js/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n除了分号之外，逗号允许你在同一个地方放多个语句。\n例如：\n\n```js\nfor(var i=0, j=0; i<5; i++, j++, j++){\n  console.log(\"i:\"+i+\", j:\"+j);\n}\n```\n\n輸出：\n\n```js\ni:0, j:0\ni:1, j:2\ni:2, j:4\ni:3, j:6\ni:4, j:8\n```\n\n当放一个表达式时，它由左到右计算每个表达式，并传回最右边的表达式。\n\n例如：\n\n```js\nfunction a(){console.log('a'); return 'a';}\nfunction b(){console.log('b'); return 'b';}\nfunction c(){console.log('c'); return 'c';}\n\nvar x = (a(), b(), c());\n\nconsole.log(x);      // 输出「c」\n```\n输出：\n\n```js\n\"a\"\n\"b\"\n\"c\"\n\n\"c\"\n```\n\n* 注意：逗号（`,`）操作符在 JavaScript 中所有的操作符里是最低的优先顺序，所以没有括号表达式将变为：`(x = a()), b(), c();`。\n\n##### 实验\n<div>\n  <a class=\"jsbin-embed\" href=\"http://jsbin.com/vimogap/embed?js,console\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.39.11\"></script>\n</div>\n","slug":"javascript/2016-08-10-comma-operaton-in-js","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqey0059lyfyaam34sv7","content":"<p>除了分号之外，逗号允许你在同一个地方放多个语句。<br>例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>, j=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++, j++, j++)&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"i:\"</span>+i+<span class=\"string\">\", j:\"</span>+j);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>輸出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">i:<span class=\"number\">0</span>, <span class=\"attr\">j</span>:<span class=\"number\">0</span></div><div class=\"line\">i:<span class=\"number\">1</span>, <span class=\"attr\">j</span>:<span class=\"number\">2</span></div><div class=\"line\">i:<span class=\"number\">2</span>, <span class=\"attr\">j</span>:<span class=\"number\">4</span></div><div class=\"line\">i:<span class=\"number\">3</span>, <span class=\"attr\">j</span>:<span class=\"number\">6</span></div><div class=\"line\">i:<span class=\"number\">4</span>, <span class=\"attr\">j</span>:<span class=\"number\">8</span></div></pre></td></tr></table></figure>\n<p>当放一个表达式时，它由左到右计算每个表达式，并传回最右边的表达式。</p>\n<p>例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'a'</span>); <span class=\"keyword\">return</span> <span class=\"string\">'a'</span>;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'b'</span>); <span class=\"keyword\">return</span> <span class=\"string\">'b'</span>;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'c'</span>); <span class=\"keyword\">return</span> <span class=\"string\">'c'</span>;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> x = (a(), b(), c());</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(x);      <span class=\"comment\">// 输出「c」</span></div></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"a\"</span></div><div class=\"line\"><span class=\"string\">\"b\"</span></div><div class=\"line\"><span class=\"string\">\"c\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">\"c\"</span></div></pre></td></tr></table></figure>\n<ul>\n<li>注意：逗号（<code>,</code>）操作符在 JavaScript 中所有的操作符里是最低的优先顺序，所以没有括号表达式将变为：<code>(x = a()), b(), c();</code>。</li>\n</ul>\n<h5 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h5><div><br>  <a class=\"jsbin-embed\" href=\"http://jsbin.com/vimogap/embed?js,console\" target=\"_blank\" rel=\"external\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.39.11\"></script><br></div>\n","site":{"data":{}},"excerpt":"","more":"<p>除了分号之外，逗号允许你在同一个地方放多个语句。<br>例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>, j=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++, j++, j++)&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"i:\"</span>+i+<span class=\"string\">\", j:\"</span>+j);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>輸出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">i:<span class=\"number\">0</span>, <span class=\"attr\">j</span>:<span class=\"number\">0</span></div><div class=\"line\">i:<span class=\"number\">1</span>, <span class=\"attr\">j</span>:<span class=\"number\">2</span></div><div class=\"line\">i:<span class=\"number\">2</span>, <span class=\"attr\">j</span>:<span class=\"number\">4</span></div><div class=\"line\">i:<span class=\"number\">3</span>, <span class=\"attr\">j</span>:<span class=\"number\">6</span></div><div class=\"line\">i:<span class=\"number\">4</span>, <span class=\"attr\">j</span>:<span class=\"number\">8</span></div></pre></td></tr></table></figure>\n<p>当放一个表达式时，它由左到右计算每个表达式，并传回最右边的表达式。</p>\n<p>例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'a'</span>); <span class=\"keyword\">return</span> <span class=\"string\">'a'</span>;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'b'</span>); <span class=\"keyword\">return</span> <span class=\"string\">'b'</span>;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'c'</span>); <span class=\"keyword\">return</span> <span class=\"string\">'c'</span>;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> x = (a(), b(), c());</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(x);      <span class=\"comment\">// 输出「c」</span></div></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"a\"</span></div><div class=\"line\"><span class=\"string\">\"b\"</span></div><div class=\"line\"><span class=\"string\">\"c\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">\"c\"</span></div></pre></td></tr></table></figure>\n<ul>\n<li>注意：逗号（<code>,</code>）操作符在 JavaScript 中所有的操作符里是最低的优先顺序，所以没有括号表达式将变为：<code>(x = a()), b(), c();</code>。</li>\n</ul>\n<h5 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h5><div><br>  <a class=\"jsbin-embed\" href=\"http://jsbin.com/vimogap/embed?js,console\" target=\"_blank\" rel=\"external\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.39.11\"></script><br></div>\n"},{"layout":"post","title":"break 或 continue 循环函数","tip-number":58,"tip-username":"vamshisuram","tip-username-profile":"https://github.com/vamshisuram","tip-tldr":"循环一个`list`从中寻找一个或一些值，是一个很常见的需求。但是即使我们要找的元素就是数组里的第一个，我们不也能从循环中直接`return`，只能遍历整个数组。本文教你如何使用`.some`和`.every`快速结束循环。","redirect_from":["/zh_cn/break-continue-loop-functional/"],"_content":"\n\n停止循环是循环中一个常见的需求。使用`for`循环我们可以用`break`提前结束循环。\n\n```javascript\nconst a = [0, 1, 2, 3, 4];\nfor (var i = 0; i < a.length; i++) {\n  if (a[i] === 2) {\n    break; // stop the loop\n  }\n  console.log(a[i]);\n}\n//> 0, 1\n```\n\n另一个常见的需求使我们需要直接取得变量。\n\n一个快速的方式是使用`.forEach`，但是这样我们就失去了`break`的能力。这种情况下，最接近的方式是使用`return`实现`continue`的功能。\n\n```javascript\n[0, 1, 2, 3, 4].forEach(function(val, i) {\n  if (val === 2) {\n    // 怎么停止呢?\n    return true;\n  }\n  console.log(val); // your code\n});\n//> 0, 1, 3, 4\n```\n\n`.some`是一个原型方法。他用来检测是否某些元素满足所提供的函数。如果任何元素最终返回`true`，它就会停止运行。更多解释请看[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some)。\n\n引子上面链接的一个例子：\n\n```javascript\nconst isBiggerThan10 = numb => numb > 10;\n\n[2, 5, 8, 1, 4].some(isBiggerThan10);  // false\n[12, 5, 8, 1, 4].some(isBiggerThan10); // true\n```\n\n使用`.some`我们拥有了类似`.forEach`的功能，而且使用`return`实现了`break`的效果。\n\n```javascript\n[0, 1, 2, 3, 4].some(function(val, i) {\n  if (val === 2) {\n    return true;\n  }\n  console.log(val); // your code\n});\n//> 0, 1\n```\n\n\n你可以返回`false`使循环`continue`到下一个元素。当你返回`true`时，循环将会`break`，此时`a.some(..)`将会`return` `true`。\n\n```javascript\n// Array contains 2\nconst isTwoPresent = [0, 1, 2, 3, 4].some(function(val, i) {\n  if (val === 2) {\n    return true; // break\n  }\n});\nconsole.log(isTwoPresent);\n//> true\n```\n\n还有`.every`函数同样可以实现此功能。但此时我们需要返回与`.some`相反的布尔值。\n\n##### 示例\n<div>\n  <a class=\"jsbin-embed\" href=\"http://jsbin.com/jopeji/embed?js,console\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.39.11\"></script>\n</div>\n","source":"_posts/javascript/2016-08-17-break-continue-loop-functional.md","raw":"---\nlayout: post\n\ntitle: break 或 continue 循环函数\ntip-number: 58\ntip-username: vamshisuram\ntip-username-profile: https://github.com/vamshisuram\ntip-tldr: 循环一个`list`从中寻找一个或一些值，是一个很常见的需求。但是即使我们要找的元素就是数组里的第一个，我们不也能从循环中直接`return`，只能遍历整个数组。本文教你如何使用`.some`和`.every`快速结束循环。\n\n\nredirect_from:\n  - /zh_cn/break-continue-loop-functional/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n\n停止循环是循环中一个常见的需求。使用`for`循环我们可以用`break`提前结束循环。\n\n```javascript\nconst a = [0, 1, 2, 3, 4];\nfor (var i = 0; i < a.length; i++) {\n  if (a[i] === 2) {\n    break; // stop the loop\n  }\n  console.log(a[i]);\n}\n//> 0, 1\n```\n\n另一个常见的需求使我们需要直接取得变量。\n\n一个快速的方式是使用`.forEach`，但是这样我们就失去了`break`的能力。这种情况下，最接近的方式是使用`return`实现`continue`的功能。\n\n```javascript\n[0, 1, 2, 3, 4].forEach(function(val, i) {\n  if (val === 2) {\n    // 怎么停止呢?\n    return true;\n  }\n  console.log(val); // your code\n});\n//> 0, 1, 3, 4\n```\n\n`.some`是一个原型方法。他用来检测是否某些元素满足所提供的函数。如果任何元素最终返回`true`，它就会停止运行。更多解释请看[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some)。\n\n引子上面链接的一个例子：\n\n```javascript\nconst isBiggerThan10 = numb => numb > 10;\n\n[2, 5, 8, 1, 4].some(isBiggerThan10);  // false\n[12, 5, 8, 1, 4].some(isBiggerThan10); // true\n```\n\n使用`.some`我们拥有了类似`.forEach`的功能，而且使用`return`实现了`break`的效果。\n\n```javascript\n[0, 1, 2, 3, 4].some(function(val, i) {\n  if (val === 2) {\n    return true;\n  }\n  console.log(val); // your code\n});\n//> 0, 1\n```\n\n\n你可以返回`false`使循环`continue`到下一个元素。当你返回`true`时，循环将会`break`，此时`a.some(..)`将会`return` `true`。\n\n```javascript\n// Array contains 2\nconst isTwoPresent = [0, 1, 2, 3, 4].some(function(val, i) {\n  if (val === 2) {\n    return true; // break\n  }\n});\nconsole.log(isTwoPresent);\n//> true\n```\n\n还有`.every`函数同样可以实现此功能。但此时我们需要返回与`.some`相反的布尔值。\n\n##### 示例\n<div>\n  <a class=\"jsbin-embed\" href=\"http://jsbin.com/jopeji/embed?js,console\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.39.11\"></script>\n</div>\n","slug":"javascript/2016-08-17-break-continue-loop-functional","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqez005blyfyzthq9e1a","content":"<p>停止循环是循环中一个常见的需求。使用<code>for</code>循环我们可以用<code>break</code>提前结束循环。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> a = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (a[i] === <span class=\"number\">2</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">break</span>; <span class=\"comment\">// stop the loop</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a[i]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//&gt; 0, 1</span></div></pre></td></tr></table></figure>\n<p>另一个常见的需求使我们需要直接取得变量。</p>\n<p>一个快速的方式是使用<code>.forEach</code>，但是这样我们就失去了<code>break</code>的能力。这种情况下，最接近的方式是使用<code>return</code>实现<code>continue</code>的功能。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val, i</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (val === <span class=\"number\">2</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 怎么停止呢?</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(val); <span class=\"comment\">// your code</span></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//&gt; 0, 1, 3, 4</span></div></pre></td></tr></table></figure>\n<p><code>.some</code>是一个原型方法。他用来检测是否某些元素满足所提供的函数。如果任何元素最终返回<code>true</code>，它就会停止运行。更多解释请看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some\" target=\"_blank\" rel=\"external\">MDN</a>。</p>\n<p>引子上面链接的一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> isBiggerThan10 = <span class=\"function\"><span class=\"params\">numb</span> =&gt;</span> numb &gt; <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>].some(isBiggerThan10);  <span class=\"comment\">// false</span></div><div class=\"line\">[<span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>].some(isBiggerThan10); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>使用<code>.some</code>我们拥有了类似<code>.forEach</code>的功能，而且使用<code>return</code>实现了<code>break</code>的效果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val, i</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (val === <span class=\"number\">2</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(val); <span class=\"comment\">// your code</span></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//&gt; 0, 1</span></div></pre></td></tr></table></figure>\n<p>你可以返回<code>false</code>使循环<code>continue</code>到下一个元素。当你返回<code>true</code>时，循环将会<code>break</code>，此时<code>a.some(..)</code>将会<code>return</code> <code>true</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Array contains 2</span></div><div class=\"line\"><span class=\"keyword\">const</span> isTwoPresent = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val, i</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (val === <span class=\"number\">2</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// break</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(isTwoPresent);</div><div class=\"line\"><span class=\"comment\">//&gt; true</span></div></pre></td></tr></table></figure>\n<p>还有<code>.every</code>函数同样可以实现此功能。但此时我们需要返回与<code>.some</code>相反的布尔值。</p>\n<h5 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h5><div><br>  <a class=\"jsbin-embed\" href=\"http://jsbin.com/jopeji/embed?js,console\" target=\"_blank\" rel=\"external\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.39.11\"></script><br></div>\n","site":{"data":{}},"excerpt":"","more":"<p>停止循环是循环中一个常见的需求。使用<code>for</code>循环我们可以用<code>break</code>提前结束循环。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> a = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (a[i] === <span class=\"number\">2</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">break</span>; <span class=\"comment\">// stop the loop</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a[i]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//&gt; 0, 1</span></div></pre></td></tr></table></figure>\n<p>另一个常见的需求使我们需要直接取得变量。</p>\n<p>一个快速的方式是使用<code>.forEach</code>，但是这样我们就失去了<code>break</code>的能力。这种情况下，最接近的方式是使用<code>return</code>实现<code>continue</code>的功能。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val, i</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (val === <span class=\"number\">2</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 怎么停止呢?</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(val); <span class=\"comment\">// your code</span></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//&gt; 0, 1, 3, 4</span></div></pre></td></tr></table></figure>\n<p><code>.some</code>是一个原型方法。他用来检测是否某些元素满足所提供的函数。如果任何元素最终返回<code>true</code>，它就会停止运行。更多解释请看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some\" target=\"_blank\" rel=\"external\">MDN</a>。</p>\n<p>引子上面链接的一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> isBiggerThan10 = <span class=\"function\"><span class=\"params\">numb</span> =&gt;</span> numb &gt; <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>].some(isBiggerThan10);  <span class=\"comment\">// false</span></div><div class=\"line\">[<span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>].some(isBiggerThan10); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>使用<code>.some</code>我们拥有了类似<code>.forEach</code>的功能，而且使用<code>return</code>实现了<code>break</code>的效果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val, i</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (val === <span class=\"number\">2</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(val); <span class=\"comment\">// your code</span></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//&gt; 0, 1</span></div></pre></td></tr></table></figure>\n<p>你可以返回<code>false</code>使循环<code>continue</code>到下一个元素。当你返回<code>true</code>时，循环将会<code>break</code>，此时<code>a.some(..)</code>将会<code>return</code> <code>true</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Array contains 2</span></div><div class=\"line\"><span class=\"keyword\">const</span> isTwoPresent = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val, i</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (val === <span class=\"number\">2</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// break</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(isTwoPresent);</div><div class=\"line\"><span class=\"comment\">//&gt; true</span></div></pre></td></tr></table></figure>\n<p>还有<code>.every</code>函数同样可以实现此功能。但此时我们需要返回与<code>.some</code>相反的布尔值。</p>\n<h5 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h5><div><br>  <a class=\"jsbin-embed\" href=\"http://jsbin.com/jopeji/embed?js,console\" target=\"_blank\" rel=\"external\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.39.11\"></script><br></div>\n"},{"layout":"post","title":"var和ES6的let","tip-number":59,"tip-username":"richzw","tip-username-profile":"https://github.com/richzw","tip-tldr":"在这个 tip，我将介绍 var 和 let 之间不同的作用域。我应该使用 let 替代 var 吗？让我们来看一下吧！","redirect_from":["/zh_cn/keyword-var-vs-let/"],"_content":"\n### 概述\n\n- 通过 `var` 定义的变量，它的作用域是在 function 或任何外部已经被声明的 function，是全域的 。\n- 透過 `let` 定义的变量，它的作用域是在一個块（block）。\n\n```js\nfunction varvslet() {\n  console.log(i); // i 是 undefined 的，因为变量提升\n  // console.log(j); // ReferenceError: j 没有被定义\n\n  for( var i = 0; i < 3; i++ ) {\n    console.log(i); // 0, 1, 2\n  };\n\n  console.log(i); // 3\n  // console.log(j); // ReferenceError: j 没有被定义\n\n  for( let j = 0; j < 3; j++ ) {\n    console.log(j);\n  };\n\n  console.log(i); // 3\n  // console.log(j); // ReferenceError: j 没有被定义\n}\n```\n\n### 详细的区别\n\n- 变量提升\n\n  `let` 不會被提升到整个块的作用域。相比之下，`var` 可以被提升。\n\n```js\n{\n  console.log(c); // undefined。因为变量提升\n  var c = 2;\n}\n\n{\n  console.log(b); // ReferenceError: b 没有被定义\n  let b = 3;\n}\n```\n\n- 循环中的闭包\n\n  `let` 在每次循环可以重新被 bind，确保在它之前结束的循环被重新赋值，所以在闭包中它被用來避免一些问题。\n\n```js\nfor (var i = 0; i < 5; ++i) {\n  setTimeout(function () {\n    console.log(i); // 输出 '5' 五次\n  }, 100);  \n}\n```\n\n  使用 `let` 替换 `var`\n\n```js\n// print 1, 2, 3, 4, 5\nfor (let i = 0; i < 5; ++i) {\n  setTimeout(function () {\n    console.log(i); // 输出 0, 1, 2, 3, 4\n  }, 100);  \n}\n```\n\n\n### 我们应该用 `let` 替代 `var` 嗎？\n\n> 不是的，`let` 是新的块作用域。语法强调在 `var` 已经是区块作用域时時，`let` 应该替换 `var` ，否则请不要替换 `var`。`let` 改善了在 JS 作用域的选项，而不是取代。`var` 对于变量依旧是有用的，可被用在整個 function 之中。\n\n### `let` 兼容性\n\n- 在 server 端，比如 Node.js，你现在可以安心的使用 `let`。\n\n- 在 client 端，通过 transpiler（比如 [Traceur](https://github.com/google/traceur-compiler)），可以安心的使用 `let` 语法。否则请在[这里](http://caniuse.com/#search=let)确认你的浏览器是否支持。\n\n### Playground\n<div>\n  <a class=\"jsbin-embed\" href=\"http://jsbin.com/yumaye/embed?js,console\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.39.11\"></script>\n</div>\n\n### 更多信息\n\n- [Let keyword vs var keyword](http://stackoverflow.com/questions/762011/let-keyword-vs-var-keyword)\n- [For and against let](https://davidwalsh.name/for-and-against-let)\n- [Explanation of `let` and block scoping with for loops](http://stackoverflow.com/questions/30899612/explanation-of-let-and-block-scoping-with-for-loops/30900289#30900289).\n","source":"_posts/javascript/2016-08-25-keyword-var-vs-let.md","raw":"---\nlayout: post\n\ntitle: var和ES6的let\ntip-number: 59\ntip-username: richzw\ntip-username-profile: https://github.com/richzw\ntip-tldr: 在这个 tip，我将介绍 var 和 let 之间不同的作用域。我应该使用 let 替代 var 吗？让我们来看一下吧！\nredirect_from:\n  - /zh_cn/keyword-var-vs-let/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n### 概述\n\n- 通过 `var` 定义的变量，它的作用域是在 function 或任何外部已经被声明的 function，是全域的 。\n- 透過 `let` 定义的变量，它的作用域是在一個块（block）。\n\n```js\nfunction varvslet() {\n  console.log(i); // i 是 undefined 的，因为变量提升\n  // console.log(j); // ReferenceError: j 没有被定义\n\n  for( var i = 0; i < 3; i++ ) {\n    console.log(i); // 0, 1, 2\n  };\n\n  console.log(i); // 3\n  // console.log(j); // ReferenceError: j 没有被定义\n\n  for( let j = 0; j < 3; j++ ) {\n    console.log(j);\n  };\n\n  console.log(i); // 3\n  // console.log(j); // ReferenceError: j 没有被定义\n}\n```\n\n### 详细的区别\n\n- 变量提升\n\n  `let` 不會被提升到整个块的作用域。相比之下，`var` 可以被提升。\n\n```js\n{\n  console.log(c); // undefined。因为变量提升\n  var c = 2;\n}\n\n{\n  console.log(b); // ReferenceError: b 没有被定义\n  let b = 3;\n}\n```\n\n- 循环中的闭包\n\n  `let` 在每次循环可以重新被 bind，确保在它之前结束的循环被重新赋值，所以在闭包中它被用來避免一些问题。\n\n```js\nfor (var i = 0; i < 5; ++i) {\n  setTimeout(function () {\n    console.log(i); // 输出 '5' 五次\n  }, 100);  \n}\n```\n\n  使用 `let` 替换 `var`\n\n```js\n// print 1, 2, 3, 4, 5\nfor (let i = 0; i < 5; ++i) {\n  setTimeout(function () {\n    console.log(i); // 输出 0, 1, 2, 3, 4\n  }, 100);  \n}\n```\n\n\n### 我们应该用 `let` 替代 `var` 嗎？\n\n> 不是的，`let` 是新的块作用域。语法强调在 `var` 已经是区块作用域时時，`let` 应该替换 `var` ，否则请不要替换 `var`。`let` 改善了在 JS 作用域的选项，而不是取代。`var` 对于变量依旧是有用的，可被用在整個 function 之中。\n\n### `let` 兼容性\n\n- 在 server 端，比如 Node.js，你现在可以安心的使用 `let`。\n\n- 在 client 端，通过 transpiler（比如 [Traceur](https://github.com/google/traceur-compiler)），可以安心的使用 `let` 语法。否则请在[这里](http://caniuse.com/#search=let)确认你的浏览器是否支持。\n\n### Playground\n<div>\n  <a class=\"jsbin-embed\" href=\"http://jsbin.com/yumaye/embed?js,console\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.39.11\"></script>\n</div>\n\n### 更多信息\n\n- [Let keyword vs var keyword](http://stackoverflow.com/questions/762011/let-keyword-vs-var-keyword)\n- [For and against let](https://davidwalsh.name/for-and-against-let)\n- [Explanation of `let` and block scoping with for loops](http://stackoverflow.com/questions/30899612/explanation-of-let-and-block-scoping-with-for-loops/30900289#30900289).\n","slug":"javascript/2016-08-25-keyword-var-vs-let","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqf1005dlyfy76gus6fh","content":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><ul>\n<li>通过 <code>var</code> 定义的变量，它的作用域是在 function 或任何外部已经被声明的 function，是全域的 。</li>\n<li>透過 <code>let</code> 定义的变量，它的作用域是在一個块（block）。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">varvslet</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// i 是 undefined 的，因为变量提升</span></div><div class=\"line\">  <span class=\"comment\">// console.log(j); // ReferenceError: j 没有被定义</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++ ) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 0, 1, 2</span></div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 3</span></div><div class=\"line\">  <span class=\"comment\">// console.log(j); // ReferenceError: j 没有被定义</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>( <span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++ ) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(j);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 3</span></div><div class=\"line\">  <span class=\"comment\">// console.log(j); // ReferenceError: j 没有被定义</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"详细的区别\"><a href=\"#详细的区别\" class=\"headerlink\" title=\"详细的区别\"></a>详细的区别</h3><ul>\n<li><p>变量提升</p>\n<p><code>let</code> 不會被提升到整个块的作用域。相比之下，<code>var</code> 可以被提升。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// undefined。因为变量提升</span></div><div class=\"line\">  <span class=\"keyword\">var</span> c = <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// ReferenceError: b 没有被定义</span></div><div class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">3</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>循环中的闭包</p>\n<p><code>let</code> 在每次循环可以重新被 bind，确保在它之前结束的循环被重新赋值，所以在闭包中它被用來避免一些问题。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</div><div class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 输出 '5' 五次</span></div><div class=\"line\">  &#125;, <span class=\"number\">100</span>);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  使用 <code>let</code> 替换 <code>var</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// print 1, 2, 3, 4, 5</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</div><div class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 输出 0, 1, 2, 3, 4</span></div><div class=\"line\">  &#125;, <span class=\"number\">100</span>);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"我们应该用-let-替代-var-嗎？\"><a href=\"#我们应该用-let-替代-var-嗎？\" class=\"headerlink\" title=\"我们应该用 let 替代 var 嗎？\"></a>我们应该用 <code>let</code> 替代 <code>var</code> 嗎？</h3><blockquote>\n<p>不是的，<code>let</code> 是新的块作用域。语法强调在 <code>var</code> 已经是区块作用域时時，<code>let</code> 应该替换 <code>var</code> ，否则请不要替换 <code>var</code>。<code>let</code> 改善了在 JS 作用域的选项，而不是取代。<code>var</code> 对于变量依旧是有用的，可被用在整個 function 之中。</p>\n</blockquote>\n<h3 id=\"let-兼容性\"><a href=\"#let-兼容性\" class=\"headerlink\" title=\"let 兼容性\"></a><code>let</code> 兼容性</h3><ul>\n<li><p>在 server 端，比如 Node.js，你现在可以安心的使用 <code>let</code>。</p>\n</li>\n<li><p>在 client 端，通过 transpiler（比如 <a href=\"https://github.com/google/traceur-compiler\" target=\"_blank\" rel=\"external\">Traceur</a>），可以安心的使用 <code>let</code> 语法。否则请在<a href=\"http://caniuse.com/#search=let\" target=\"_blank\" rel=\"external\">这里</a>确认你的浏览器是否支持。</p>\n</li>\n</ul>\n<h3 id=\"Playground\"><a href=\"#Playground\" class=\"headerlink\" title=\"Playground\"></a>Playground</h3><div><br>  <a class=\"jsbin-embed\" href=\"http://jsbin.com/yumaye/embed?js,console\" target=\"_blank\" rel=\"external\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.39.11\"></script><br></div>\n\n<h3 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h3><ul>\n<li><a href=\"http://stackoverflow.com/questions/762011/let-keyword-vs-var-keyword\" target=\"_blank\" rel=\"external\">Let keyword vs var keyword</a></li>\n<li><a href=\"https://davidwalsh.name/for-and-against-let\" target=\"_blank\" rel=\"external\">For and against let</a></li>\n<li><a href=\"http://stackoverflow.com/questions/30899612/explanation-of-let-and-block-scoping-with-for-loops/30900289#30900289\" target=\"_blank\" rel=\"external\">Explanation of <code>let</code> and block scoping with for loops</a>.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><ul>\n<li>通过 <code>var</code> 定义的变量，它的作用域是在 function 或任何外部已经被声明的 function，是全域的 。</li>\n<li>透過 <code>let</code> 定义的变量，它的作用域是在一個块（block）。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">varvslet</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// i 是 undefined 的，因为变量提升</span></div><div class=\"line\">  <span class=\"comment\">// console.log(j); // ReferenceError: j 没有被定义</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++ ) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 0, 1, 2</span></div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 3</span></div><div class=\"line\">  <span class=\"comment\">// console.log(j); // ReferenceError: j 没有被定义</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>( <span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++ ) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(j);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 3</span></div><div class=\"line\">  <span class=\"comment\">// console.log(j); // ReferenceError: j 没有被定义</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"详细的区别\"><a href=\"#详细的区别\" class=\"headerlink\" title=\"详细的区别\"></a>详细的区别</h3><ul>\n<li><p>变量提升</p>\n<p><code>let</code> 不會被提升到整个块的作用域。相比之下，<code>var</code> 可以被提升。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// undefined。因为变量提升</span></div><div class=\"line\">  <span class=\"keyword\">var</span> c = <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// ReferenceError: b 没有被定义</span></div><div class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">3</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>循环中的闭包</p>\n<p><code>let</code> 在每次循环可以重新被 bind，确保在它之前结束的循环被重新赋值，所以在闭包中它被用來避免一些问题。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</div><div class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 输出 '5' 五次</span></div><div class=\"line\">  &#125;, <span class=\"number\">100</span>);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  使用 <code>let</code> 替换 <code>var</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// print 1, 2, 3, 4, 5</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</div><div class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 输出 0, 1, 2, 3, 4</span></div><div class=\"line\">  &#125;, <span class=\"number\">100</span>);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"我们应该用-let-替代-var-嗎？\"><a href=\"#我们应该用-let-替代-var-嗎？\" class=\"headerlink\" title=\"我们应该用 let 替代 var 嗎？\"></a>我们应该用 <code>let</code> 替代 <code>var</code> 嗎？</h3><blockquote>\n<p>不是的，<code>let</code> 是新的块作用域。语法强调在 <code>var</code> 已经是区块作用域时時，<code>let</code> 应该替换 <code>var</code> ，否则请不要替换 <code>var</code>。<code>let</code> 改善了在 JS 作用域的选项，而不是取代。<code>var</code> 对于变量依旧是有用的，可被用在整個 function 之中。</p>\n</blockquote>\n<h3 id=\"let-兼容性\"><a href=\"#let-兼容性\" class=\"headerlink\" title=\"let 兼容性\"></a><code>let</code> 兼容性</h3><ul>\n<li><p>在 server 端，比如 Node.js，你现在可以安心的使用 <code>let</code>。</p>\n</li>\n<li><p>在 client 端，通过 transpiler（比如 <a href=\"https://github.com/google/traceur-compiler\" target=\"_blank\" rel=\"external\">Traceur</a>），可以安心的使用 <code>let</code> 语法。否则请在<a href=\"http://caniuse.com/#search=let\" target=\"_blank\" rel=\"external\">这里</a>确认你的浏览器是否支持。</p>\n</li>\n</ul>\n<h3 id=\"Playground\"><a href=\"#Playground\" class=\"headerlink\" title=\"Playground\"></a>Playground</h3><div><br>  <a class=\"jsbin-embed\" href=\"http://jsbin.com/yumaye/embed?js,console\" target=\"_blank\" rel=\"external\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.39.11\"></script><br></div>\n\n<h3 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h3><ul>\n<li><a href=\"http://stackoverflow.com/questions/762011/let-keyword-vs-var-keyword\" target=\"_blank\" rel=\"external\">Let keyword vs var keyword</a></li>\n<li><a href=\"https://davidwalsh.name/for-and-against-let\" target=\"_blank\" rel=\"external\">For and against let</a></li>\n<li><a href=\"http://stackoverflow.com/questions/30899612/explanation-of-let-and-block-scoping-with-for-loops/30900289#30900289\" target=\"_blank\" rel=\"external\">Explanation of <code>let</code> and block scoping with for loops</a>.</li>\n</ul>\n"},{"layout":"post","title":"三个实用的javascript小技巧","tip-number":60,"tip-username":"leandrosimoes","tip-username-profile":"https://github.com/leandrosimoes","tip-tldr":"分享三个让开发变得更高效的实用语法糖","redirect_from":["/zh_cn/three-useful-hacks/"],"_content":"\n#### 从后向前获取数组元素\n\n如果你想从后向前获取一个数组的元素，可以这样写：\n\n```javascript\nvar newArray = [1, 2, 3, 4]\n\nconsole.log(newArray.slice(-1)) // [4]\nconsole.log(newArray.slice(-2)) // [3, 4]\nconsole.log(newArray.slice(-3)) // [2, 3, 4]\nconsole.log(newArray.slice(-4)) // [1, 2, 3, 4]\n```\n\n#### 短路条件句\n\n如果你想在某个条件逻辑值为`true`时，执行某个函数，就像这样：\n\n```javascript\nif (condition) {\n  dosomething()\n}\n```\n\n这时，你可以这样子运用短路：\n\n```javascript\ncondition && dosomething()\n```\n\n#### 用操作符 \"||\" 来设置默认值\n\n如果你必须给一个变量赋默认值，可以简单的这样写：\n\n```javascript\nvar a\n\nconsole.log(a) // undefined\n\na = a || 'default value'\n\nconsole.log(a) // default value\n\na = a || 'new value'\n\nconsole.log(a) // default value\n```\n","source":"_posts/javascript/2016-10-28-three-useful-hacks.md","raw":"---\nlayout: post\n\ntitle: 三个实用的javascript小技巧\ntip-number: 60\ntip-username: leandrosimoes\ntip-username-profile: https://github.com/leandrosimoes\ntip-tldr: 分享三个让开发变得更高效的实用语法糖\n\n\nredirect_from:\n  - /zh_cn/three-useful-hacks/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n#### 从后向前获取数组元素\n\n如果你想从后向前获取一个数组的元素，可以这样写：\n\n```javascript\nvar newArray = [1, 2, 3, 4]\n\nconsole.log(newArray.slice(-1)) // [4]\nconsole.log(newArray.slice(-2)) // [3, 4]\nconsole.log(newArray.slice(-3)) // [2, 3, 4]\nconsole.log(newArray.slice(-4)) // [1, 2, 3, 4]\n```\n\n#### 短路条件句\n\n如果你想在某个条件逻辑值为`true`时，执行某个函数，就像这样：\n\n```javascript\nif (condition) {\n  dosomething()\n}\n```\n\n这时，你可以这样子运用短路：\n\n```javascript\ncondition && dosomething()\n```\n\n#### 用操作符 \"||\" 来设置默认值\n\n如果你必须给一个变量赋默认值，可以简单的这样写：\n\n```javascript\nvar a\n\nconsole.log(a) // undefined\n\na = a || 'default value'\n\nconsole.log(a) // default value\n\na = a || 'new value'\n\nconsole.log(a) // default value\n```\n","slug":"javascript/2016-10-28-three-useful-hacks","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqf2005flyfyn0nkb2kb","content":"<h4 id=\"从后向前获取数组元素\"><a href=\"#从后向前获取数组元素\" class=\"headerlink\" title=\"从后向前获取数组元素\"></a>从后向前获取数组元素</h4><p>如果你想从后向前获取一个数组的元素，可以这样写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> newArray = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(newArray.slice(<span class=\"number\">-1</span>)) <span class=\"comment\">// [4]</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(newArray.slice(<span class=\"number\">-2</span>)) <span class=\"comment\">// [3, 4]</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(newArray.slice(<span class=\"number\">-3</span>)) <span class=\"comment\">// [2, 3, 4]</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(newArray.slice(<span class=\"number\">-4</span>)) <span class=\"comment\">// [1, 2, 3, 4]</span></div></pre></td></tr></table></figure>\n<h4 id=\"短路条件句\"><a href=\"#短路条件句\" class=\"headerlink\" title=\"短路条件句\"></a>短路条件句</h4><p>如果你想在某个条件逻辑值为<code>true</code>时，执行某个函数，就像这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</div><div class=\"line\">  dosomething()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这时，你可以这样子运用短路：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">condition &amp;&amp; dosomething()</div></pre></td></tr></table></figure>\n<h4 id=\"用操作符-“-”-来设置默认值\"><a href=\"#用操作符-“-”-来设置默认值\" class=\"headerlink\" title=\"用操作符 “||” 来设置默认值\"></a>用操作符 “||” 来设置默认值</h4><p>如果你必须给一个变量赋默认值，可以简单的这样写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// undefined</span></div><div class=\"line\"></div><div class=\"line\">a = a || <span class=\"string\">'default value'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// default value</span></div><div class=\"line\"></div><div class=\"line\">a = a || <span class=\"string\">'new value'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// default value</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"从后向前获取数组元素\"><a href=\"#从后向前获取数组元素\" class=\"headerlink\" title=\"从后向前获取数组元素\"></a>从后向前获取数组元素</h4><p>如果你想从后向前获取一个数组的元素，可以这样写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> newArray = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(newArray.slice(<span class=\"number\">-1</span>)) <span class=\"comment\">// [4]</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(newArray.slice(<span class=\"number\">-2</span>)) <span class=\"comment\">// [3, 4]</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(newArray.slice(<span class=\"number\">-3</span>)) <span class=\"comment\">// [2, 3, 4]</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(newArray.slice(<span class=\"number\">-4</span>)) <span class=\"comment\">// [1, 2, 3, 4]</span></div></pre></td></tr></table></figure>\n<h4 id=\"短路条件句\"><a href=\"#短路条件句\" class=\"headerlink\" title=\"短路条件句\"></a>短路条件句</h4><p>如果你想在某个条件逻辑值为<code>true</code>时，执行某个函数，就像这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</div><div class=\"line\">  dosomething()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这时，你可以这样子运用短路：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">condition &amp;&amp; dosomething()</div></pre></td></tr></table></figure>\n<h4 id=\"用操作符-“-”-来设置默认值\"><a href=\"#用操作符-“-”-来设置默认值\" class=\"headerlink\" title=\"用操作符 “||” 来设置默认值\"></a>用操作符 “||” 来设置默认值</h4><p>如果你必须给一个变量赋默认值，可以简单的这样写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// undefined</span></div><div class=\"line\"></div><div class=\"line\">a = a || <span class=\"string\">'default value'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// default value</span></div><div class=\"line\"></div><div class=\"line\">a = a || <span class=\"string\">'new value'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// default value</span></div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"给函数 Bind 对象","tip-number":61,"tip-username":"loverajoel","tip-username-profile":"https://github.com/loverajoel","tip-tldr":"理解在 JavaScript 中如何使用 `Bind` 方法绑定对象和函数","redirect_from":["/zh_cn/binding-objects-to-functions/"],"_content":"\n我们常常需要将一个对象绑定到一个方法的 `this` 上。在 JS 中，如果你想要调用一个函数并指定它的 `this` 时可以使用 `bind` 方法。\n\n### Bind 语法\n\n```js\nfun.bind(thisArg[, arg1[, arg2[, ...]]])\n```\n\n## 参数\n**thisArg**\n\n当绑定函数被调用时，该参数会作为原函数运行时的 this 指向。\n\n**arg1, arg2, ...**\n\n当绑定函数被调用时，这些参数将置于实参之前传递给被绑定的方法。\n\n**返回值**\n\n返回由指定的this值和初始化参数改造的原函数拷贝\n\n### JS 中的实例\n\n```js\nconst myCar = {\n brand: 'Ford',\n type: 'Sedan',\n color: 'Red'\n};\n\nconst getBrand = function () {\n console.log(this.brand);\n};\n\nconst getType = function () {\n console.log(this.type);\n};\n\nconst getColor = function () {\n console.log(this.color);\n};\n\ngetBrand(); // object not bind,undefined\n\ngetBrand(myCar); // object not bind,undefined\n\ngetType.bind(myCar)(); // Sedan\n\nlet boundGetColor = getColor.bind(myCar);\nboundGetColor(); // Red\n\n```","source":"_posts/javascript/2017-01-19-binding-objects-to-functions.md","raw":"---\nlayout: post\n\ntitle: 给函数 Bind 对象\ntip-number: 61\ntip-username: loverajoel\ntip-username-profile: https://github.com/loverajoel\ntip-tldr: 理解在 JavaScript 中如何使用 `Bind` 方法绑定对象和函数\n\n\nredirect_from:\n  - /zh_cn/binding-objects-to-functions/\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n我们常常需要将一个对象绑定到一个方法的 `this` 上。在 JS 中，如果你想要调用一个函数并指定它的 `this` 时可以使用 `bind` 方法。\n\n### Bind 语法\n\n```js\nfun.bind(thisArg[, arg1[, arg2[, ...]]])\n```\n\n## 参数\n**thisArg**\n\n当绑定函数被调用时，该参数会作为原函数运行时的 this 指向。\n\n**arg1, arg2, ...**\n\n当绑定函数被调用时，这些参数将置于实参之前传递给被绑定的方法。\n\n**返回值**\n\n返回由指定的this值和初始化参数改造的原函数拷贝\n\n### JS 中的实例\n\n```js\nconst myCar = {\n brand: 'Ford',\n type: 'Sedan',\n color: 'Red'\n};\n\nconst getBrand = function () {\n console.log(this.brand);\n};\n\nconst getType = function () {\n console.log(this.type);\n};\n\nconst getColor = function () {\n console.log(this.color);\n};\n\ngetBrand(); // object not bind,undefined\n\ngetBrand(myCar); // object not bind,undefined\n\ngetType.bind(myCar)(); // Sedan\n\nlet boundGetColor = getColor.bind(myCar);\nboundGetColor(); // Red\n\n```","slug":"javascript/2017-01-19-binding-objects-to-functions","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqf4005hlyfy3cf9dw27","content":"<p>我们常常需要将一个对象绑定到一个方法的 <code>this</code> 上。在 JS 中，如果你想要调用一个函数并指定它的 <code>this</code> 时可以使用 <code>bind</code> 方法。</p>\n<h3 id=\"Bind-语法\"><a href=\"#Bind-语法\" class=\"headerlink\" title=\"Bind 语法\"></a>Bind 语法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fun.bind(thisArg[, arg1[, arg2[, ...]]])</div></pre></td></tr></table></figure>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><p><strong>thisArg</strong></p>\n<p>当绑定函数被调用时，该参数会作为原函数运行时的 this 指向。</p>\n<p><strong>arg1, arg2, …</strong></p>\n<p>当绑定函数被调用时，这些参数将置于实参之前传递给被绑定的方法。</p>\n<p><strong>返回值</strong></p>\n<p>返回由指定的this值和初始化参数改造的原函数拷贝</p>\n<h3 id=\"JS-中的实例\"><a href=\"#JS-中的实例\" class=\"headerlink\" title=\"JS 中的实例\"></a>JS 中的实例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> myCar = &#123;</div><div class=\"line\"> <span class=\"attr\">brand</span>: <span class=\"string\">'Ford'</span>,</div><div class=\"line\"> <span class=\"attr\">type</span>: <span class=\"string\">'Sedan'</span>,</div><div class=\"line\"> <span class=\"attr\">color</span>: <span class=\"string\">'Red'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> getBrand = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.brand);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> getType = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.type);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> getColor = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.color);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">getBrand(); <span class=\"comment\">// object not bind,undefined</span></div><div class=\"line\"></div><div class=\"line\">getBrand(myCar); <span class=\"comment\">// object not bind,undefined</span></div><div class=\"line\"></div><div class=\"line\">getType.bind(myCar)(); <span class=\"comment\">// Sedan</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> boundGetColor = getColor.bind(myCar);</div><div class=\"line\">boundGetColor(); <span class=\"comment\">// Red</span></div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>我们常常需要将一个对象绑定到一个方法的 <code>this</code> 上。在 JS 中，如果你想要调用一个函数并指定它的 <code>this</code> 时可以使用 <code>bind</code> 方法。</p>\n<h3 id=\"Bind-语法\"><a href=\"#Bind-语法\" class=\"headerlink\" title=\"Bind 语法\"></a>Bind 语法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fun.bind(thisArg[, arg1[, arg2[, ...]]])</div></pre></td></tr></table></figure>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><p><strong>thisArg</strong></p>\n<p>当绑定函数被调用时，该参数会作为原函数运行时的 this 指向。</p>\n<p><strong>arg1, arg2, …</strong></p>\n<p>当绑定函数被调用时，这些参数将置于实参之前传递给被绑定的方法。</p>\n<p><strong>返回值</strong></p>\n<p>返回由指定的this值和初始化参数改造的原函数拷贝</p>\n<h3 id=\"JS-中的实例\"><a href=\"#JS-中的实例\" class=\"headerlink\" title=\"JS 中的实例\"></a>JS 中的实例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> myCar = &#123;</div><div class=\"line\"> <span class=\"attr\">brand</span>: <span class=\"string\">'Ford'</span>,</div><div class=\"line\"> <span class=\"attr\">type</span>: <span class=\"string\">'Sedan'</span>,</div><div class=\"line\"> <span class=\"attr\">color</span>: <span class=\"string\">'Red'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> getBrand = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.brand);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> getType = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.type);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> getColor = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.color);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">getBrand(); <span class=\"comment\">// object not bind,undefined</span></div><div class=\"line\"></div><div class=\"line\">getBrand(myCar); <span class=\"comment\">// object not bind,undefined</span></div><div class=\"line\"></div><div class=\"line\">getType.bind(myCar)(); <span class=\"comment\">// Sedan</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> boundGetColor = getColor.bind(myCar);</div><div class=\"line\">boundGetColor(); <span class=\"comment\">// Red</span></div></pre></td></tr></table></figure>"},{"layout":"post","title":"处理 Websocket 超时问题","tip-number":63,"tip-username":"loverajoel","tip-username-profile":"https://github.com/loverajoel","tip-tldr":"一个控制超时的技巧","_content":"\n在 websocket 连接被建立后，如果一段时间未活动，服务器或防火墙可能会超时或终止连接。想要解决这个问题， 我们可以周期性地给服务器发消息。我们需要两个方法实现：一个来确保连接不会中断，，另一个用来取消此设定。同我们也需要一个 ```timerID``` 变量.\n\n让我们来看一下具体实现：\n\n```js\nvar timerID = 0; \nfunction keepAlive() { \n    var timeout = 20000;  \n    if (webSocket.readyState == webSocket.OPEN) {  \n        webSocket.send('');  \n    }  \n    timerId = setTimeout(keepAlive, timeout);  \n}  \nfunction cancelKeepAlive() {  \n    if (timerId) {  \n        clearTimeout(timerId);  \n    }  \n}\n```\n\n现在我们实现了我们需要的两个方法，我们可以在 ```onOpen()``` 的最后面调用 ```keepAlive()``` ，在```onClose()``` 的组后面调用 ```cancelKeepAlive()```。\n\n好了！我们我们完美的解决了 websocket 超时的问题。\n","source":"_posts/javascript/2017-03-09-working-with-websocket-timeout.md","raw":"---\nlayout: post\n\ntitle: 处理 Websocket 超时问题\ntip-number: 63\ntip-username: loverajoel \ntip-username-profile: https://github.com/loverajoel\ntip-tldr: 一个控制超时的技巧\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n在 websocket 连接被建立后，如果一段时间未活动，服务器或防火墙可能会超时或终止连接。想要解决这个问题， 我们可以周期性地给服务器发消息。我们需要两个方法实现：一个来确保连接不会中断，，另一个用来取消此设定。同我们也需要一个 ```timerID``` 变量.\n\n让我们来看一下具体实现：\n\n```js\nvar timerID = 0; \nfunction keepAlive() { \n    var timeout = 20000;  \n    if (webSocket.readyState == webSocket.OPEN) {  \n        webSocket.send('');  \n    }  \n    timerId = setTimeout(keepAlive, timeout);  \n}  \nfunction cancelKeepAlive() {  \n    if (timerId) {  \n        clearTimeout(timerId);  \n    }  \n}\n```\n\n现在我们实现了我们需要的两个方法，我们可以在 ```onOpen()``` 的最后面调用 ```keepAlive()``` ，在```onClose()``` 的组后面调用 ```cancelKeepAlive()```。\n\n好了！我们我们完美的解决了 websocket 超时的问题。\n","slug":"javascript/2017-03-09-working-with-websocket-timeout","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqf5005jlyfyeucjunb7","content":"<p>在 websocket 连接被建立后，如果一段时间未活动，服务器或防火墙可能会超时或终止连接。想要解决这个问题， 我们可以周期性地给服务器发消息。我们需要两个方法实现：一个来确保连接不会中断，，另一个用来取消此设定。同我们也需要一个 <figure class=\"highlight plain\"><figcaption><span>变量.</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">让我们来看一下具体实现：</div><div class=\"line\"></div><div class=\"line\">```js</div><div class=\"line\">var timerID = 0; </div><div class=\"line\">function keepAlive() &#123; </div><div class=\"line\">    var timeout = 20000;  </div><div class=\"line\">    if (webSocket.readyState == webSocket.OPEN) &#123;  </div><div class=\"line\">        webSocket.send(&apos;&apos;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    timerId = setTimeout(keepAlive, timeout);  </div><div class=\"line\">&#125;  </div><div class=\"line\">function cancelKeepAlive() &#123;  </div><div class=\"line\">    if (timerId) &#123;  </div><div class=\"line\">        clearTimeout(timerId);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>现在我们实现了我们需要的两个方法，我们可以在 <code>onOpen()</code> 的最后面调用 <code>keepAlive()</code> ，在<code>onClose()</code> 的组后面调用 <code>cancelKeepAlive()</code>。</p>\n<p>好了！我们我们完美的解决了 websocket 超时的问题。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在 websocket 连接被建立后，如果一段时间未活动，服务器或防火墙可能会超时或终止连接。想要解决这个问题， 我们可以周期性地给服务器发消息。我们需要两个方法实现：一个来确保连接不会中断，，另一个用来取消此设定。同我们也需要一个 <figure class=\"highlight plain\"><figcaption><span>变量.</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">让我们来看一下具体实现：</div><div class=\"line\"></div><div class=\"line\">```js</div><div class=\"line\">var timerID = 0; </div><div class=\"line\">function keepAlive() &#123; </div><div class=\"line\">    var timeout = 20000;  </div><div class=\"line\">    if (webSocket.readyState == webSocket.OPEN) &#123;  </div><div class=\"line\">        webSocket.send(&apos;&apos;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    timerId = setTimeout(keepAlive, timeout);  </div><div class=\"line\">&#125;  </div><div class=\"line\">function cancelKeepAlive() &#123;  </div><div class=\"line\">    if (timerId) &#123;  </div><div class=\"line\">        clearTimeout(timerId);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>现在我们实现了我们需要的两个方法，我们可以在 <code>onOpen()</code> 的最后面调用 <code>keepAlive()</code> ，在<code>onClose()</code> 的组后面调用 <code>cancelKeepAlive()</code>。</p>\n<p>好了！我们我们完美的解决了 websocket 超时的问题。</p>\n"},{"layout":"post","title":"Array 的三个技巧","tip-number":64,"tip-username":"hassanhelfi","tip-username-profile":"https://twitter.com/hassanhelfi","tip-tldr":"在 JavaScript 中 数组（Array）随处可见，使用ECMAScript 6 中的新特性 扩展运算符 你可以做很多很棒事情。在这边文章中，我将为你介绍在编码中有用的3个技巧。","_content":"\n在 JavaScript 中 数组（Array）随处可见，使用ECMAScript 6 中的新特性 [扩展运算符](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_operator) 你可以做很多很棒事情。在这边文章中，我将为你介绍在编码中有用的3个技巧。\n\n### 1. 迭代一个空数组\n\nJavaScript 中直接创建的数组是松散的，以至于会有很多坑。试着用数组的构造方法创建一个数组，你就会明白我的意思。\n\n```javascript\n> const arr = new Array(4);\n[undefined, undefined, undefined, undefined]\n```\n\n你会发现，通过一个松散的数组去循环调用一些转换是非常难的。\n\n```javascript\n> const arr = new Array(4);\n> arr.map((elem, index) => index);\n[undefined, undefined, undefined, undefined]\n```\n\n想要解决这个问题，你可以使用在创建新数组的时候使用 `Array.apply`。\n\n```javascript\n> const arr = Array.apply(null, new Array(4));\n> arr.map((elem, index) => index);\n[0, 1, 2, 3]\n```\n\n### 2. 给方法传一个空参数\n\n如果你想调用一个方法，并不填其中的一个参数时，JavaScript 就会报错。\n\n```javascript\n> method('parameter1', , 'parameter3');\nUncaught SyntaxError: Unexpected token ,\n```\n\n一个人们常用的解决方法是传递 `null` 或 `undefined`.\n\n```javascript\n> method('parameter1', null, 'parameter3') // or\n> method('parameter1', undefined, 'parameter3');\n```\n\n自从 JavaScript 把 `null` 当做一个 object 的时候， 我个人就不太喜欢使用它了。根据 ES6 中对扩展运算符的介绍，有一个更简洁的方法可以将空参数传递给一个方法。正如前文所提到的，数组是松散的，所以给它传空值是可以的，我们正式用到了这个优点。\n\n```javascript\n> method(...['parameter1', , 'parameter3']); // works!\n```\n\n### 数组去重\n\n我一直不明白为什么数组不提供一个内置函数可以让我们方便的取到去重以后的值。扩展运算符帮到了我们，使用扩展运算符配合 `Set` Spread operators are here for the rescue. Use spread operators with the `Set` 可以生成一个不重复的数组。\n\n```javascript\n> const arr = [...new Set([1, 2, 3, 3])];\n[1, 2, 3]\n```\n","source":"_posts/javascript/2017-03-12-3-array-hacks.md","raw":"---\nlayout: post\n\ntitle: Array 的三个技巧\ntip-number: 64\ntip-username: hassanhelfi\ntip-username-profile: https://twitter.com/hassanhelfi\ntip-tldr: 在 JavaScript 中 数组（Array）随处可见，使用ECMAScript 6 中的新特性 扩展运算符 你可以做很多很棒事情。在这边文章中，我将为你介绍在编码中有用的3个技巧。\n\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n在 JavaScript 中 数组（Array）随处可见，使用ECMAScript 6 中的新特性 [扩展运算符](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_operator) 你可以做很多很棒事情。在这边文章中，我将为你介绍在编码中有用的3个技巧。\n\n### 1. 迭代一个空数组\n\nJavaScript 中直接创建的数组是松散的，以至于会有很多坑。试着用数组的构造方法创建一个数组，你就会明白我的意思。\n\n```javascript\n> const arr = new Array(4);\n[undefined, undefined, undefined, undefined]\n```\n\n你会发现，通过一个松散的数组去循环调用一些转换是非常难的。\n\n```javascript\n> const arr = new Array(4);\n> arr.map((elem, index) => index);\n[undefined, undefined, undefined, undefined]\n```\n\n想要解决这个问题，你可以使用在创建新数组的时候使用 `Array.apply`。\n\n```javascript\n> const arr = Array.apply(null, new Array(4));\n> arr.map((elem, index) => index);\n[0, 1, 2, 3]\n```\n\n### 2. 给方法传一个空参数\n\n如果你想调用一个方法，并不填其中的一个参数时，JavaScript 就会报错。\n\n```javascript\n> method('parameter1', , 'parameter3');\nUncaught SyntaxError: Unexpected token ,\n```\n\n一个人们常用的解决方法是传递 `null` 或 `undefined`.\n\n```javascript\n> method('parameter1', null, 'parameter3') // or\n> method('parameter1', undefined, 'parameter3');\n```\n\n自从 JavaScript 把 `null` 当做一个 object 的时候， 我个人就不太喜欢使用它了。根据 ES6 中对扩展运算符的介绍，有一个更简洁的方法可以将空参数传递给一个方法。正如前文所提到的，数组是松散的，所以给它传空值是可以的，我们正式用到了这个优点。\n\n```javascript\n> method(...['parameter1', , 'parameter3']); // works!\n```\n\n### 数组去重\n\n我一直不明白为什么数组不提供一个内置函数可以让我们方便的取到去重以后的值。扩展运算符帮到了我们，使用扩展运算符配合 `Set` Spread operators are here for the rescue. Use spread operators with the `Set` 可以生成一个不重复的数组。\n\n```javascript\n> const arr = [...new Set([1, 2, 3, 3])];\n[1, 2, 3]\n```\n","slug":"javascript/2017-03-12-3-array-hacks","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqf7005llyfyv8q8e45g","content":"<p>在 JavaScript 中 数组（Array）随处可见，使用ECMAScript 6 中的新特性 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_operator\" target=\"_blank\" rel=\"external\">扩展运算符</a> 你可以做很多很棒事情。在这边文章中，我将为你介绍在编码中有用的3个技巧。</p>\n<h3 id=\"1-迭代一个空数组\"><a href=\"#1-迭代一个空数组\" class=\"headerlink\" title=\"1. 迭代一个空数组\"></a>1. 迭代一个空数组</h3><p>JavaScript 中直接创建的数组是松散的，以至于会有很多坑。试着用数组的构造方法创建一个数组，你就会明白我的意思。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">const</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">4</span>);</div><div class=\"line\">[<span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>]</div></pre></td></tr></table></figure>\n<p>你会发现，通过一个松散的数组去循环调用一些转换是非常难的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">const</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">4</span>);</div><div class=\"line\">&gt; arr.map(<span class=\"function\">(<span class=\"params\">elem, index</span>) =&gt;</span> index);</div><div class=\"line\">[<span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>]</div></pre></td></tr></table></figure>\n<p>想要解决这个问题，你可以使用在创建新数组的时候使用 <code>Array.apply</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">const</span> arr = <span class=\"built_in\">Array</span>.apply(<span class=\"literal\">null</span>, <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">4</span>));</div><div class=\"line\">&gt; arr.map(<span class=\"function\">(<span class=\"params\">elem, index</span>) =&gt;</span> index);</div><div class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</div></pre></td></tr></table></figure>\n<h3 id=\"2-给方法传一个空参数\"><a href=\"#2-给方法传一个空参数\" class=\"headerlink\" title=\"2. 给方法传一个空参数\"></a>2. 给方法传一个空参数</h3><p>如果你想调用一个方法，并不填其中的一个参数时，JavaScript 就会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; method(<span class=\"string\">'parameter1'</span>, , <span class=\"string\">'parameter3'</span>);</div><div class=\"line\">Uncaught <span class=\"built_in\">SyntaxError</span>: Unexpected token ,</div></pre></td></tr></table></figure>\n<p>一个人们常用的解决方法是传递 <code>null</code> 或 <code>undefined</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; method(<span class=\"string\">'parameter1'</span>, <span class=\"literal\">null</span>, <span class=\"string\">'parameter3'</span>) <span class=\"comment\">// or</span></div><div class=\"line\">&gt; method(<span class=\"string\">'parameter1'</span>, <span class=\"literal\">undefined</span>, <span class=\"string\">'parameter3'</span>);</div></pre></td></tr></table></figure>\n<p>自从 JavaScript 把 <code>null</code> 当做一个 object 的时候， 我个人就不太喜欢使用它了。根据 ES6 中对扩展运算符的介绍，有一个更简洁的方法可以将空参数传递给一个方法。正如前文所提到的，数组是松散的，所以给它传空值是可以的，我们正式用到了这个优点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; method(...[<span class=\"string\">'parameter1'</span>, , <span class=\"string\">'parameter3'</span>]); <span class=\"comment\">// works!</span></div></pre></td></tr></table></figure>\n<h3 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h3><p>我一直不明白为什么数组不提供一个内置函数可以让我们方便的取到去重以后的值。扩展运算符帮到了我们，使用扩展运算符配合 <code>Set</code> Spread operators are here for the rescue. Use spread operators with the <code>Set</code> 可以生成一个不重复的数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">const</span> arr = [...new <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>])];</div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>在 JavaScript 中 数组（Array）随处可见，使用ECMAScript 6 中的新特性 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_operator\" target=\"_blank\" rel=\"external\">扩展运算符</a> 你可以做很多很棒事情。在这边文章中，我将为你介绍在编码中有用的3个技巧。</p>\n<h3 id=\"1-迭代一个空数组\"><a href=\"#1-迭代一个空数组\" class=\"headerlink\" title=\"1. 迭代一个空数组\"></a>1. 迭代一个空数组</h3><p>JavaScript 中直接创建的数组是松散的，以至于会有很多坑。试着用数组的构造方法创建一个数组，你就会明白我的意思。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">const</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">4</span>);</div><div class=\"line\">[<span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>]</div></pre></td></tr></table></figure>\n<p>你会发现，通过一个松散的数组去循环调用一些转换是非常难的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">const</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">4</span>);</div><div class=\"line\">&gt; arr.map(<span class=\"function\">(<span class=\"params\">elem, index</span>) =&gt;</span> index);</div><div class=\"line\">[<span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>]</div></pre></td></tr></table></figure>\n<p>想要解决这个问题，你可以使用在创建新数组的时候使用 <code>Array.apply</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">const</span> arr = <span class=\"built_in\">Array</span>.apply(<span class=\"literal\">null</span>, <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">4</span>));</div><div class=\"line\">&gt; arr.map(<span class=\"function\">(<span class=\"params\">elem, index</span>) =&gt;</span> index);</div><div class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</div></pre></td></tr></table></figure>\n<h3 id=\"2-给方法传一个空参数\"><a href=\"#2-给方法传一个空参数\" class=\"headerlink\" title=\"2. 给方法传一个空参数\"></a>2. 给方法传一个空参数</h3><p>如果你想调用一个方法，并不填其中的一个参数时，JavaScript 就会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; method(<span class=\"string\">'parameter1'</span>, , <span class=\"string\">'parameter3'</span>);</div><div class=\"line\">Uncaught <span class=\"built_in\">SyntaxError</span>: Unexpected token ,</div></pre></td></tr></table></figure>\n<p>一个人们常用的解决方法是传递 <code>null</code> 或 <code>undefined</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; method(<span class=\"string\">'parameter1'</span>, <span class=\"literal\">null</span>, <span class=\"string\">'parameter3'</span>) <span class=\"comment\">// or</span></div><div class=\"line\">&gt; method(<span class=\"string\">'parameter1'</span>, <span class=\"literal\">undefined</span>, <span class=\"string\">'parameter3'</span>);</div></pre></td></tr></table></figure>\n<p>自从 JavaScript 把 <code>null</code> 当做一个 object 的时候， 我个人就不太喜欢使用它了。根据 ES6 中对扩展运算符的介绍，有一个更简洁的方法可以将空参数传递给一个方法。正如前文所提到的，数组是松散的，所以给它传空值是可以的，我们正式用到了这个优点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; method(...[<span class=\"string\">'parameter1'</span>, , <span class=\"string\">'parameter3'</span>]); <span class=\"comment\">// works!</span></div></pre></td></tr></table></figure>\n<h3 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h3><p>我一直不明白为什么数组不提供一个内置函数可以让我们方便的取到去重以后的值。扩展运算符帮到了我们，使用扩展运算符配合 <code>Set</code> Spread operators are here for the rescue. Use spread operators with the <code>Set</code> 可以生成一个不重复的数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">const</span> arr = [...new <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>])];</div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"使用 tap 来快速 debug","tip-number":65,"tip-username":"loverajoel","tip-username-profile":"https://twitter.com/loverajoel","tip-tldr":"在这里 tap 是一个小怪物。一个可以用来快速调试、链式调用、匿名函数，还可以打印任何你想打印的东西的函数。","tip-md-link":"https://github.com/loverajoel/jstips/blob/master/_posts/en/javascript/2017-03-16-tapping-for-quick-debugging.md","_content":"\n在这里 tap 是一个小怪物。一个可以用来快速调试、链式调用、匿名函数，还可以打印任何你想打印的东西的函数。\n\n``` javascript\nfunction tap(x) {\n    console.log(x);\n    return x;\n}\n```\n\n为什么我们不用 `console.log` 这个老方式了？让我来示范一个例子：\n\n``` javascript\nbank_totals_by_client(bank_info(1, banks), table)\n            .filter(c => c.balance > 25000)\n            .sort((c1, c2) => c1.balance <= c2.balance ? 1 : -1 )\n            .map(c =>\n                 console.log(`${c.id} | ${c.tax_number} (${c.name}) => ${c.balance}`));\n```\n\n现在，加入你从这个链式调用中没有得到任何返回。\n在哪里除了问题呢？或许 `bank_info` 没有返回东西，我们需要监听（tap）它:\n\n``` javascript\nbank_totals_by_client(tap(bank_info(1, banks)), table)\n```\n\n基于我们特殊的实现，它可能会打印一些东西，也可能什么也不打印。\n我们假设，打印出来的东西是正确的，因此， `bank_info` 没有问题。\n\n我们需要继续调试下一个函数， filter.\n\n``` javascript\n            .filter(c => tap(c).balance > 25000)\n```\n\n我们可以得到 `c` 吗？如果可以，说明 `bank_totals_by_client` 运行正常。\n可能是 filter 内的条件有问题？\n\n``` javascript\n            .filter(c => tap(c.balance > 25000))\n```\n\n啊哈！我们发现除了 `false` 没有打印其他东西，所以说明没有一个 client >25000，\n这就是为什么方法什么也没返回的原因。\n\n## (附) 更先进的 tap\n\n``` javascript\nfunction tap(x, fn = x => x) {\n    console.log(fn(x));\n    return x;\n}\n```\n\n让我们来看一下一个更强大的怪物，如果我们想在监听（tap）之前*事先*做一些操作应该怎么办？比如，我们只想方位某个对象特定的参数，位于一个逻辑运算，等等。使用上面的方法，在调用的时候增加一个额外参数，这个函数在被监听（tap）的时候就会被执行。\n\n``` javascript\ntap(3, x => x + 2) === 3; // prints 5, but expression evaluates to true, why :-)?\n```\n","source":"_posts/javascript/2017-03-16-tapping-for-quick-debugging.md","raw":"---\nlayout: post\n\ntitle: 使用 tap 来快速 debug\ntip-number: 65\ntip-username: loverajoel\ntip-username-profile: https://twitter.com/loverajoel\ntip-tldr: 在这里 tap 是一个小怪物。一个可以用来快速调试、链式调用、匿名函数，还可以打印任何你想打印的东西的函数。\ntip-md-link: https://github.com/loverajoel/jstips/blob/master/_posts/en/javascript/2017-03-16-tapping-for-quick-debugging.md\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n在这里 tap 是一个小怪物。一个可以用来快速调试、链式调用、匿名函数，还可以打印任何你想打印的东西的函数。\n\n``` javascript\nfunction tap(x) {\n    console.log(x);\n    return x;\n}\n```\n\n为什么我们不用 `console.log` 这个老方式了？让我来示范一个例子：\n\n``` javascript\nbank_totals_by_client(bank_info(1, banks), table)\n            .filter(c => c.balance > 25000)\n            .sort((c1, c2) => c1.balance <= c2.balance ? 1 : -1 )\n            .map(c =>\n                 console.log(`${c.id} | ${c.tax_number} (${c.name}) => ${c.balance}`));\n```\n\n现在，加入你从这个链式调用中没有得到任何返回。\n在哪里除了问题呢？或许 `bank_info` 没有返回东西，我们需要监听（tap）它:\n\n``` javascript\nbank_totals_by_client(tap(bank_info(1, banks)), table)\n```\n\n基于我们特殊的实现，它可能会打印一些东西，也可能什么也不打印。\n我们假设，打印出来的东西是正确的，因此， `bank_info` 没有问题。\n\n我们需要继续调试下一个函数， filter.\n\n``` javascript\n            .filter(c => tap(c).balance > 25000)\n```\n\n我们可以得到 `c` 吗？如果可以，说明 `bank_totals_by_client` 运行正常。\n可能是 filter 内的条件有问题？\n\n``` javascript\n            .filter(c => tap(c.balance > 25000))\n```\n\n啊哈！我们发现除了 `false` 没有打印其他东西，所以说明没有一个 client >25000，\n这就是为什么方法什么也没返回的原因。\n\n## (附) 更先进的 tap\n\n``` javascript\nfunction tap(x, fn = x => x) {\n    console.log(fn(x));\n    return x;\n}\n```\n\n让我们来看一下一个更强大的怪物，如果我们想在监听（tap）之前*事先*做一些操作应该怎么办？比如，我们只想方位某个对象特定的参数，位于一个逻辑运算，等等。使用上面的方法，在调用的时候增加一个额外参数，这个函数在被监听（tap）的时候就会被执行。\n\n``` javascript\ntap(3, x => x + 2) === 3; // prints 5, but expression evaluates to true, why :-)?\n```\n","slug":"javascript/2017-03-16-tapping-for-quick-debugging","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqf8005nlyfybff0js9g","content":"<p>在这里 tap 是一个小怪物。一个可以用来快速调试、链式调用、匿名函数，还可以打印任何你想打印的东西的函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tap</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(x);</div><div class=\"line\">    <span class=\"keyword\">return</span> x;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>为什么我们不用 <code>console.log</code> 这个老方式了？让我来示范一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">bank_totals_by_client(bank_info(<span class=\"number\">1</span>, banks), table)</div><div class=\"line\">            .filter(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c.balance &gt; <span class=\"number\">25000</span>)</div><div class=\"line\">            .sort(<span class=\"function\">(<span class=\"params\">c1, c2</span>) =&gt;</span> c1.balance &lt;= c2.balance ? <span class=\"number\">1</span> : <span class=\"number\">-1</span> )</div><div class=\"line\">            .map(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span></div><div class=\"line\">                 <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;c.id&#125;</span> | <span class=\"subst\">$&#123;c.tax_number&#125;</span> (<span class=\"subst\">$&#123;c.name&#125;</span>) =&gt; <span class=\"subst\">$&#123;c.balance&#125;</span>`</span>));</div></pre></td></tr></table></figure>\n<p>现在，加入你从这个链式调用中没有得到任何返回。<br>在哪里除了问题呢？或许 <code>bank_info</code> 没有返回东西，我们需要监听（tap）它:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bank_totals_by_client(tap(bank_info(<span class=\"number\">1</span>, banks)), table)</div></pre></td></tr></table></figure>\n<p>基于我们特殊的实现，它可能会打印一些东西，也可能什么也不打印。<br>我们假设，打印出来的东西是正确的，因此， <code>bank_info</code> 没有问题。</p>\n<p>我们需要继续调试下一个函数， filter.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">.filter(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> tap(c).balance &gt; <span class=\"number\">25000</span>)</div></pre></td></tr></table></figure>\n<p>我们可以得到 <code>c</code> 吗？如果可以，说明 <code>bank_totals_by_client</code> 运行正常。<br>可能是 filter 内的条件有问题？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">.filter(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> tap(c.balance &gt; <span class=\"number\">25000</span>))</div></pre></td></tr></table></figure>\n<p>啊哈！我们发现除了 <code>false</code> 没有打印其他东西，所以说明没有一个 client &gt;25000，<br>这就是为什么方法什么也没返回的原因。</p>\n<h2 id=\"附-更先进的-tap\"><a href=\"#附-更先进的-tap\" class=\"headerlink\" title=\"(附) 更先进的 tap\"></a>(附) 更先进的 tap</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tap</span>(<span class=\"params\">x, fn = x =&gt; x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(fn(x));</div><div class=\"line\">    <span class=\"keyword\">return</span> x;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>让我们来看一下一个更强大的怪物，如果我们想在监听（tap）之前<em>事先</em>做一些操作应该怎么办？比如，我们只想方位某个对象特定的参数，位于一个逻辑运算，等等。使用上面的方法，在调用的时候增加一个额外参数，这个函数在被监听（tap）的时候就会被执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tap(<span class=\"number\">3</span>, x =&gt; x + <span class=\"number\">2</span>) === <span class=\"number\">3</span>; <span class=\"comment\">// prints 5, but expression evaluates to true, why :-)?</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>在这里 tap 是一个小怪物。一个可以用来快速调试、链式调用、匿名函数，还可以打印任何你想打印的东西的函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tap</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(x);</div><div class=\"line\">    <span class=\"keyword\">return</span> x;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>为什么我们不用 <code>console.log</code> 这个老方式了？让我来示范一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">bank_totals_by_client(bank_info(<span class=\"number\">1</span>, banks), table)</div><div class=\"line\">            .filter(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c.balance &gt; <span class=\"number\">25000</span>)</div><div class=\"line\">            .sort(<span class=\"function\">(<span class=\"params\">c1, c2</span>) =&gt;</span> c1.balance &lt;= c2.balance ? <span class=\"number\">1</span> : <span class=\"number\">-1</span> )</div><div class=\"line\">            .map(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span></div><div class=\"line\">                 <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;c.id&#125;</span> | <span class=\"subst\">$&#123;c.tax_number&#125;</span> (<span class=\"subst\">$&#123;c.name&#125;</span>) =&gt; <span class=\"subst\">$&#123;c.balance&#125;</span>`</span>));</div></pre></td></tr></table></figure>\n<p>现在，加入你从这个链式调用中没有得到任何返回。<br>在哪里除了问题呢？或许 <code>bank_info</code> 没有返回东西，我们需要监听（tap）它:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bank_totals_by_client(tap(bank_info(<span class=\"number\">1</span>, banks)), table)</div></pre></td></tr></table></figure>\n<p>基于我们特殊的实现，它可能会打印一些东西，也可能什么也不打印。<br>我们假设，打印出来的东西是正确的，因此， <code>bank_info</code> 没有问题。</p>\n<p>我们需要继续调试下一个函数， filter.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">.filter(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> tap(c).balance &gt; <span class=\"number\">25000</span>)</div></pre></td></tr></table></figure>\n<p>我们可以得到 <code>c</code> 吗？如果可以，说明 <code>bank_totals_by_client</code> 运行正常。<br>可能是 filter 内的条件有问题？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">.filter(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> tap(c.balance &gt; <span class=\"number\">25000</span>))</div></pre></td></tr></table></figure>\n<p>啊哈！我们发现除了 <code>false</code> 没有打印其他东西，所以说明没有一个 client &gt;25000，<br>这就是为什么方法什么也没返回的原因。</p>\n<h2 id=\"附-更先进的-tap\"><a href=\"#附-更先进的-tap\" class=\"headerlink\" title=\"(附) 更先进的 tap\"></a>(附) 更先进的 tap</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tap</span>(<span class=\"params\">x, fn = x =&gt; x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(fn(x));</div><div class=\"line\">    <span class=\"keyword\">return</span> x;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>让我们来看一下一个更强大的怪物，如果我们想在监听（tap）之前<em>事先</em>做一些操作应该怎么办？比如，我们只想方位某个对象特定的参数，位于一个逻辑运算，等等。使用上面的方法，在调用的时候增加一个额外参数，这个函数在被监听（tap）的时候就会被执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tap(<span class=\"number\">3</span>, x =&gt; x + <span class=\"number\">2</span>) === <span class=\"number\">3</span>; <span class=\"comment\">// prints 5, but expression evaluates to true, why :-)?</span></div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"为什么你应该在相等比较中使用 Object.is()","tip-number":68,"tip-username":"TarekAlQaddy","tip-username-profile":"https://github.com/TarekAlQaddy","tip-tldr":"JavaScript 中一个很棒的相等比较解决方案","_content":"\n我们都知道 JavasSript 是弱类型的，并且当我们使用 `==` 作比较时，在一些情况下由于类型转换或者说“把两个操作数中的一个转换成另一个，然后在比较”，会出现意想不到的结果。\n\n``` javascript\n0 == ' ' //true\nnull == undefined //true\n[1] == true //true\n```\n\n因此 JavaScript 中给我们提供了全等操作符 `===`, 它比不全等操作符更加严格并且不会发生类型转换。但是用 `===` 来进行比较并不是最好的解决方案。你可能会得到：\n\n``` javascript\nNaN === NaN //false\n```\n\n好消息是 ES6 中提供了新的 `Object.is()` 方法，它具有 `===` 的一些特点，而且更好、更精确，在一些特殊案例中表现的很好：\n\n``` javascript\nObject.is(0 , ' '); //false\nObject.is(null, undefined); //false\nObject.is([1], true); //false\nObject.is(NaN, NaN); //true\n```\n\nMozilla 团队并不认为 Object.is 比 `===` 更加“严格”，他们说我们应该考虑的是这个方法如何处理 NaN, -0 和 +0。但是总的来说， 我认为它在实际应用中是一个很好的实践。\n\n现在来看看这张图表的对比...\n\n![differences of operators in equality comparisons javascript](http://i.imgur.com/pCyqkLc.png)\n\n## References:\n[Equality comparisons and sameness](http://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness)\n\n","source":"_posts/javascript/2017-04-03-why-you-should-use-Object.is()-in-equality-comparison.md","raw":"---\nlayout: post\n\ntitle: 为什么你应该在相等比较中使用 Object.is()  \ntip-number: 68\ntip-username: TarekAlQaddy\ntip-username-profile: https://github.com/TarekAlQaddy\ntip-tldr: JavaScript 中一个很棒的相等比较解决方案\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n我们都知道 JavasSript 是弱类型的，并且当我们使用 `==` 作比较时，在一些情况下由于类型转换或者说“把两个操作数中的一个转换成另一个，然后在比较”，会出现意想不到的结果。\n\n``` javascript\n0 == ' ' //true\nnull == undefined //true\n[1] == true //true\n```\n\n因此 JavaScript 中给我们提供了全等操作符 `===`, 它比不全等操作符更加严格并且不会发生类型转换。但是用 `===` 来进行比较并不是最好的解决方案。你可能会得到：\n\n``` javascript\nNaN === NaN //false\n```\n\n好消息是 ES6 中提供了新的 `Object.is()` 方法，它具有 `===` 的一些特点，而且更好、更精确，在一些特殊案例中表现的很好：\n\n``` javascript\nObject.is(0 , ' '); //false\nObject.is(null, undefined); //false\nObject.is([1], true); //false\nObject.is(NaN, NaN); //true\n```\n\nMozilla 团队并不认为 Object.is 比 `===` 更加“严格”，他们说我们应该考虑的是这个方法如何处理 NaN, -0 和 +0。但是总的来说， 我认为它在实际应用中是一个很好的实践。\n\n现在来看看这张图表的对比...\n\n![differences of operators in equality comparisons javascript](http://i.imgur.com/pCyqkLc.png)\n\n## References:\n[Equality comparisons and sameness](http://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness)\n\n","slug":"javascript/2017-04-03-why-you-should-use-Object.is()-in-equality-comparison","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqfa005plyfyneaas8bk","content":"<p>我们都知道 JavasSript 是弱类型的，并且当我们使用 <code>==</code> 作比较时，在一些情况下由于类型转换或者说“把两个操作数中的一个转换成另一个，然后在比较”，会出现意想不到的结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0</span> == <span class=\"string\">' '</span> <span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span> <span class=\"comment\">//true</span></div><div class=\"line\">[<span class=\"number\">1</span>] == <span class=\"literal\">true</span> <span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n<p>因此 JavaScript 中给我们提供了全等操作符 <code>===</code>, 它比不全等操作符更加严格并且不会发生类型转换。但是用 <code>===</code> 来进行比较并不是最好的解决方案。你可能会得到：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span> <span class=\"comment\">//false</span></div></pre></td></tr></table></figure>\n<p>好消息是 ES6 中提供了新的 <code>Object.is()</code> 方法，它具有 <code>===</code> 的一些特点，而且更好、更精确，在一些特殊案例中表现的很好：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.is(<span class=\"number\">0</span> , <span class=\"string\">' '</span>); <span class=\"comment\">//false</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.is(<span class=\"literal\">null</span>, <span class=\"literal\">undefined</span>); <span class=\"comment\">//false</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.is([<span class=\"number\">1</span>], <span class=\"literal\">true</span>); <span class=\"comment\">//false</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, <span class=\"literal\">NaN</span>); <span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n<p>Mozilla 团队并不认为 Object.is 比 <code>===</code> 更加“严格”，他们说我们应该考虑的是这个方法如何处理 NaN, -0 和 +0。但是总的来说， 我认为它在实际应用中是一个很好的实践。</p>\n<p>现在来看看这张图表的对比…</p>\n<p><img src=\"http://i.imgur.com/pCyqkLc.png\" alt=\"differences of operators in equality comparisons javascript\"></p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References:\"></a>References:</h2><p><a href=\"http://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness\" target=\"_blank\" rel=\"external\">Equality comparisons and sameness</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>我们都知道 JavasSript 是弱类型的，并且当我们使用 <code>==</code> 作比较时，在一些情况下由于类型转换或者说“把两个操作数中的一个转换成另一个，然后在比较”，会出现意想不到的结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0</span> == <span class=\"string\">' '</span> <span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span> <span class=\"comment\">//true</span></div><div class=\"line\">[<span class=\"number\">1</span>] == <span class=\"literal\">true</span> <span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n<p>因此 JavaScript 中给我们提供了全等操作符 <code>===</code>, 它比不全等操作符更加严格并且不会发生类型转换。但是用 <code>===</code> 来进行比较并不是最好的解决方案。你可能会得到：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span> <span class=\"comment\">//false</span></div></pre></td></tr></table></figure>\n<p>好消息是 ES6 中提供了新的 <code>Object.is()</code> 方法，它具有 <code>===</code> 的一些特点，而且更好、更精确，在一些特殊案例中表现的很好：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.is(<span class=\"number\">0</span> , <span class=\"string\">' '</span>); <span class=\"comment\">//false</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.is(<span class=\"literal\">null</span>, <span class=\"literal\">undefined</span>); <span class=\"comment\">//false</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.is([<span class=\"number\">1</span>], <span class=\"literal\">true</span>); <span class=\"comment\">//false</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, <span class=\"literal\">NaN</span>); <span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n<p>Mozilla 团队并不认为 Object.is 比 <code>===</code> 更加“严格”，他们说我们应该考虑的是这个方法如何处理 NaN, -0 和 +0。但是总的来说， 我认为它在实际应用中是一个很好的实践。</p>\n<p>现在来看看这张图表的对比…</p>\n<p><img src=\"http://i.imgur.com/pCyqkLc.png\" alt=\"differences of operators in equality comparisons javascript\"></p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References:\"></a>References:</h2><p><a href=\"http://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness\" target=\"_blank\" rel=\"external\">Equality comparisons and sameness</a></p>\n"},{"layout":"post","title":"选择（picking）和反选（rejecting）对象的属性","tip-number":70,"tip-username":"loverajoel","tip-username-profile":"https://github.com/loverajoel","tip-tldr":"有时候我们需要将一个对象的某些属性放到白名单里，这样来说，我们有一个数组代表了一张数据库表，并且为了一些功能我们需要从中选出（`select`）一些字段。","_content":"\n\n有时候我们需要将一个对象的某些属性放到白名单里，这样来说，我们有一个数组代表了一张数据库表，并且为了一些功能我们需要从中选出（`select`）一些字段：\n\n``` javascript\nfunction pick(obj, keys) {\n    return keys.map(k => k in obj ? {[k]: obj[k]} : {})\n               .reduce((res, o) => Object.assign(res, o), {});\n}\n\nconst row = {\n    'accounts.id': 1,\n    'client.name': 'John Doe',\n    'bank.code': 'MDAKW213'\n};\n\nconst table = [\n    row,\n    {'accounts.id': 3, 'client.name': 'Steve Doe', 'bank.code': 'STV12JB'}\n];\n\npick(row, ['client.name']); // 取到了 client name\n\ntable.map(row => pick(row, ['client.name'])); // 取到了一系列 client name\n```\n\n在 pick 函数中用到了一点‘诡计’。首先，我们用 `map` 遍历了键名数组（keys）, 每次都会返回一个包含当前键名（key）的对象（如果在目标对象（obj）中没有当前键名，就会返回空对象）。然后我们用 `reduce` 把返回的所有单个键-值对象和合并到一个对象中。\n\n但是，如果我们想反选（`reject`）属性／键名呢？改造一下我们的函数就好了：\n\n``` javascript\nfunction reject(obj, keys) {\n    return Object.keys(obj)\n        .filter(k => !keys.includes(k))\n        .map(k => ({[k]: obj[k]}))\n        .reduce((res, o) => Object.assign(res, o), {});\n}\n\n// 或者, 利用 pick\nfunction reject(obj, keys) {\n    const vkeys = Object.keys(obj)\n        .filter(k => !keys.includes(k));\n    return pick(obj, vkeys);\n}\n\nreject({a: 2, b: 3, c: 4}, ['a', 'b']); // => {c: 4}\n```","source":"_posts/javascript/2017-04-05-picking-and-rejecting-object-properties.md","raw":"---\nlayout: post\n\ntitle: 选择（picking）和反选（rejecting）对象的属性 \ntip-number: 70\ntip-username: loverajoel\ntip-username-profile: https://github.com/loverajoel\ntip-tldr: 有时候我们需要将一个对象的某些属性放到白名单里，这样来说，我们有一个数组代表了一张数据库表，并且为了一些功能我们需要从中选出（`select`）一些字段。\n\ncategories:\n    - zh_CN\n    - javascript\n---\n\n\n有时候我们需要将一个对象的某些属性放到白名单里，这样来说，我们有一个数组代表了一张数据库表，并且为了一些功能我们需要从中选出（`select`）一些字段：\n\n``` javascript\nfunction pick(obj, keys) {\n    return keys.map(k => k in obj ? {[k]: obj[k]} : {})\n               .reduce((res, o) => Object.assign(res, o), {});\n}\n\nconst row = {\n    'accounts.id': 1,\n    'client.name': 'John Doe',\n    'bank.code': 'MDAKW213'\n};\n\nconst table = [\n    row,\n    {'accounts.id': 3, 'client.name': 'Steve Doe', 'bank.code': 'STV12JB'}\n];\n\npick(row, ['client.name']); // 取到了 client name\n\ntable.map(row => pick(row, ['client.name'])); // 取到了一系列 client name\n```\n\n在 pick 函数中用到了一点‘诡计’。首先，我们用 `map` 遍历了键名数组（keys）, 每次都会返回一个包含当前键名（key）的对象（如果在目标对象（obj）中没有当前键名，就会返回空对象）。然后我们用 `reduce` 把返回的所有单个键-值对象和合并到一个对象中。\n\n但是，如果我们想反选（`reject`）属性／键名呢？改造一下我们的函数就好了：\n\n``` javascript\nfunction reject(obj, keys) {\n    return Object.keys(obj)\n        .filter(k => !keys.includes(k))\n        .map(k => ({[k]: obj[k]}))\n        .reduce((res, o) => Object.assign(res, o), {});\n}\n\n// 或者, 利用 pick\nfunction reject(obj, keys) {\n    const vkeys = Object.keys(obj)\n        .filter(k => !keys.includes(k));\n    return pick(obj, vkeys);\n}\n\nreject({a: 2, b: 3, c: 4}, ['a', 'b']); // => {c: 4}\n```","slug":"javascript/2017-04-05-picking-and-rejecting-object-properties","published":1,"date":"2017-07-17T09:54:27.000Z","updated":"2017-07-17T09:54:27.000Z","comments":1,"photos":[],"link":"","_id":"cjhfnkqfb005rlyfya9abp55f","content":"<p>有时候我们需要将一个对象的某些属性放到白名单里，这样来说，我们有一个数组代表了一张数据库表，并且为了一些功能我们需要从中选出（<code>select</code>）一些字段：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pick</span>(<span class=\"params\">obj, keys</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> keys.map(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> k <span class=\"keyword\">in</span> obj ? &#123;[k]: obj[k]&#125; : &#123;&#125;)</div><div class=\"line\">               .reduce(<span class=\"function\">(<span class=\"params\">res, o</span>) =&gt;</span> <span class=\"built_in\">Object</span>.assign(res, o), &#123;&#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> row = &#123;</div><div class=\"line\">    <span class=\"string\">'accounts.id'</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"string\">'client.name'</span>: <span class=\"string\">'John Doe'</span>,</div><div class=\"line\">    <span class=\"string\">'bank.code'</span>: <span class=\"string\">'MDAKW213'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> table = [</div><div class=\"line\">    row,</div><div class=\"line\">    &#123;<span class=\"string\">'accounts.id'</span>: <span class=\"number\">3</span>, <span class=\"string\">'client.name'</span>: <span class=\"string\">'Steve Doe'</span>, <span class=\"string\">'bank.code'</span>: <span class=\"string\">'STV12JB'</span>&#125;</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\">pick(row, [<span class=\"string\">'client.name'</span>]); <span class=\"comment\">// 取到了 client name</span></div><div class=\"line\"></div><div class=\"line\">table.map(<span class=\"function\"><span class=\"params\">row</span> =&gt;</span> pick(row, [<span class=\"string\">'client.name'</span>])); <span class=\"comment\">// 取到了一系列 client name</span></div></pre></td></tr></table></figure>\n<p>在 pick 函数中用到了一点‘诡计’。首先，我们用 <code>map</code> 遍历了键名数组（keys）, 每次都会返回一个包含当前键名（key）的对象（如果在目标对象（obj）中没有当前键名，就会返回空对象）。然后我们用 <code>reduce</code> 把返回的所有单个键-值对象和合并到一个对象中。</p>\n<p>但是，如果我们想反选（<code>reject</code>）属性／键名呢？改造一下我们的函数就好了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">obj, keys</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(obj)</div><div class=\"line\">        .filter(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> !keys.includes(k))</div><div class=\"line\">        .map(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> (&#123;[k]: obj[k]&#125;))</div><div class=\"line\">        .reduce(<span class=\"function\">(<span class=\"params\">res, o</span>) =&gt;</span> <span class=\"built_in\">Object</span>.assign(res, o), &#123;&#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 或者, 利用 pick</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">obj, keys</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> vkeys = <span class=\"built_in\">Object</span>.keys(obj)</div><div class=\"line\">        .filter(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> !keys.includes(k));</div><div class=\"line\">    <span class=\"keyword\">return</span> pick(obj, vkeys);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">reject(&#123;<span class=\"attr\">a</span>: <span class=\"number\">2</span>, <span class=\"attr\">b</span>: <span class=\"number\">3</span>, <span class=\"attr\">c</span>: <span class=\"number\">4</span>&#125;, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]); <span class=\"comment\">// =&gt; &#123;c: 4&#125;</span></div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>有时候我们需要将一个对象的某些属性放到白名单里，这样来说，我们有一个数组代表了一张数据库表，并且为了一些功能我们需要从中选出（<code>select</code>）一些字段：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pick</span>(<span class=\"params\">obj, keys</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> keys.map(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> k <span class=\"keyword\">in</span> obj ? &#123;[k]: obj[k]&#125; : &#123;&#125;)</div><div class=\"line\">               .reduce(<span class=\"function\">(<span class=\"params\">res, o</span>) =&gt;</span> <span class=\"built_in\">Object</span>.assign(res, o), &#123;&#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> row = &#123;</div><div class=\"line\">    <span class=\"string\">'accounts.id'</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"string\">'client.name'</span>: <span class=\"string\">'John Doe'</span>,</div><div class=\"line\">    <span class=\"string\">'bank.code'</span>: <span class=\"string\">'MDAKW213'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> table = [</div><div class=\"line\">    row,</div><div class=\"line\">    &#123;<span class=\"string\">'accounts.id'</span>: <span class=\"number\">3</span>, <span class=\"string\">'client.name'</span>: <span class=\"string\">'Steve Doe'</span>, <span class=\"string\">'bank.code'</span>: <span class=\"string\">'STV12JB'</span>&#125;</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\">pick(row, [<span class=\"string\">'client.name'</span>]); <span class=\"comment\">// 取到了 client name</span></div><div class=\"line\"></div><div class=\"line\">table.map(<span class=\"function\"><span class=\"params\">row</span> =&gt;</span> pick(row, [<span class=\"string\">'client.name'</span>])); <span class=\"comment\">// 取到了一系列 client name</span></div></pre></td></tr></table></figure>\n<p>在 pick 函数中用到了一点‘诡计’。首先，我们用 <code>map</code> 遍历了键名数组（keys）, 每次都会返回一个包含当前键名（key）的对象（如果在目标对象（obj）中没有当前键名，就会返回空对象）。然后我们用 <code>reduce</code> 把返回的所有单个键-值对象和合并到一个对象中。</p>\n<p>但是，如果我们想反选（<code>reject</code>）属性／键名呢？改造一下我们的函数就好了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">obj, keys</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(obj)</div><div class=\"line\">        .filter(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> !keys.includes(k))</div><div class=\"line\">        .map(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> (&#123;[k]: obj[k]&#125;))</div><div class=\"line\">        .reduce(<span class=\"function\">(<span class=\"params\">res, o</span>) =&gt;</span> <span class=\"built_in\">Object</span>.assign(res, o), &#123;&#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 或者, 利用 pick</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">obj, keys</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> vkeys = <span class=\"built_in\">Object</span>.keys(obj)</div><div class=\"line\">        .filter(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> !keys.includes(k));</div><div class=\"line\">    <span class=\"keyword\">return</span> pick(obj, vkeys);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">reject(&#123;<span class=\"attr\">a</span>: <span class=\"number\">2</span>, <span class=\"attr\">b</span>: <span class=\"number\">3</span>, <span class=\"attr\">c</span>: <span class=\"number\">4</span>&#125;, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]); <span class=\"comment\">// =&gt; &#123;c: 4&#125;</span></div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjhfnkqc40024lyfyk6xg1qbq","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqcm002flyfyvvt6g2rb"},{"post_id":"cjhfnkqcl002elyfyo8dhlo94","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqcr002klyfyg7bbwik8"},{"post_id":"cjhfnkqcl002elyfyo8dhlo94","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqct002nlyfyv7ymqavx"},{"post_id":"cjhfnkqc70025lyfy1lyzdm20","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqcv002plyfy13j88ask"},{"post_id":"cjhfnkqc70025lyfy1lyzdm20","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqcx002slyfyoazaklnt"},{"post_id":"cjhfnkqcn002glyfyscnqeoy3","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqcy002ulyfyfs2bs82w"},{"post_id":"cjhfnkqcn002glyfyscnqeoy3","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqcz002xlyfy0c3i7qfh"},{"post_id":"cjhfnkqco002ilyfyl603s172","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqd1002zlyfyty3gnbdd"},{"post_id":"cjhfnkqco002ilyfyl603s172","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqd40032lyfyqh42qbou"},{"post_id":"cjhfnkqc00021lyfy3vzyo035","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqd50034lyfyefrb25p7"},{"post_id":"cjhfnkqc00021lyfy3vzyo035","category_id":"cjhfnkqco002hlyfyqrhe1cch","_id":"cjhfnkqd70037lyfyuy3s9xqe"},{"post_id":"cjhfnkqcp002jlyfyvo6ratbx","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqd80039lyfy5rmd90ar"},{"post_id":"cjhfnkqcp002jlyfyvo6ratbx","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqd9003clyfyp3z680ge"},{"post_id":"cjhfnkqcs002mlyfyq5z0vcfp","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqdb003elyfywbr110yv"},{"post_id":"cjhfnkqcs002mlyfyq5z0vcfp","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqdc003glyfywx06u9or"},{"post_id":"cjhfnkqca0026lyfynsr287pa","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqdf003ilyfyx8eo9ov5"},{"post_id":"cjhfnkqca0026lyfynsr287pa","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqdh003klyfyxkulg9e2"},{"post_id":"cjhfnkqcu002olyfycacgztgi","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqdj003mlyfy27gea7mp"},{"post_id":"cjhfnkqcu002olyfycacgztgi","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqdl003olyfytad7djag"},{"post_id":"cjhfnkqcw002rlyfyffq08oft","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqdn003qlyfy1vmcnz4t"},{"post_id":"cjhfnkqcw002rlyfyffq08oft","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqdo003slyfyk74cplw0"},{"post_id":"cjhfnkqcc0028lyfy008zei3l","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqdp003ulyfyorwsc2qu"},{"post_id":"cjhfnkqcc0028lyfy008zei3l","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqds003wlyfyk6deguj9"},{"post_id":"cjhfnkqcx002tlyfy4uwna6u2","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqdw003ylyfywl7wwf38"},{"post_id":"cjhfnkqcx002tlyfy4uwna6u2","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqdx0040lyfy98sdpj6w"},{"post_id":"cjhfnkqcz002wlyfyt5p8fkfw","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqdy0042lyfysmff91ge"},{"post_id":"cjhfnkqcz002wlyfyt5p8fkfw","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqe00044lyfytq72nkc5"},{"post_id":"cjhfnkqc20022lyfy7zk1n7j3","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqe10046lyfyrwl4ohzp"},{"post_id":"cjhfnkqc20022lyfy7zk1n7j3","category_id":"cjhfnkqcy002vlyfyuqvf08iy","_id":"cjhfnkqe30048lyfyqjn0rq9g"},{"post_id":"cjhfnkqd0002ylyfycywojp0a","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqe6004alyfyy7bf6ct7"},{"post_id":"cjhfnkqd0002ylyfycywojp0a","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqe7004clyfygtrjkfhj"},{"post_id":"cjhfnkqd10031lyfywde5voi7","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqe9004elyfywqaqogt7"},{"post_id":"cjhfnkqd10031lyfywde5voi7","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqea004glyfyoa5pfi43"},{"post_id":"cjhfnkqce0029lyfyc4cwjlur","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqeb004ilyfya86t5he2"},{"post_id":"cjhfnkqce0029lyfyc4cwjlur","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqec004klyfyq3bdvkpg"},{"post_id":"cjhfnkqd40033lyfyb5ccogx7","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqef004mlyfya0q9egot"},{"post_id":"cjhfnkqd40033lyfyb5ccogx7","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqei004olyfyj8jwkohm"},{"post_id":"cjhfnkqd60036lyfyoer58vfj","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqej004qlyfy2b4bj0wl"},{"post_id":"cjhfnkqd60036lyfyoer58vfj","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqel004slyfypn7al40n"},{"post_id":"cjhfnkqch002blyfy100n1avf","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqem004ulyfykva8puss"},{"post_id":"cjhfnkqch002blyfy100n1avf","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqeo004wlyfy3lhsgwtd"},{"post_id":"cjhfnkqd70038lyfyt4raau3j","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqep004ylyfybqr3fb9h"},{"post_id":"cjhfnkqd70038lyfyt4raau3j","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqer0050lyfyyb0zoawo"},{"post_id":"cjhfnkqd9003blyfy23srfwd9","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqeu0052lyfy1smk52v1"},{"post_id":"cjhfnkqd9003blyfy23srfwd9","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqev0054lyfyvcdgvv59"},{"post_id":"cjhfnkqcj002clyfy163xqchg","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqew0056lyfynqy5z2ih"},{"post_id":"cjhfnkqcj002clyfy163xqchg","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqex0058lyfymsego7pd"},{"post_id":"cjhfnkqda003dlyfy179y0jej","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqez005alyfyv83b6fb4"},{"post_id":"cjhfnkqda003dlyfy179y0jej","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqf0005clyfytwwv28b2"},{"post_id":"cjhfnkqdb003flyfyfsoe8qe7","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqf2005elyfyofheg494"},{"post_id":"cjhfnkqdb003flyfyfsoe8qe7","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqf3005glyfyv2leqsf2"},{"post_id":"cjhfnkqdd003hlyfyysst3pdx","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqf5005ilyfyvsdysih5"},{"post_id":"cjhfnkqdd003hlyfyysst3pdx","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqf6005klyfydsxqmfur"},{"post_id":"cjhfnkqdg003jlyfykov7lbb9","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqf8005mlyfym9ra4uc5"},{"post_id":"cjhfnkqdg003jlyfykov7lbb9","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqf9005olyfyxt335vpw"},{"post_id":"cjhfnkqdh003llyfy8mcliosx","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfa005qlyfy7oxmnxdi"},{"post_id":"cjhfnkqdh003llyfy8mcliosx","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfc005slyfyet1txy67"},{"post_id":"cjhfnkqdj003nlyfyf7sw2csv","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfd005tlyfytvuce5tg"},{"post_id":"cjhfnkqdj003nlyfyf7sw2csv","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfd005ulyfypuj5oua8"},{"post_id":"cjhfnkqdm003plyfyctu95tlq","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfe005vlyfyhpcmwhfk"},{"post_id":"cjhfnkqdm003plyfyctu95tlq","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfe005wlyfy48wwg0lh"},{"post_id":"cjhfnkqdn003rlyfyq4owwdsl","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfe005xlyfyl6ydddhi"},{"post_id":"cjhfnkqdn003rlyfyq4owwdsl","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfe005ylyfyerw0md5e"},{"post_id":"cjhfnkqdo003tlyfyidl877oc","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfe005zlyfy6myaeap7"},{"post_id":"cjhfnkqdo003tlyfyidl877oc","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfe0060lyfyhs7vposa"},{"post_id":"cjhfnkqdp003vlyfyc70to03y","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfe0061lyfynq0rcrd4"},{"post_id":"cjhfnkqdp003vlyfyc70to03y","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfe0062lyfyulpk2zr4"},{"post_id":"cjhfnkqdu003xlyfy8hvhci96","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfe0063lyfy2d3muhkh"},{"post_id":"cjhfnkqdu003xlyfy8hvhci96","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqff0064lyfy897yy8b1"},{"post_id":"cjhfnkqdw003zlyfyrne87k2i","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqff0065lyfywx9pm1dl"},{"post_id":"cjhfnkqdw003zlyfyrne87k2i","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqff0066lyfymna6dh6x"},{"post_id":"cjhfnkqdx0041lyfyqhq07num","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqff0067lyfy55quzpu6"},{"post_id":"cjhfnkqdx0041lyfyqhq07num","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqff0068lyfymo8hon38"},{"post_id":"cjhfnkqdz0043lyfysvnqqo32","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqff0069lyfybpm0dvqs"},{"post_id":"cjhfnkqdz0043lyfysvnqqo32","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqff006alyfyjmg52nlm"},{"post_id":"cjhfnkqe00045lyfy5gwc8g42","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqff006blyfy26haohvr"},{"post_id":"cjhfnkqe00045lyfy5gwc8g42","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqff006clyfyjdc8lnlb"},{"post_id":"cjhfnkqe20047lyfydvfw8oam","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqff006dlyfyrphsafso"},{"post_id":"cjhfnkqe20047lyfydvfw8oam","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfg006elyfy8nnfmrgw"},{"post_id":"cjhfnkqe30049lyfy21oxal19","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfg006flyfybks28qvd"},{"post_id":"cjhfnkqe30049lyfy21oxal19","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfg006glyfyhgffp9ts"},{"post_id":"cjhfnkqe6004blyfycpnhs5u0","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfg006hlyfyo2roixn9"},{"post_id":"cjhfnkqe6004blyfycpnhs5u0","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfg006ilyfy5midbyj8"},{"post_id":"cjhfnkqe8004dlyfy8p5mm88k","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfg006jlyfylc57f5h4"},{"post_id":"cjhfnkqe8004dlyfy8p5mm88k","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfg006klyfyoq2hj9ni"},{"post_id":"cjhfnkqe9004flyfywy7mqr30","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfg006llyfy5mxodxy2"},{"post_id":"cjhfnkqe9004flyfywy7mqr30","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfg006mlyfy1bd40c1m"},{"post_id":"cjhfnkqea004hlyfyiav75nnn","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfg006nlyfyk060wfc3"},{"post_id":"cjhfnkqea004hlyfyiav75nnn","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfh006olyfyz1d98t1c"},{"post_id":"cjhfnkqec004jlyfy0drxitbk","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfh006plyfyngrzgymv"},{"post_id":"cjhfnkqec004jlyfy0drxitbk","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfh006qlyfy7kcn0ymu"},{"post_id":"cjhfnkqed004llyfyv5921hsa","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfh006rlyfysahuaz99"},{"post_id":"cjhfnkqed004llyfyv5921hsa","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfh006slyfyyiwkeb7a"},{"post_id":"cjhfnkqef004nlyfyvogn1qmz","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfh006tlyfyl263s3ey"},{"post_id":"cjhfnkqef004nlyfyvogn1qmz","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfh006ulyfyytb18m5z"},{"post_id":"cjhfnkqei004plyfyfreas9ts","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfh006vlyfy6nlxdcor"},{"post_id":"cjhfnkqei004plyfyfreas9ts","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfh006wlyfyalwfv6yg"},{"post_id":"cjhfnkqek004rlyfydtpo9i7g","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfh006xlyfyjhfwlntt"},{"post_id":"cjhfnkqek004rlyfydtpo9i7g","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfh006ylyfy2l8l28mp"},{"post_id":"cjhfnkqel004tlyfygaud871h","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfi006zlyfyo17fm61o"},{"post_id":"cjhfnkqel004tlyfygaud871h","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfi0070lyfyhl3cqcn0"},{"post_id":"cjhfnkqen004vlyfybfvp1d1c","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfi0071lyfyg3q984tt"},{"post_id":"cjhfnkqen004vlyfybfvp1d1c","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfi0072lyfyrjovaw3f"},{"post_id":"cjhfnkqeo004xlyfyqwxpzi6t","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfi0073lyfyxnhd8jx7"},{"post_id":"cjhfnkqeo004xlyfyqwxpzi6t","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfi0074lyfyt9cye4mb"},{"post_id":"cjhfnkqeq004zlyfy809ohda6","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfi0075lyfyxis8s8zv"},{"post_id":"cjhfnkqeq004zlyfy809ohda6","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfi0076lyfyn7x6d8oo"},{"post_id":"cjhfnkqes0051lyfyxxtz84jx","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfi0077lyfykm8l11a7"},{"post_id":"cjhfnkqes0051lyfyxxtz84jx","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfi0078lyfyr1iif02h"},{"post_id":"cjhfnkqeu0053lyfyqhsh5nhk","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfi0079lyfymgbkh9tc"},{"post_id":"cjhfnkqeu0053lyfyqhsh5nhk","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfi007alyfyn59255o2"},{"post_id":"cjhfnkqev0055lyfy5ztfl0yg","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfi007blyfyyre8dllo"},{"post_id":"cjhfnkqev0055lyfy5ztfl0yg","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfj007clyfyl4fv4z49"},{"post_id":"cjhfnkqex0057lyfy4v0arovs","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfj007dlyfyvx7ouofq"},{"post_id":"cjhfnkqex0057lyfy4v0arovs","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfj007elyfy71h9e8yt"},{"post_id":"cjhfnkqey0059lyfyaam34sv7","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfj007flyfyabs9aemp"},{"post_id":"cjhfnkqey0059lyfyaam34sv7","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfj007glyfyvj1lmvog"},{"post_id":"cjhfnkqez005blyfyzthq9e1a","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfj007hlyfy3giqaz9h"},{"post_id":"cjhfnkqez005blyfyzthq9e1a","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfj007ilyfyroyus37e"},{"post_id":"cjhfnkqf1005dlyfy76gus6fh","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfj007jlyfyzoydfal1"},{"post_id":"cjhfnkqf1005dlyfy76gus6fh","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfj007klyfyry82kfgz"},{"post_id":"cjhfnkqf2005flyfyn0nkb2kb","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfj007llyfy1urjy44s"},{"post_id":"cjhfnkqf2005flyfyn0nkb2kb","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfj007mlyfytdrgnvxz"},{"post_id":"cjhfnkqf4005hlyfy3cf9dw27","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfj007nlyfyn4hnqm9j"},{"post_id":"cjhfnkqf4005hlyfy3cf9dw27","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfj007olyfygykkepxi"},{"post_id":"cjhfnkqf5005jlyfyeucjunb7","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfj007plyfyeu6hjmas"},{"post_id":"cjhfnkqf5005jlyfyeucjunb7","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfj007qlyfy5l7zgdjq"},{"post_id":"cjhfnkqf7005llyfyv8q8e45g","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfj007rlyfyssp0j26y"},{"post_id":"cjhfnkqf7005llyfyv8q8e45g","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfj007slyfygvtl3ylj"},{"post_id":"cjhfnkqf8005nlyfybff0js9g","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfj007tlyfypqub5ycw"},{"post_id":"cjhfnkqf8005nlyfybff0js9g","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfj007ulyfy6fml7c06"},{"post_id":"cjhfnkqfa005plyfyneaas8bk","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfk007vlyfyui4p8ue8"},{"post_id":"cjhfnkqfa005plyfyneaas8bk","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfk007wlyfyllua7c9f"},{"post_id":"cjhfnkqfb005rlyfya9abp55f","category_id":"cjhfnkqc40023lyfyzhjc7vvu","_id":"cjhfnkqfk007xlyfyjfk4a7b5"},{"post_id":"cjhfnkqfb005rlyfya9abp55f","category_id":"cjhfnkqck002dlyfy4cqlhu0e","_id":"cjhfnkqfk007ylyfy5hlx1bl6"}],"PostTag":[{"post_id":"cjhfnkq5d0000lyfyw2inq4ah","tag_id":"cjhfnkq5m0002lyfyc0crvlog","_id":"cjhfnkq5v0007lyfyfajpfmin"},{"post_id":"cjhfnkq5o0003lyfyihamoxya","tag_id":"cjhfnkq5u0006lyfy2wklqw6q","_id":"cjhfnkq61000clyfyad78pzny"},{"post_id":"cjhfnkq5q0004lyfyby6ysdkh","tag_id":"cjhfnkq5u0006lyfy2wklqw6q","_id":"cjhfnkq63000glyfygghcihx9"},{"post_id":"cjhfnkq5t0005lyfy15durc9e","tag_id":"cjhfnkq62000elyfyz17h0flv","_id":"cjhfnkq66000klyfykc1sfrfj"},{"post_id":"cjhfnkq5v0008lyfysgk3lovw","tag_id":"cjhfnkq65000ilyfyhuijng69","_id":"cjhfnkq6a000olyfyvpzj4z7r"},{"post_id":"cjhfnkq5x0009lyfypzaarwxv","tag_id":"cjhfnkq68000mlyfypz9gk2cs","_id":"cjhfnkq6l000slyfyq4kzg1v0"},{"post_id":"cjhfnkq60000blyfyjvae149o","tag_id":"cjhfnkq6k000rlyfy99hcdrdx","_id":"cjhfnkq6o000xlyfy2n104hlb"},{"post_id":"cjhfnkq61000dlyfywz88sa8q","tag_id":"cjhfnkq6n000vlyfyb5ghwxmf","_id":"cjhfnkq6r0011lyfyrfqdh96t"},{"post_id":"cjhfnkq63000flyfyc15t55wp","tag_id":"cjhfnkq6p000zlyfy764u3z6c","_id":"cjhfnkq6v0015lyfy2ursio2u"},{"post_id":"cjhfnkq64000hlyfydpk1hhew","tag_id":"cjhfnkq6s0013lyfynonez10g","_id":"cjhfnkq6z0019lyfy2dslgu3p"},{"post_id":"cjhfnkq65000jlyfyabodpigf","tag_id":"cjhfnkq6y0018lyfyruqm1ws3","_id":"cjhfnkq6z001blyfy9tilz66p"},{"post_id":"cjhfnkq66000llyfy22ybt5py","tag_id":"cjhfnkq6z001alyfy1pja0ipw","_id":"cjhfnkq6z001dlyfyka8d745w"},{"post_id":"cjhfnkq69000nlyfycxv325z4","tag_id":"cjhfnkq6z001clyfy77emyqjc","_id":"cjhfnkq70001flyfy9mqqzp6j"},{"post_id":"cjhfnkq6a000plyfyccxlvecy","tag_id":"cjhfnkq6n000vlyfyb5ghwxmf","_id":"cjhfnkq70001hlyfy92b7ie42"},{"post_id":"cjhfnkq6d000qlyfyg4lrdb16","tag_id":"cjhfnkq6z001clyfy77emyqjc","_id":"cjhfnkq71001jlyfy30pokk8q"},{"post_id":"cjhfnkq6l000tlyfyd2w1wq0c","tag_id":"cjhfnkq6z001clyfy77emyqjc","_id":"cjhfnkq71001llyfym9m73nrv"},{"post_id":"cjhfnkq6m000ulyfyhdxm7xyg","tag_id":"cjhfnkq71001klyfy5wh3040a","_id":"cjhfnkq71001nlyfy6xegln8a"},{"post_id":"cjhfnkq6n000wlyfydyoyp6mr","tag_id":"cjhfnkq71001mlyfy9n5jew3y","_id":"cjhfnkq72001plyfyuhflgj1w"},{"post_id":"cjhfnkq6p000ylyfyzqlg2ui0","tag_id":"cjhfnkq71001olyfyq0comq6t","_id":"cjhfnkq72001rlyfyvvps0yrt"},{"post_id":"cjhfnkq6q0010lyfyw75fyass","tag_id":"cjhfnkq71001mlyfy9n5jew3y","_id":"cjhfnkq73001tlyfyfelid7gw"},{"post_id":"cjhfnkq6r0012lyfy5hjc9js4","tag_id":"cjhfnkq73001slyfywb6h1x8v","_id":"cjhfnkq73001vlyfydiowq0bx"},{"post_id":"cjhfnkq6t0014lyfy84jw23f3","tag_id":"cjhfnkq73001ulyfyqba2fidw","_id":"cjhfnkq73001xlyfyvzm9bh9g"},{"post_id":"cjhfnkq6v0016lyfyu5z94w8e","tag_id":"cjhfnkq73001wlyfyal5vs7xz","_id":"cjhfnkq74001zlyfybf5oyva2"},{"post_id":"cjhfnkq6x0017lyfysefw2zqa","tag_id":"cjhfnkq74001ylyfyccan494u","_id":"cjhfnkq740020lyfycjhxft32"}],"Tag":[{"name":"html","_id":"cjhfnkq5m0002lyfyc0crvlog"},{"name":"Hexo","_id":"cjhfnkq5u0006lyfy2wklqw6q"},{"name":"前端日记","_id":"cjhfnkq62000elyfyz17h0flv"},{"name":"CSS","_id":"cjhfnkq65000ilyfyhuijng69"},{"name":"一些有用的网站","_id":"cjhfnkq68000mlyfypz9gk2cs"},{"name":"【前端日志】","_id":"cjhfnkq6k000rlyfy99hcdrdx"},{"name":"HTML","_id":"cjhfnkq6n000vlyfyb5ghwxmf"},{"name":"MacAPP","_id":"cjhfnkq6p000zlyfy764u3z6c"},{"name":"Mac APP","_id":"cjhfnkq6s0013lyfynonez10g"},{"name":"Markdown","_id":"cjhfnkq6y0018lyfyruqm1ws3"},{"name":"table","_id":"cjhfnkq6z001alyfy1pja0ipw"},{"name":"Vue","_id":"cjhfnkq6z001clyfy77emyqjc"},{"name":"css","_id":"cjhfnkq71001klyfy5wh3040a"},{"name":"JavaScript","_id":"cjhfnkq71001mlyfy9n5jew3y"},{"name":"人生规划-人生计划","_id":"cjhfnkq71001olyfyq0comq6t"},{"name":"掘金","_id":"cjhfnkq73001slyfywb6h1x8v"},{"name":"Function","_id":"cjhfnkq73001ulyfyqba2fidw"},{"name":"javascript","_id":"cjhfnkq73001wlyfyal5vs7xz"},{"name":"demo","_id":"cjhfnkq74001ylyfyccan494u"}]}}